question_id,question_text,decomposition,program,operators,split
SPIDER_dev_0,How many singers do we have?,return singers ;return number of  #1,"[""SELECT['singers']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",dev
SPIDER_dev_1,What is the total number of singers?,return singers ;return number of  #1,"[""SELECT['singers']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",dev
SPIDER_dev_10,Show all countries and the number of singers in each country.,"return countries ;return singers in #1 ;return number of  #2 for each  #1 ;return #1 ,  #3","[""SELECT['countries']"", ""PROJECT['singers in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",dev
SPIDER_dev_100,What is the name of the different car makers who produced a car in 1970?,return different car makers ;return #1 who  produced a car ;return #2 in 1970 ;return the  name of  #3,"[""SELECT['different car makers']"", ""FILTER['#1', 'who produced a car']"", ""FILTER['#2', 'in 1970']"", ""PROJECT['the name of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",dev
SPIDER_dev_101,Find the make and production time of the cars that were produced in the earliest year?,"return cars ;return years #1 were produced ;return #1 where #2 is  the earliest ;return make of #3 ;return production time of #3 ;return #4 , #5","[""SELECT['cars']"", ""PROJECT['years #REF were produced', '#1']"", ""COMPARATIVE['#1', '#2', 'is the earliest']"", ""PROJECT['make of #REF', '#3']"", ""PROJECT['production time of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",dev
SPIDER_dev_102,What is the maker of the cars produced in the earliest year and what year was it?,"return cars ;return years #1 was produced ;return #1 where #2 is the earliest ;return the maker of #4 ;return #5 , #3","[""SELECT['cars']"", ""PROJECT['years #REF was produced', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""PROJECT['the maker of #REF', '#3']"", ""UNION['#4', '#3']""]","['select', 'project', 'superlative', 'project', 'union']",dev
SPIDER_dev_103,Which distinct car models are the produced after 1980?,return car models ;return #1 produced after 1980 ;return distinct #2,"[""SELECT['car models']"", ""FILTER['#1', 'produced after 1980']"", ""PROJECT['distinct #REF', '#2']""]","['select', 'filter', 'project']",dev
SPIDER_dev_104,What are the different models for the cars produced after 1980?,return cars ;return #1 produced after 1980 ;return different models of #2,"[""SELECT['cars']"", ""FILTER['#1', 'produced after 1980']"", ""PROJECT['different models of #REF', '#2']""]","['select', 'filter', 'project']",dev
SPIDER_dev_105,How many car makers are there in each continents? List the continent name and the count.,"return continents ;return car makers on  #1 ;return number of  #2 for each  #1 ;return #1 ,  #3","[""SELECT['continents']"", ""PROJECT['car makers on #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",dev
SPIDER_dev_106,What is the name of each continent and how many car makers are there in each one?,"return continents ;return names of #1 ;return car makers of #1 ;return number of  #3 for each #1 ;return #2 ,  #4","[""SELECT['continents']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['car makers of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",dev
SPIDER_dev_107,Which of the countries has the most car makers? List the country name.,return countries ;return car makers in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return name of  #4,"[""SELECT['countries']"", ""PROJECT['car makers in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",dev
SPIDER_dev_108,What is the name of the country with the most car makers?,return car makers ;return countries of #1 ;return number of  #1 for each #2 ;return #2 where #3 is  the   highest ;return the   name of #4,"[""SELECT['car makers']"", ""PROJECT['countries of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""COMPARATIVE['#2', '#3', 'is the highest']"", ""PROJECT['the name of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",dev
SPIDER_dev_109,How many car models are produced by each maker? Only list the count and the maker full name.,"return makers ;return car models produced by #1 ;return number of  #2 for each  #1 ;return full name of  #1 ;return #3 ,  #4","[""SELECT['makers']"", ""PROJECT['car models produced by #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['full name of #REF', '#1']"", ""UNION['#3', '#4']""]","['select', 'project', 'group', 'project', 'union']",dev
SPIDER_dev_11,How many singers are from each country?,return countries ;return singers from  #1 ;return number of  #2 for each  #1,"[""SELECT['countries']"", ""PROJECT['singers from #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",dev
SPIDER_dev_110,What is the number of car models that are produced by each maker and what is the id and full name of each maker?,"return car makers ;return car models of #1 ;return number of  #2 for each #1 ;return ids of #1 ;return full names of #1 ;return #3 ,  #4 ,   #5","[""SELECT['car makers']"", ""PROJECT['car models of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['full names of #REF', '#1']"", ""UNION['#3', '#4', '#5']""]","['select', 'project', 'group', 'project', 'project', 'union']",dev
SPIDER_dev_111,What is the accelerate of the car make amc hornet sportabout (sw)?,return car ;return #1 that is make is  amc hornet sportabout sw ;return accelerate of  #2,"[""SELECT['car']"", ""FILTER['#1', 'that is make is amc hornet sportabout sw']"", ""PROJECT['accelerate of #REF', '#2']""]","['select', 'filter', 'project']",dev
SPIDER_dev_112,How much does the car accelerate that makes amc hornet sportabout (sw)?,return the  amc hornet sportabout ( sw ) ;return how much #1 accelerates,"[""SELECT['the amc hornet sportabout ( sw )']"", ""PROJECT['how much #REF accelerates', '#1']""]","['select', 'project']",dev
SPIDER_dev_113,How many car makers are there in france?,return car makers ;return #1 in france ;return number of  #2,"[""SELECT['car makers']"", ""FILTER['#1', 'in france']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",dev
SPIDER_dev_114,What is the number of makers of cars in France?,return cars ;return makers of #1 ;return #2 that  are in France ;return the  number of  #3,"[""SELECT['cars']"", ""PROJECT['makers of #REF', '#1']"", ""FILTER['#2', 'that are in France']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'filter', 'aggregate']",dev
SPIDER_dev_115,How many car models are produced in the usa?,return car models ;return #1 produced in the  usa ;return number of  #2,"[""SELECT['car models']"", ""FILTER['#1', 'produced in the usa']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",dev
SPIDER_dev_116,What is the count of the car models produced in the United States?,return car models ;return #1 produced in the  United States ;return number of  #2,"[""SELECT['car models']"", ""FILTER['#1', 'produced in the United States']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",dev
SPIDER_dev_117,What is the average miles per gallon(mpg) of the cars with 4 cylinders?,return cars ;return cylinders ;return number of  #2 for each  #1 ;return #1 where #3 is  4 ;return miles per gallon of  #4 ;return average of  #5,"[""SELECT['cars']"", ""SELECT['cylinders']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is 4']"", ""PROJECT['miles per gallon of #REF', '#4']"", ""AGGREGATE['avg', '#5']""]","['select', 'select', 'group', 'comparative', 'project', 'aggregate']",dev
SPIDER_dev_118,What is the average miles per gallon of all the cars with 4 cylinders?,return cars ;return cylinders of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  4 ;return miles per gallon of #4 ;return average of #5,"[""SELECT['cars']"", ""PROJECT['cylinders of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is 4']"", ""PROJECT['miles per gallon of #REF', '#4']"", ""AGGREGATE['avg', '#5']""]","['select', 'project', 'group', 'comparative', 'project', 'aggregate']",dev
SPIDER_dev_119,What is the smallest weight of the car produced with 8 cylinders on 1974?,return car ;return cylinders ;return number of  #2 for each  #1 ;return #1 where #3 is  8 ;return #4 on  1974 ;return weight of  #5 ;return smallest of  #6,"[""SELECT['car']"", ""SELECT['cylinders']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is 8']"", ""FILTER['#4', 'on 1974']"", ""PROJECT['weight of #REF', '#5']"", ""AGGREGATE['min', '#6']""]","['select', 'select', 'group', 'comparative', 'filter', 'project', 'aggregate']",dev
SPIDER_dev_12,List all song names by singers above the average age.,return singers ;return ages of  #1 ;return average of  #2 ;return #1 where #2 is  higher than #3 ;return songs of  #4 ;return names of  #5,"[""SELECT['singers']"", ""PROJECT['ages of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['songs of #REF', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'project']",dev
SPIDER_dev_120,What is the minimum weight of the car with 8 cylinders produced in 1974?,return car ;return cylinder ;return number of  #2 for each  #1 ;return #1 where #3 is  8 ;return #4 produced in 1974 ;return weight of  #5 ;return minimum of  #6,"[""SELECT['car']"", ""SELECT['cylinder']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is 8']"", ""FILTER['#4', 'produced in 1974']"", ""PROJECT['weight of #REF', '#5']"", ""AGGREGATE['min', '#6']""]","['select', 'select', 'group', 'comparative', 'filter', 'project', 'aggregate']",dev
SPIDER_dev_121,What are all the makers and models?,"return models ;return makers of #1 ;return #2 , #1","[""SELECT['models']"", ""PROJECT['makers of #REF', '#1']"", ""UNION['#2', '#1']""]","['select', 'project', 'union']",dev
SPIDER_dev_122,What are the makers and models?,"return makers ;return models ;return #1 ,  #2","[""SELECT['makers']"", ""SELECT['models']"", ""UNION['#1', '#2']""]","['select', 'select', 'union']",dev
SPIDER_dev_123,What are the countries having at least one car maker? List name and id.,"return countries ;return car makers in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least one ;return names of  #4 ;return ids of  #4 ;return #5 ,  #6","[""SELECT['countries']"", ""PROJECT['car makers in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least one']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['ids of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",dev
SPIDER_dev_124,What are the names and ids of all countries with at least one car maker?,"return countries ;return #1 with car maker ;return names of  #2 ;return ids of  #2 ;return #3 ,  #4","[""SELECT['countries']"", ""FILTER['#1', 'with car maker']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['ids of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",dev
SPIDER_dev_125,What is the number of the cars with horsepower more than 150?,return cars ;return horsepower of #1 ;return #1 where #2 is higher than 150 ;return number of  #3,"[""SELECT['cars']"", ""PROJECT['horsepower of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 150']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",dev
SPIDER_dev_126,What is the number of cars with a horsepower greater than 150?,return cars ;return horsepower of #1 ;return #1 where #2 is  higher than 150 ;return number of  #3,"[""SELECT['cars']"", ""PROJECT['horsepower of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 150']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",dev
SPIDER_dev_127,What is the average weight of cars each year?,return cars ;return years of  #1 ;return weights of  #1 ;return average of  #3 for each  #2,"[""SELECT['cars']"", ""PROJECT['years of #REF', '#1']"", ""PROJECT['weights of #REF', '#1']"", ""GROUP['avg', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",dev
SPIDER_dev_128,What is the average weight and year for each year?,"return years ;return weights of #1 ;return average of #2 for each #1 ;return #1 ,  #3","[""SELECT['years']"", ""PROJECT['weights of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",dev
SPIDER_dev_129,Which countries in europe have at least 3 car manufacturers?,return countries ;return #1 in europe ;return car manufacturers in #2 ;return number of  #3 for each #2 ;return #2 where #4 is  at least 3,"[""SELECT['countries']"", ""FILTER['#1', 'in europe']"", ""PROJECT['car manufacturers in #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""COMPARATIVE['#2', '#4', 'is at least 3']""]","['select', 'filter', 'project', 'group', 'comparative']",dev
SPIDER_dev_13,What are all the song names by singers who are older than average?,return singers ;return ages of #1 ; return the average of #2; return #1 who  are  older #1 ;return songs of  #4 ;return names of  #5,"[""SELECT['singers']"", ""PROJECT['ages of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'larger than #3']"", ""PROJECT['songs of #REF', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'project']",dev
SPIDER_dev_130,What are the names of all European countries with at least 3 manufacturers?,return European countries ;return manufacturers in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least 3 ;return names of  #4,"[""SELECT['European countries']"", ""PROJECT['manufacturers in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",dev
SPIDER_dev_131,What is the maximum horsepower and the make of the car models with 3 cylinders?,"return car models ;return cylinders of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  3 ;return maximum horsepower of #4 ;return make of #4 ;return #5 ,  #6","[""SELECT['car models']"", ""PROJECT['cylinders of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is 3']"", ""PROJECT['horsepower of #REF', '#4']"", ""GROUP['max', '#5', '#4']"", ""PROJECT['make of #REF', '#4']"", ""UNION['#6', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'group', 'project', 'union']",dev
SPIDER_dev_132,What is the largest amount of horsepower for the models with 3 cylinders and what make is it?,"return models ;return #1 with  3 cylinders ;return horsepowers of #2 ;return the  largest #3 ;return #2 where #3 is  #4 ;return the  make of #5 ;return #4 ,  #6","[""SELECT['models']"", ""FILTER['#1', 'with 3 cylinders']"", ""PROJECT['horsepowers of #REF', '#2']"", ""AGGREGATE['max', '#3']"", ""COMPARATIVE['#2', '#3', 'is #4']"", ""PROJECT['the make of #REF', '#5']"", ""UNION['#4', '#6']""]","['select', 'filter', 'project', 'aggregate', 'comparative', 'project', 'union']",dev
SPIDER_dev_133,"Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",return models ;return miles per gallon of #1 ;return #1 where #2 is  the  highest,"[""SELECT['models']"", ""PROJECT['miles per gallon of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the highest']""]","['select', 'project', 'comparative']",dev
SPIDER_dev_134,What is the car model with the highest mpg?,return car models ;return mpg of #1 ;return #1 where #2 is  highest,"[""SELECT['car models']"", ""PROJECT['mpg of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']""]","['select', 'project', 'superlative']",dev
SPIDER_dev_135,What is the average horsepower of the cars before 1980?,return cars ;return #1 before 1980 ;return horsepower of  #2 ;return average of  #3,"[""SELECT['cars']"", ""FILTER['#1', 'before 1980']"", ""PROJECT['horsepower of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'filter', 'project', 'aggregate']",dev
SPIDER_dev_136,What is the average horsepower for all cars produced before 1980?,return cars ;return #1 produced before 1980 ;return horsepower of  #2 ;return average of  #3,"[""SELECT['cars']"", ""FILTER['#1', 'produced before 1980']"", ""PROJECT['horsepower of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'filter', 'project', 'aggregate']",dev
SPIDER_dev_137,What is the average edispl of the cars of model volvo?,return cars ;return #1 of  model volvo ;return the  edispl of  #2 ;return the  average of  #3,"[""SELECT['cars']"", ""FILTER['#1', 'of model volvo']"", ""PROJECT['the edispl of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'filter', 'project', 'aggregate']",dev
SPIDER_dev_138,What is the average edispl for all volvos?,return volvos ;return edispl of  #1 ;return average of  #2,"[""SELECT['volvos']"", ""PROJECT['edispl of #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",dev
SPIDER_dev_139,What is the maximum accelerate for different number of cylinders?,return different numbers of cylinders ;return accelerates of #1 ;return the  highest of #2 for each #1,"[""SELECT['different numbers of cylinders']"", ""PROJECT['accelerates of #REF', '#1']"", ""GROUP['max', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",dev
SPIDER_dev_14,Show location and name for all stadiums with a capacity between 5000 and 10000.,"return stadiums ;return capacities of  #1 ;return #1 where #2 is  at least 5000 ;return #1 where #2 is  at most 10000 ;return #1 of  both #3 and  #4 ;return locations of  #5 ;return names of  #5 ;return #6 ,  #7","[""SELECT['stadiums']"", ""PROJECT['capacities of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least 5000']"", ""COMPARATIVE['#1', '#2', 'is at most 10000']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['locations of #REF', '#5']"", ""PROJECT['names of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project', 'project', 'union']",dev
SPIDER_dev_140,What is the maximum accelerate for all the different cylinders?,return different cylinders ;return accelerate of  #1 ;return maximum of #2 for each #1,"[""SELECT['different cylinders']"", ""PROJECT['accelerate of #REF', '#1']"", ""GROUP['max', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",dev
SPIDER_dev_141,Which model has the most version(make) of cars?,return cars ;return models ;return version of #1 ;return number of  #3 for each #2 ;return #2 where #4 is  most,"[""SELECT['cars']"", ""SELECT['models']"", ""PROJECT['version of #REF', '#1']"", ""GROUP['count', '#3', '#2']"", ""SUPERLATIVE['max', '#2', '#4']""]","['select', 'select', 'project', 'group', 'superlative']",dev
SPIDER_dev_142,What model has the most different versions?,return models ;return different versions of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['models']"", ""PROJECT['different versions of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",dev
SPIDER_dev_143,How many cars have more than 4 cylinders?,return cars ;return number of  cylinders for each  #1 ;return #1 where #2 is  more than 4 ;return number of  #3,"[""SELECT['cars']"", ""PROJECT['cylinders', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than 4']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'group', 'comparative', 'aggregate']",dev
SPIDER_dev_144,What is the number of cars with more than 4 cylinders?,return cars ;return cylinders of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  higher than 4 ;return number of  #4,"[""SELECT['cars']"", ""PROJECT['cylinders of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 4']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'group', 'comparative', 'aggregate']",dev
SPIDER_dev_145,how many cars were produced in 1980?,return cars ;return #1 that  were produced in 1980 ;return the  number of  #2,"[""SELECT['cars']"", ""FILTER['#1', 'that were produced in 1980']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",dev
SPIDER_dev_146,"In 1980, how many cars were made?",return cars ;return #1 made in 1980 ;return number of #2,"[""SELECT['cars']"", ""FILTER['#1', 'made in 1980']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",dev
SPIDER_dev_147,How many car models were produced by the maker with full name American Motor Company?,return makers ;return full names of  #1 ;return #1 where #2 is  American Motor Company ;return car models produced by #3 ;return number of  #4,"[""SELECT['makers']"", ""PROJECT['full names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is American Motor Company']"", ""PROJECT['car models produced by #REF', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",dev
SPIDER_dev_148,What is the number of car models created by the car maker American Motor Company?,return car models ;return #1 created by the  car maker American Motor Company ;return number of  #2,"[""SELECT['car models']"", ""FILTER['#1', 'created by the car maker American Motor Company']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",dev
SPIDER_dev_149,Which makers designed more than 3 car models? List full name and the id.,"return makers ;return cars models of #1 ;return number of  #2 for each #1 ;return #1 where #3 is higher than 3 ;return full names of #4 ;return ids of #4 ;return #5 ,  #6","[""SELECT['makers']"", ""PROJECT['cars models of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 3']"", ""PROJECT['full names of #REF', '#4']"", ""PROJECT['ids of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",dev
SPIDER_dev_15,What are the locations and names of all stadiums with capacity between 5000 and 10000?,"return stadiums ;return capacities of #1 ;return #1 where #2 is at least 5000 ;return #1 where #2 is at most 10000 ;return #1 in  both #3 and  #4 ;return locations of #5 ;return names of #5 ;return #6 ,  #7","[""SELECT['stadiums']"", ""PROJECT['capacities of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least 5000']"", ""COMPARATIVE['#1', '#2', 'is at most 10000']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['locations of #REF', '#5']"", ""PROJECT['names of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project', 'project', 'union']",dev
SPIDER_dev_150,What are the names and ids of all makers with more than 3 models?,"return makers ;return models of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than 3 ;return names of  #4 ;return ids of  #4 ;return #5 ,  #6","[""SELECT['makers']"", ""PROJECT['models of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 3']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['ids of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",dev
SPIDER_dev_151,Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?,return distinctive models ;return #1 which are  produced by maker with the  full name General Motors ;return #1 weighing more than 3500 ;return #2 or  #3,"[""SELECT['distinctive models']"", ""FILTER['#1', 'which are produced by maker with the full name General Motors']"", ""FILTER['#1', 'weighing more than 3500']"", ""UNION['#2', '#3']""]","['select', 'filter', 'filter', 'union']",dev
SPIDER_dev_152,What are the different models created by either the car maker General Motors or weighed more than 3500?,return models ;return #1 created by General Motors ;return #1 that  weighed more than 3500 ;return #2 or  #3 ;return different #4,"[""SELECT['models']"", ""FILTER['#1', 'created by General Motors']"", ""FILTER['#1', 'that weighed more than 3500']"", ""UNION['#2', '#3']"", ""PROJECT['different #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",dev
SPIDER_dev_153,In which years cars were produced weighing no less than 3000 and no more than 4000?,return cars ;return weigh of cars ;return #1 where #2 at least 3000 ;return #3 where #2 at most 4000 ;return years produced of #4,"[""SELECT['cars']"", ""SELECT['weigh of cars']"", ""COMPARATIVE['#1', '#2', 'at least 3000']"", ""COMPARATIVE['#3', '#2', 'at most 4000']"", ""PROJECT['years produced of #REF', '#4']""]","['select', 'select', 'comparative', 'comparative', 'project']",dev
SPIDER_dev_154,What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000?,return cars  ;return weight of #1 ;return #1 where #2 is lower than 4000 ;return #1 where #2 is higher than 3000 ;return the different years produced of #1 ;return #5 of both #3 and #4,"[""SELECT['cars']"", ""PROJECT['weight of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is lower than 4000']"", ""COMPARATIVE['#1', '#2', 'is higher than 3000']"", ""PROJECT['the different years produced', '#1']"", ""INTERSECTION['#5', '#3', '#4']""]","['select', 'project', 'comparative', 'comparative', 'project', 'intersection']",dev
SPIDER_dev_155,What is the horsepower of the car with the largest accelerate?,return car ;return accelerate of  #1 ;return #1 where #2 is  largest ;return horsepower of  #3,"[""SELECT['car']"", ""PROJECT['accelerate of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['horsepower of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",dev
SPIDER_dev_156,What is the horsepower of the car with the greatest accelerate?,return cars ;return accelerate of #1 ;return #1 where #2 is  highest ;return horsepower of #3,"[""SELECT['cars']"", ""PROJECT['accelerate of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['horsepower of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",dev
SPIDER_dev_157,"For model volvo, how many cylinders does the car with the least accelerate have?",return cars ;return models of  #1 ;return #1 where #2 is  volvo ;return accelerate of  #3 ;return #3 where #4 is  lowest ;return cylinders of  #5 ;return number of  #6,"[""SELECT['cars']"", ""PROJECT['models of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is volvo']"", ""PROJECT['accelerate of #REF', '#3']"", ""SUPERLATIVE['min', '#3', '#4']"", ""PROJECT['cylinders of #REF', '#5']"", ""AGGREGATE['count', '#6']""]","['select', 'project', 'comparative', 'project', 'superlative', 'project', 'aggregate']",dev
SPIDER_dev_158,"For a volvo model, how many cylinders does the version with least accelerate have?",return volvo models ;return versions of #1 ;return accelerate of #2 ;return #2 where #3 is  lowest ;return cylinders of #4 ;return number of  #5,"[""SELECT['volvo models']"", ""PROJECT['versions of #REF', '#1']"", ""PROJECT['accelerate of #REF', '#2']"", ""SUPERLATIVE['min', '#2', '#3']"", ""PROJECT['cylinders of #REF', '#4']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'project', 'superlative', 'project', 'aggregate']",dev
SPIDER_dev_159,How many cars have a larger accelerate than the car with the largest horsepower?,return cars ;return horsepower of #1 ;return #1 where #2 is highest ;return accelerate of #1 ;return accelerate of #3 ;return #1 where #4 is higher than #5 ;return number of  #6,"[""SELECT['cars']"", ""PROJECT['horsepower of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['accelerate of #REF', '#1']"", ""PROJECT['accelerate of #REF', '#3']"", ""COMPARATIVE['#1', '#4', 'is higher than #5']"", ""AGGREGATE['count', '#6']""]","['select', 'project', 'superlative', 'project', 'project', 'comparative', 'aggregate']",dev
SPIDER_dev_16,What is the maximum capacity and the average of all stadiums?,"return stadiums ;return capacities of  #1 ;return maximum of  #2 ;return average of  #2 ;return #3 ,  #4","[""SELECT['stadiums']"", ""PROJECT['capacities of #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""AGGREGATE['avg', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'aggregate', 'aggregate', 'union']",dev
SPIDER_dev_160,What is the number of cars with a greater accelerate than the one with the most horsepower?,return cars ;return horsepower of #1 ;return #1 where #2 is highest ;return accelerate of #1 ;return accelerate of #3 ;return #1 where #4 is higher than #5 ;return number of  #6,"[""SELECT['cars']"", ""PROJECT['horsepower of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['accelerate of #REF', '#1']"", ""PROJECT['accelerate of #REF', '#3']"", ""COMPARATIVE['#1', '#4', 'is higher than #5']"", ""AGGREGATE['count', '#6']""]","['select', 'project', 'superlative', 'project', 'project', 'comparative', 'aggregate']",dev
SPIDER_dev_161,How many countries has more than 2 car makers?,return countries ;return car makers of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  more than 2 ;return number of  #4,"[""SELECT['countries']"", ""PROJECT['car makers of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than 2']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'group', 'comparative', 'aggregate']",dev
SPIDER_dev_162,What is the number of countries with more than 2 car makers?,return countries ;return car makers of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  higher than 2 ;return number of  #4,"[""SELECT['countries']"", ""PROJECT['car makers of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 2']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'group', 'comparative', 'aggregate']",dev
SPIDER_dev_163,How many cars has over 6 cylinders?,return cars ;return cylinders of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than 6 ;return number of  #4,"[""SELECT['cars']"", ""PROJECT['cylinders of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 6']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'group', 'comparative', 'aggregate']",dev
SPIDER_dev_164,What is the number of cars with over 6 cylinders?,return cars ;return cylinders of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  more than  6 ;return the  number of  #4,"[""SELECT['cars']"", ""PROJECT['cylinders of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than 6']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'group', 'comparative', 'aggregate']",dev
SPIDER_dev_165,"For the cars with 4 cylinders, which model has the largest horsepower?",return cars ;return cylinders of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  4 ;return models of  #4 ;return horsepower of  #5 ;return #5 where #6 is  largest,"[""SELECT['cars']"", ""PROJECT['cylinders of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is 4']"", ""PROJECT['models of #REF', '#4']"", ""PROJECT['horsepower of #REF', '#5']"", ""SUPERLATIVE['max', '#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'superlative']",dev
SPIDER_dev_166,"For all of the 4 cylinder cars, which model has the most horsepower?",return cars ;return cylinders of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  4 ;return horsepower of  #4 ;return models of  #4 ;return #6 where #5 is  largest,"[""SELECT['cars']"", ""PROJECT['cylinders of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is 4']"", ""PROJECT['horsepower of #REF', '#4']"", ""PROJECT['models of #REF', '#4']"", ""SUPERLATIVE['max', '#6', '#5']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'superlative']",dev
SPIDER_dev_167,"Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.","return cars ;return horsepower of #1 ;return #1 where #2 is  lowest ;return #1 besides #3 ;return cylinders of #4 ;return number of  #5 for each #4 ;return #4 where #6 is  at most 3 ;return makeids of #7 ;return make names of #7 ;return #8 ,  #9","[""SELECT['cars']"", ""PROJECT['horsepower of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""DISCARD['#1', '#3']"", ""PROJECT['cylinders of #REF', '#4']"", ""GROUP['count', '#5', '#4']"", ""COMPARATIVE['#4', '#6', 'is at most 3']"", ""PROJECT['makeids of #REF', '#7']"", ""PROJECT['make names of #REF', '#7']"", ""UNION['#8', '#9']""]","['select', 'project', 'superlative', 'discard', 'project', 'group', 'comparative', 'project', 'project', 'union']",dev
SPIDER_dev_168,"Among the cars that do not have the minimum horsepower, what are the make ids and names of all those with less than 4 cylinders?","return cars ;return horsepowers of #1 ;return the  lowest of #2 ;return #1 where #2 is higher than #3 ;return cylinders of #4 ;return #4 where #5 is lower than 4 ;return make ids of #6 ;return names of #6 ;return #7 ,  #8","[""SELECT['cars']"", ""PROJECT['horsepowers of #REF', '#1']"", ""AGGREGATE['min', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['cylinders of #REF', '#4']"", ""COMPARATIVE['#4', '#5', 'is lower than 4']"", ""PROJECT['make ids of #REF', '#6']"", ""PROJECT['names of #REF', '#6']"", ""UNION['#7', '#8']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'comparative', 'project', 'project', 'union']",dev
SPIDER_dev_169,What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980?,"return cars ;return #1 with  8 cylinders ;return #1 produced before 1980 ;return #2 ,  #3 ;return miles per gallon of #4 ;return the  maximum of #5","[""SELECT['cars']"", ""FILTER['#1', 'with 8 cylinders']"", ""FILTER['#1', 'produced before 1980']"", ""UNION['#2', '#3']"", ""PROJECT['miles per gallon of #REF', '#4']"", ""AGGREGATE['max', '#5']""]","['select', 'filter', 'filter', 'union', 'project', 'aggregate']",dev
SPIDER_dev_17,What is the average and maximum capacities for all stadiums?,"return stadiums ;return capacities of  #1 ;return average of  #2 ;return maximum of  #2 ;return #3 ,  #4","[""SELECT['stadiums']"", ""PROJECT['capacities of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""AGGREGATE['max', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'aggregate', 'aggregate', 'union']",dev
SPIDER_dev_170,What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980?,return cars ;return #1 that  had 8 cylinders ;return #1 that  were produced before 1980 ;return #2 or  #3 ;return mpg of  #4 ;return the  maximum of  #5,"[""SELECT['cars']"", ""FILTER['#1', 'that had 8 cylinders']"", ""FILTER['#1', 'that were produced before 1980']"", ""UNION['#2', '#3']"", ""PROJECT['mpg of #REF', '#4']"", ""AGGREGATE['max', '#5']""]","['select', 'filter', 'filter', 'union', 'project', 'aggregate']",dev
SPIDER_dev_171,Which models are lighter than 3500 but not built by the 'Ford Motor Company'?,return models ;return #1 lighter than  3500 ;return #1 not built by 'Ford Motor Company ;return #1 of both #2 and #3,"[""SELECT['models']"", ""FILTER['#1', 'lighter than 3500']"", ""FILTER['#1', 'not built by Ford Motor Company']"", ""INTERSECTION['#1', '#2', '#3']""]","['select', 'filter', 'filter', 'intersection']",dev
SPIDER_dev_172,What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?,return models ;return size of  #1 ;return #1 where #2 is  lighter than 3500 ;return #3 built by Ford Motor Company ;return #3 besides  #4,"[""SELECT['models']"", ""PROJECT['size of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is lighter than 3500']"", ""FILTER['#3', 'built by Ford Motor Company']"", ""DISCARD['#3', '#4']""]","['select', 'project', 'comparative', 'filter', 'discard']",dev
SPIDER_dev_173,What are the name of the countries where there is not a single car maker?,return countries ;return #1 with  car maker ;return #1 besides #2 ;return name of #3,"[""SELECT['countries']"", ""FILTER['#1', 'with car maker']"", ""DISCARD['#1', '#2']"", ""PROJECT['name of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",dev
SPIDER_dev_174,What are the names of the countries with no car makers?,return countries ;return #1 with no car makers ;return names of  #2,"[""SELECT['countries']"", ""FILTER['#1', 'with no car makers']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",dev
SPIDER_dev_175,Which are the car makers which produce at least 2 models and more than 3 car makers? List the id and the maker.,"return car makers ;return the   models that  #1 produce ;return the   number of  #2 for each #1 ;return #1 where #3 is  at least 2 ;return the   car makers that  #1 produce ;return the   number of  #5 for each #1 ;return #1 where #6 is  more than  3 ;return #1 in both #4 and #7 ;return the   ids of #8 ;return #8 ,  #9","[""SELECT['car makers']"", ""PROJECT['the models that #REF produce', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 2']"", ""PROJECT['the car makers that #REF produce', '#1']"", ""GROUP['count', '#5', '#1']"", ""COMPARATIVE['#1', '#6', 'is more than 3']"", ""INTERSECTION['#1', '#4', '#7']"", ""PROJECT['the ids of #REF', '#8']"", ""UNION['#8', '#9']""]","['select', 'project', 'group', 'comparative', 'project', 'group', 'comparative', 'intersection', 'project', 'union']",dev
SPIDER_dev_176,What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?,"return car makers ;return models of #1 ;return number of  #2 for each #1 ;return #1 where #3 is at least 2 ;return cars that #4 make ;return number of  #5 for each #4 ;return #4 where #6 is higher than 3 ;return ids of #7 ;return makers of #7 ;return #8 ,  #9","[""SELECT['car makers']"", ""PROJECT['models of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 2']"", ""PROJECT['cars that #REF make', '#4']"", ""GROUP['count', '#5', '#4']"", ""COMPARATIVE['#4', '#6', 'is higher than 3']"", ""PROJECT['ids of #REF', '#7']"", ""PROJECT['makers of #REF', '#7']"", ""UNION['#8', '#9']""]","['select', 'project', 'group', 'comparative', 'project', 'group', 'comparative', 'project', 'project', 'union']",dev
SPIDER_dev_177,What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?,"return countries ;return car makers of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than 3 ;return models #1 produce ;return #1 where #5 is  'fiat ;return #4 or  #6 ;return ids of  #7 ;return names of  #7 ;return #8 ,  #9","[""SELECT['countries']"", ""PROJECT['car makers of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 3']"", ""PROJECT['models #REF produce', '#1']"", ""COMPARATIVE['#1', '#5', 'is fiat']"", ""UNION['#4', '#6']"", ""PROJECT['ids of #REF', '#7']"", ""PROJECT['names of #REF', '#7']"", ""UNION['#8', '#9']""]","['select', 'project', 'group', 'comparative', 'project', 'comparative', 'union', 'project', 'project', 'union']",dev
SPIDER_dev_178,What are the ids and names of all countries that either have more than 3 car makers or produce fiat model?,"return countries ;return the  number of  car makers for each  #1 ;return #1 where #2 is  more than 3 ;return #1 that  produce fiat model ;return #3 or  #4 ;return the  ids of  #5 ;return the  names of  #5 ;return #6 ,  #7","[""SELECT['countries']"", ""PROJECT['makers', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than 3']"", ""FILTER['#1', 'that produce fiat model']"", ""UNION['#4', '#5']"", ""PROJECT['the ids of #REF', '#6']"", ""PROJECT['the names of #REF', '#6']"", ""UNION['#7', '#8']""]","['select', 'project', 'group', 'comparative', 'filter', 'union', 'project', 'project', 'union']",dev
SPIDER_dev_179,"Which country does Airline ""JetBlue Airways"" belong to?",return Airline JetBlue Airways ;return Which country does #1 belong to,"[""SELECT['Airline JetBlue Airways']"", ""PROJECT['Which country does #REF belong to', '#1']""]","['select', 'project']",dev
SPIDER_dev_18,What is the name and capacity for the stadium with highest average attendance?,"return stadiums ;return attendances of  #1 ;return average of  #2 for each  #1 ;return #1 where #3 is  highest ;return name of  #4 ;return capacity of  #4 ;return #5 ,  #6","[""SELECT['stadiums']"", ""PROJECT['attendances of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['capacity of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",dev
SPIDER_dev_180,What country is Jetblue Airways affiliated with?,return Jetblue Airways ;return country #1 is  affiliated with,"[""SELECT['Jetblue Airways']"", ""PROJECT['country #REF is affiliated with', '#1']""]","['select', 'project']",dev
SPIDER_dev_181,"What is the abbreviation of Airline ""JetBlue Airways""?",return abbreviations ;return #1 of  Airline JetBlue Airways,"[""SELECT['abbreviations']"", ""FILTER['#1', 'of Airline JetBlue Airways']""]","['select', 'filter']",dev
SPIDER_dev_182,Which abbreviation corresponds to Jetblue Airways?,return Jetblue Airways ;return abbreviation of #1,"[""SELECT['Jetblue Airways']"", ""PROJECT['abbreviation of #REF', '#1']""]","['select', 'project']",dev
SPIDER_dev_183,"List all airline names and their abbreviations in ""USA"".","return airlines ;return names of  #1 ;return abbreviations of  #2 ;return #2 ,  #3 ;return #4 in USA","[""SELECT['airlines']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['abbreviations of #REF', '#2']"", ""UNION['#2', '#3']"", ""FILTER['#4', 'in USA']""]","['select', 'project', 'project', 'union', 'filter']",dev
SPIDER_dev_184,What are the airline names and abbreviations for airlines in the USA?,"return airlines ;return #1 in the  USA ;return names of  #2 ;return abbreviations of  #2 ;return #3 ,  #4","[""SELECT['airlines']"", ""FILTER['#1', 'in the USA']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['abbreviations of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",dev
SPIDER_dev_185,List the airport code and name in the city of Anthony.,"return airports ;return #1 in the  city of  Anthony ;return airport code of  #2 ;return airport name of  #2 ;return #3 ,  #4","[""SELECT['airports']"", ""FILTER['#1', 'in the city of Anthony']"", ""PROJECT['airport code of #REF', '#2']"", ""PROJECT['airport name of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",dev
SPIDER_dev_186,Give the airport code and airport name corresonding to the city Anthony.,"return Anthony ;return airport  code of #1 ;return airport  name of #1 ;return #2 ,  #3","[""SELECT['Anthony']"", ""PROJECT['airport code of #REF', '#1']"", ""PROJECT['airport name of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",dev
SPIDER_dev_187,How many airlines do we have?,return airlines ;return number of  #1,"[""SELECT['airlines']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",dev
SPIDER_dev_189,How many airports do we have?,return airports ;return number of  #1,"[""SELECT['airports']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",dev
SPIDER_dev_19,What is the name and capacity for the stadium with the highest average attendance?,"return stadiums ;return attendances of #1 ;return average of #2 for each  #1 ;return #1 where #3 is highest ;return name of #4 ;return capacity of #4 ;return #5 ,  #6","[""SELECT['stadiums']"", ""PROJECT['attendances of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['capacity of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",dev
SPIDER_dev_190,Return the number of  airports.,return airports ;return number of  #1,"[""SELECT['airports']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",dev
SPIDER_dev_192,Return the number of flights.,return flights ;return number of  #1,"[""SELECT['flights']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",dev
SPIDER_dev_193,Which airline has abbreviation 'UAL'?,return airlines ;return abbreviation of #1 ;return #1 where #2 is  'UAL,"[""SELECT['airlines']"", ""PROJECT['abbreviation of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is UAL']""]","['select', 'project', 'comparative']",dev
SPIDER_dev_194,Give the airline with abbreviation 'UAL'.,return airlines ;return abbreviations of  #1 ;return #1 where #2 is  'UAL,"[""SELECT['airlines']"", ""PROJECT['abbreviations of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is UAL']""]","['select', 'project', 'comparative']",dev
SPIDER_dev_195,How many airlines are from USA?,return airlines ;return #1 from  USA ;return number of  #2,"[""SELECT['airlines']"", ""FILTER['#1', 'from USA']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",dev
SPIDER_dev_196,Return the number of airlines in the USA.,return airlines ;return #1 in the  USA ;return number of  #2,"[""SELECT['airlines']"", ""FILTER['#1', 'in the USA']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",dev
SPIDER_dev_197,Which city and country is the Alton airport at?,"return Alton airport ;return city of  #1 ;return country of  #1 ;return #2 ,  #3","[""SELECT['Alton airport']"", ""PROJECT['city of #REF', '#1']"", ""PROJECT['country of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",dev
SPIDER_dev_198,Give the city and country for the Alton airport.,"return Alton airport ;return city of  #1 ;return country of  #1 ;return #2 ,  #3","[""SELECT['Alton airport']"", ""PROJECT['city of #REF', '#1']"", ""PROJECT['country of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",dev
SPIDER_dev_199,What is the airport name for airport 'AKO'?,return airport names ;return airports with #1 ;return #1 where #2 is  'AKO,"[""SELECT['airport names']"", ""PROJECT['airports with #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is AKO']""]","['select', 'project', 'comparative']",dev
SPIDER_dev_2,"Show name, country, age for all singers ordered by age from the oldest to the youngest.","return singers ;return names of  #1 ;return countries of  #1 ;return ages of  #1 ;return #2 ,  #3 ,   #4 ;return #5 sorted by #4 from  oldest to youngest","[""SELECT['singers']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['countries of #REF', '#1']"", ""PROJECT['ages of #REF', '#1']"", ""UNION['#2', '#3', '#4']"", ""SORT['#5', '#4', 'from oldest to youngest']""]","['select', 'project', 'project', 'project', 'union', 'sort']",dev
SPIDER_dev_20,How many concerts are there in year 2014 or 2015?,return concerts ;return #1 in 2014 ;return #1 in 2015 ;return #2 or  #3 ;return number of  #4,"[""SELECT['concerts']"", ""FILTER['#1', 'in 2014']"", ""FILTER['#1', 'in 2015']"", ""UNION['#2', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'filter', 'filter', 'union', 'aggregate']",dev
SPIDER_dev_200,Return the name of the airport with code 'AKO'.,return airports ;return codes of  #1 ;return #1 where #2 is  'AKO ;return name of  #3,"[""SELECT['airports']"", ""PROJECT['codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is AKO']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",dev
SPIDER_dev_201,What are airport names at City 'Aberdeen'?,return 'Aberdeen ;return airport names at #1,"[""SELECT['Aberdeen']"", ""PROJECT['airport names at #REF', '#1']""]","['select', 'project']",dev
SPIDER_dev_202,What are the names of airports in Aberdeen?,return airports ;return #1 in Aberdeen ;return names of  #2,"[""SELECT['airports']"", ""FILTER['#1', 'in Aberdeen']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",dev
SPIDER_dev_203,How many flights depart from 'APG'?,return flights ;return #1 that  depart from  'APG ;return number of  #2,"[""SELECT['flights']"", ""FILTER['#1', 'that depart from APG']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",dev
SPIDER_dev_204,Count the number of flights departing from 'APG'.,return flights ;return #1 departing from  'APG ;return number of  #2,"[""SELECT['flights']"", ""FILTER['#1', 'departing from APG']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",dev
SPIDER_dev_205,How many flights have destination ATO?,return flights ;return destinations of  #1 ;return #1 where #2 is  ATO ;return number of  #3,"[""SELECT['flights']"", ""PROJECT['destinations of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is ATO']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",dev
SPIDER_dev_206,Count the number of flights into ATO.,return flights ;return #1 into ATO ;return number of  #2,"[""SELECT['flights']"", ""FILTER['#1', 'into ATO']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",dev
SPIDER_dev_207,How many flights depart from City Aberdeen?,return flights ;return #1 that  depart from  the  City Aberdeen ;return number of  #2,"[""SELECT['flights']"", ""FILTER['#1', 'that depart from the City Aberdeen']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",dev
SPIDER_dev_208,Return the number of flights departing from Aberdeen.,return flights ;return #1 departing from  Aberdeen ;return number of  #2,"[""SELECT['flights']"", ""FILTER['#1', 'departing from Aberdeen']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",dev
SPIDER_dev_209,How many flights arriving in Aberdeen city?,return flights ;return #1 arriving in Aberdeen city ;return number of #2,"[""SELECT['flights']"", ""FILTER['#1', 'arriving in Aberdeen city']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",dev
SPIDER_dev_21,How many concerts occurred in 2014 or 2015?,return concerts ;return #1 that  occurred in 2014 ;return #1 that  occurred in 2015 ;return #2 or  #3 ;return number of  #4,"[""SELECT['concerts']"", ""FILTER['#1', 'that occurred in 2014']"", ""FILTER['#1', 'that occurred in 2015']"", ""UNION['#2', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'filter', 'filter', 'union', 'aggregate']",dev
SPIDER_dev_210,Return the number of flights arriving in Aberdeen.,return flights ;return #1 arriving in Aberdeen ;return number of  #2,"[""SELECT['flights']"", ""FILTER['#1', 'arriving in Aberdeen']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",dev
SPIDER_dev_211,How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?,return flights ;return #1 that  depart from  City  'Aberdeen ;return #2 that  have  destination City  'Ashley ;return number of  #3,"[""SELECT['flights']"", ""FILTER['#1', 'that depart from City Aberdeen']"", ""FILTER['#2', 'that have destination City Ashley']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'filter', 'aggregate']",dev
SPIDER_dev_212,How many flights fly from Aberdeen to Ashley?,return flights ;return #1 from  Aberdeen ;return #1 to Ashley ;return #1 of  both #2 and  #3 ;return number of  #4,"[""SELECT['flights']"", ""FILTER['#1', 'from Aberdeen']"", ""FILTER['#1', 'to Ashley']"", ""INTERSECTION['#1', '#2', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'filter', 'filter', 'intersection', 'aggregate']",dev
SPIDER_dev_213,How many flights does airline 'JetBlue Airways' have?,return flights ;return #1 of  'JetBlue Airways ;return number of  #2,"[""SELECT['flights']"", ""FILTER['#1', 'of JetBlue Airways']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",dev
SPIDER_dev_214,Give the number of Jetblue Airways flights.,return flights ;return #1 of  Jetblue Airways ;return number of  #2,"[""SELECT['flights']"", ""FILTER['#1', 'of Jetblue Airways']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",dev
SPIDER_dev_215,How many 'United Airlines' flights go to Airport 'ASY'?,return flights ;return #1 on 'United Airlines ;return Airport #2 go to  ;return #2 where #3 is  'ASY ;return number of  #4,"[""SELECT['flights']"", ""FILTER['#1', 'on United Airlines']"", ""PROJECT['Airport #REF go to', '#2']"", ""COMPARATIVE['#2', '#3', 'is ASY']"", ""AGGREGATE['count', '#4']""]","['select', 'filter', 'project', 'comparative', 'aggregate']",dev
SPIDER_dev_216,Count the number of United Airlines flights arriving in ASY Airport.,return flights ;return #1 of  United Airlines ;return #2 arriving in ASY Airport ;return number of  #3,"[""SELECT['flights']"", ""FILTER['#1', 'of United Airlines']"", ""FILTER['#2', 'arriving in ASY Airport']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'filter', 'aggregate']",dev
SPIDER_dev_217,How many 'United Airlines' flights depart from Airport 'AHD'?,return flights ;return #1 on 'United Airlines ;return Airport #2 depart from ;return #2 where #3 is  'AHD ;return number of  #4,"[""SELECT['flights']"", ""FILTER['#1', 'on United Airlines']"", ""PROJECT['Airport #REF depart from', '#2']"", ""COMPARATIVE['#2', '#3', 'is AHD']"", ""AGGREGATE['count', '#4']""]","['select', 'filter', 'project', 'comparative', 'aggregate']",dev
SPIDER_dev_218,Return the number of United Airlines flights leaving from AHD Airport.,return flights ;return #1 of  United Airlines ;return #2 leaving from  AHD Airport ;return number of  #3,"[""SELECT['flights']"", ""FILTER['#1', 'of United Airlines']"", ""FILTER['#2', 'leaving from AHD Airport']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'filter', 'aggregate']",dev
SPIDER_dev_219,How many United Airlines flights go to City 'Aberdeen'?,return flights ;return #1 on United Airlines ;return City #2 go to  ;return #2 where #3 is  'Aberdeen ;return number of  #4,"[""SELECT['flights']"", ""FILTER['#1', 'on United Airlines']"", ""PROJECT['City #REF go to', '#2']"", ""COMPARATIVE['#2', '#3', 'is Aberdeen']"", ""AGGREGATE['count', '#4']""]","['select', 'filter', 'project', 'comparative', 'aggregate']",dev
SPIDER_dev_22,Show the stadium name and the number of concerts in each stadium.,"return stadiums ;return names of  #1 ;return concerts in #1 ;return number of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['stadiums']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['concerts in #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",dev
SPIDER_dev_220,Count the number of United Airlines flights that arrive in Aberdeen.,return United Airlines ;return flights of  #1 ;return #2 that  arrive in Aberdeen ;return number of  #3,"[""SELECT['United Airlines']"", ""PROJECT['flights of #REF', '#1']"", ""FILTER['#2', 'that arrive in Aberdeen']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'filter', 'aggregate']",dev
SPIDER_dev_221,Which city has most number of arriving flights?,return cities ;return arriving flights in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['cities']"", ""PROJECT['arriving flights in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",dev
SPIDER_dev_222,Which city has the most frequent destination airport?,return airports ;return #1 that is the  most frequent destination ;return city that has #2,"[""SELECT['airports']"", ""FILTER['#1', 'that is the most frequent destination']"", ""PROJECT['city that has #REF', '#2']""]","['select', 'filter', 'project']",dev
SPIDER_dev_223,Which city has most number of departing flights?,return cities ;return flights of #1 ;return #2 that  are departing ;return number of  #3 for each #1 ;return #1 where #4 is  highest,"[""SELECT['cities']"", ""PROJECT['flights of #REF', '#1']"", ""FILTER['#2', 'that are departing']"", ""GROUP['count', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']""]","['select', 'project', 'filter', 'group', 'superlative']",dev
SPIDER_dev_224,Which city is the most frequent source airport?,return airport ;return #1 that  is  source ;return #2 that  is  most frequent ;return city that  has #3,"[""SELECT['airport']"", ""FILTER['#1', 'that is source']"", ""FILTER['#2', 'that is most frequent']"", ""PROJECT['city that has #REF', '#3']""]","['select', 'filter', 'filter', 'project']",dev
SPIDER_dev_225,What is the code of airport that has the highest number of flights?,return airports ;return the  number of  flights for each  #1 ;return #1 where #2 is  the  highest ;return the  code of  #3,"[""SELECT['airports']"", ""PROJECT['flights', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']"", ""PROJECT['the code of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",dev
SPIDER_dev_226,What is the airport code of the airport with the most flights?,return airports ;return flights of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  the   highest ;return the   airport  code of #4,"[""SELECT['airports']"", ""PROJECT['flights of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']"", ""PROJECT['the airport code of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",dev
SPIDER_dev_227,What is the code of airport that has fewest number of flights?,return airports ;return flights of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  lowest ;return code of  #4,"[""SELECT['airports']"", ""PROJECT['flights of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['code of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",dev
SPIDER_dev_228,Give the code of the airport with the least flights.,return airports ;return flights of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  lowest ;return code of  #4,"[""SELECT['airports']"", ""PROJECT['flights of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['code of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",dev
SPIDER_dev_229,Which airline has most number of flights?,return airlines ;return flights of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['airlines']"", ""PROJECT['flights of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",dev
SPIDER_dev_23,"For each stadium, how many concerts play there?",return stadiums ;return concerts that  play in #1 ;return number of  #2 for each  #1,"[""SELECT['stadiums']"", ""PROJECT['concerts that play in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",dev
SPIDER_dev_230,What airline serves the most flights?,return airlines ;return flights #1 serves ;return number of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['airlines']"", ""PROJECT['flights #REF serves', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",dev
SPIDER_dev_231,Find the abbreviation and country of the airline that has fewest number of flights?,"return airlines ;return flights of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  lowest ;return abbreviation of  #4 ;return country of  #4 ;return #5 ,  #6","[""SELECT['airlines']"", ""PROJECT['flights of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['abbreviation of #REF', '#4']"", ""PROJECT['country of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",dev
SPIDER_dev_232,What is the abbreviation of the airline has the fewest flights and what country is it in?,"return airlines ;return flights of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  lowest ;return abbreviation of #4 ;return country of #4 ;return #5 ,  #6","[""SELECT['airlines']"", ""PROJECT['flights of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['abbreviation of #REF', '#4']"", ""PROJECT['country of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",dev
SPIDER_dev_233,What are airlines that have some flight departing from airport 'AHD'?,return distinct airlines ;return flights of  #1 ;return airports #2 depart from  ;return #1 where #3 is  'AHD,"[""SELECT['distinct airlines']"", ""PROJECT['flights of #REF', '#1']"", ""PROJECT['airports #REF depart from', '#2']"", ""COMPARATIVE['#1', '#3', 'is AHD']""]","['select', 'project', 'project', 'comparative']",dev
SPIDER_dev_234,Which airlines have a flight with source airport AHD?,return distinct airlines ;return flights of #1 ;return source airports of #2 ;return #1 where #3 is  AHD,"[""SELECT['distinct airlines']"", ""PROJECT['flights of #REF', '#1']"", ""PROJECT['source airports of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is AHD']""]","['select', 'project', 'project', 'comparative']",dev
SPIDER_dev_235,What are airlines that have flights arriving at airport 'AHD'?,return distinct airlines ;return flights of  #1 ;return airport #2 arrive at ;return #1 where #3 is  'AHD,"[""SELECT['distinct airlines']"", ""PROJECT['flights of #REF', '#1']"", ""PROJECT['airport #REF arrive at', '#2']"", ""COMPARATIVE['#1', '#3', 'is AHD']""]","['select', 'project', 'project', 'comparative']",dev
SPIDER_dev_236,Which airlines have a flight with destination airport AHD?,return flights ;return destination airports of #1 ;return #1 where #2 is  AHD ;return distinct airlines of #3,"[""SELECT['flights']"", ""PROJECT['destination airports of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is AHD']"", ""PROJECT['distinct airlines of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",dev
SPIDER_dev_237,Find all airlines that have flights from both airports 'APG' and 'CVO'.,return flights ;return #1 from the  airport 'APG ;return #1 from the  airport 'CVO ;return airlines of #1 ;return airlines of #2 ;return airlines of #3 ;return #4 in both #5 and #6,"[""SELECT['flights']"", ""FILTER['#1', 'from the airport APG']"", ""FILTER['#1', 'from the airport CVO']"", ""PROJECT['airlines of #REF', '#1']"", ""PROJECT['airlines of #REF', '#2']"", ""PROJECT['airlines of #REF', '#3']"", ""INTERSECTION['#4', '#5', '#6']""]","['select', 'filter', 'filter', 'project', 'project', 'project', 'intersection']",dev
SPIDER_dev_238,Which airlines have departing flights from both APG and CVO airports?,return airlines ;return flights of #1 ;return airports #2 depart from ;return #1 where #3 is  APG ;return #1 where #3 is  CVO ;return #1 of both #4 and #5,"[""SELECT['airlines']"", ""PROJECT['flights of #REF', '#1']"", ""PROJECT['airports #REF depart from', '#2']"", ""COMPARATIVE['#1', '#3', 'is APG']"", ""COMPARATIVE['#1', '#3', 'is CVO']"", ""INTERSECTION['#1', '#4', '#5']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection']",dev
SPIDER_dev_239,Find all airlines that have flights from airport 'CVO' but not from 'APG'.,return airlines ;return flights of #1 ;return airports of #2 ;return #1 where #3 is  'CVO ;return #1 where #3 is  not 'APG ;return #1 of both #4 and #5,"[""SELECT['airlines']"", ""PROJECT['flights of #REF', '#1']"", ""PROJECT['airports of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is CVO']"", ""COMPARATIVE['#1', '#3', 'is not APG']"", ""INTERSECTION['#1', '#4', '#5']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection']",dev
SPIDER_dev_24,Show the stadium name and capacity with most number of concerts in year 2014 or after.,"return stadiums ;return concerts in #1 ;return #2 in years 2014 and  after ;return number of #3 for each #1 ;return #1 where #4 is  highest ;return name of #5 ;return capacity of #5 ;return #6 , #7","[""SELECT['stadiums']"", ""PROJECT['concerts in #REF', '#1']"", ""FILTER['#2', 'in years 2014 and after']"", ""GROUP['count', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']"", ""PROJECT['name of #REF', '#5']"", ""PROJECT['capacity of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'filter', 'group', 'superlative', 'project', 'project', 'union']",dev
SPIDER_dev_240,Which airlines have departures from CVO but not from APG airports?,return airlines ;return #1 that  have  departures from  CVO airports ;return #2 that  have  departures from  APG airports ;return #2 besides  #3,"[""SELECT['airlines']"", ""FILTER['#1', 'that have departures from CVO airports']"", ""FILTER['#2', 'that have departures from APG airports']"", ""DISCARD['#2', '#3']""]","['select', 'filter', 'filter', 'discard']",dev
SPIDER_dev_241,Find all airlines that have at least 10 flights.,return airlines ;return flights of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least 10,"[""SELECT['airlines']"", ""PROJECT['flights of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 10']""]","['select', 'project', 'group', 'comparative']",dev
SPIDER_dev_242,Which airlines have at least 10 flights?,return airlines ;return flights of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  at least 10,"[""SELECT['airlines']"", ""PROJECT['flights of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 10']""]","['select', 'project', 'group', 'comparative']",dev
SPIDER_dev_243,Find all airlines that have fewer than 200 flights.,return airlines ;return flights of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  lower than 200,"[""SELECT['airlines']"", ""PROJECT['flights of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is lower than 200']""]","['select', 'project', 'group', 'comparative']",dev
SPIDER_dev_244,Which airlines have less than 200 flights?,return airlines ;return flights of #1 ;return number of  #2 for each #1 ;return #1 where #3 is lower than 200,"[""SELECT['airlines']"", ""PROJECT['flights of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is lower than 200']""]","['select', 'project', 'group', 'comparative']",dev
SPIDER_dev_245,"What are flight numbers of Airline ""United Airlines""?",return United Airlines ;return flight numbers of  #1,"[""SELECT['United Airlines']"", ""PROJECT['flight numbers of #REF', '#1']""]","['select', 'project']",dev
SPIDER_dev_246,Which flight numbers correspond to United Airlines flights?,return flights ;return #1 from  United Airlines ;return flight numbers of  #2,"[""SELECT['flights']"", ""FILTER['#1', 'from United Airlines']"", ""PROJECT['flight numbers of #REF', '#2']""]","['select', 'filter', 'project']",dev
SPIDER_dev_247,"What are flight numbers of flights departing from Airport ""APG""?",return flights ;return Airport #1 depart from  ;return #1 where #2 is  APG ;return flight numbers of  #3,"[""SELECT['flights']"", ""PROJECT['Airport #REF depart from', '#1']"", ""COMPARATIVE['#1', '#2', 'is APG']"", ""PROJECT['flight numbers of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",dev
SPIDER_dev_248,Give the flight numbers of flights leaving from APG.,return flights ;return #1 leaving from  APG ;return flight numbers of  #2,"[""SELECT['flights']"", ""FILTER['#1', 'leaving from APG']"", ""PROJECT['flight numbers of #REF', '#2']""]","['select', 'filter', 'project']",dev
SPIDER_dev_249,"What are flight numbers of flights arriving at Airport ""APG""?",return flights ;return Airport #1 arrive at ;return #1 where #2 is  APG ;return flight numbers of  #3,"[""SELECT['flights']"", ""PROJECT['Airport #REF arrive at', '#1']"", ""COMPARATIVE['#1', '#2', 'is APG']"", ""PROJECT['flight numbers of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",dev
SPIDER_dev_25,What is the name and capacity of the stadium with the most concerts after 2013?,"return stadiums ;return concerts on #1 ;return #2 which are after 2013; return the number of #3 for each  #1 ;return #1 where #4 is  the  highest ;return the  name of  #5 ;return the  capacity of  #5 ;return #6 ,  #7","[""SELECT['stadiums']"", ""PROJECT['concerts of #REF', '#1']"", ""FILTER['#2', 'which are after 2013']"", ""GROUP['count', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is the highest']"", ""PROJECT['the name of #REF', '#5']"", ""PROJECT['the capacity of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'filter', 'group', 'comparative', 'project', 'project', 'union']",dev
SPIDER_dev_250,Give the flight numbers of flights landing at APG.,return flights ;return #1 landing at APG ;return flight numbers of  #2,"[""SELECT['flights']"", ""FILTER['#1', 'landing at APG']"", ""PROJECT['flight numbers of #REF', '#2']""]","['select', 'filter', 'project']",dev
SPIDER_dev_251,"What are flight numbers of flights departing from City ""Aberdeen ""?",return flights ;return City #1 depart from  ;return #1 where #2 is  Aberdeen ;return flight numbers of  #3,"[""SELECT['flights']"", ""PROJECT['City #REF depart from', '#1']"", ""COMPARATIVE['#1', '#2', 'is Aberdeen']"", ""PROJECT['flight numbers of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",dev
SPIDER_dev_252,Give the flight numbers of flights leaving from Aberdeen.,return flights ;return #1 leaving from  Aberdeen ;return flight numbers of  #2,"[""SELECT['flights']"", ""FILTER['#1', 'leaving from Aberdeen']"", ""PROJECT['flight numbers of #REF', '#2']""]","['select', 'filter', 'project']",dev
SPIDER_dev_253,"What are flight numbers of flights arriving at City ""Aberdeen""?",return flights ;return City #1 arrive at ;return #1 where #2 is  Aberdeen ;return flight numbers of  #3,"[""SELECT['flights']"", ""PROJECT['City #REF arrive at', '#1']"", ""COMPARATIVE['#1', '#2', 'is Aberdeen']"", ""PROJECT['flight numbers of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",dev
SPIDER_dev_254,Give the flight numbers of flights arriving in Aberdeen.,return flights ;return #1 arriving in Aberdeen ;return flight numbers of  #2,"[""SELECT['flights']"", ""FILTER['#1', 'arriving in Aberdeen']"", ""PROJECT['flight numbers of #REF', '#2']""]","['select', 'filter', 'project']",dev
SPIDER_dev_255,Find the number of flights landing in the city of Aberdeen or Abilene.,return flights ;return cities #1 are  landing in ;return #1 where #2 is  Aberdeen ;return #1 where #2 is  Abilene ;return #3 or  #4 ;return number of  #5,"[""SELECT['flights']"", ""PROJECT['cities #REF are landing in', '#1']"", ""COMPARATIVE['#1', '#2', 'is Aberdeen']"", ""COMPARATIVE['#1', '#2', 'is Abilene']"", ""UNION['#3', '#4']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'aggregate']",dev
SPIDER_dev_256,How many flights land in Aberdeen or Abilene?,return flights ;return #1 that  land in Aberdeen ;return #1 that  land in Abilene ;return #2 or  #3 ;return number of  #4,"[""SELECT['flights']"", ""FILTER['#1', 'that land in Aberdeen']"", ""FILTER['#1', 'that land in Abilene']"", ""UNION['#2', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'filter', 'filter', 'union', 'aggregate']",dev
SPIDER_dev_257,Find the name of airports which do not have any flight in and out.,return airports ;return #1 which  do not have  any  flights in and  out ;return names of #2,"[""SELECT['airports']"", ""FILTER['#1', 'which do not have any flights in and out']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",dev
SPIDER_dev_258,Which airports do not have departing or arriving flights?,return airports ;return departing flights of #1 ;return number of  #2 for each #1 ;return #1 where #3 is zero ;return arriving flights of #1 ;return number of  #5 for each #1 ;return #1 where #6 is zero ;return #1 in  both #4 and  #7,"[""SELECT['airports']"", ""PROJECT['departing flights of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is zero']"", ""PROJECT['arriving flights of #REF', '#1']"", ""GROUP['count', '#5', '#1']"", ""COMPARATIVE['#1', '#6', 'is zero']"", ""INTERSECTION['#1', '#4', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'group', 'comparative', 'intersection']",dev
SPIDER_dev_26,Which year has most number of concerts?,return years ;return concerts of #1 ;return number of  #2 for each #1 ;return #1 where #3 is highest,"[""SELECT['years']"", ""PROJECT['concerts of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",dev
SPIDER_dev_260,Count the number of employees,return employees ;return number of  #1,"[""SELECT['employees']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",dev
SPIDER_dev_261,Sort employee names by their age in ascending order.,return employees ;return names of  #1 ;return ages of  #1 ;return #2 sorted by #3 in ascending order,"[""SELECT['employees']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['ages of #REF', '#1']"", ""SORT['#2', '#3', 'in ascending order']""]","['select', 'project', 'project', 'sort']",dev
SPIDER_dev_262,List the names of employees and sort in ascending order of age.,return employees ;return names of  #1 ;return ages of  #1 ;return #2 sorted by #3 in ascending order,"[""SELECT['employees']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['ages of #REF', '#1']"", ""SORT['#2', '#3', 'in ascending order']""]","['select', 'project', 'project', 'sort']",dev
SPIDER_dev_263,What is the number of employees from each city?,return cities ;return employees from #1 ;return number of  #2 for each #1,"[""SELECT['cities']"", ""PROJECT['employees from #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",dev
SPIDER_dev_264,Count the number of employees for each city.,return cities ;return employees in #1 ;return number of  #2 for each  #1,"[""SELECT['cities']"", ""PROJECT['employees in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",dev
SPIDER_dev_265,Which cities do more than one employee under age 30 come from?,return cities ;return employees from  #1 ;return ages of #2 ;return #2 where #3 is  under 30 ;return number of #4 for each #1 ;return #1 where #5 is  more than  one,"[""SELECT['cities']"", ""PROJECT['employees from #REF', '#1']"", ""PROJECT['ages of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is under 30']"", ""GROUP['count', '#4', '#1']"", ""COMPARATIVE['#1', '#5', 'is more than one']""]","['select', 'project', 'project', 'comparative', 'group', 'comparative']",dev
SPIDER_dev_266,Find the cities that have more than one employee under age 30.,return cities ;return employees of #1 ;return ages of #2 ;return #2 where #3 is  under 30 ;return number of #4 for each #1 ;return #1 where #5 is  more than  one,"[""SELECT['cities']"", ""PROJECT['employees of #REF', '#1']"", ""PROJECT['ages of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is under 30']"", ""GROUP['count', '#4', '#1']"", ""COMPARATIVE['#1', '#5', 'is more than one']""]","['select', 'project', 'project', 'comparative', 'group', 'comparative']",dev
SPIDER_dev_267,Find the number of shops in each location.,return locations ;return shops in #1 ;return number of  #2 for each  #1,"[""SELECT['locations']"", ""PROJECT['shops in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",dev
SPIDER_dev_268,How many shops are there in each location?,return locations ;return shops in #1 ;return number of  #2 for each  #1,"[""SELECT['locations']"", ""PROJECT['shops in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",dev
SPIDER_dev_269,Find the manager name and district of the shop whose number of products is the largest.,"return shops ;return products of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  largest ;return manager name of  #4 ;return district of  #4 ;return #5 ,  #6","[""SELECT['shops']"", ""PROJECT['products of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['manager name of #REF', '#4']"", ""PROJECT['district of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",dev
SPIDER_dev_27,What is the year that had the most concerts?,return concert ;return years of  #1 ;return number of  #1 for each  #2 ;return #2 where #3 is  highest,"[""SELECT['concert']"", ""PROJECT['years of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""SUPERLATIVE['max', '#2', '#3']""]","['select', 'project', 'group', 'superlative']",dev
SPIDER_dev_270,What are the manager name and district of the shop that sells the largest number of products?,"return shops ;return products #1 sells ;return number of  #2 for each #1 ;return #1 where #3 is  highest ;return manager of #4 ;return name of #5 ;return district of #4 ;return #6 ,  #7","[""SELECT['shops']"", ""PROJECT['products #REF sells', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['manager of #REF', '#4']"", ""PROJECT['name of #REF', '#5']"", ""PROJECT['district of #REF', '#4']"", ""UNION['#6', '#7']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'project', 'union']",dev
SPIDER_dev_271,find the minimum and maximum number of products of all stores.,"return products ;return #1 of  all stores ;return the  minimum of  #2 ;return the  maximum of  #2 ;return #3 ,  #4","[""SELECT['products']"", ""FILTER['#1', 'of all stores']"", ""AGGREGATE['min', '#2']"", ""AGGREGATE['max', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'aggregate', 'aggregate', 'union']",dev
SPIDER_dev_272,What are the minimum and maximum number of products across all the shops?,"return shops ;return products of #1 ;return number of  #2 for each #1 ;return minimum of #3 ;return maximum of #3 ;return #4 ,  #5","[""SELECT['shops']"", ""PROJECT['products of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['min', '#3']"", ""AGGREGATE['max', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'group', 'aggregate', 'aggregate', 'union']",dev
SPIDER_dev_273,"Return the name, location and district of all shops in descending order of number of products.","return shops ;return names of  #1 ;return locations of  #1 ;return districts of  #1 ;return products of  #1 ;return number of  #5 for each  #1 ;return #2 ,  #3 ,   #4 ;return #7 sorted by #6 in descending order","[""SELECT['shops']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['locations of #REF', '#1']"", ""PROJECT['districts of #REF', '#1']"", ""PROJECT['products of #REF', '#1']"", ""GROUP['count', '#5', '#1']"", ""UNION['#2', '#3', '#4']"", ""SORT['#7', '#6', 'in descending order']""]","['select', 'project', 'project', 'project', 'project', 'group', 'union', 'sort']",dev
SPIDER_dev_274,"Sort all the shops by number products in descending order, and return the name, location and district of each shop.","return shops ;return names of  #1 ;return locations of  #1 ;return districts of  #1 ;return products of  #1 ;return number of  #5 for each  #1 ;return #2 ,  #3 ,   #4 ;return #7 sorted by #6 in descending order","[""SELECT['shops']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['locations of #REF', '#1']"", ""PROJECT['districts of #REF', '#1']"", ""PROJECT['products of #REF', '#1']"", ""GROUP['count', '#5', '#1']"", ""UNION['#2', '#3', '#4']"", ""SORT['#7', '#6', 'in descending order']""]","['select', 'project', 'project', 'project', 'project', 'group', 'union', 'sort']",dev
SPIDER_dev_275,Find the names of stores whose number products is more than the average number of products.,return stores ;return products  in #1 ;return number of  #2 for each  #1 ;return average of  #3 ;return #1 where #3 is  higher than #4 ;return names of  #5,"[""SELECT['stores']"", ""PROJECT['products in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['avg', '#3']"", ""COMPARATIVE['#1', '#3', 'is higher than #4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'group', 'aggregate', 'comparative', 'project']",dev
SPIDER_dev_276,Which shops' number products is above the average? Give me the shop names.,return shops ;return products of #1 ;return number of  #2 for each #1 ;return average of #3 ;return #1 where #3 is higher than #4 ;return names of #5,"[""SELECT['shops']"", ""PROJECT['products of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['avg', '#3']"", ""COMPARATIVE['#1', '#3', 'is higher than #4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'group', 'aggregate', 'comparative', 'project']",dev
SPIDER_dev_277,find the name of employee who was awarded the most times in the evaluation.,return employees ;return the  number of  times #1 was awarded in the   evaluation ;return #1 where #2 is  the  highest ;return the  name of  #3,"[""SELECT['employees']"", ""PROJECT['times #REF was awarded in the evaluation', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']"", ""PROJECT['the name of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",dev
SPIDER_dev_278,Which employee received the most awards in evaluations? Give me the employee name.,return employees ;return evaluations of #1 ;return awards in #2 ;return number of #3 for each #1 ;return #1 where #4 is  highest ;return name of #5,"[""SELECT['employees']"", ""PROJECT['evaluations of #REF', '#1']"", ""PROJECT['awards in #REF', '#2']"", ""GROUP['count', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']"", ""PROJECT['name of #REF', '#5']""]","['select', 'project', 'project', 'group', 'superlative', 'project']",dev
SPIDER_dev_279,Find the name of the employee who got the highest one time bonus.,return employees ;return one time bonuses of  #1 ;return #1 where #2 is  highest ;return name of  #3,"[""SELECT['employees']"", ""PROJECT['one time bonuses of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",dev
SPIDER_dev_28,Show the stadium names without any concert.,return stadiums ;return #1 without concerts ;return names of  #2,"[""SELECT['stadiums']"", ""FILTER['#1', 'without concerts']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",dev
SPIDER_dev_280,Which employee received the biggest bonus? Give me the employee name.,return employees ;return bonuses that  #1 received ;return #1 where #2 is  the  biggest ;return the  name of #3,"[""SELECT['employees']"", ""PROJECT['bonuses that #REF received', '#1']"", ""COMPARATIVE['#1', '#2', 'is the biggest']"", ""PROJECT['the name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",dev
SPIDER_dev_281,Find the names of employees who never won any award in the evaluation.,return employees ;return #1 who  won any award in the  evaluation ;return #1 besides  #2 ;return names of  #3,"[""SELECT['employees']"", ""FILTER['#1', 'who won any award in the evaluation']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",dev
SPIDER_dev_282,What are the names of the employees who never received any evaluation?,return employees ;return evaluations of #1 ;return number of  #2 for each #1 ;return #1 where #3 equal to zero ;return names of #4,"[""SELECT['employees']"", ""PROJECT['evaluations of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'equal to zero']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",dev
SPIDER_dev_283,What is the name of the shop that is hiring the largest number of employees?,return shops ;return employees #1 are hiring ;return number of  #2 for each #1 ;return #1 where #3 is  highest ;return name of #4,"[""SELECT['shops']"", ""PROJECT['employees #REF are hiring', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",dev
SPIDER_dev_284,Which shop has the most employees? Give me the shop name.,return shops ;return the  number of  employees for each  #1 ;return #1 where #2 is  the  highest ;return the  name of  #3,"[""SELECT['shops']"", ""PROJECT['employees', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']"", ""PROJECT['the name of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",dev
SPIDER_dev_285,Find the name of the shops that do not hire any employee.,return shops ;return #1 that  hire employees ;return #1 besides  #2 ;return names of  #3,"[""SELECT['shops']"", ""FILTER['#1', 'that hire employees']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",dev
SPIDER_dev_286,Which shops run with no employees? Find the shop names,return shops ;return #1 that  run with no employees ;return names of  #2,"[""SELECT['shops']"", ""FILTER['#1', 'that run with no employees']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",dev
SPIDER_dev_287,Find the number of employees hired in each shop; show the shop name as well.,"return shops ;return employees hired in #1 ;return number of  #2 for each  #1 ;return shop names of  #1 ;return #3 ,  #4","[""SELECT['shops']"", ""PROJECT['employees hired in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['shop names of #REF', '#1']"", ""UNION['#3', '#4']""]","['select', 'project', 'group', 'project', 'union']",dev
SPIDER_dev_288,"For each shop, return the number of employees working there and the name of the shop.","return shops ;return employees working in #1 ;return number of  #2 for each  #1 ;return names of  #1 ;return #3 ,  #4","[""SELECT['shops']"", ""PROJECT['employees working in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['names of #REF', '#1']"", ""UNION['#3', '#4']""]","['select', 'project', 'group', 'project', 'union']",dev
SPIDER_dev_289,What is total bonus given in all evaluations?,return evaluations ;return bonus given in all #2 ;return the total of #2,"[""SELECT['evaluations']"", ""PROJECT['bonus given in all #REF', '#1']"", ""AGGREGATE['sum', '#2']""]","['select', 'project', 'aggregate']",dev
SPIDER_dev_29,What are the names of the stadiums without any concerts?,return stadiums ;return #1 with concerts ;return #1 besides  #2 ;return names of  #3,"[""SELECT['stadiums']"", ""FILTER['#1', 'with concerts']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",dev
SPIDER_dev_290,Find the total amount of bonus given in all the evaluations.,return evaluations ;return bonuses given in #1 ;return sum of  #2,"[""SELECT['evaluations']"", ""PROJECT['bonuses given in #REF', '#1']"", ""AGGREGATE['sum', '#2']""]","['select', 'project', 'aggregate']",dev
SPIDER_dev_291,Give me all the information about hiring.,return hiring ;return all information about #1,"[""SELECT['hiring']"", ""PROJECT['all information about #REF', '#1']""]","['select', 'project']",dev
SPIDER_dev_292,What is all the information about hiring?,return information ;return #1 about hiring ;return all of  the  #2,"[""SELECT['information']"", ""FILTER['#1', 'about hiring']"", ""PROJECT['all of the #REF', '#2']""]","['select', 'filter', 'project']",dev
SPIDER_dev_293,Which district has both stores with less than 3000 products and stores with more than 10000 products?,return districts ;return stores of #1 ;return products of #2 ;return number of  #3 for each #2 ;return #1 where #4 is lower than 3000 ;return #1 where #4 is higher than 10000 ;return #1 of both #5 and  #6,"[""SELECT['districts']"", ""PROJECT['stores of #REF', '#1']"", ""PROJECT['products of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""COMPARATIVE['#1', '#4', 'is lower than 3000']"", ""COMPARATIVE['#1', '#4', 'is higher than 10000']"", ""INTERSECTION['#1', '#5', '#6']""]","['select', 'project', 'project', 'group', 'comparative', 'comparative', 'intersection']",dev
SPIDER_dev_294,Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.,return districts ;return shops  in #1 ;return products  #2 sell ;return number of  #3 for each  #2 ;return #1 where #4 is  lower than 3000 ;return #1 where #4 is  higher than 10000 ;return #1 of  both #5 and  #6,"[""SELECT['districts']"", ""PROJECT['shops in #REF', '#1']"", ""PROJECT['products #REF sell', '#2']"", ""GROUP['count', '#3', '#2']"", ""COMPARATIVE['#1', '#4', 'is lower than 3000']"", ""COMPARATIVE['#1', '#4', 'is higher than 10000']"", ""INTERSECTION['#1', '#5', '#6']""]","['select', 'project', 'project', 'group', 'comparative', 'comparative', 'intersection']",dev
SPIDER_dev_295,How many different store locations are there?,return stores ;return different locations of  #1 ;return number of  #2,"[""SELECT['stores']"", ""PROJECT['different locations of #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",dev
SPIDER_dev_296,Count the number of distinct store locations.,return stores ;return distinct locations of  #1 ;return number of  #2,"[""SELECT['stores']"", ""PROJECT['distinct locations of #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",dev
SPIDER_dev_297,How many documents do we have?,return documents ;return number of  #1,"[""SELECT['documents']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",dev
SPIDER_dev_299,"List document IDs, document names, and document descriptions for all documents.","return documents ;return document IDs of  #1 ;return document names of  #1 ;return document descriptions of  #1 ;return #2 ,  #3 ,   #4","[""SELECT['documents']"", ""PROJECT['document IDs of #REF', '#1']"", ""PROJECT['document names of #REF', '#1']"", ""PROJECT['document descriptions of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",dev
SPIDER_dev_3,"What are the names, countries, and ages for every singer in descending order of age?","return singers ;return the  names of  every #1 ;return the  countries of  every #1 ;return the  ages of  every #1 ;return #2 ,  #3 ,   #4 ;return #5 sorted by descending order of  #4","[""SELECT['singers']"", ""PROJECT['the names of every #REF', '#1']"", ""PROJECT['the countries of every #REF', '#1']"", ""PROJECT['the ages of every #REF', '#1']"", ""UNION['#2', '#3', '#4']"", ""SORT['#5', '#4', 'descending order of']""]","['select', 'project', 'project', 'project', 'union', 'sort']",dev
SPIDER_dev_30,Show countries where a singer above age 40 and a singer below 30 are from.,return countries ;return singers from  #1 ;return ages of  #2 ;return #1 where #3 is  above 40 ;return #1 where #3 is  below 30 ;return #1 in both #4 and  #5,"[""SELECT['countries']"", ""PROJECT['singers from #REF', '#1']"", ""PROJECT['ages of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is above 40']"", ""COMPARATIVE['#1', '#3', 'is below 30']"", ""INTERSECTION['#1', '#4', '#5']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection']",dev
SPIDER_dev_300,"What are the ids, names, and descriptions for all documents?","return documents ;return ids of  #1 ;return names of  #1 ;return descriptions of  #1 ;return #2 ,  #3 ,   #4","[""SELECT['documents']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['descriptions of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",dev
SPIDER_dev_301,What is the document name and template id for document with description with the letter 'w' in it?,"return documents ;return descriptions of #1 ;return #1 where #2 has the  letter 'w ;return document  name of #3 ;return template id of #3 ;return #4 ,  #5","[""SELECT['documents']"", ""PROJECT['descriptions of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'has the letter w']"", ""PROJECT['document name of #REF', '#3']"", ""PROJECT['template id of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",dev
SPIDER_dev_302,Return the names and template ids for documents that contain the letter w in their description.,"return documents ;return descriptions of  #1 ;return #1 where #2 contain the  letter w ;return names of  #3 ;return templates of  #3 ;return ids of  #5 ;return #4 ,  #6","[""SELECT['documents']"", ""PROJECT['descriptions of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'contain the letter w']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['templates of #REF', '#3']"", ""PROJECT['ids of #REF', '#5']"", ""UNION['#4', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",dev
SPIDER_dev_303,"What is the document id, template id and description for document named ""Robbin CV""?","return documents ;return #1 named Robbin CV ;return the  document  id  of #2 ;return the  template id  of #2 ;return the  description of #2 ;return #3 ,  #4 ,   #5","[""SELECT['documents']"", ""FILTER['#1', 'named Robbin CV']"", ""PROJECT['the document id of #REF', '#2']"", ""PROJECT['the template id of #REF', '#2']"", ""PROJECT['the description of #REF', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",dev
SPIDER_dev_304,"Return the document id, template id, and description for the document with the name Robbin CV.","return documents ;return #1 with the  name Robbin CV ;return document id of  #2 ;return template id of  #2 ;return description of  #2 ;return #3 ,  #4 ,   #5","[""SELECT['documents']"", ""FILTER['#1', 'with the name Robbin CV']"", ""PROJECT['document id of #REF', '#2']"", ""PROJECT['template id of #REF', '#2']"", ""PROJECT['description of #REF', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",dev
SPIDER_dev_305,How many different templates do all document use?,return documents ;return different templates of  #1 ;return number of #2,"[""SELECT['documents']"", ""PROJECT['different templates of #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",dev
SPIDER_dev_306,Count the number of different templates used for documents.,return documents ;return different templates used for #1 ;return number of  #2,"[""SELECT['documents']"", ""PROJECT['different templates used for #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",dev
SPIDER_dev_307,How many documents are using the template with type code 'PPT'?,return documents ;return templates #1 use ;return type codes of  #2 ;return #1 where #3 is  'PPT ;return number of  #4,"[""SELECT['documents']"", ""PROJECT['templates #REF use', '#1']"", ""PROJECT['type codes of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is PPT']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'project', 'comparative', 'aggregate']",dev
SPIDER_dev_308,Count the number of documents that use the PPT template type.,return documents ;return template types of  #1 ;return #1 where #2 is  PPT ;return number of  #3,"[""SELECT['documents']"", ""PROJECT['template types of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is PPT']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",dev
SPIDER_dev_309,Show all template ids and number of documents using each template.,"return templates ;return documents using #1 ;return number of  #2 for each  #1 ;return ids of  #1 ;return #4 ,  #3","[""SELECT['templates']"", ""PROJECT['documents using #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['ids of #REF', '#1']"", ""UNION['#4', '#3']""]","['select', 'project', 'group', 'project', 'union']",dev
SPIDER_dev_31,Show names for all stadiums except for stadiums having a concert in year 2014.,return stadiums ;return #1 that  have  concerts ;return #2 in the year 2014 ;return #1 besides #3 ;return names of #4,"[""SELECT['stadiums']"", ""FILTER['#1', 'that have concerts']"", ""FILTER['#2', 'in the year 2014']"", ""DISCARD['#1', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'filter', 'discard', 'project']",dev
SPIDER_dev_310,"What are all different template ids used for documents, and how many times were each of them used?","return documents ;return template ids used  for #1 ;return the  different #2 ;return number of  #1 for each of #3 ;return #3 ,  #4","[""SELECT['documents']"", ""PROJECT['template ids used for #REF', '#1']"", ""PROJECT['the different #REF', '#2']"", ""GROUP['count', '#1', '#3']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'group', 'union']",dev
SPIDER_dev_311,What is the id and type code for the template used by the most documents?,"return templates ;return documents that used #1 ;return the number of #2 for each #1 ;return #1 with largest #3 ;return the  id of  #4 ;return the  type code for #5 ;return #5 ,  #6","[""SELECT['templates']"", ""PROJECT['documents that used #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['the id of #REF', '#4']"", ""PROJECT['the type code for #REF', '#5']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",dev
SPIDER_dev_312,Return the id and type code of the template that is used for the greatest number of documents.,"return templates ;return documents that  used #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  greatest ;return id of  #4 ;return type code of  #4 ;return #5 ,  #6","[""SELECT['templates']"", ""PROJECT['documents that used #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is greatest']"", ""PROJECT['id of #REF', '#4']"", ""PROJECT['type code of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",dev
SPIDER_dev_313,Show ids for all templates that are used by more than one document.,return templates ;return documents that  used #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  more than one ;return ids of  #4,"[""SELECT['templates']"", ""PROJECT['documents that used #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than one']"", ""PROJECT['ids of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",dev
SPIDER_dev_314,What are the template ids of any templates used in more than a single document?,return templates ;return documents that used #1 ;return number of #2 for each #1 ;return #1 such that #3 is more than one ;return the  template ids of #4,"[""SELECT['templates']"", ""PROJECT['documents that used #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'more than one']"", ""PROJECT['the template ids of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",dev
SPIDER_dev_315,Show ids for all templates not used by any document.,return templates ;return #1 not  used by documents ;return ids of  #2,"[""SELECT['templates']"", ""FILTER['#1', 'not used by documents']"", ""PROJECT['ids of #REF', '#2']""]","['select', 'filter', 'project']",dev
SPIDER_dev_316,What are the ids for templates that are not used in any documents?,return templates ;return #1 used in documents ;return #1 besides  #2 ;return ids of  #3,"[""SELECT['templates']"", ""FILTER['#1', 'used in documents']"", ""DISCARD['#1', '#2']"", ""PROJECT['ids of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",dev
SPIDER_dev_317,How many templates do we have?,return templates ;return number of  #1,"[""SELECT['templates']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",dev
SPIDER_dev_318,Count the number of templates.,return templates ;return number of  #1,"[""SELECT['templates']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",dev
SPIDER_dev_319,"Show template ids, version numbers, and template type codes for all templates.","return templates ;return template ids of  #1 ;return version numbers of  #1 ;return template type codes of  #1 ;return #2 ,  #3 ,   #4","[""SELECT['templates']"", ""PROJECT['template ids of #REF', '#1']"", ""PROJECT['version numbers of #REF', '#1']"", ""PROJECT['template type codes of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",dev
SPIDER_dev_32,What are the names of all stadiums that did not have a concert in 2014?,return stadiums ;return #1 that  did  not have a concert ;return #2 in 2014 ;return names of #3,"[""SELECT['stadiums']"", ""FILTER['#1', 'that did not have a concert']"", ""FILTER['#2', 'in 2014']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",dev
SPIDER_dev_320,"What are the ids, version numbers, and type codes for each template?","return templates ;return ids of #1 ;return version numbers of #1 ;return type codes of #1 ;return #2 ,  #3 ,   #4","[""SELECT['templates']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['version numbers of #REF', '#1']"", ""PROJECT['type codes of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",dev
SPIDER_dev_321,Show all distinct template type codes for all templates.,return templates ;return template types of  #1 ;return distinct codes of  #2,"[""SELECT['templates']"", ""PROJECT['template types of #REF', '#1']"", ""PROJECT['distinct codes of #REF', '#2']""]","['select', 'project', 'project']",dev
SPIDER_dev_322,What are the different template type codes?,return template types ;return different codes of  #1,"[""SELECT['template types']"", ""PROJECT['different codes of #REF', '#1']""]","['select', 'project']",dev
SPIDER_dev_323,What are the ids of templates with template type code PP or PPT?,return templates ;return template type codes of #1 ;return #1 where #2 is PP ;return #1 where #2 is PPT ;return #3 or  #4 ;return ids of #5,"[""SELECT['templates']"", ""PROJECT['template type codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is PP']"", ""COMPARATIVE['#1', '#2', 'is PPT']"", ""UNION['#3', '#4']"", ""PROJECT['ids of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",dev
SPIDER_dev_324,Return the ids of templates that have the code PP or PPT.,return templates ;return codes of  #1 ;return #1 where #2 is  PP ;return #1 where #2 is  PPT ;return #3 or  #4 ;return ids of  #5,"[""SELECT['templates']"", ""PROJECT['codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is PP']"", ""COMPARATIVE['#1', '#2', 'is PPT']"", ""UNION['#3', '#4']"", ""PROJECT['ids of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",dev
SPIDER_dev_325,How many templates have template type code CV?,return templates ;return template type codes of  #1 ;return #1 where #2 is  CV ;return number of  #3,"[""SELECT['templates']"", ""PROJECT['template type codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is CV']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",dev
SPIDER_dev_326,Count the number of templates of the type CV.,return templates ;return types of  #1 ;return #1 where #2 is  CV ;return number of  #3,"[""SELECT['templates']"", ""PROJECT['types of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is CV']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",dev
SPIDER_dev_327,What is the version number and template type code for the template with version number later than 5?,"return templates ;return version  numbers of #1 ;return #1 where #2 is higher than 5 ;return version numbers of #3 ;return template  type codes of #3 ;return #4 ,  #5","[""SELECT['templates']"", ""PROJECT['version numbers of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 5']"", ""PROJECT['version numbers of #REF', '#3']"", ""PROJECT['template type codes of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",dev
SPIDER_dev_328,Return the version numbers and template type codes of templates with a version number greater than 5.,"return templates ;return version  numbers of  #1 ;return #1 where #2 is  higher than 5 ;return version  numbers of  #3 ;return template type codes of  #3 ;return #4 ,  #5","[""SELECT['templates']"", ""PROJECT['version numbers of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 5']"", ""PROJECT['version numbers of #REF', '#3']"", ""PROJECT['template type codes of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",dev
SPIDER_dev_329,Show all template type codes and number of templates for each.,"return template type codes ;return templates of  #1 ;return number of  #2 for each  #1 ;return #1 ,  #3","[""SELECT['template type codes']"", ""PROJECT['templates of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",dev
SPIDER_dev_33,Show the name and theme for all concerts and the number of singers in each concert.,"return concerts ;return names of  #1 ;return themes of  #1 ;return singers in #1 ;return number of  #4 for each  #1 ;return #2 ,  #3 ,   #5","[""SELECT['concerts']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['themes of #REF', '#1']"", ""PROJECT['singers in #REF', '#1']"", ""GROUP['count', '#4', '#1']"", ""UNION['#2', '#3', '#5']""]","['select', 'project', 'project', 'project', 'group', 'union']",dev
SPIDER_dev_330,"What are the different template type codes, and how many templates correspond to each?",return template ;return type codes of #1 ;return different #2 ;return number of  #1 for each  #3,"[""SELECT['template']"", ""PROJECT['type codes of #REF', '#1']"", ""PROJECT['different #REF', '#2']"", ""GROUP['count', '#1', '#3']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'group', 'union']",dev
SPIDER_dev_331,Which template type code has most number of templates?,return template type codes ;return templates of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['template type codes']"", ""PROJECT['templates of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",dev
SPIDER_dev_332,Return the type code of the template type that the most templates belong to.,return template types ;return templates that  belong to #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return type  code of  #4,"[""SELECT['template types']"", ""PROJECT['templates that belong to #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['type code of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",dev
SPIDER_dev_333,Show all template type codes with less than three templates.,return template type codes ;return templates of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  lower than three,"[""SELECT['template type codes']"", ""PROJECT['templates of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is lower than three']""]","['select', 'project', 'group', 'comparative']",dev
SPIDER_dev_334,What are the codes of template types that have fewer than 3 templates?,return template types ;return templates of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  lower than 3 ;return codes of  #4,"[""SELECT['template types']"", ""PROJECT['templates of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is lower than 3']"", ""PROJECT['codes of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",dev
SPIDER_dev_335,What the smallest version number and its template type code?,"return version numbers ;return #1 that  is  the  smallest ;return template type code of #2 ;return #2 ,  #3","[""SELECT['version numbers']"", ""AGGREGATE['min', '#1']"", ""PROJECT['template type code of #REF', '#2']"", ""UNION['#2', '#3']""]","['select', 'aggregate', 'project', 'union']",dev
SPIDER_dev_336,"Return the lowest version number, along with its corresponding template type code.","return version numbers ;return the  lowest #1 ;return template type code of  #2 ;return #2 ,  #3","[""SELECT['version numbers']"", ""AGGREGATE['min', '#1']"", ""PROJECT['template type code of #REF', '#2']"", ""UNION['#2', '#3']""]","['select', 'aggregate', 'project', 'union']",dev
SPIDER_dev_337,"What is the template type code of the template used by document with the name ""Data base""?",return documents ;return #1 with the  name Data base ;return template used by #2 ;return template type code of  #3,"[""SELECT['documents']"", ""FILTER['#1', 'with the name Data base']"", ""PROJECT['template used by #REF', '#2']"", ""PROJECT['template type code of #REF', '#3']""]","['select', 'filter', 'project', 'project']",dev
SPIDER_dev_338,Return the template type code of the template that is used by a document named Data base.,return templates ;return documents that  used #1 ;return #2 named Data base ;return template type code of  #3,"[""SELECT['templates']"", ""PROJECT['documents that used #REF', '#1']"", ""FILTER['#2', 'named Data base']"", ""PROJECT['template type code of #REF', '#3']""]","['select', 'project', 'filter', 'project']",dev
SPIDER_dev_339,Show all document names using templates with template type code BK.,return templates ;return template type codes of  #1 ;return #1 where #2 is  BK ;return documents using #3 ;return names of  #4,"[""SELECT['templates']"", ""PROJECT['template type codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is BK']"", ""PROJECT['documents using #REF', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",dev
SPIDER_dev_34,"What are the names, themes, and number of singers for every concert?","return concerts ;return names of #1 ;return themes of #1 ;return singers of #1 ;return number of  #4 for each  #1 ;return #2 ,  #3 ,   #5","[""SELECT['concerts']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['themes of #REF', '#1']"", ""PROJECT['singers of #REF', '#1']"", ""GROUP['count', '#4', '#1']"", ""UNION['#2', '#3', '#5']""]","['select', 'project', 'project', 'project', 'group', 'union']",dev
SPIDER_dev_340,What are the names of documents that use templates with the code BK?,return documents ;return templates of #1 ;return codes of #2 ;return #1 where #3 is BK ;return names of #4,"[""SELECT['documents']"", ""PROJECT['templates of #REF', '#1']"", ""PROJECT['codes of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is BK']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",dev
SPIDER_dev_341,Show all template type codes and the number of documents using each type.,"return template type  codes ;return documents using #1 ;return number of  #2 for each  #1 ;return #1 ,  #3","[""SELECT['template type codes']"", ""PROJECT['documents using #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",dev
SPIDER_dev_342,"What are the different template type codes, and how many documents use each type?","return template type  codes ;return different #1 ;return documents that  use #2 ;return number of  #3 for each  #2 ;return #2 ,  #4","[""SELECT['template type codes']"", ""PROJECT['different #REF', '#1']"", ""PROJECT['documents that use #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",dev
SPIDER_dev_343,Which template type code is used by most number of documents?,return template type codes ;return documents of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['template type codes']"", ""PROJECT['documents of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",dev
SPIDER_dev_344,Return the code of the template type that is most commonly used in documents.,return template types ;return documents #1 is  used in ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return code of  #4,"[""SELECT['template types']"", ""PROJECT['documents #REF is used in', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['code of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",dev
SPIDER_dev_345,Show all template type codes that are not used by any document.,return template type codes ;return #1 not  used by documents,"[""SELECT['template type codes']"", ""FILTER['#1', 'not used by documents']""]","['select', 'filter']",dev
SPIDER_dev_346,What are the codes of template types that are not used for any document?,return template types ;return #1 not  used for any documents ;return codes of  #2,"[""SELECT['template types']"", ""FILTER['#1', 'not used for any documents']"", ""PROJECT['codes of #REF', '#2']""]","['select', 'filter', 'project']",dev
SPIDER_dev_347,Show all template type codes and descriptions.,"return template types ;return codes of  #1 ;return descriptions of  #1 ;return #2 ,  #3","[""SELECT['template types']"", ""PROJECT['codes of #REF', '#1']"", ""PROJECT['descriptions of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",dev
SPIDER_dev_348,What are the type codes and descriptions for all template types?,"return template types ;return type codes of  #1 ;return descriptions of  #1 ;return #2 ,  #3","[""SELECT['template types']"", ""PROJECT['type codes of #REF', '#1']"", ""PROJECT['descriptions of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",dev
SPIDER_dev_349,"What is the template type descriptions for template type code ""AD"".",return template type  ;return #1 with code AD ;return descriptions of  #2,"[""SELECT['template type']"", ""FILTER['#1', 'with code AD']"", ""PROJECT['descriptions of #REF', '#2']""]","['select', 'filter', 'project']",dev
SPIDER_dev_35,List singer names and number of concerts for each singer.,"return singers ;return names of  #1 ;return concerts of  #1 ;return number of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['singers']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['concerts of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",dev
SPIDER_dev_350,Return the template type description of the template type with the code AD.,return template types ;return codes of  #1 ;return #1 where #2 is  AD ;return template type  description of  #3,"[""SELECT['template types']"", ""PROJECT['codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is AD']"", ""PROJECT['template type description of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",dev
SPIDER_dev_351,"What is the template type code for template type description ""Book"".",return template  types ;return descriptions of #1 ;return #1 where #2 is  Book ;return the  template  type  code of #3,"[""SELECT['template types']"", ""PROJECT['descriptions of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Book']"", ""PROJECT['the template type code of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",dev
SPIDER_dev_352,"Return the type code of the template type with the description ""Book"".",return template types ;return descriptions of  #1 ;return #1 where #2 is  Book ;return type  code of  #3,"[""SELECT['template types']"", ""PROJECT['descriptions of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Book']"", ""PROJECT['type code of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",dev
SPIDER_dev_353,What are the distinct template type descriptions for the templates ever used by any document?,return templates ;return #1 used by any  documents ;return type description of #2 ;return #3 that  are distinct,"[""SELECT['templates']"", ""FILTER['#1', 'used by any documents']"", ""PROJECT['type description of #REF', '#2']"", ""FILTER['#3', 'that are distinct']""]","['select', 'filter', 'project', 'filter']",dev
SPIDER_dev_354,Return the different descriptions for templates that have been used in a document.,return templates ;return #1 that  have  been used in a document ;return different descriptions of  #2,"[""SELECT['templates']"", ""FILTER['#1', 'that have been used in a document']"", ""PROJECT['different descriptions of #REF', '#2']""]","['select', 'filter', 'project']",dev
SPIDER_dev_355,"What are the template ids with template type description ""Presentation"".",return template ids ;return template type descriptions of  #1 ;return #1 where #2 is  Presentation,"[""SELECT['template ids']"", ""PROJECT['template type descriptions of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Presentation']""]","['select', 'project', 'comparative']",dev
SPIDER_dev_356,Return the ids corresponding to templates with the description 'Presentation'.,return templates ;return #1 with description 'Presentation ;return ids of  #2,"[""SELECT['templates']"", ""FILTER['#1', 'with description Presentation']"", ""PROJECT['ids of #REF', '#2']""]","['select', 'filter', 'project']",dev
SPIDER_dev_357,How many paragraphs in total?,return paragraphs ;return number of  #1,"[""SELECT['paragraphs']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",dev
SPIDER_dev_358,Count the number of paragraphs.,return paragraphs ;return number of  #1,"[""SELECT['paragraphs']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",dev
SPIDER_dev_359,How many paragraphs for the document with name 'Summer Show'?,return documents ;return #1 with name 'Summer Show ;return paragraphs in #2 ;return number of  #3,"[""SELECT['documents']"", ""FILTER['#1', 'with name Summer Show']"", ""PROJECT['paragraphs in #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",dev
SPIDER_dev_36,What are the names of the singers and number of concerts for each person?,"return singers ;return names of  #1 ;return concerts of  #1 ;return number of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['singers']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['concerts of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",dev
SPIDER_dev_360,Count the number of paragraphs in the document named 'Summer Show'.,return documents ;return #1 named 'Summer Show ;return paragraphs in #2 ;return number of  #3,"[""SELECT['documents']"", ""FILTER['#1', 'named Summer Show']"", ""PROJECT['paragraphs in #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",dev
SPIDER_dev_361,Show paragraph details for paragraph with text 'Korea'.,return paragraphs ;return text of  #1 ;return #1 where #2 is  'Korea ;return paragraph  details of  #3,"[""SELECT['paragraphs']"", ""PROJECT['text of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Korea']"", ""PROJECT['paragraph details of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",dev
SPIDER_dev_362,What are the details for the paragraph that includes the text 'Korea'?,return paragraphs ;return #1 with text 'Korea ;return details of  #2,"[""SELECT['paragraphs']"", ""FILTER['#1', 'with text Korea']"", ""PROJECT['details of #REF', '#2']""]","['select', 'filter', 'project']",dev
SPIDER_dev_363,Show all paragraph ids and texts for the document with name 'Welcome to NY'.,"return documents ;return names of  #1 ;return #1 where #2 is  'Welcome to NY ;return paragraphs of  #3 ;return paragraph ids of  #4 ;return texts of  #4 ;return #5 ,  #6","[""SELECT['documents']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Welcome to NY']"", ""PROJECT['paragraphs of #REF', '#3']"", ""PROJECT['paragraph ids of #REF', '#4']"", ""PROJECT['texts of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",dev
SPIDER_dev_364,What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?,"return documents ;return #1 titled 'Welcome to NY ;return paragraphs of  #2 ;return ids of  #3 ;return texts of  #3 ;return #4 ,  #5","[""SELECT['documents']"", ""FILTER['#1', 'titled Welcome to NY']"", ""PROJECT['paragraphs of #REF', '#2']"", ""PROJECT['ids of #REF', '#3']"", ""PROJECT['texts of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",dev
SPIDER_dev_365,"Show all paragraph texts for the document ""Customer reviews"".",return documents ;return #1 that  is  Customer reviews ;return paragraph texts of #2,"[""SELECT['documents']"", ""FILTER['#1', 'that is Customer reviews']"", ""PROJECT['paragraph texts of #REF', '#2']""]","['select', 'filter', 'project']",dev
SPIDER_dev_366,What are the paragraph texts for the document with the name 'Customer reviews'?,return documents ;return #1 if name 'Customer reviews ;return paragraph texts for #2,"[""SELECT['documents']"", ""FILTER['#1', 'if name Customer reviews']"", ""PROJECT['paragraph texts for #REF', '#2']""]","['select', 'filter', 'project']",dev
SPIDER_dev_367,Show all document ids and the number of paragraphs in each document. Order by document id.,"return documents ;return document ids of  #1 ;return paragraphs of  #1 ;return number of  #3 for each  #1 ;return #2 ,  #4 ;return #5 sorted by #2","[""SELECT['documents']"", ""PROJECT['document ids of #REF', '#1']"", ""PROJECT['paragraphs of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']"", ""SORT['#5', '#2']""]","['select', 'project', 'project', 'group', 'union', 'sort']",dev
SPIDER_dev_368,"Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.","return document ids ;return the  different #1 ;return paragraphs in #2 ;return the  number of  #3 for each of #2 ;return #2 ,  #4 ;return #5 sorted by #2","[""SELECT['document ids']"", ""PROJECT['the different #REF', '#1']"", ""PROJECT['paragraphs in #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']"", ""SORT['#5', '#2']""]","['select', 'project', 'project', 'group', 'union', 'sort']",dev
SPIDER_dev_369,"Show all document ids, names and the number of paragraphs in each document.","return documents ;return document ids of  #1 ;return names of  #1 ;return paragraphs of  #1 ;return number of  #4 for each  #1 ;return #2 ,  #3 ,   #5","[""SELECT['documents']"", ""PROJECT['document ids of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['paragraphs of #REF', '#1']"", ""GROUP['count', '#4', '#1']"", ""UNION['#2', '#3', '#5']""]","['select', 'project', 'project', 'project', 'group', 'union']",dev
SPIDER_dev_37,List all singer names in concerts in year 2014.,return concerts ;return #1 in year 2014 ;return singer names from  #2,"[""SELECT['concerts']"", ""FILTER['#1', 'in year 2014']"", ""PROJECT['singer names from #REF', '#2']""]","['select', 'filter', 'project']",dev
SPIDER_dev_370,"What are the ids and names of each document, as well as the number of paragraphs in each?","return documents ;return ids of  #1 ;return names of  #1 ;return paragraphs of  #1 ;return number of  #4 for each  #1 ;return #2 ,  #3 ,   #5","[""SELECT['documents']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['paragraphs of #REF', '#1']"", ""GROUP['count', '#4', '#1']"", ""UNION['#2', '#3', '#5']""]","['select', 'project', 'project', 'project', 'group', 'union']",dev
SPIDER_dev_371,List all document ids with at least two paragraphs.,return documents ;return paragraphs in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least two ;return ids of  #4,"[""SELECT['documents']"", ""PROJECT['paragraphs in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""PROJECT['ids of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",dev
SPIDER_dev_372,What are the ids of documents that have 2 or more paragraphs?,return documents ;return paragraphs of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least 2 ;return ids of  #4,"[""SELECT['documents']"", ""PROJECT['paragraphs of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 2']"", ""PROJECT['ids of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",dev
SPIDER_dev_373,What is the document id and name with greatest number of paragraphs?,"return documents ;return paragraphs of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  the  greatest ;return the  document id of #4 ;return the  name of #4 ;return #5 ,  #6","[""SELECT['documents']"", ""PROJECT['paragraphs of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the greatest']"", ""PROJECT['the document id of #REF', '#4']"", ""PROJECT['the name of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",dev
SPIDER_dev_374,Return the id and name of the document with the most paragraphs.,"return documents ;return paragraphs in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return id of  #4 ;return name of  #4 ;return #5 ,  #6","[""SELECT['documents']"", ""PROJECT['paragraphs in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['id of #REF', '#4']"", ""PROJECT['name of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",dev
SPIDER_dev_375,What is the document id with least number of paragraphs?,return document ids ;return the  number of  paragraphs for each  #1 ;return #1 where #2 is  the  least,"[""SELECT['document ids']"", ""PROJECT['paragraphs', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the least']""]","['select', 'project', 'group', 'comparative']",dev
SPIDER_dev_376,Return the id of the document with the fewest paragraphs.,return documents ;return paragraphs of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  lowest ;return id of  #4,"[""SELECT['documents']"", ""PROJECT['paragraphs of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['id of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",dev
SPIDER_dev_377,What is the document id with 1 to 2 paragraphs?,return documents ;return paragraphs of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  at least 1 ;return #1 where #3 is  at most 2 ;return document id of #1 ;return #6 of both #4 and #5,"[""SELECT['documents']"", ""PROJECT['paragraphs of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 1']"", ""COMPARATIVE['#1', '#3', 'is at most 2']"", ""PROJECT['document id of #REF', '#1']"", ""INTERSECTION['#6', '#4', '#5']""]","['select', 'project', 'group', 'comparative', 'comparative', 'project', 'intersection']",dev
SPIDER_dev_378,Give the ids of documents that have between one and two paragraphs.,return documents ;return paragraphs of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least one ;return #1 where #3 is  at most two ;return #1 of  both #4 and  #5 ;return ids of  #6,"[""SELECT['documents']"", ""PROJECT['paragraphs of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least one']"", ""COMPARATIVE['#1', '#3', 'is at most two']"", ""INTERSECTION['#1', '#4', '#5']"", ""PROJECT['ids of #REF', '#6']""]","['select', 'project', 'group', 'comparative', 'comparative', 'intersection', 'project']",dev
SPIDER_dev_379,Show the document id with paragraph text 'Brazil' and 'Ireland'.,return document ids ;return paragraphs of  #1 ;return text of  #2 ;return #1 where #3 is  'Brazil ;return #1 where #3 is  'Ireland ;return #1 of  both #4 and  #5,"[""SELECT['document ids']"", ""PROJECT['paragraphs of #REF', '#1']"", ""PROJECT['text of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Brazil']"", ""COMPARATIVE['#1', '#3', 'is Ireland']"", ""INTERSECTION['#1', '#4', '#5']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection']",dev
SPIDER_dev_38,What are the names of the singers who performed in a concert in 2014?,return concerts ;return #1 in 2014 ;return singers who performed in #2 ;return the  names of #3,"[""SELECT['concerts']"", ""FILTER['#1', 'in 2014']"", ""PROJECT['singers who performed in #REF', '#2']"", ""PROJECT['the names of #REF', '#3']""]","['select', 'filter', 'project', 'project']",dev
SPIDER_dev_380,What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?,return documents ;return #1 that  contain the  paragraph text 'Brazil ;return #1 that  contain the  paragraph text 'Ireland ;return #1 in both #2 and  #3 ;return ids of  #4,"[""SELECT['documents']"", ""FILTER['#1', 'that contain the paragraph text Brazil']"", ""FILTER['#1', 'that contain the paragraph text Ireland']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['ids of #REF', '#4']""]","['select', 'filter', 'filter', 'intersection', 'project']",dev
SPIDER_dev_381,How many teachers are there?,return teachers ;return number of  #1,"[""SELECT['teachers']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",dev
SPIDER_dev_382,What is the total count of teachers?,return teachers ;return number of  #1,"[""SELECT['teachers']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",dev
SPIDER_dev_383,List the names of teachers in ascending order of age.,return teachers ;return names of  #1 ;return ages of  #1 ;return #2 sorted by #3 in ascending order,"[""SELECT['teachers']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['ages of #REF', '#1']"", ""SORT['#2', '#3', 'in ascending order']""]","['select', 'project', 'project', 'sort']",dev
SPIDER_dev_384,What are the names of the teachers ordered by ascending age?,return teachers ;return names of  #1 ;return ages of  #1 ;return #2 sorted by ascending #3,"[""SELECT['teachers']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['ages of #REF', '#1']"", ""SORT['#2', '#3', 'ascending']""]","['select', 'project', 'project', 'sort']",dev
SPIDER_dev_385,What are the age and hometown of teachers?,"return teachers ;return ages of  #1 ;return hometowns of  #1 ;return #2 ,  #3","[""SELECT['teachers']"", ""PROJECT['ages of #REF', '#1']"", ""PROJECT['hometowns of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",dev
SPIDER_dev_386,What is the age and hometown of every teacher?,"return teachers ;return ages of  #1 ;return hometowns of  #1 ;return #2 ,  #3","[""SELECT['teachers']"", ""PROJECT['ages of #REF', '#1']"", ""PROJECT['hometowns of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",dev
SPIDER_dev_387,"List the name of teachers whose hometown is not ""Little Lever Urban District"".",return teachers ;return hometowns of  #1 ;return #1 where #2 is  not  Little Lever Urban District ;return names of  #3,"[""SELECT['teachers']"", ""PROJECT['hometowns of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not Little Lever Urban District']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",dev
SPIDER_dev_388,"What are the names of the teachers whose hometown is not ""Little Lever Urban District""?",return teachers ;return #1 whose hometown is  Little Lever Urban District ;return #1 besides  #2 ;return the  names of  #3,"[""SELECT['teachers']"", ""FILTER['#1', 'whose hometown is Little Lever Urban District']"", ""DISCARD['#1', '#2']"", ""PROJECT['the names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",dev
SPIDER_dev_389,Show the name of teachers aged either 32 or 33?,return teachers ;return #1 aged 32 ;return #1 aged 33 ;return #2 or  #3 ;return names of  #4,"[""SELECT['teachers']"", ""FILTER['#1', 'aged 32']"", ""FILTER['#1', 'aged 33']"", ""UNION['#2', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",dev
SPIDER_dev_39,what is the name and nation of the singer who have a song having 'Hey' in its name?,"return singers ;return #1 who  have  a song having 'Hey in its name  ;return the  name  of  #2 ;return the  nation of  #2 ;return #3 ,  #4","[""SELECT['singers']"", ""FILTER['#1', 'who have a song having Hey in its name']"", ""PROJECT['the name of #REF', '#2']"", ""PROJECT['the nation of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",dev
SPIDER_dev_390,What are the names of the teachers who are aged either 32 or 33?,return teachers ;return #1 who  are  aged 32 ;return #1 who  are  aged 33 ;return #2 and #3 ;return names of  #4,"[""SELECT['teachers']"", ""FILTER['#1', 'who are aged 32']"", ""FILTER['#1', 'who are aged 33']"", ""UNION['#2', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",dev
SPIDER_dev_391,What is the hometown of the youngest teacher?,return teachers ;return age of #1 ;return #1 with minimal #2 ;return hometown of  #3,"[""SELECT['teachers']"", ""PROJECT['age of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""PROJECT['hometown of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",dev
SPIDER_dev_392,Where is the youngest teacher from?,return teachers ;return age of #1 ;return #1 with minimal #2 ;return Where is  #3 from,"[""SELECT['teachers']"", ""PROJECT['age of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""PROJECT['Where is #REF from', '#3']""]","['select', 'project', 'superlative', 'project']",dev
SPIDER_dev_393,Show different hometown of teachers and the number of teachers from each hometown.,"return teachers  ;return hometowns of #1 ;return different #2 ;return number of  #1 for each #3 ;return #3 ,  #4","[""SELECT['teachers']"", ""PROJECT['hometowns of #REF', '#1']"", ""PROJECT['different #REF', '#2']"", ""GROUP['count', '#1', '#3']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'group', 'union']",dev
SPIDER_dev_394,"For each hometown, how many teachers are there?",return hometowns ;return teachers in #1 ;return number of  #2 for each  #1,"[""SELECT['hometowns']"", ""PROJECT['teachers in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",dev
SPIDER_dev_395,List the most common hometown of teachers.,return hometowns ;return teachers from  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['hometowns']"", ""PROJECT['teachers from #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",dev
SPIDER_dev_396,What is the most commmon hometowns for teachers?,return teachers ;return hometowns of #1 ;return the number of #1 for each #2 ;return most commmon of #3,"[""SELECT['teachers']"", ""PROJECT['hometowns of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""SUPERLATIVE['max', '#2', '#3']""]","['select', 'project', 'group', 'superlative']",dev
SPIDER_dev_397,Show the hometowns shared by at least two teachers.,return hometowns ;return teachers from  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least two,"[""SELECT['hometowns']"", ""PROJECT['teachers from #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']""]","['select', 'project', 'group', 'comparative']",dev
SPIDER_dev_398,What are the towns from which at least two teachers come from?,return towns ;return teachers who  come from  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least two,"[""SELECT['towns']"", ""PROJECT['teachers who come from #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']""]","['select', 'project', 'group', 'comparative']",dev
SPIDER_dev_399,Show names of teachers and the courses they are arranged to teach.,"return teachers ;return courses #1 are  arranged to teach ;return #1 ,  #2","[""SELECT['teachers']"", ""PROJECT['courses #REF are arranged to teach', '#1']"", ""UNION['#1', '#2']""]","['select', 'project', 'union']",dev
SPIDER_dev_4,"What is the average, minimum, and maximum age of all singers from France?","return singers ;return #1 from  France ;return the  average ages of  #2 ;return the  minimum ages of  #2 ;return the  maximum ages of  #2 ;return #3 ,  #4 ,   #5","[""SELECT['singers']"", ""FILTER['#1', 'from France']"", ""PROJECT['ages of #REF', '#2']"", ""AGGREGATE['avg', '#3']"", ""AGGREGATE['min', '#3']"", ""AGGREGATE['max', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'filter', 'project', 'aggregate', 'aggregate', 'aggregate', 'union']",dev
SPIDER_dev_40,What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?,"return songs ;return titles of  #1 ;return #1 where #2 has  the  word 'Hey ;return singers of  #3 ;return name of  #4 ;return country of  origin of #4 ;return #5 ,  #6","[""SELECT['songs']"", ""PROJECT['titles of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'has the word Hey']"", ""PROJECT['singers of #REF', '#3']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['country of origin of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",dev
SPIDER_dev_400,What is the name of each teacher and what course they teach?,"return teachers ;return names of #1 ;return courses #1 teach ;return names of #3 ;return #2 ,  #4","[""SELECT['teachers']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['courses #REF teach', '#1']"", ""PROJECT['names of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'project', 'union']",dev
SPIDER_dev_401,Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.,"return teachers ;return names of  #1 ;return courses #1 are  arranged to teach ;return #2 ,  #3 ;return #4 sorted by #2 in alphabetical order","[""SELECT['teachers']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['courses #REF are arranged to teach', '#1']"", ""UNION['#2', '#3']"", ""SORT['#4', '#2', 'in alphabetical order']""]","['select', 'project', 'project', 'union', 'sort']",dev
SPIDER_dev_402,What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?,"return teachers ;return courses that  #1 teach ;return the   names of #1 ;return the   names of #2 ;return #3 ,  #4 ;return #5 sorted by #3 in ascending alphabetical order","[""SELECT['teachers']"", ""PROJECT['courses that #REF teach', '#1']"", ""PROJECT['the names of #REF', '#1']"", ""PROJECT['the names of #REF', '#2']"", ""UNION['#3', '#4']"", ""SORT['#5', '#3', 'in ascending alphabetical order']""]","['select', 'project', 'project', 'project', 'union', 'sort']",dev
SPIDER_dev_403,Show the name of the teacher for the math course.,return teachers ;return #1 for the math course ;return name of #2,"[""SELECT['teachers']"", ""FILTER['#1', 'for the math course']"", ""PROJECT['name of #REF', '#2']""]","['select', 'filter', 'project']",dev
SPIDER_dev_404,What are the names of the people who teach math courses?,return people ;return #1 who  teach math courses ;return the  names of  #2,"[""SELECT['people']"", ""FILTER['#1', 'who teach math courses']"", ""PROJECT['the names of #REF', '#2']""]","['select', 'filter', 'project']",dev
SPIDER_dev_405,Show names of teachers and the number of courses they teach.,"return teachers ;return names of  #1 ;return courses #1 teach ;return number of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['teachers']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['courses #REF teach', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",dev
SPIDER_dev_406,What are the names of the teachers and how many courses do they teach?,"return teachers ;return names of #1 ;return courses #1 teach ;return number of  #3 for each #1 ;return #2 ,  #4","[""SELECT['teachers']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['courses #REF teach', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",dev
SPIDER_dev_407,Show names of teachers that teach at least two courses.,return teachers ;return courses that  #1 teach ;return number of  #2 for each  #1 ;return #1 where #3 is  at least two ;return names of  #4,"[""SELECT['teachers']"", ""PROJECT['courses that #REF teach', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",dev
SPIDER_dev_408,What are the names of the teachers who teach at least two courses?,return teachers ;return courses #1 teach ;return number of  #2 for each  #1 ;return #1 where #3 is  at least two ;return names of  #4,"[""SELECT['teachers']"", ""PROJECT['courses #REF teach', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",dev
SPIDER_dev_409,List the names of teachers who have not been arranged to teach courses.,return teachers ;return #1 who  have  been arranged to teach courses ;return #1 besides  #2 ;return names of  #3,"[""SELECT['teachers']"", ""FILTER['#1', 'who have been arranged to teach courses']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",dev
SPIDER_dev_41,Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.,"return stadiums ;return years concerts happened in #1 ;return #1 where #2 is  2014 ;return #1 where #2 is  2015 ;return #1 of  both #3 and  #4 ;return names of  #5 ;return locations of  #5 ;return #6 ,  #7","[""SELECT['stadiums']"", ""PROJECT['years concerts happened in #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 2014']"", ""COMPARATIVE['#1', '#2', 'is 2015']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['names of #REF', '#5']"", ""PROJECT['locations of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project', 'project', 'union']",dev
SPIDER_dev_410,What are the names of the teachers whose courses have not been arranged?,return courses ;return #1 that  have been arranged ;return #1 besides #2 ;return the  teachers of #3 ;return the  names of #4,"[""SELECT['courses']"", ""FILTER['#1', 'that have been arranged']"", ""DISCARD['#1', '#2']"", ""PROJECT['the teachers of #REF', '#3']"", ""PROJECT['the names of #REF', '#4']""]","['select', 'filter', 'discard', 'project', 'project']",dev
SPIDER_dev_411,How many visitors below age 30 are there?,return visitors ;return ages of  #1 ;return #1 where #2 is  below 30 ;return number of  #3,"[""SELECT['visitors']"", ""PROJECT['ages of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is below 30']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",dev
SPIDER_dev_412,"Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",return visitors ;return membership levels of  #1 ;return #1 where #2 is  higher than 4 ;return names of  #3 ;return membership levels of  #3 ;return #4 sorted by #5 from  high to low,"[""SELECT['visitors']"", ""PROJECT['membership levels of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 4']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['membership levels of #REF', '#3']"", ""SORT['#4', '#5', 'from high to low']""]","['select', 'project', 'comparative', 'project', 'project', 'sort']",dev
SPIDER_dev_413,What is the average age of the visitors whose membership level is not higher than 4?,return visitors ;return membership level of #1 ;return #1 where #2 is  at most 4 ;return ages of #3 ;return the  average of #4,"[""SELECT['visitors']"", ""PROJECT['membership level of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at most 4']"", ""PROJECT['ages of #REF', '#3']"", ""AGGREGATE['avg', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",dev
SPIDER_dev_414,"Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.","return visitors ;return membership  levels of  #1 ;return #1 where #2 is  higher than 4 ;return names of  #3 ;return membership  levels of  #3 ;return ages of  #3 ;return #4 ,  #5 ;return #7 sorted by #6 from  old to young","[""SELECT['visitors']"", ""PROJECT['membership levels of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 4']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['membership levels of #REF', '#3']"", ""PROJECT['ages of #REF', '#3']"", ""UNION['#4', '#5']"", ""SORT['#7', '#6', 'from old to young']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union', 'sort']",dev
SPIDER_dev_415,Find the id and name of the museum that has the most staff members?,"return museums ;return staff members of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return name of  #4 ;return id of  #4 ;return #6 ,  #5","[""SELECT['museums']"", ""PROJECT['staff members of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['id of #REF', '#4']"", ""UNION['#6', '#5']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",dev
SPIDER_dev_416,Find the average number of staff working for the museums that were open before 2009.,return museums ;return #1 that  were open before 2009 ;return staff working for #2 ;return average of #3,"[""SELECT['museums']"", ""FILTER['#1', 'that were open before 2009']"", ""PROJECT['staff working for #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'filter', 'project', 'aggregate']",dev
SPIDER_dev_417,What are the opening year and staff number of the museum named Plaza Museum?,"return museums ;return #1 named Plaza Museum ;return opening year of  #2 ;return staff of  #2 ;return number of  #4 ;return #3 ,  #5","[""SELECT['museums']"", ""FILTER['#1', 'named Plaza Museum']"", ""PROJECT['opening year of #REF', '#2']"", ""PROJECT['staff of #REF', '#2']"", ""AGGREGATE['count', '#4']"", ""UNION['#3', '#5']""]","['select', 'filter', 'project', 'project', 'aggregate', 'union']",dev
SPIDER_dev_418,find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.,return museums  ;return #1 that  opened after 2010 ;return number of staff  for each #2 ;return minimum of #3 ;return staff  of #1 ;return number of #5 for each #1 ;return #1 where #6 larger than #4 ;return names of #7,"[""SELECT['museums']"", ""FILTER['#1', 'that opened after 2010']"", ""PROJECT['staff', '#2']"", ""GROUP['count', '#3', '#2']"", ""AGGREGATE['min', '#4']"", ""PROJECT['staff of #REF', '#1']"", ""GROUP['count', '#6', '#1']"", ""COMPARATIVE['#1', '#7', 'larger than #5']"", ""PROJECT['names of #REF', '#8']""]","['select', 'filter', 'project', 'group', 'aggregate', 'project', 'group', 'comparative', 'project']",dev
SPIDER_dev_419,"find the id, name and age for visitors who visited some museums more than once.","return visitors ;return museums #1 visited ;return number of  #2 for each #1 ;return #1 where #3 is  more than  one ;return the  ids of #4 ;return the  names of #4 ;return the  ages of #4 ;return #5 ,  #6 ,   #7","[""SELECT['visitors']"", ""PROJECT['museums #REF visited', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than one']"", ""PROJECT['the ids of #REF', '#4']"", ""PROJECT['the names of #REF', '#4']"", ""PROJECT['the ages of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'project', 'union']",dev
SPIDER_dev_42,What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?,"return stadiums ;return #1 that  had concerts in 2014 ;return #1 that  had concerts in 2015 ;return the names of #1 ;return #4 of  both #2 and  #3 ;return the locations of #1 ;return #6 of both #2 and  #3 ;return #5 ,  #7","[""SELECT['stadiums']"", ""FILTER['#1', 'that had concerts in 2014']"", ""FILTER['#1', 'that had concerts in 2015']"", ""PROJECT['the names of #REF', '#1']"", ""INTERSECTION['#4', '#2', '#3']"", ""PROJECT['the locations of #REF', '#1']"", ""INTERSECTION['#6', '#2', '#3']"", ""UNION['#5', '#7']""]","['select', 'filter', 'filter', 'project', 'intersection', 'project', 'intersection', 'union']",dev
SPIDER_dev_420,"What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?","return visitors ;return museum tickets of #1 ;return monies spent on #2 ;return the  sum of #3 for each #1 ;return #1 where #4 is  the  largest ;return the  ids of #5 ;return the  names of #5 ;return the  membership levels of #5 ;return #6 ,  #7 ,   #8","[""SELECT['visitors']"", ""PROJECT['museum tickets of #REF', '#1']"", ""PROJECT['monies spent on #REF', '#2']"", ""GROUP['sum', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is the largest']"", ""PROJECT['the ids of #REF', '#5']"", ""PROJECT['the names of #REF', '#5']"", ""PROJECT['the membership levels of #REF', '#5']"", ""UNION['#6', '#7', '#8']""]","['select', 'project', 'project', 'group', 'comparative', 'project', 'project', 'project', 'union']",dev
SPIDER_dev_421,What are the id and name of the museum visited most times?,"return museums ;retrun visits of #1 ;return number of #2 for #1 ;return #1 where #3 is  highest ;return id of  #4 ;return name of  #4 ;return #5 ,  #6","[""SELECT['museums']"", ""PROJECT['visits of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['id of #REF', '#4']"", ""PROJECT['name of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",dev
SPIDER_dev_422,What is the name of the museum that had no visitor yet?,return museums ;return #1 that  had no visitor yet ;return name of #2,"[""SELECT['museums']"", ""FILTER['#1', 'that had no visitor yet']"", ""PROJECT['name of #REF', '#2']""]","['select', 'filter', 'project']",dev
SPIDER_dev_423,Find the name and age of the visitor who bought the most tickets at once.,"return visitors ;return visits of #1 ;return tickets bought at #2 ;return number of  #3 for each  #2 ;return #1 where #4 is  highest ;return name of  #5 ;return age of  #5 ;return #6 ,  #7","[""SELECT['visitors']"", ""PROJECT['visits of #REF', '#1']"", ""PROJECT['tickets bought at #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""SUPERLATIVE['max', '#1', '#4']"", ""PROJECT['name of #REF', '#5']"", ""PROJECT['age of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'project', 'group', 'superlative', 'project', 'project', 'union']",dev
SPIDER_dev_424,What are the average and maximum number of tickets bought in all visits?,"return visits ;return tickets bought in #1 ;return number of  #2 ;return average of  #3 ;return maximum of  #3 ;return #4 ,  #5","[""SELECT['visits']"", ""PROJECT['tickets bought in #REF', '#1']"", ""AGGREGATE['count', '#2']"", ""AGGREGATE['avg', '#3']"", ""AGGREGATE['max', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'aggregate', 'aggregate', 'aggregate', 'union']",dev
SPIDER_dev_425,What is the total ticket expense of the visitors whose membership level is 1?,return visitors ;return #1 whose membership level is  1 ;return ticket expense of  #2 ;return the total of #3,"[""SELECT['visitors']"", ""FILTER['#1', 'whose membership level is 1']"", ""PROJECT['ticket expense of #REF', '#2']"", ""AGGREGATE['sum', '#3']""]","['select', 'filter', 'project', 'aggregate']",dev
SPIDER_dev_426,What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?,return museums ;return #1 that opened  before 2009 ;return #1 that opened  after 2011 ;return the  visitor of #1 ;return #4 of both #2 and  #3 ;return name of #4,"[""SELECT['museums']"", ""FILTER['#1', 'that opened before 2009']"", ""FILTER['#1', 'that opened after 2011']"", ""PROJECT['the visitor of #REF', '#1']"", ""INTERSECTION['#4', '#2', '#3']"", ""PROJECT['name of #REF', '#5']""]","['select', 'filter', 'filter', 'project', 'intersection', 'project']",dev
SPIDER_dev_427,Find the number of visitors who did not visit any museum opened after 2010., return visitors ; return museums of #1 ;return #1 such that #2 opened after 2010 ;return #1 besides #3 ;return number of  #4,"[""SELECT['visitors']"", ""PROJECT['museums of #ref', '#1']"", ""COMPARATIVE['#1', '#2', 'opened after 2010']"", ""DISCARD['#1', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'comparative', 'discard', 'aggregate']",dev
SPIDER_dev_428,How many museums were opened after 2013 or before 2008?,return museums ;return #1 opened after 2013 ;return #1 opened before 2008 ;return #2 or  #3 ;return number of  #4,"[""SELECT['museums']"", ""FILTER['#1', 'opened after 2013']"", ""FILTER['#1', 'opened before 2008']"", ""UNION['#2', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'filter', 'filter', 'union', 'aggregate']",dev
SPIDER_dev_429,Find the total number of players.,return players ;return number of  #1,"[""SELECT['players']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",dev
SPIDER_dev_43,Find the number of concerts happened in the stadium with the highest capacity.,return stadiums ;return capacities of  #1 ;return #1 where #2 is  highest ;return concerts that  happened in #3 ;return number of  #4,"[""SELECT['stadiums']"", ""PROJECT['capacities of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['concerts that happened in #REF', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'superlative', 'project', 'aggregate']",dev
SPIDER_dev_431,Find the total number of matches.,return matches ;return number of  #1,"[""SELECT['matches']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",dev
SPIDER_dev_432,Count the number of matches.,return matches ;return number of  #1,"[""SELECT['matches']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",dev
SPIDER_dev_433,List the first name and birth date of all players from the country with code USA.,"return players ;return countries of  #1 ;return code of  #2 ;return #1 where #3 is  USA ;return first names of  #4 ;return birth dates of  #4 ;return #5 ,  #6","[""SELECT['players']"", ""PROJECT['countries of #REF', '#1']"", ""PROJECT['code of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is USA']"", ""PROJECT['first names of #REF', '#4']"", ""PROJECT['birth dates of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'project', 'comparative', 'project', 'project', 'union']",dev
SPIDER_dev_434,What are the first names and birth dates of players from the USA?,"return players ;return #1 from  the  USA ;return first names of  #2 ;return birth dates of  #2 ;return #3 ,  #4","[""SELECT['players']"", ""FILTER['#1', 'from the USA']"", ""PROJECT['first names of #REF', '#2']"", ""PROJECT['birth dates of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",dev
SPIDER_dev_435,Find the average age of losers and winners of all matches.,"return matches ;return winners of  #1 ;return losers of  #1 ;return ages of  #2 ;return ages of  #3 ;return #4 ,  #5 ;return average of  #6","[""SELECT['matches']"", ""PROJECT['winners of #REF', '#1']"", ""PROJECT['losers of #REF', '#1']"", ""PROJECT['ages of #REF', '#2']"", ""PROJECT['ages of #REF', '#3']"", ""UNION['#4', '#5']"", ""AGGREGATE['avg', '#6']""]","['select', 'project', 'project', 'project', 'project', 'union', 'aggregate']",dev
SPIDER_dev_436,What are the average ages of losers and winners across matches?,"return matches ;return losers of  #1 ;return winners of  #1 ;return ages of  #2 ;return ages of  #3 ;return average of  #4 ;return average of  #5 ;return #6 ,  #7","[""SELECT['matches']"", ""PROJECT['losers of #REF', '#1']"", ""PROJECT['winners of #REF', '#1']"", ""PROJECT['ages of #REF', '#2']"", ""PROJECT['ages of #REF', '#3']"", ""AGGREGATE['avg', '#4']"", ""AGGREGATE['avg', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'project', 'project', 'project', 'aggregate', 'aggregate', 'union']",dev
SPIDER_dev_437,Find the average rank of winners in all matches.,return matches ;return winners in #1 ;return ranks of  #2 ;return average of  #3,"[""SELECT['matches']"", ""PROJECT['winners in #REF', '#1']"", ""PROJECT['ranks of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'project', 'project', 'aggregate']",dev
SPIDER_dev_438,What is the average rank for winners in all matches?,return winners ;return rank of  #1 in all matches ;return average of  #2,"[""SELECT['winners']"", ""PROJECT['rank of #REF in all matches', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",dev
SPIDER_dev_439,Find the highest rank of losers in all matches.,return matches ;return losers of  #1 ;return ranks of  #2 ;return the  highest #3,"[""SELECT['matches']"", ""PROJECT['losers of #REF', '#1']"", ""PROJECT['ranks of #REF', '#2']"", ""AGGREGATE['min', '#3']""]","['select', 'project', 'project', 'aggregate']",dev
SPIDER_dev_44,What are the number of concerts that occurred in the stadium with the largest capacity?,return stadiums ;return capacities of #1 ;return #1 where #2 is highest ;return concerts that occurred in  #3 ;return number of  #4,"[""SELECT['stadiums']"", ""PROJECT['capacities of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['concerts that occurred in #REF', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'superlative', 'project', 'aggregate']",dev
SPIDER_dev_440,What is the best rank of losers across all matches?,return matches ;return losers of  #1 ;return ranks of  #2 ;return the  best #3,"[""SELECT['matches']"", ""PROJECT['losers of #REF', '#1']"", ""PROJECT['ranks of #REF', '#2']"", ""AGGREGATE['min', '#3']""]","['select', 'project', 'project', 'aggregate']",dev
SPIDER_dev_441,find the number of distinct country codes of all players.,return players ;return country codes of  #1 ;return distinct #2 ;return number of  #3,"[""SELECT['players']"", ""PROJECT['country codes of #REF', '#1']"", ""PROJECT['distinct #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",dev
SPIDER_dev_442,How many distinct countries do players come from?,return players ;return distinct countries #1 come from  ;return number of  #2,"[""SELECT['players']"", ""PROJECT['distinct countries #REF come from', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",dev
SPIDER_dev_443,Find the number of distinct name of losers.,return losers ;return distinct names of  #1 ;return number of  #2,"[""SELECT['losers']"", ""PROJECT['distinct names of #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",dev
SPIDER_dev_444,How many different loser names are there?,return loser names ;return number of  different #1,"[""SELECT['different loser names']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",dev
SPIDER_dev_445,Find the name of tourney that has more than 10 matches.,return tourneys ;return matches of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than 10 ;return name of  #4,"[""SELECT['tourneys']"", ""PROJECT['matches of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 10']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",dev
SPIDER_dev_446,What are the names of tournaments that have more than 10 matches?,return tournaments ;return matches of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  higher than 10 ;return names of #4,"[""SELECT['tournaments']"", ""PROJECT['matches of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 10']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",dev
SPIDER_dev_447,List the names of all winners who played in both 2013 and 2016.,return winners ;return #1 who  played in 2013 ;return #1 who  played in 2016 ;return #1 in both #2 and  #3 ;return names of  #4,"[""SELECT['winners']"", ""FILTER['#1', 'who played in 2013']"", ""FILTER['#1', 'who played in 2016']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'filter', 'intersection', 'project']",dev
SPIDER_dev_448,What are the names of players who won in both 2013 and 2016?,return players ;return #1 who  won in 2013 ;return #1 who  won in 2016 ;return #1 in both #2 and  #3 ;return names of  #4,"[""SELECT['players']"", ""FILTER['#1', 'who won in 2013']"", ""FILTER['#1', 'who won in 2016']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'filter', 'intersection', 'project']",dev
SPIDER_dev_449,List the number of all matches who played in years of 2013 or 2016.,"return matches ;return #1 played in 2013 ;return #1 played in 2016 ;return #2 ,  #3 ;return number of  #4","[""SELECT['matches']"", ""FILTER['#1', 'played in 2013']"", ""FILTER['#1', 'played in 2016']"", ""UNION['#2', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'filter', 'filter', 'union', 'aggregate']",dev
SPIDER_dev_45,Find the number of pets whose weight is heavier than 10.,return pets ;return weights of  #1 ;return #1 where #2 is  higher than 10 ;return number of  #3,"[""SELECT['pets']"", ""PROJECT['weights of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 10']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",dev
SPIDER_dev_450,How many matches were played in 2013 or 2016?,return matches ;return #1 played in 2013 ;return #1 played in 2016 ;return #2 or  #3 ;return number of  #4,"[""SELECT['matches']"", ""FILTER['#1', 'played in 2013']"", ""FILTER['#1', 'played in 2016']"", ""UNION['#2', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'filter', 'filter', 'union', 'aggregate']",dev
SPIDER_dev_451,What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?,"return players ;return tourneys #1 won ;return #1 where #2 is  WTA Championships ;return #1 where #2 is  Australian Open ;return #1 of  both #3 and  #4 ;return country codes of  #5 ;return first names of  #5 ;return #6 ,  #7","[""SELECT['players']"", ""PROJECT['tourneys #REF won', '#1']"", ""COMPARATIVE['#1', '#2', 'is WTA Championships']"", ""COMPARATIVE['#1', '#2', 'is Australian Open']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['country codes of #REF', '#5']"", ""PROJECT['first names of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project', 'project', 'union']",dev
SPIDER_dev_452,What are the first names and country codes for players who won both the WTA Championships and the Australian Open?,"return players ;return #1 who  won WTA Championships ;return #1 who  won Australian Open ;return #1 in both #2 and  #3 ;return first names of  #4 ;return country codes for #4 ;return #5 ,  #6","[""SELECT['players']"", ""FILTER['#1', 'who won WTA Championships']"", ""FILTER['#1', 'who won Australian Open']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['first names of #REF', '#4']"", ""PROJECT['country codes for #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'filter', 'filter', 'intersection', 'project', 'project', 'union']",dev
SPIDER_dev_453,Find the first name and country code of the oldest player.,"return players ;return age of #1 ;return #1 where #2 is the oldest ;return first name of #3 ;return country code of  #3 ;return #4 ,  #5","[""SELECT['players']"", ""PROJECT['age of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'the oldest']"", ""PROJECT['first name of #REF', '#3']"", ""PROJECT['country code of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",dev
SPIDER_dev_454,What is the first name and country code of the oldest player?,"return players ;return the age of #1 ;return #1 such that #2 is the oldest ;return the first name of #3 ;return the  country code of #3 ;return #4 ,  #5","[""SELECT['players']"", ""PROJECT['age of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'the oldest']"", ""PROJECT['the first name of #REF', '#3']"", ""PROJECT['the country code of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",dev
SPIDER_dev_455,List the first and last name of all players in the order of birth date.,"return players ;return first names of  #1 ;return last names of  #1 ;return birth dates of  #1 ;return #2 ,  #3 ;return #5 sorted by #4","[""SELECT['players']"", ""PROJECT['first names of #REF', '#1']"", ""PROJECT['last names of #REF', '#1']"", ""PROJECT['birth dates of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#5', '#4']""]","['select', 'project', 'project', 'project', 'union', 'sort']",dev
SPIDER_dev_456,"What are the full names of all players, sorted by birth date?",return players ;return full names of  #1 ;return birth dates of  #1 ;return #2 sorted by #3,"[""SELECT['players']"", ""PROJECT['full names of #REF', '#1']"", ""PROJECT['birth dates of #REF', '#1']"", ""SORT['#2', '#3']""]","['select', 'project', 'project', 'sort']",dev
SPIDER_dev_457,List the first and last name of all players who are left / L hand in the order of birth date.,"return players ;return hand of #1 ;return #1 where #2 is left / L ;return first names of #3 ;return last names of #3 ;return birth dates of #3 ;return #4 ,  #5 ;return #7 sorted by #6","[""SELECT['players']"", ""PROJECT['hand of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is left / L']"", ""PROJECT['first names of #REF', '#3']"", ""PROJECT['last names of #REF', '#3']"", ""PROJECT['birth dates of #REF', '#3']"", ""UNION['#4', '#5']"", ""SORT['#7', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union', 'sort']",dev
SPIDER_dev_458,"What are the full names of all left handed players, in order of birth date?",return players ;return #1 that  are  left handed ;return full names of  #2 ;return birth dates of  #2 ;return #3 sorted by #4,"[""SELECT['players']"", ""FILTER['#1', 'that are left handed']"", ""PROJECT['full names of #REF', '#2']"", ""PROJECT['birth dates of #REF', '#2']"", ""SORT['#3', '#4']""]","['select', 'filter', 'project', 'project', 'sort']",dev
SPIDER_dev_459,Find the first name and country code of the player who did the most number of tours.,"return players ;return tours of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return first name of  #4 ;return country code of  #4 ;return #5 ,  #6","[""SELECT['players']"", ""PROJECT['tours of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['first name of #REF', '#4']"", ""PROJECT['country code of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",dev
SPIDER_dev_46,How many pets have a greater weight than 10?,return pets ;return weights of  #1 ;return #1 where #2 is  greater than 10 ;return number of  #3,"[""SELECT['pets']"", ""PROJECT['weights of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is greater than 10']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",dev
SPIDER_dev_460,What is the first name and country code of the player with the most tours?,"return players ;return tours of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest ;return first name of #4 ;return country code of #4 ;return #5 ,  #6","[""SELECT['players']"", ""PROJECT['tours of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['first name of #REF', '#4']"", ""PROJECT['country code of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",dev
SPIDER_dev_461,Find the year that has the most number of matches.,return years ;return matches in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['years']"", ""PROJECT['matches in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",dev
SPIDER_dev_462,Which year had the most matches?,return matches ;return year of  #1 ;return number of  #1 for each  #2 ;return #2 where #3 is  highest,"[""SELECT['matches']"", ""PROJECT['year of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""SUPERLATIVE['max', '#2', '#3']""]","['select', 'project', 'group', 'superlative']",dev
SPIDER_dev_463,Find the name and rank points of the winner who won the most times.,"return winners ;return times #1 won ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return name of  #4 ;return rank points of  #4 ;return #5 ,  #6","[""SELECT['winners']"", ""PROJECT['times #REF won', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['rank points of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",dev
SPIDER_dev_464,"What is the name of the winner who has won the most matches, and how many rank points does this player have?","return winners ;return the  number of  matches won for each  #1 ;return #1 where #2 is  highest ;return the  name of  #3 ;return the  number of  rank points #3 has  ;return #4 ,  #5","[""SELECT['winners']"", ""PROJECT['won', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['the name of #REF', '#4']"", ""PROJECT['rank points #REF has', '#4']"", ""GROUP['count', '#6', '#4']"", ""UNION['#5', '#7']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'group', 'union']",dev
SPIDER_dev_465,Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.,return winners ;return tourneys #1 participated in ;return #1 where #2 is  Australian Open ;return rank points of  #3 ;return #3 where #4 is  highest ;return name of  #5,"[""SELECT['winners']"", ""PROJECT['tourneys #REF participated in', '#1']"", ""COMPARATIVE['#1', '#2', 'is Australian Open']"", ""PROJECT['rank points of #REF', '#3']"", ""SUPERLATIVE['max', '#3', '#4']"", ""PROJECT['name of #REF', '#5']""]","['select', 'project', 'comparative', 'project', 'superlative', 'project']",dev
SPIDER_dev_466,What is the name of the winner with the most rank points who participated in the Australian Open tournament?,return winners ;return #1 who participated in the   Australian Open tournament ;return rank points of #2 ;return #2 where #3 is  the   highest ;return the   name of #4,"[""SELECT['winners']"", ""FILTER['#1', 'who participated in the Australian Open tournament']"", ""PROJECT['rank points of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is the highest']"", ""PROJECT['the name of #REF', '#4']""]","['select', 'filter', 'project', 'comparative', 'project']",dev
SPIDER_dev_467,find the names of loser and winner who played in the match with greatest number of minutes.,"return match ;return minutes of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return winner of  #4 ;return name of  #5 ;return loser of  #4 ;return name of  #7 ;return #6 ,  #8","[""SELECT['match']"", ""PROJECT['minutes of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['winner of #REF', '#4']"", ""PROJECT['name of #REF', '#5']"", ""PROJECT['loser of #REF', '#4']"", ""PROJECT['name of #REF', '#7']"", ""UNION['#6', '#8']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'project', 'project', 'union']",dev
SPIDER_dev_468,What are the names of the winner and loser who played in the longest match?,"return matches ;return #1 that  was the   longest ;return winner of #2 ;return name of #3 ;return loser of #2 ;return name of #5 ;return #4 ,  #6","[""SELECT['matches']"", ""FILTER['#1', 'that was the longest']"", ""PROJECT['winner of #REF', '#2']"", ""PROJECT['name of #REF', '#3']"", ""PROJECT['loser of #REF', '#2']"", ""PROJECT['name of #REF', '#5']"", ""UNION['#4', '#6']""]","['select', 'filter', 'project', 'project', 'project', 'project', 'union']",dev
SPIDER_dev_469,Find the average ranking for each player and their first name.,"return players ;return rankings of  #1 ;return average of  #2 for each  #1 ;return first names of  #1 ;return #3 ,  #4","[""SELECT['players']"", ""PROJECT['rankings of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""PROJECT['first names of #REF', '#1']"", ""UNION['#3', '#4']""]","['select', 'project', 'group', 'project', 'union']",dev
SPIDER_dev_47,Find the weight of the youngest dog.,return dogs ;return youngness of  #1 ;return #1 where #2 is  youngest ;return weight of  #3,"[""SELECT['dogs']"", ""PROJECT['age of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is youngest']"", ""PROJECT['weight of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",dev
SPIDER_dev_470,"What are the first names of all players, and their average rankings?","return players ;return first names of  #1 ;return rankings of  #1 ;return average of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['players']"", ""PROJECT['first names of #REF', '#1']"", ""PROJECT['rankings of #REF', '#1']"", ""GROUP['avg', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",dev
SPIDER_dev_471,Find the total ranking points for each player and their first name.,"return players ;return ranking points of  #1 ;return sum of  #2 for each  #1 ;return first names of  #1 ;return #3 ,  #4","[""SELECT['players']"", ""PROJECT['ranking points of #REF', '#1']"", ""GROUP['sum', '#2', '#1']"", ""PROJECT['first names of #REF', '#1']"", ""UNION['#3', '#4']""]","['select', 'project', 'group', 'project', 'union']",dev
SPIDER_dev_472,"What are the first names of all players, and their total ranking points?","return players ;return the  first names of  all #1 ;return the  total ranking of  all #1 ;return #2 ,  #3","[""SELECT['players']"", ""PROJECT['the first names of all #REF', '#1']"", ""PROJECT['ranking of all #REF', '#1']"", ""GROUP['sum', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",dev
SPIDER_dev_473,find the number of players for each country.,return players ;return countries of #1 ;return  number of #1 for each  #2,"[""SELECT['players']"", ""PROJECT['countries of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""UNION['#2', '#3']""]","['select', 'project', 'group', 'union']",dev
SPIDER_dev_474,How many players are from each country?,return countries ;return players from  #1 ;return number of  #2 for each  #1,"[""SELECT['countries']"", ""PROJECT['players from #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",dev
SPIDER_dev_475,find the code of the country where has the greatest number of players.,return countries ;return players of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  greatest ;return code of  #4,"[""SELECT['countries']"", ""PROJECT['players of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is greatest']"", ""PROJECT['code of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",dev
SPIDER_dev_476,What is the code of the country with the most players?,return countries ;return the  number of  players for each  #1 ;return #1 where #2 is  the  highest ;return the  code of  #3,"[""SELECT['countries']"", ""PROJECT['players', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']"", ""PROJECT['the code of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",dev
SPIDER_dev_477,Find the codes of countries that have more than 50 players.,return countries ;return players of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than 50 ;return codes of  #4,"[""SELECT['countries']"", ""PROJECT['players of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 50']"", ""PROJECT['codes of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",dev
SPIDER_dev_478,What are the codes of countries with more than 50 players?,return countries ;return players of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than 50 ;return codes of  #4,"[""SELECT['countries']"", ""PROJECT['players of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 50']"", ""PROJECT['codes of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",dev
SPIDER_dev_479,Find the total number of tours for each ranking date.,return ranking dates ;return tours on  #1 ;return number of  #2 for each  #1,"[""SELECT['ranking dates']"", ""PROJECT['tours on #REF', '#1']"", ""GROUP['sum', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",dev
SPIDER_dev_48,How much does the youngest dog weigh?,return dogs ;return the age of #1 ;return #1 with the smallest #2 ;return how much #3 weigh,"[""SELECT['dogs']"", ""PROJECT['age of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""PROJECT['how much #REF weigh', '#3']""]","['select', 'project', 'superlative', 'project']",dev
SPIDER_dev_480,How many total tours were there for each ranking date?,return ranking dates ;return tours of  #1 ;return number of  #2 for each  #1,"[""SELECT['ranking dates']"", ""PROJECT['tours of #REF', '#1']"", ""GROUP['sum', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",dev
SPIDER_dev_481,Find the number of matches happened in each year.,return years ;return matches in #1 ;return number of  #2 for each  #1,"[""SELECT['years']"", ""PROJECT['matches in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",dev
SPIDER_dev_482,How many matches were played in each year?,return years ;return matches in #1 ;return number of  #2 for each  #1,"[""SELECT['years']"", ""PROJECT['matches in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",dev
SPIDER_dev_483,Find the name and rank of the 3 youngest winners across all matches.,"return matches ;return winners of #1 ;return the 3 youngest #2 ;return names of #3 ;return ranks of #3 ;return #4 , #5","[""SELECT['matches']"", ""PROJECT['winners of #REF', '#1']"", ""PROJECT['the 3 youngest #REF', '#2']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['ranks of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union']",dev
SPIDER_dev_484,What are the names and ranks of the three youngest winners across all matches?,"return matches ;return winners of #1 ;return youngness of #2 ;return #2 where #3 is highest ;return #2 besides  #4 ;return #4 where #3 is highest ;return #5 besides  #6 ;return #7 where #3 is highest ;return #4 ,  #6 ,   #8 ;return names of #9 ;return ranks of #9 ;return #10 ,  #11","[""SELECT['matches']"", ""PROJECT['winners of #REF', '#1']"", ""PROJECT['youngness of #REF', '#2']"", ""SUPERLATIVE['max', '#2', '#3']"", ""DISCARD['#2', '#4']"", ""SUPERLATIVE['max', '#4', '#3']"", ""DISCARD['#5', '#6']"", ""SUPERLATIVE['max', '#7', '#3']"", ""UNION['#4', '#6', '#8']"", ""PROJECT['names of #REF', '#9']"", ""PROJECT['ranks of #REF', '#9']"", ""UNION['#10', '#11']""]","['select', 'project', 'project', 'superlative', 'discard', 'superlative', 'discard', 'superlative', 'union', 'project', 'project', 'union']",dev
SPIDER_dev_485,How many different winners both participated in the WTA Championships and were left handed?,return different winners ;return #1 who  participated in the  WTA Championships ;return #1 who  were left handed ;return #1 in both #2 and  #3 ;return number of #4,"[""SELECT['different winners']"", ""FILTER['#1', 'who participated in the WTA Championships']"", ""FILTER['#1', 'who were left handed']"", ""INTERSECTION['#1', '#2', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'filter', 'filter', 'intersection', 'aggregate']",dev
SPIDER_dev_486,Find the number of left handed winners who participated in the WTA Championships.,return winners ;return #1 who  are  left handed ;return #2 who  participated in the  WTA Championships ;return number of  #3,"[""SELECT['winners']"", ""FILTER['#1', 'who are left handed']"", ""FILTER['#2', 'who participated in the WTA Championships']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'filter', 'aggregate']",dev
SPIDER_dev_487,"Find the first name, country code and birth date of the winner who has the highest rank points in all matches.","return winners ;return matches of  #1 ;return rank points in #2 ;return #1 where #3 is  highest ;return first name of  #4 ;return country of  #4 ;return code of  #5 ;return birth date of  #4 ;return #5 ,  #7 ,   #8","[""SELECT['winners']"", ""PROJECT['matches of #REF', '#1']"", ""PROJECT['rank points in #REF', '#2']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['first name of #REF', '#4']"", ""PROJECT['country of #REF', '#4']"", ""PROJECT['code of #REF', '#5']"", ""PROJECT['birth date of #REF', '#4']"", ""UNION['#5', '#7', '#8']""]","['select', 'project', 'project', 'superlative', 'project', 'project', 'project', 'project', 'union']",dev
SPIDER_dev_488,"What is the first name, country code, and birth date of the player with the most winner rank points across all matches?","return matches ;return players of #1 ;return winner rank points of #2 ;return sum of #3 for each #2 ;return #2 where #4 is highest ;return first name of #5 ;return country code of #5 ;return births date of #5 ;return #6 ,  #7 ,   #8","[""SELECT['matches']"", ""PROJECT['players of #REF', '#1']"", ""PROJECT['winner rank points of #REF', '#2']"", ""GROUP['sum', '#3', '#2']"", ""SUPERLATIVE['max', '#2', '#4']"", ""PROJECT['first name of #REF', '#5']"", ""PROJECT['country code of #REF', '#5']"", ""PROJECT['births date of #REF', '#5']"", ""UNION['#6', '#7', '#8']""]","['select', 'project', 'project', 'group', 'superlative', 'project', 'project', 'project', 'union']",dev
SPIDER_dev_489,Find the number of players for each hand type.,return hand types ;return players of  #1 ;return number of  #2 for each  #1,"[""SELECT['hand types']"", ""PROJECT['players of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",dev
SPIDER_dev_49,Find the maximum weight for each type of pet. List the maximum weight and pet type.,"return pets ;return types of  pets ;return weights of  #2 ;return maximum  of  #3 for each  #2 ;return #4 ,  #2","[""SELECT['pets']"", ""SELECT['types of pets']"", ""PROJECT['weights of #REF', '#2']"", ""GROUP['max', '#3', '#2']"", ""UNION['#4', '#2']""]","['select', 'select', 'project', 'group', 'union']",dev
SPIDER_dev_490,How many players are there for each hand type?,return hand types ;return players of  #1 ;return number of  #2 for each  #1,"[""SELECT['hand types']"", ""PROJECT['players of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",dev
SPIDER_dev_491,How many ships ended up being 'Captured'?,return ships ;return #1 that  ended up being 'Captured ;return number of  #2,"[""SELECT['ships']"", ""FILTER['#1', 'that ended up being Captured']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",dev
SPIDER_dev_492,List the name and tonnage ordered by in descending alphabetical order for the names.,"return names ;return tonnages ;return #1 ,  #2 ;return #3 sorted by #1 in descending alphabetical order","[""SELECT['names']"", ""SELECT['tonnages']"", ""UNION['#1', '#2']"", ""SORT['#3', '#1', 'in descending alphabetical order']""]","['select', 'select', 'union', 'sort']",dev
SPIDER_dev_493,"List the name, date and result of each battle.","return battles ;return names of  #1 ;return dates of  #1 ;return results of  #1 ;return #2 ,  #3 ,   #4","[""SELECT['battles']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['dates of #REF', '#1']"", ""PROJECT['results of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",dev
SPIDER_dev_494,What is maximum and minimum death toll caused each time?,"return death tolls ;return the  maximum of #1 ;return the  minimum of #1 ;return #2 ,  #3","[""SELECT['death tolls']"", ""AGGREGATE['max', '#1']"", ""AGGREGATE['min', '#1']"", ""UNION['#2', '#3']""]","['select', 'aggregate', 'aggregate', 'union']",dev
SPIDER_dev_495,What is the average number of injuries caused each time?,return injuries ;return #1 caused each time ;return number of  #2 ;return average of #3 for each time,"[""SELECT['injuries']"", ""FILTER['#1', 'caused each time']"", ""AGGREGATE['count', '#2']"", ""PROJECT['time', '#3']"", ""GROUP['avg', '#3', '#4']"", ""UNION['#4', '#5']""]","['select', 'filter', 'aggregate', 'project', 'group', 'union']",dev
SPIDER_dev_496,What are the death and injury situations caused by the ship with tonnage 't'?,"return ships ;return tonnages of  #1 ;return #1 where #2 is  't ;return death situations caused by #3 ;return injury situations caused by #3 ;return #4 ,  #5","[""SELECT['ships']"", ""PROJECT['tonnages of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is t']"", ""PROJECT['death situations caused by #REF', '#3']"", ""PROJECT['injury situations caused by #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",dev
SPIDER_dev_497,What are the name and results of the battles when the bulgarian commander is not 'Boril',"return battles ;return bulgarian commanders of #1 ;return #1 where #2 is  not 'Boril ;return names of #3 ;return results of #3 ;return #4 ,  #5","[""SELECT['battles']"", ""PROJECT['bulgarian commanders of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not Boril']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['results of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",dev
SPIDER_dev_498,What are the different ids and names of the battles that lost any 'Brig' type shipes?,"return battles ;return #1 that  lost any 'Brig type shipes ;return the  different ids of  #2 ;return the  names of  #2 ;return #3 ,  #4","[""SELECT['battles']"", ""FILTER['#1', 'that lost any Brig type shipes']"", ""PROJECT['the different ids of #REF', '#2']"", ""PROJECT['the names of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",dev
SPIDER_dev_499,What are the ids and names of the battles that led to more than 10 people killed in total.,"return battles ;return the  total number of  people killed for each  #1 ;return #1 where #2 is  more than 10 ;return the  ids of  #3 ;return the  names of  #3 ;return #4 ,  #5","[""SELECT['battles']"", ""PROJECT['killed', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than 10']"", ""PROJECT['the ids of #REF', '#4']"", ""PROJECT['the names of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",dev
SPIDER_dev_5,"What is the average, minimum, and maximum age for all French singers?","return singers ;return #1 who are French ;return ages of #2 ;return average of #3 ;return minimum of #3 ;return maximum of #3 ;return #4 ,  #5 ,   #6","[""SELECT['singers']"", ""FILTER['#1', 'who are French']"", ""PROJECT['ages of #REF', '#2']"", ""AGGREGATE['avg', '#3']"", ""AGGREGATE['min', '#3']"", ""AGGREGATE['max', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'filter', 'project', 'aggregate', 'aggregate', 'aggregate', 'union']",dev
SPIDER_dev_50,List the maximum weight and type for each type of pet.,"return pets ;return types of  #1 ;return weights of  #2 ;return maximum of  #3 for each  #2 ;return #4 ,  #2","[""SELECT['pets']"", ""PROJECT['types of #REF', '#1']"", ""PROJECT['weights of #REF', '#2']"", ""GROUP['max', '#3', '#2']"", ""UNION['#4', '#2']""]","['select', 'project', 'project', 'group', 'union']",dev
SPIDER_dev_500,What is the ship id and name that caused most total injuries?,"return ships ;return injuries ;return the  number of  #2 for each  #1 ;return the  #1 where #3 is  the highest ;return the  ship id of  #4 ;return the  name of  #4 ;return #5 ,  #6","[""SELECT['ships']"", ""SELECT['injuries']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']"", ""PROJECT['the ship id of #REF', '#4']"", ""PROJECT['the name of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'select', 'group', 'comparative', 'project', 'project', 'union']",dev
SPIDER_dev_501,What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?,return battles ;return #1 between bulgarian commander 'Kaloyan ;return #2 between latin commander 'Baldwin ;return names of  #3,"[""SELECT['battles']"", ""FILTER['#1', 'between bulgarian commander Kaloyan']"", ""FILTER['#2', 'between latin commander Baldwin']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",dev
SPIDER_dev_502,How many different results are there for the battles?,return battles ;return different results of  #1 ;return number of  #2,"[""SELECT['battles']"", ""PROJECT['different results of #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",dev
SPIDER_dev_503,How many battles did not lose any ship with tonnage '225'?,return battles ;return ships lose of #1 ;return tonnages of #2 ;return #2 where #3 is equal to '225 ;return number of  #4 for each #1 ;return #1 where #5 is equal to zero ;return number of  #6,"[""SELECT['battles']"", ""PROJECT['ships lose of #REF', '#1']"", ""PROJECT['tonnages of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is equal to 225']"", ""GROUP['count', '#4', '#1']"", ""COMPARATIVE['#1', '#5', 'is equal to zero']"", ""AGGREGATE['count', '#6']""]","['select', 'project', 'project', 'comparative', 'group', 'comparative', 'aggregate']",dev
SPIDER_dev_504,List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta',"return battles ;return ships lost in #1 ;return names of  #2 ;return #1 where #3 is  'Lettice ;return #1 where #3 is  'HMS Atalanta ;return #1 of  both #4 and  #5 ;return name of  #6 ;return date of  #6 ;return #7 ,  #8","[""SELECT['battles']"", ""PROJECT['ships lost in #REF', '#1']"", ""PROJECT['names of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Lettice']"", ""COMPARATIVE['#1', '#3', 'is HMS Atalanta']"", ""INTERSECTION['#1', '#4', '#5']"", ""PROJECT['name of #REF', '#6']"", ""PROJECT['date of #REF', '#6']"", ""UNION['#7', '#8']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection', 'project', 'project', 'union']",dev
SPIDER_dev_505,"Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.","return the  battles ;return ships lost in  the  'English Channel of #1 ;return number of  #2 for each #1 ;return #1 where #3 is equal to zero ;return names of #4 ;return results of #4 ;return bulgarian commanders of #4 ;return #5 ,  #6 ,   #7","[""SELECT['the battles']"", ""PROJECT['ships lost in the English Channel of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is equal to zero']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['results of #REF', '#4']"", ""PROJECT['bulgarian commanders of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'project', 'union']",dev
SPIDER_dev_506,What are the notes of the death events which has substring 'East'?,return death events ;return #1 which  has  substring 'East ;return notes of #2,"[""SELECT['death events']"", ""FILTER['#1', 'which has substring East']"", ""PROJECT['notes of #REF', '#2']""]","['select', 'filter', 'project']",dev
SPIDER_dev_51,Find number of pets owned by students who are older than 20.,return students ;return #1 older than 20 ;return pets of  #2 ;return number of  #3,"[""SELECT['students']"", ""FILTER['#1', 'older than 20']"", ""PROJECT['pets of #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",dev
SPIDER_dev_52,How many pets are owned by students that have an age greater than 20?,return students ;return ages of  #1 ;return #1 where #2 is  higher than 20 ;return pets owned by #3 ;return number of  #4,"[""SELECT['students']"", ""PROJECT['ages of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 20']"", ""PROJECT['pets owned by #REF', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",dev
SPIDER_dev_53,Find the number of dog pets that are raised by female students (with sex F).,return students ;return #1 that  are female ;return dog pets raised by #2 ;return number of #3 for each #2 ;return sum of #4,"[""SELECT['students']"", ""FILTER['#1', 'that are female']"", ""PROJECT['dog pets raised by #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""AGGREGATE['sum', '#4']""]","['select', 'filter', 'project', 'group', 'aggregate']",dev
SPIDER_dev_54,How many dog pets are raised by female students?,return students ;return #1 that  are female ;return dog pets that  are raised by #2 ;return number of #3 for each #2 ;return sum of #4,"[""SELECT['students']"", ""FILTER['#1', 'that are female']"", ""PROJECT['dog pets that are raised by #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""AGGREGATE['sum', '#4']""]","['select', 'filter', 'project', 'group', 'aggregate']",dev
SPIDER_dev_55,Find the number of distinct type of pets.,return pets ;return distinct types of  #1 ;return number of  #2,"[""SELECT['pets']"", ""PROJECT['distinct types of #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",dev
SPIDER_dev_56,How many different types of pet are there?,return pets ;return different types of  #1 ;return number of  #2,"[""SELECT['pets']"", ""PROJECT['different types of #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",dev
SPIDER_dev_57,Find the first name of students who have cat or dog pet.,return students ;return pets of  #1 ;return #1 where #2 is  dog ;return #1 where #2 is  cat ;return #3 or  #4 ;return first names of  #5,"[""SELECT['students']"", ""PROJECT['pets of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is dog']"", ""COMPARATIVE['#1', '#2', 'is cat']"", ""UNION['#3', '#4']"", ""PROJECT['first names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",dev
SPIDER_dev_58,What are the first names of every student who has a cat or dog as a pet?,"return students ;return pets of #1 ;return #1 where #2 is cat ;return #1 where #2 is dog ;return #3 ,  #4 ;return first names of #5","[""SELECT['students']"", ""PROJECT['pets of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is cat']"", ""COMPARATIVE['#1', '#2', 'is dog']"", ""UNION['#3', '#4']"", ""PROJECT['first names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",dev
SPIDER_dev_59,Find the first name of students who have both cat and dog pets.,return students ;return #1 who  have  cats ;return #1 who  have  dog pets ;return #1 in both #2 and  #3 ;return first names of  #4,"[""SELECT['students']"", ""FILTER['#1', 'who have cats']"", ""FILTER['#1', 'who have dog pets']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['first names of #REF', '#4']""]","['select', 'filter', 'filter', 'intersection', 'project']",dev
SPIDER_dev_6,Show the name and the release year of the song by the youngest singer.,"return songs ;return singers of  #1 ;retrun ages of #2 ;return #1 where #3 is the smallest ;return name of  #4 ;return release year of  #4 ;return #5 ,  #6","[""SELECT['songs']"", ""PROJECT['singers of #REF', '#1']"", ""PROJECT['age of #REF', '#2']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['release year of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'project', 'superlative', 'project', 'project', 'union']",dev
SPIDER_dev_60,What are the students' first names who have both cats and dogs as pets?,return students ;return pets of #1 ;return #1 where #2 is  cats ;return #1 where #2 is  dogs ;return first names of #1 ;return #5 of both #3 and #4,"[""SELECT['students']"", ""PROJECT['pets of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is cats']"", ""COMPARATIVE['#1', '#2', 'is dogs']"", ""PROJECT['first names of #REF', '#1']"", ""INTERSECTION['#5', '#3', '#4']""]","['select', 'project', 'comparative', 'comparative', 'project', 'intersection']",dev
SPIDER_dev_61,Find the major and age of students who do not have a cat pet.,"return students ;return pets of  #1 ;return #1 where #2 is  not  cat ;return major of  #3 ;return age of  #3 ;return #4 ,  #5","[""SELECT['students']"", ""PROJECT['pets of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not cat']"", ""PROJECT['major of #REF', '#3']"", ""PROJECT['age of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",dev
SPIDER_dev_62,"What major is every student who does not own a cat as a pet, and also how old are they?","return students ;return #1 who  do not  own cats as a pet ;return major of  #2 ;return how old are  #2 ;return #3 ,  #4","[""SELECT['students']"", ""FILTER['#1', 'who do not own cats as a pet']"", ""PROJECT['major of #REF', '#2']"", ""PROJECT['how old are #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",dev
SPIDER_dev_63,Find the id of students who do not have a cat pet.,return students ;return pets of  #1 ;return #1 where #2 is  not  cat ;return id of  #3,"[""SELECT['students']"", ""PROJECT['pets of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not cat']"", ""PROJECT['id of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",dev
SPIDER_dev_64,What are the ids of the students who do not own cats as pets?,return students ;return #1 who  own cats as pets ;return #1 besides  #2 ;return the  ids of  #3,"[""SELECT['students']"", ""FILTER['#1', 'who own cats as pets']"", ""DISCARD['#1', '#2']"", ""PROJECT['the ids of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",dev
SPIDER_dev_65,Find the first name and age of students who have a dog but do not have a cat as a pet.,"return students ;return pets of  #1 ;return #1 where #2 is  dog ;return #1 where #2 is  not  cat ;return #1 of  both #3 and  #4 ;return first names of  #5 ;return ages of  #5 ;return #6 ,  #7","[""SELECT['students']"", ""PROJECT['pets of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is dog']"", ""COMPARATIVE['#1', '#2', 'is not cat']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['first names of #REF', '#5']"", ""PROJECT['ages of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project', 'project', 'union']",dev
SPIDER_dev_66,What is the first name of every student who has a dog but does not have a cat?,return students ;return #1 who  has a dog ;return #2 who  has a cat ;return #2 besides  #3 ;return first name of #4,"[""SELECT['students']"", ""FILTER['#1', 'who has a dog']"", ""FILTER['#2', 'who has a cat']"", ""DISCARD['#2', '#3']"", ""PROJECT['first name of #REF', '#4']""]","['select', 'filter', 'filter', 'discard', 'project']",dev
SPIDER_dev_67,Find the type and weight of the youngest pet.,"return pets ;return age of #1 ;return #1 where #2 is the smallest ;return type of  #3 ;return weight of  #3 ;return #4 ,  #5","[""SELECT['pets']"", ""PROJECT['age of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""PROJECT['type of #REF', '#3']"", ""PROJECT['weight of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'superlative', 'project', 'project', 'union']",dev
SPIDER_dev_68,"What type of pet is the youngest animal, and how much does it weigh?","return pets ;return #1 which is  the  youngest animal ;return the  type of  #2 ;return how much does #2 weigh ;return #3 ,  #4","[""SELECT['pets']"", ""FILTER['#1', 'which is the youngest animal']"", ""PROJECT['the type of #REF', '#2']"", ""PROJECT['how much does #REF weigh', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",dev
SPIDER_dev_69,Find the id and weight of all pets whose age is older than 1.,"return pets ;return ages of  #1 ;return #1 where #2 is  higher than 1 ;return ids of  #3 ;return weights of  #3 ;return #4 ,  #5","[""SELECT['pets']"", ""PROJECT['ages of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 1']"", ""PROJECT['ids of #REF', '#3']"", ""PROJECT['weights of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",dev
SPIDER_dev_7,What are the names and release years for all the songs of the youngest singer?,"return singers ;return age of #1 ;return #1 such that #2 is the smallest ; ;return songs of #3 ;return names of #4 ;return release years of #4 ;return #5 ,  #6","[""SELECT['singers']"", ""PROJECT['age of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""PROJECT['songs of #REF', '#3']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['release years of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'superlative', 'project', 'project', 'project', 'union']",dev
SPIDER_dev_70,What is the id and weight of every pet who is older than 1?,"return pets ;return #1 who  is  older than 1 ;return the  id of  #2 ;return the  weight of  #2 ;return #3 ,  #4","[""SELECT['pets']"", ""FILTER['#1', 'who is older than 1']"", ""PROJECT['the id of #REF', '#2']"", ""PROJECT['the weight of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",dev
SPIDER_dev_71,Find the average and maximum age for each type of pet.,"return pets ;return types of  #1 ;return ages of  #2 ;return average of  #3 for each  #2 ;return maximum of  #3 for each  #2 ;return #2, #4 , #5","[""SELECT['pets']"", ""PROJECT['types of #REF', '#1']"", ""PROJECT['ages of #REF', '#2']"", ""GROUP['avg', '#3', '#2']"", ""GROUP['max', '#3', '#2']"", ""UNION['#2', '#4', '#5']""]","['select', 'project', 'project', 'group', 'group', 'union']",dev
SPIDER_dev_72,What is the average and maximum age for each pet type?,"return pet types ;return ages of #1 ;return average of #2 for each #1 ;return maximum of #2 for each #1 ;return #1, #3 ,  #4","[""SELECT['pet types']"", ""PROJECT['ages of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""GROUP['max', '#2', '#1']"", ""UNION['#1', '#3', '#4']""]","['select', 'project', 'group', 'group', 'union']",dev
SPIDER_dev_73,Find the average weight for each pet type.,return pet types ;return weights of  #1 ;return average of  #2 for each  #1,"[""SELECT['pet types']"", ""PROJECT['weights of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",dev
SPIDER_dev_74,What is the average weight for each type of pet?,return pets ;return types of #1 ;return weights of #2 ;return average of #3 for each  #2,"[""SELECT['pets']"", ""PROJECT['types of #REF', '#1']"", ""PROJECT['weights of #REF', '#2']"", ""GROUP['avg', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",dev
SPIDER_dev_75,Find the first name and age of students who have a pet.,"return students ;return #1 who  have  a pet ;return first names of  #2 ;return ages of  #2 ;return #3 ,  #4","[""SELECT['students']"", ""FILTER['#1', 'who have a pet']"", ""PROJECT['first names of #REF', '#2']"", ""PROJECT['ages of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",dev
SPIDER_dev_76,What are the different first names and ages of the students who do have pets?,"return students ;return #1 that  have  pets ;return different first names of  #2 ;return ages of  #2 ;return #3 ,  #4","[""SELECT['students']"", ""FILTER['#1', 'that have pets']"", ""PROJECT['different first names of #REF', '#2']"", ""PROJECT['ages of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",dev
SPIDER_dev_77,Find the id of the pet owned by student whose last name is ‘Smith’.,return students ;return last names of  #1 ;return #1 where #2 is  Smith ;return pet owned by #3 ;return id of  #4,"[""SELECT['students']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Smith']"", ""PROJECT['pet owned by #REF', '#3']"", ""PROJECT['id of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",dev
SPIDER_dev_78,What is the id of the pet owned by the student whose last name is 'Smith'?,return students ;return last names of  #1 ;return #1 where #2 is  'Smith ;return pet owned by #3 ;return id of  #4,"[""SELECT['students']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Smith']"", ""PROJECT['pet owned by #REF', '#3']"", ""PROJECT['id of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",dev
SPIDER_dev_79,Find the number of pets for each student who has any pet and student id.,"return students ;return #1 who  have  any pet ;return pets of  #2 ;return number of  #3 for each  #2 ;return student  ids of  #2 ;return #4 ,  #5","[""SELECT['students']"", ""FILTER['#1', 'who have any pet']"", ""PROJECT['pets of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""PROJECT['student ids of #REF', '#2']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'group', 'project', 'union']",dev
SPIDER_dev_8,What are all distinct countries where singers above age 20 are from?,return singers ;return ages of  #1 ;return #1 where #2 is  higher than 20 ;return distinct countries #3 are  from,"[""SELECT['singers']"", ""PROJECT['ages of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 20']"", ""PROJECT['distinct countries #REF are from', '#3']""]","['select', 'project', 'comparative', 'project']",dev
SPIDER_dev_80,"For students who have pets, how many pets does each student have? list their ids instead of names.",return students ;return #1 who  have  pets ;return pets of  #2 ;return number of  #3 for each  #2,"[""SELECT['students']"", ""FILTER['#1', 'who have pets']"", ""PROJECT['pets of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'filter', 'project', 'group', 'union']",dev
SPIDER_dev_81,Find the first name and gender of student who have more than one pet.,"return students ;return pets of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than one ;return first names of  #4 ;return gender of  #4 ;return #5 ,  #6","[""SELECT['students']"", ""PROJECT['pets of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than one']"", ""PROJECT['first names of #REF', '#4']"", ""PROJECT['gender of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",dev
SPIDER_dev_82,What is the first name and gender of the all the students who have more than one pet?,"return students ;return pets of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  more than one ;return first names of  #4 ;return genders of  #4 ;return #5 ,  #6","[""SELECT['students']"", ""PROJECT['pets of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than one']"", ""PROJECT['first names of #REF', '#4']"", ""PROJECT['genders of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",dev
SPIDER_dev_83,Find the last name of the student who has a cat that is age 3.,return students ;return cats of  #1 ;return ages of  #2 ;return #1 where #3 is  3 ;return last name of  #4,"[""SELECT['students']"", ""PROJECT['cats of #REF', '#1']"", ""PROJECT['ages of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is 3']"", ""PROJECT['last name of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",dev
SPIDER_dev_84,What is the last name of the student who has a cat that is 3 years old?,return students ;return cats of #1 ;return #1 such that #2 is 3 years old ;return last name of  #2,"[""SELECT['students']"", ""PROJECT['cats of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 3 years old']"", ""PROJECT['last name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",dev
SPIDER_dev_85,Find the average age of students who do not have any pet.,return students ;return #1 who  do not  have  pets ;return ages of  #2 ;return average of  #3,"[""SELECT['students']"", ""FILTER['#1', 'who do not have pets']"", ""PROJECT['ages of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'filter', 'project', 'aggregate']",dev
SPIDER_dev_86,What is the average age for all students who do not own any pets?,return students ;return #1 who  own pets ;return #1 besides  #2 ;return the  age for all #3 ;return the  average of  #4,"[""SELECT['students']"", ""FILTER['#1', 'who own pets']"", ""DISCARD['#1', '#2']"", ""PROJECT['the age for all #REF', '#3']"", ""AGGREGATE['avg', '#4']""]","['select', 'filter', 'discard', 'project', 'aggregate']",dev
SPIDER_dev_87,How many continents are there?,return continents ;return number of  #1,"[""SELECT['continents']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",dev
SPIDER_dev_88,What is the number of continents?,return continents ;return number of #1,"[""SELECT['continents']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",dev
SPIDER_dev_89,"How many countries does each continent have? List the continent id, continent name and the number of countries.","return continents ;return countries of  #1 ;return number of  #2 for each  #1 ;return continent  ids of  #1 ;return continent  names of  #1 ;return #4 ,  #5 ,   #3","[""SELECT['continents']"", ""PROJECT['countries of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['continent ids of #REF', '#1']"", ""PROJECT['continent names of #REF', '#1']"", ""UNION['#4', '#5', '#3']""]","['select', 'project', 'group', 'project', 'project', 'union']",dev
SPIDER_dev_9,What are  the different countries with singers above age 20?,return countries ;return singers of  #1 ;return ages of  #2 ;return #1 where #3 is  higher than 20 ;return different #4,"[""SELECT['countries']"", ""PROJECT['singers of #REF', '#1']"", ""PROJECT['ages of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is higher than 20']"", ""PROJECT['different #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",dev
SPIDER_dev_90,"For each continent, list its id, name, and how many countries it has?","return continents ;return ids of  #1 ;return names of  #1 ;return countries of  #1 ;return number of  #4 for each  #1 ;return #2 ,  #3 ,   #5","[""SELECT['continents']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['countries of #REF', '#1']"", ""GROUP['count', '#4', '#1']"", ""UNION['#2', '#3', '#5']""]","['select', 'project', 'project', 'project', 'group', 'union']",dev
SPIDER_dev_91,How many countries are listed?,return countries ;return #1 that  are  listed ;return number of  #2,"[""SELECT['countries']"", ""FILTER['#1', 'that are listed']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",dev
SPIDER_dev_92,How many countries exist?,return countries ;return number of  #1,"[""SELECT['countries']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",dev
SPIDER_dev_93,"How many models does each car maker produce? List maker full name, id and the number.","return car makers ;return models #1 produce ;return number of  #2 for each  #1 ;return full name of  #1 ;return id of  #1 ;return #4 ,  #5 ,   #3","[""SELECT['car makers']"", ""PROJECT['models #REF produce', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['full name of #REF', '#1']"", ""PROJECT['id of #REF', '#1']"", ""UNION['#4', '#5', '#3']""]","['select', 'project', 'group', 'project', 'project', 'union']",dev
SPIDER_dev_94,"What is the full name of each car maker, along with its id and how many models it produces?","return car makers ;return models of  #1 ;return number of  #2 for each #1 ;return full names of  #1 ;return ids of  #1 ;return #4 ,  #5 ,   #3","[""SELECT['car makers']"", ""PROJECT['models of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['full names of #REF', '#1']"", ""PROJECT['ids of #REF', '#1']"", ""UNION['#4', '#5', '#3']""]","['select', 'project', 'group', 'project', 'project', 'union']",dev
SPIDER_dev_95,Which model of the car has the minimum horsepower?,return cars ;return horsepower of #1 ;return minimum of #2 ;return #1 where #2 is  equal to  #3 ;return model of #4,"[""SELECT['cars']"", ""PROJECT['horsepower of #REF', '#1']"", ""AGGREGATE['min', '#2']"", ""COMPARATIVE['#1', '#2', 'is equal to #3']"", ""PROJECT['model of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",dev
SPIDER_dev_96,What is the model of the car with the smallest amount of horsepower?,return cars ;return horsepower of  #1 ;return #1 where #2 is  smallest ;return model of  #3,"[""SELECT['cars']"", ""PROJECT['horsepower of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""PROJECT['model of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",dev
SPIDER_dev_97,Find the model of the car whose weight is below the average weight.,return cars ;return models of  #1 ;return weights of  #2 ;return average of  #3 ;return #2 where #3 is  lower than #4,"[""SELECT['cars']"", ""PROJECT['models of #REF', '#1']"", ""PROJECT['weights of #REF', '#2']"", ""AGGREGATE['avg', '#3']"", ""COMPARATIVE['#2', '#3', 'is lower than #4']""]","['select', 'project', 'project', 'aggregate', 'comparative']",dev
SPIDER_dev_98,What is the model for the car with a weight smaller than the average?,return cars ;return weights of #1 ;return average of #2 ;return #1 where #2 is lower than #3 ;return model of #4,"[""SELECT['cars']"", ""PROJECT['weights of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is lower than #3']"", ""PROJECT['model of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",dev
SPIDER_dev_99,Find the name of the makers that produced some cars in the year of 1970?,return cars ;return #1 produced in 1970 ;return makers of  #2 ;return names of  #3,"[""SELECT['cars']"", ""FILTER['#1', 'produced in 1970']"", ""PROJECT['makers of #REF', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'project', 'project']",dev
