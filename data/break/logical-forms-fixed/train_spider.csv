question_id,question_text,decomposition,program,operators,split
SPIDER_train_0,How many heads of the departments are older than 56 ?,return heads of  departments ;return #1 older than  56 ;return number of  #2,"[""SELECT['heads of departments']"", ""FILTER['#1', 'older than 56']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_1,"List the name, born state and age of the heads of departments ordered by age.","return departments ;return heads of  #1 ;return names of  #2 ;return born states of  #2 ;return ages of  #2 ;return #3 ,  #4 , #5 ;return #6 sorted by #5","[""SELECT['departments']"", ""PROJECT['heads of #REF', '#1']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['born states of #REF', '#2']"", ""PROJECT['ages of #REF', '#2']"", ""UNION['#3', '#4', '#5']"", ""SORT['#6', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_10,How many acting statuses are there?,return acting statuses ;return number of #1,"[""SELECT['acting statuses']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_100,What are the ids of the students who either registered or attended a course?,"return students ;return #1 who  registered in a course ;return #1 who  attended a course ;return #2 ,  #3 ;return ids of  #4","[""SELECT['students']"", ""FILTER['#1', 'who registered in a course']"", ""FILTER['#1', 'who attended a course']"", ""UNION['#2', '#3']"", ""PROJECT['ids of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_1000,Return the total and minimum enrollments across all schools.,"return schools ;return enrollments of  #1 ;return minimum of  #2 ;return sum of  #2 ;return #4 ,   #3","[""SELECT['schools']"", ""PROJECT['enrollments of #REF', '#1']"", ""AGGREGATE['min', '#2']"", ""AGGREGATE['sum', '#2']"", ""UNION['#4', '#3']""]","['select', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_1001,Find the total student enrollment for different affiliation type schools.,return affiliation types ;return schools of #1 ;return student enrollments of #2 ;return sum of #3 for each #1,"[""SELECT['affiliation types']"", ""PROJECT['schools of #REF', '#1']"", ""PROJECT['student enrollments of #REF', '#2']"", ""GROUP['sum', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_1002,What are the total enrollments of universities of each affiliation type?,return affiliation types ;return universities of  #1 ;return enrollments of  #2 ;return sum of  #3 for each  #1,"[""SELECT['affiliation types']"", ""PROJECT['universities of #REF', '#1']"", ""PROJECT['enrollments of #REF', '#2']"", ""GROUP['sum', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_1003,How many schools do not participate in the basketball match?,return schools ;return #1 that  participate in the  basketball match ;return #1 besides #2 ;return number of  #3,"[""SELECT['schools']"", ""FILTER['#1', 'that participate in the basketball match']"", ""DISCARD['#1', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'discard', 'aggregate']",train
SPIDER_train_1004,Count the number of universities that do not participate in the baketball match.,return universities ;return #1 that  participate in baketball match ;return #1 besides #2 ;return number of #3,"[""SELECT['universities']"", ""FILTER['#1', 'that participate in baketball match']"", ""DISCARD['#1', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'discard', 'aggregate']",train
SPIDER_train_1005,Find the schools that were either founded after 1850 or public.,return schools ;return #1 founded after 1850 ;return #1 that  are  public ;return #2 or  #3,"[""SELECT['schools']"", ""FILTER['#1', 'founded after 1850']"", ""FILTER['#1', 'that are public']"", ""UNION['#2', '#3']""]","['select', 'filter', 'filter', 'union']",train
SPIDER_train_1006,What are the schools that were either founded before 1850 or are public?,return schools ;return #1 founded before 1850 ;return #1 that  are  public ;return #2 or  #3,"[""SELECT['schools']"", ""FILTER['#1', 'founded before 1850']"", ""FILTER['#1', 'that are public']"", ""UNION['#2', '#3']""]","['select', 'filter', 'filter', 'union']",train
SPIDER_train_1007,Find how many different affiliation types there are.,return affiliations ;return number of #1,"[""SELECT['affiliations']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_1008,Count the number of different affiliation types.,return affiliations ;return types of  #1 ;return number of #2 ;return #3 where  #2 is  different,"[""SELECT['affiliations']"", ""PROJECT['types of #REF', '#1']"", ""AGGREGATE['count', '#2']"", ""COMPARATIVE['#3', '#2', 'is different']""]","['select', 'project', 'aggregate', 'comparative']",train
SPIDER_train_1009,Find how many school locations have the word 'NY'.,return schools ;return locations of  #1 ;return #2 that  have  the word 'NY ;return number of #3,"[""SELECT['schools']"", ""PROJECT['locations of #REF', '#1']"", ""FILTER['#2', 'that have the word NY']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'filter', 'aggregate']",train
SPIDER_train_101,Find the id of courses which are registered or attended by student whose id is 121?,return students ;return ids of  #1 ;return #1 where  #2 is  121 ;return courses registered by #3 ;return courses attended by #3 ;return ids of  #4 ;return ids of  #5 ;return #6 or  #7,"[""SELECT['students']"", ""PROJECT['ids of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 121']"", ""PROJECT['courses registered by #REF', '#3']"", ""PROJECT['courses attended by #REF', '#3']"", ""PROJECT['ids of #REF', '#4']"", ""PROJECT['ids of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_1010,How many universities have a location that contains NY?,return universities ;return locations of  #1 ;return #1 where  #2 contains NY ;return number of  #3,"[""SELECT['universities']"", ""PROJECT['locations of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'contains NY']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_1011,Find the team names of the universities whose enrollments are smaller than the average enrollment size.,return universities ;return enrollment of  #1 ;return average of  #2 ;return #1 where  #2 is  smaller than  #3 ;return team names of  #4,"[""SELECT['universities']"", ""PROJECT['enrollment of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is smaller than #3']"", ""PROJECT['team names of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_1012,What are the names of teams from universities that have a below average enrollment?,return universities ;return enrollments of  #1 ;return average of  #2 ;return #1 where #2 is  lower than #3 ;return teams of  #4 ;return names of  #5,"[""SELECT['universities']"", ""PROJECT['enrollments of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is lower than #3']"", ""PROJECT['teams of #REF', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'project']",train
SPIDER_train_1013,Find the number of universities that have over a 20000 enrollment size for each affiliation type.,return affiliation types ;return universities of #1 ;return enrollment sizes of #2 ;return #2 where #3 is  higher than 20000 ;return number of  #4 for each #1,"[""SELECT['affiliation types']"", ""PROJECT['universities of #REF', '#1']"", ""PROJECT['enrollment sizes of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is higher than 20000']"", ""GROUP['count', '#4', '#1']"", ""UNION['#1', '#5']""]","['select', 'project', 'project', 'comparative', 'group', 'union']",train
SPIDER_train_1014,"What are the different affiliations, and how many schools with each have an enrollment size of above 20000?","return different affiliations ;return schools with  #1 ;return enrollment sizes of #2 ;return #2 where #3 is  higher than 20000 ;return number of  #4 for each #1 ;return #1 ,  #5","[""SELECT['different affiliations']"", ""PROJECT['schools with #REF', '#1']"", ""PROJECT['enrollment sizes of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is higher than 20000']"", ""GROUP['count', '#4', '#1']"", ""UNION['#1', '#5']""]","['select', 'project', 'project', 'comparative', 'group', 'union']",train
SPIDER_train_1015,Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.,return affiliation types ;return colleges of  #1 ;return #2 founded after 1850 ;return students enrolled in #3 ;return number of #4 for each #1,"[""SELECT['affiliation types']"", ""PROJECT['colleges of #REF', '#1']"", ""FILTER['#2', 'founded after 1850']"", ""PROJECT['students enrolled in #REF', '#3']"", ""GROUP['count', '#4', '#1']"", ""UNION['#1', '#5']""]","['select', 'project', 'filter', 'project', 'group', 'union']",train
SPIDER_train_1016,"What are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type?","return enrollment  types ;return schools of #1 ;return #2 founded after 1850 ;return affiliations of #3 ;return different #4 ;return enrollments of #3 ;return sum of #6 for each #3 ;return #5 ,  #7","[""SELECT['enrollment types']"", ""PROJECT['schools of #REF', '#1']"", ""FILTER['#2', 'founded after 1850']"", ""PROJECT['affiliations of #REF', '#3']"", ""PROJECT['different #REF', '#4']"", ""PROJECT['enrollments of #REF', '#3']"", ""GROUP['sum', '#6', '#3']"", ""UNION['#5', '#7']""]","['select', 'project', 'filter', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_1017,What is the maximum enrollment across all schools?,return schools ;return enrollments of #1 ;return the  highest #2,"[""SELECT['schools']"", ""PROJECT['enrollments of #REF', '#1']"", ""AGGREGATE['max', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_1018,Return the maximum enrollment across all schools.,return schools ;return enrollment of #1 ;return maximum of #2,"[""SELECT['schools']"", ""PROJECT['enrollment of #REF', '#1']"", ""AGGREGATE['max', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_1019,List all information regarding the basketball match.,return matches ;return #1 of  basketball ;return information regarding #2,"[""SELECT['matches']"", ""FILTER['#1', 'of basketball']"", ""PROJECT['information regarding #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_102,What are the ids of the courses that are registered or attended by the student whose id is 121?,"return student whose id is  121 ;return courses registered by #1 ;return courses attended by #1 ;return #2 ,  #3 ;return ids of  #4","[""SELECT['student whose id is 121']"", ""PROJECT['courses registered by #REF', '#1']"", ""PROJECT['courses attended by #REF', '#1']"", ""UNION['#2', '#3']"", ""PROJECT['ids of #REF', '#4']""]","['select', 'project', 'project', 'union', 'project']",train
SPIDER_train_1020,What is all the information about the basketball match?,return basketball match ;return all the  information about #1,"[""SELECT['basketball match']"", ""PROJECT['all the information about #REF', '#1']""]","['select', 'project']",train
SPIDER_train_1021,"List names of all teams in the basketball competition, ordered by all home scores in descending order.",return basketball competition ;return teams in #1 ;return names of #2 ;return home scores of #2 ;return #3 sorted by #4 in descending order,"[""SELECT['basketball competition']"", ""PROJECT['teams in #REF', '#1']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['home scores of #REF', '#2']"", ""SORT['#3', '#4', 'in descending order']""]","['select', 'project', 'project', 'project', 'sort']",train
SPIDER_train_1022,"What are the names of all the teams in the basketball competition, sorted by all home scores in descending order?",return basketball competitions ;return scores of  #1 ;return #1 sorted by #2 in descending order ;return teams of  #3 ;return names of  #4,"[""SELECT['basketball competitions']"", ""PROJECT['scores of #REF', '#1']"", ""SORT['#1', '#2', 'in descending order']"", ""PROJECT['teams of #REF', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'sort', 'project', 'project']",train
SPIDER_train_1023,the names of models that launched between 2002 and 2004.,return models ;return #1 that  launched between 2002 and  2004 ;return names of #2,"[""SELECT['models']"", ""FILTER['#1', 'that launched betweenleftside 2002']"", ""FILTER['#2', 'that launched betweenrightside 2004']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_1024,Which model has the least amount of RAM? List the model name and the amount of RAM.,"return models ;return amounts of RAM that  #1 have ;return the   lowest of #2 ;return #1 where #2 is  #3 ;return the   name of #4 ;return #5 ,  #3","[""SELECT['models']"", ""PROJECT['amounts of RAM that #REF have', '#1']"", ""AGGREGATE['min', '#2']"", ""COMPARATIVE['#1', '#2', 'is #3']"", ""PROJECT['the name of #REF', '#4']"", ""UNION['#5', '#3']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'union']",train
SPIDER_train_1025,"What are the chip model and screen mode of the phone with hardware model name ""LG-P760""?","return phones ;return hardware models of  #1 ;return names of  #2 ;return #1 where #3 is  LG-P760 ;return chip models of  #4 ;return screen modes of  #4 ;return #5 ,  #6","[""SELECT['phones']"", ""PROJECT['hardware models of #REF', '#1']"", ""PROJECT['names of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is LG-P760']"", ""PROJECT['chip models of #REF', '#4']"", ""PROJECT['screen modes of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1026,"How many phone hardware models are produced by the company named ""Nokia Corporation""?",return companies ;return phone hardware models produced by #1 ;return #2 where  #1 is  Nokia Corporation ;return number of #3,"[""SELECT['companies']"", ""PROJECT['phone hardware models produced by #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Nokia Corporation']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_1027,"What is maximum and minimum RAM size of phone produced by company named ""Nokia Corporation""?","return phones ;return companies #1 are  produced by ;return #1 where #2 is  Nokia Corporation ;return RAM size of  #3 ;return maximum of  #4 ;return minimum of  #4 ;return #5 ,  #6","[""SELECT['phones']"", ""PROJECT['companies #REF are produced by', '#1']"", ""COMPARATIVE['#1', '#2', 'is Nokia Corporation']"", ""PROJECT['RAM size of #REF', '#3']"", ""AGGREGATE['max', '#4']"", ""AGGREGATE['min', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_1028,"What is the average ROM size of phones produced by the company named ""Nokia Corporation""?",return phones ;return #1 produced by the  company named Nokia Corporation ;return ROM size of  #2 ;return average of  #3,"[""SELECT['phones']"", ""FILTER['#1', 'produced by the company named Nokia Corporation']"", ""PROJECT['ROM size of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_1029,List the hardware model name and company name for all the phones that were launched in year 2002 or have RAM size greater than 32.,"return phones ;return year launched of #1 ;return #1 where #2 is  2002 ;return RAM sizes of #1 ;return #1 where #4 is  higher than 32 ;return #3 ,  #5 ;return hardware model names of #6 ;return company names of #6 ;return #7 ,  #8","[""SELECT['phones']"", ""PROJECT['year launched of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 2002']"", ""PROJECT['RAM sizes of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is higher than 32']"", ""UNION['#3', '#5']"", ""PROJECT['hardware model names of #REF', '#6']"", ""PROJECT['company names of #REF', '#6']"", ""UNION['#7', '#8']""]","['select', 'project', 'comparative', 'project', 'comparative', 'union', 'project', 'project', 'union']",train
SPIDER_train_103,What are all info of students who registered courses but not attended courses?,return students ;return #1 who  registered courses  ;return #2 that  attended courses  ;return #2 besides  #3 ;return info of  #4,"[""SELECT['students']"", ""FILTER['#1', 'who registered courses']"", ""FILTER['#2', 'that attended courses']"", ""DISCARD['#2', '#3']"", ""PROJECT['info of #REF', '#4']""]","['select', 'filter', 'filter', 'discard', 'project']",train
SPIDER_train_1030,Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name.,"return phones ;return accreditation types of #1 ;return #1 where #2 have the  word 'Full ;return Hardware Model of #3 ;return Company name  of #3 ;return #4 ,  #5","[""SELECT['phones']"", ""PROJECT['accreditation types of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'have the word Full']"", ""PROJECT['Hardware Model of #REF', '#3']"", ""PROJECT['Company name of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1031,"Find the Char cells, Pixels and Hardware colours for the screen of the phone whose hardware model name is ""LG-P760"".","return phones ;return hardware model of #1 ;return #1 where #2 is LG-P760 ;return screen of #3 ;return Char cells of #4 ;return Pixels of #4 ;return Hardware colours of #4 ;return #5 ,  #6 ,   #7","[""SELECT['phones']"", ""PROJECT['hardware model of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is LG-P760']"", ""PROJECT['screen of #REF', '#3']"", ""PROJECT['Char cells of #REF', '#4']"", ""PROJECT['Pixels of #REF', '#4']"", ""PROJECT['Hardware colours of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_1032,"List the hardware model name and company name for the phone whose screen mode type is ""Graphics.""","return phones ;return #1 with  screen mode type Graphics ;return company name  of #2 ;return hardware model name  of #2 ;return #4 ,  #3","[""SELECT['phones']"", ""FILTER['#1', 'with screen mode type Graphics']"", ""PROJECT['company name of #REF', '#2']"", ""PROJECT['hardware model name of #REF', '#2']"", ""UNION['#4', '#3']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_1033,Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company.,"return companies ;return phone models produced by #1 ;return the   number of  #2 for each #1 ;return the   lowest of   #3 ;return #1 where #3 is  #4 ;return the   name of   #5 ;return #6 ,  #4","[""SELECT['companies']"", ""PROJECT['phone models produced by #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['min', '#3']"", ""COMPARATIVE['#1', '#3', 'is #4']"", ""PROJECT['the name of #REF', '#5']"", ""UNION['#6', '#4']""]","['select', 'project', 'group', 'aggregate', 'comparative', 'project', 'union']",train
SPIDER_train_1034,List the name of the company that produced more than one phone model.,return companies ;return phone models of #1 ;return number of  #2 for each #1 ;return #1 where #3 is higher than one ;return name of #4,"[""SELECT['companies']"", ""PROJECT['phone models of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than one']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_1035,"List the maximum, minimum and average number of used kb in screen mode.","return screen mode ;return kb used #1 ;return maximum of #2 ;return minimum of #2 ;return average of #2 ;return #3 ,  #4 ,   #5","[""SELECT['screen mode']"", ""PROJECT['kb used #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""AGGREGATE['min', '#2']"", ""AGGREGATE['avg', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'project', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_1036,List the name of the phone model launched in year 2002 and with the highest RAM size.,return phone models ;return year launched of #1 ;return #1 where #2 is  2002 ;return RAM sizes of #1 ;return #1 where #4 is  highest ;return name of #1 ; return #6 of both #3 and #5,"[""SELECT['phone models']"", ""PROJECT['year launched of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 2002']"", ""PROJECT['RAM sizes of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#4']"", ""PROJECT['name of #REF', '#1']"", ""INTERSECTION['#6', '#3', '#5']""]","['select', 'project', 'comparative', 'project', 'superlative', 'project', 'intersection']",train
SPIDER_train_1037,"What are the wifi and screen mode type of the hardware model named ""LG-P760""?","return hardware models ;return #1 named LG-P760 ;return wifi type of  #2 ;return screen mode type of  #2 ;return #3 ,  #4","[""SELECT['hardware models']"", ""FILTER['#1', 'named LG-P760']"", ""PROJECT['wifi type of #REF', '#2']"", ""PROJECT['screen mode type of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_1038,"List the hardware model name for the phones that have screen mode type ""Text"" or RAM size greater than 32.",return phones ;return screen mode types of  #1 ;return #1 where  #2 is Text ;return RAM sizes of  #1 ;return #1 where  #4 is higher than 32 ;return #3 or #5 ;return hardware model names of  #6,"[""SELECT['phones']"", ""PROJECT['screen mode types of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Text']"", ""PROJECT['RAM sizes of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is higher than 32']"", ""UNION['#3', '#5']"", ""PROJECT['hardware model names of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'comparative', 'union', 'project']",train
SPIDER_train_1039,"List the hardware model name for the phones that were produced by ""Nokia Corporation"" or whose screen mode type is ""Graphics.""",return phones ;return #1 produced by Nokia Corporation ;return screen mode types of  #1 ;return #1 where  #3 is Graphics ;return #2 or #4 ;return hardware model names of  #5,"[""SELECT['phones']"", ""FILTER['#1', 'produced by Nokia Corporation']"", ""PROJECT['screen mode types of #REF', '#1']"", ""COMPARATIVE['#1', '#3', 'is Graphics']"", ""UNION['#2', '#4']"", ""PROJECT['hardware model names of #REF', '#5']""]","['select', 'filter', 'project', 'comparative', 'union', 'project']",train
SPIDER_train_104,What are all details of the students who registered but did not attend any course?,return students of  ;return #1 who  registered ;return #2 who  attend courses ;return #2 besides  #3 ;return details of  #4,"[""SELECT['students of']"", ""FILTER['#1', 'who registered']"", ""FILTER['#2', 'who attend courses']"", ""DISCARD['#2', '#3']"", ""PROJECT['details of #REF', '#4']""]","['select', 'filter', 'filter', 'discard', 'project']",train
SPIDER_train_1040,"List the hardware model name for the phons that were produced by ""Nokia Corporation"" but whose screen mode type is not Text.",return phons ;return #1 produced by Nokia Corporation ;return screen types of  #2 ;return #2 where  #3 is not  Text ;return hardware model names of  #4,"[""SELECT['phons']"", ""FILTER['#1', 'produced by Nokia Corporation']"", ""PROJECT['screen types of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is not Text']"", ""PROJECT['hardware model names of #REF', '#4']""]","['select', 'filter', 'project', 'comparative', 'project']",train
SPIDER_train_1041,List the phone hardware model and company name for the phones whose screen usage in kb is between 10 and 15.,"return phones ;return screen usage of  #1 in kb ;return #1 where  #2 is at least 10 ;return #1 where  #2 is at most 15 ;return #1 of  both #3 and #4 ;return phone hardware models of  #5 ;return company names of  #5 ;return #6 ,  #7","[""SELECT['phones']"", ""PROJECT['screen usage of #REF in kb', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least 10']"", ""COMPARATIVE['#1', '#2', 'is at most 15']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['phone hardware models of #REF', '#5']"", ""PROJECT['company names of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_1042,Find the number of phones for each accreditation type.,return accreditation types ;return phones of #1 ;return number of  #2 for each #1,"[""SELECT['accreditation types']"", ""PROJECT['phones of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_1043,How many phones belongs to each accreditation type?,return accreditation types ;return phones of  #1 ;return number of  #2 for each  #1,"[""SELECT['accreditation types']"", ""PROJECT['phones of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_1044,Find the accreditation level that more than 3 phones use.,return accreditation levels ;return phones that  use #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than 3,"[""SELECT['accreditation levels']"", ""PROJECT['phones that use #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 3']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_1045,Find the details for all chip models.,return chip models ;return details of #1,"[""SELECT['chip models']"", ""PROJECT['details of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_1046,How many models do not have the wifi function?,return models ;return functions of  #1 ;return #1 where  #2 is wifi ;return #1 besides #3 ;return number of  #4,"[""SELECT['models']"", ""PROJECT['functions of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is wifi']"", ""DISCARD['#1', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'comparative', 'discard', 'aggregate']",train
SPIDER_train_1047,Count the number of chip model that do not have wifi.,return chip model ;return #1 that  have  wifi ;return #1 besides #2 ;return number of #3,"[""SELECT['chip model']"", ""FILTER['#1', 'that have wifi']"", ""DISCARD['#1', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'discard', 'aggregate']",train
SPIDER_train_1048,List all the model names sorted by their launch year.,return models ;return names of  #1 ;return launch years of  #1 ;return #2 sorted by #3,"[""SELECT['models']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['launch years of #REF', '#1']"", ""SORT['#2', '#3']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_1049,Find the average ram mib size of the chip models that are never used by any phone.,return chip models ;return #1 that  are  never used by any phone ;return ram mib size of  #2 ;return average of  #3,"[""SELECT['chip models']"", ""FILTER['#1', 'that are never used by any phone']"", ""PROJECT['ram mib size of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_105,List the id of students who registered course statistics in the order of registration date.,return students ;return courses registered of #1 ;return #1 where #2 is  statistics ;return ids of #3 ;return registration dates of #3 ;return #4 sorted by #5,"[""SELECT['students']"", ""PROJECT['courses registered of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is statistics']"", ""PROJECT['ids of #REF', '#3']"", ""PROJECT['registration dates of #REF', '#3']"", ""SORT['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'sort']",train
SPIDER_train_1050,Find the names of the chip models that are not used by any phone with full accreditation type.,return phones ;return accreditation types of #1 ;return #1 where #2 is full ;return chip models of #3 ;return chip models besides  #4 ;return names of #5,"[""SELECT['phones']"", ""PROJECT['accreditation types of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is full']"", ""PROJECT['chip models of #REF', '#3']"", ""SELECT['chip models']"", ""DISCARD['#5', '#4']"", ""PROJECT['names of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'select', 'discard', 'project']",train
SPIDER_train_1051,Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types.,return phones  ;return accreditation types of  #1 ;return #1 where  #2 is  full ;return #1 where  #2 is  Provisional ;return #3 and #4 ;return screen modes of  #5 ;return pixels of  #6,"[""SELECT['phones']"", ""PROJECT['accreditation types of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is full']"", ""COMPARATIVE['#1', '#2', 'is Provisional']"", ""UNION['#3', '#4']"", ""PROJECT['screen modes of #REF', '#5']"", ""PROJECT['pixels of #REF', '#6']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project', 'project']",train
SPIDER_train_1052,How many countries are there in total?,return countries ;return number of #1,"[""SELECT['countries']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_1053,Count the number of countries.,return countries ;return number of #1,"[""SELECT['countries']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_1054,Show the country name and capital of all countries.,"return countries ;return names of #1 ;return capitals of #1 ;return #2 ,  #3","[""SELECT['countries']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['capitals of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_1055,What are the names and capitals of each country?,"return countries ;return names of  #1 ;return capitals of  #1 ;return #2 ,  #3","[""SELECT['countries']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['capitals of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_1056,"Show all official native languages that contain the word ""English"".",return native languages ;return #1 that  contain the word English,"[""SELECT['native languages']"", ""FILTER['#1', 'that contain the word English']""]","['select', 'filter']",train
SPIDER_train_1057,"What are the official native languages that contain the string ""English"".",return native languages ;return #1 that  are official ;return #2 that  contain the  string English,"[""SELECT['native languages']"", ""FILTER['#1', 'that are official']"", ""FILTER['#2', 'that contain the string English']""]","['select', 'filter', 'filter']",train
SPIDER_train_1058,Show all distinct positions of matches.,return matches ;return distinct positions of  #1,"[""SELECT['matches']"", ""PROJECT['distinct positions of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_1059,What are the different positions for match season?,return match season ;return different positions for #1,"[""SELECT['match season']"", ""PROJECT['different positions for #REF', '#1']""]","['select', 'project']",train
SPIDER_train_106,What are the ids of the students who registered course statistics by order of registration date?,return students ;return courses #1 registered ;return #1 where #2 is  statistics ;return ids of  #3 ;return registration dates of  #3 ;return #4 sorted by #5,"[""SELECT['students']"", ""PROJECT['courses #REF registered', '#1']"", ""COMPARATIVE['#1', '#2', 'is statistics']"", ""PROJECT['ids of #REF', '#3']"", ""PROJECT['registration dates of #REF', '#3']"", ""SORT['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'sort']",train
SPIDER_train_1060,Show the players from college UCLA.,return players ;return colleges of  #1 ;return #1 where #2 is  UCLA,"[""SELECT['players']"", ""PROJECT['colleges of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is UCLA']""]","['select', 'project', 'comparative']",train
SPIDER_train_1061,Who are the players from UCLA?,return players ;return #1 from  UCLA,"[""SELECT['players']"", ""FILTER['#1', 'from UCLA']""]","['select', 'filter']",train
SPIDER_train_1062,Show the distinct position of players from college UCLA or Duke.,return players ;return colleges of  #1 ;return #1 where #2 is  UCLA ;return #1 where #2 is  Duke ;return #3 or  #4 ;return positions of  #5 ;return distinct #6,"[""SELECT['players']"", ""PROJECT['colleges of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is UCLA']"", ""COMPARATIVE['#1', '#2', 'is Duke']"", ""UNION['#3', '#4']"", ""PROJECT['positions of #REF', '#5']"", ""PROJECT['distinct #REF', '#6']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project', 'project']",train
SPIDER_train_1063,What are the different positions of players from UCLA or Duke colleges?,return players ;return colleges of #1 ;return #1 where #2 is  UCLA ;return #1 where #2 is  Duke ;return #3 or  #4 ;return different positions of #5,"[""SELECT['players']"", ""PROJECT['colleges of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is UCLA']"", ""COMPARATIVE['#1', '#2', 'is Duke']"", ""UNION['#3', '#4']"", ""PROJECT['different positions of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_1064,Show the draft pick numbers and draft classes of players whose positions are defenders.,return players ;return #1 whose position are  defenders ;return draft pick numbers of  #2 ;return draft classes of  #2 ;return #3 or #4,"[""SELECT['players']"", ""FILTER['#1', 'whose position are defenders']"", ""PROJECT['draft pick numbers of #REF', '#2']"", ""PROJECT['draft classes of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_1065,What are the draft pick numbers and draft classes for players who play the Defender position?,"return players ;return #1 who  play the  Defender position ;return draft  pick numbers of  #2 ;return draft classes of  #2 ;return #3 ,  #4","[""SELECT['players']"", ""FILTER['#1', 'who play the Defender position']"", ""PROJECT['draft pick numbers of #REF', '#2']"", ""PROJECT['draft classes of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_1066,How many distinct teams are involved in match seasons?,return match seasons ;return teams involved in #1 ;return distinct #2 ;return number of #3,"[""SELECT['match seasons']"", ""PROJECT['teams involved in #REF', '#1']"", ""PROJECT['distinct #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_1067,Count the number of different teams involved in match season.,return teams ;return #1 involved in match season ;return number of different #2,"[""SELECT['teams']"", ""FILTER['#1', 'involved in match season']"", ""PROJECT['different #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'filter', 'project', 'group', 'union']",train
SPIDER_train_1068,Show the players and the years played.,"return players ;return years played of  #1 ;return #1 ,  #2","[""SELECT['players']"", ""PROJECT['years played of #REF', '#1']"", ""UNION['#1', '#2']""]","['select', 'project', 'union']",train
SPIDER_train_1069,Who are the different players and how many years has each played?,"return different players ;return years played of  #1 ;return #1 ,  #2","[""SELECT['different players']"", ""PROJECT['years played of #REF', '#1']"", ""UNION['#1', '#2']""]","['select', 'project', 'union']",train
SPIDER_train_107,List the id of students who attended  statistics courses in the order of attendance date.,return courses ;return students who  attended #1 ;return #2 where  #1 is statistics ;return ids of  #3 ;return attendance dates of  #3 ;return #4 sorted by #5,"[""SELECT['courses']"", ""PROJECT['students who attended #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is statistics']"", ""PROJECT['ids of #REF', '#3']"", ""PROJECT['attendance dates of #REF', '#3']"", ""SORT['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'sort']",train
SPIDER_train_1070,Show all team names.,return teams ;return names of #1,"[""SELECT['teams']"", ""PROJECT['names of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_1071,What are the names of all teams?,return teams ;return names of  #1,"[""SELECT['teams']"", ""PROJECT['names of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_1072,"Show the season, the player, and the name of the country that player belongs to.","return players ;return seasons of  #1 ;return countries of  #1 ;return names of  #3 ;return #2 ,  #1 ,   #4","[""SELECT['players']"", ""PROJECT['seasons of #REF', '#1']"", ""PROJECT['countries of #REF', '#1']"", ""PROJECT['names of #REF', '#3']"", ""UNION['#2', '#1', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_1073,"For each player, what are their name, season, and country that they belong to?","return players ;return names of  #1 ;return seasons of  #1 ;return countries of  #1 ;return #2 ,   #3 , #4","[""SELECT['players']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['seasons of #REF', '#1']"", ""PROJECT['countries of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_1074,Which players are from Indonesia?,return players ;return #1 from  Indonesia,"[""SELECT['players']"", ""FILTER['#1', 'from Indonesia']""]","['select', 'filter']",train
SPIDER_train_1075,Who are the players from Indonesia?,return players ;return #1 from  Indonesia,"[""SELECT['players']"", ""FILTER['#1', 'from Indonesia']""]","['select', 'filter']",train
SPIDER_train_1076,What are the distinct positions of the players from a country whose capital is Dublin?,return players ;return countries of  #1 ;return capitals of  #2 ;return #1 where #3 is  Dublin ;return distinct positions of  #4,"[""SELECT['players']"", ""PROJECT['countries of #REF', '#1']"", ""PROJECT['capitals of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Dublin']"", ""PROJECT['distinct positions of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_1077,Give the different positions of players who play for the country with the capital Dublin.,return countries ;return capitals of  #1 ;return #1 where  #2 is  Dublin ;return players who  play for #3 ;return positions of  #4 ;return different #5,"[""SELECT['countries']"", ""PROJECT['capitals of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Dublin']"", ""PROJECT['players who play for #REF', '#3']"", ""PROJECT['positions of #REF', '#4']"", ""PROJECT['different #REF', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'project']",train
SPIDER_train_1078,What are the official languages of the countries of players from Maryland or Duke college?,"return players ;return #1 from  Maryland college ;return #1 from  Duke college ;return #2 ,  #3 ;return countries of #4 ;return official language of #5","[""SELECT['players']"", ""FILTER['#1', 'from Maryland college']"", ""FILTER['#1', 'from Duke college']"", ""UNION['#2', '#3']"", ""PROJECT['countries of #REF', '#4']"", ""PROJECT['official language of #REF', '#5']""]","['select', 'filter', 'filter', 'union', 'project', 'project']",train
SPIDER_train_1079,Return the official native languages of countries who have players from Maryland or Duke colleges.,"return players ;return #1 that are from  Maryland college ;return #1 that are from  Duke college ;return #2 ,  #3 ;return countries of #4 ;return official native languages of #5","[""SELECT['players']"", ""FILTER['#1', 'that are from Maryland college']"", ""FILTER['#1', 'that are from Duke college']"", ""UNION['#2', '#3']"", ""PROJECT['countries of #REF', '#4']"", ""PROJECT['official native languages of #REF', '#5']""]","['select', 'filter', 'filter', 'union', 'project', 'project']",train
SPIDER_train_108,What are the ids of the students who attended courses in the statistics department in order of attendance date.,return students ;return #1 who  attended courses in the  statistics department ; return attendance dates of #2 ; return #2 sorted by #3 ;return ids of  #4,"[""SELECT['students']"", ""FILTER['#1', 'who attended courses in the statistics department']"", ""PROJECT['attendance dates of #REF', '#2']"", ""SORT['#2', '#3']"", ""PROJECT['ids of #REF', '#4']""]","['select', 'filter', 'project', 'sort', 'project']",train
SPIDER_train_1080,How many distinct official languages are there among countries of players whose positions are defenders.,return countries ;return players of  #1 ;return positions of  #2 ;return #1 where  #3 is  defender ;return distinct official languages of  #4 ;return number of #5,"[""SELECT['countries']"", ""PROJECT['players of #REF', '#1']"", ""PROJECT['positions of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is defender']"", ""PROJECT['distinct official languages of #REF', '#4']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_1081,Count the number of different official languages corresponding to countries that players who play Defender are from.,return players ;return #1 who  play Defender ;return countries of  #2 ;return official languages of  #3 ;return Count different #4,"[""SELECT['players']"", ""FILTER['#1', 'who play Defender']"", ""PROJECT['countries of #REF', '#2']"", ""PROJECT['official languages of #REF', '#3']"", ""PROJECT['Count different #REF', '#4']""]","['select', 'filter', 'project', 'project', 'project']",train
SPIDER_train_1082,"Show the season, the player, and the name of the team that players belong to.","return players ;return seasons of  #1 ;return teams of  #1 ;return names of  #3 ;return #2 ,  #1 ,   #4","[""SELECT['players']"", ""PROJECT['seasons of #REF', '#1']"", ""PROJECT['teams of #REF', '#1']"", ""PROJECT['names of #REF', '#3']"", ""UNION['#2', '#1', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_1083,"Who are the different players, what season do they play in, and what is the name of the team they are on?","return different players ;return seasons that #1 play in  ;return teams of #1 ;return names of #3 ;return #1 ,  #2 ,   #4","[""SELECT['different players']"", ""PROJECT['seasons that #REF play in', '#1']"", ""PROJECT['teams of #REF', '#1']"", ""PROJECT['names of #REF', '#3']"", ""UNION['#1', '#2', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_1084,"Show the positions of the players from the team with name ""Ryley Goldner"".",return teams ;return names of #1 ;return #1 where #2 is  Ryley Goldner ;return players of #3 ;return positions of #4,"[""SELECT['teams']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Ryley Goldner']"", ""PROJECT['players of #REF', '#3']"", ""PROJECT['positions of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_1085,Return the positions of players on the team Ryley Goldner.,return players ;return teams of #1 ;return #1 where #2 is  Ryley Goldner ;return positions of #3,"[""SELECT['players']"", ""PROJECT['teams of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Ryley Goldner']"", ""PROJECT['positions of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1086,"How many distinct colleges are associated with players from the team with name ""Columbus Crew"".",return teams ;return names of #1 ;return #1 where #2 is Columbus Crew ;return players of #3 ;return distinct colleges of #4 ;return number of  #5,"[""SELECT['teams']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Columbus Crew']"", ""PROJECT['players of #REF', '#3']"", ""PROJECT['distinct colleges of #REF', '#4']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'aggregate']",train
SPIDER_train_1087,Count the number of different colleges that players who play for Columbus Crew are from.,return Columbus Crew ;return players of #1 ;return different colleges of #2 ;return number of  #3,"[""SELECT['Columbus Crew']"", ""PROJECT['players of #REF', '#1']"", ""PROJECT['different colleges of #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_1088,"Show the players and years played for players from team ""Columbus Crew"".","return teams ;return players of  #1 ;return #2 where #1 is  Columbus Crew ;return years played of  #3 ;return #3 ,  #4","[""SELECT['teams']"", ""PROJECT['players of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Columbus Crew']"", ""PROJECT['years played of #REF', '#3']"", ""UNION['#3', '#4']""]","['select', 'project', 'comparative', 'project', 'union']",train
SPIDER_train_1089,"What are the players who played for Columbus Crew, and how many years did each play for?","return Crew ;return Columbus #1 ;return players ;return #2 #3 ;return years played ;return number of #5 for each  #4 ;return #4 ,  #6","[""SELECT['Crew']"", ""PROJECT['Columbus #REF', '#1']"", ""SELECT['players']"", ""UNION['#2', '#3']"", ""SELECT['years played']"", ""GROUP['count', '#5', '#4']"", ""UNION['#4', '#6']""]","['select', 'project', 'select', 'union', 'select', 'group', 'union']",train
SPIDER_train_109,Give me the dates when the max temperature was higher than 85.,return dates ;return max temperatures of  #1 ;return #1 where  #2 is  higher than 85,"[""SELECT['dates']"", ""PROJECT['max temperatures of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 85']""]","['select', 'project', 'comparative']",train
SPIDER_train_1090,Show the position of players and the corresponding number of players.,return players  ;return position of  #1 ;return number of #1 for each  #2,"[""SELECT['players']"", ""PROJECT['position of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""UNION['#2', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_1091,How many players played each position?,return positions ;return players that  played #1 ;return number of  #2 for each  #1,"[""SELECT['positions']"", ""PROJECT['players that played #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_1092,Show the country names and the corresponding number of players.,"return countries ;return players of #1 ;return number of  #2 for each #1 ;return names of #1 ;return #4 ,  #3","[""SELECT['countries']"", ""PROJECT['players of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['names of #REF', '#1']"", ""UNION['#4', '#3']""]","['select', 'project', 'group', 'project', 'union']",train
SPIDER_train_1094,Return all players sorted by college in ascending alphabetical order.,return players ;return colleges of  #1 ;return #1 sorted by #2 in ascending alphabetical order,"[""SELECT['players']"", ""PROJECT['colleges of #REF', '#1']"", ""SORT['#1', '#2', 'in ascending alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_1095,"What are all the players who played in match season, sorted by college in ascending alphabetical order?",return the  players ;return #1 who played in match season ;return the  colleges of #2 ;return #2 sorted by #3 in ascending alphabetical order,"[""SELECT['the players']"", ""FILTER['#1', 'who played in match season']"", ""PROJECT['the colleges of #REF', '#2']"", ""SORT['#2', '#3', 'in ascending alphabetical order']""]","['select', 'filter', 'project', 'sort']",train
SPIDER_train_1096,Show the most common position of players in match seasons.,return positions ;return #1 in match seasons ;return players with  #2 ;return number of  #3 ;return #1 where #4 is  highest,"[""SELECT['positions']"", ""FILTER['#1', 'in match seasons']"", ""PROJECT['players with #REF', '#2']"", ""AGGREGATE['count', '#3']"", ""SUPERLATIVE['max', '#1', '#4']""]","['select', 'filter', 'project', 'aggregate', 'superlative']",train
SPIDER_train_1097,What is the position that is most common among players in match seasons?,return match seasons ;return players of #1 ;return number of  #2 for each position ;return position where #3 is  highest,"[""SELECT['match seasons']"", ""PROJECT['players of #REF', '#1']"", ""PROJECT['position', '#2']"", ""GROUP['count', '#2', '#3']"", ""PROJECT['position where #REF is highest', '#4']""]","['select', 'project', 'project', 'group', 'project']",train
SPIDER_train_1098,Show the top 3 most common colleges of players in match seasons.,return match seasons ;return players of #1 ;return colleges of #2 ;return number of  #2 for each #3 ;return the  3 highest of #4 ;return #3 where #4 is equal to any of #5,"[""SELECT['match seasons']"", ""PROJECT['players of #REF', '#1']"", ""PROJECT['colleges of #REF', '#2']"", ""GROUP['count', '#2', '#3']"", ""AGGREGATE['max', '#4']"", ""COMPARATIVE['#3', '#4', 'is equal to any of #5']""]","['select', 'project', 'project', 'group', 'aggregate', 'comparative']",train
SPIDER_train_1099,What are the three colleges from which the most players are from?,return players ;return colleges of #1 ;return number of  #1 for each #2 ;return the  three highest of #3 ;return #2 where #3 is equal to any of #4,"[""SELECT['players']"", ""PROJECT['colleges of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""AGGREGATE['max', '#3']"", ""COMPARATIVE['#2', '#3', 'is equal to any of #4']""]","['select', 'project', 'group', 'aggregate', 'comparative']",train
SPIDER_train_11,How many departments are led by heads who are not mentioned?,return departments ;return heads of  #1 ;return #1 where  #2 are  not  mentioned ;return number of #3,"[""SELECT['departments']"", ""PROJECT['heads of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'are not mentioned']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_110,What are the dates with a maximum temperature higher than 85?,return dates ;return maximum temperature of  #1 ;return #1 where #2 is  higher than 85,"[""SELECT['dates']"", ""PROJECT['temperature of #REF', '#1']"", ""GROUP['max', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 85']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_1100,Show the name of colleges that have at least two players.,return colleges ;return players of #1 ;return the  number of  #2 for each #1 ;return #1 where #3 is  at least two ;return the  names of #4,"[""SELECT['colleges']"", ""PROJECT['players of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""PROJECT['the names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_1101,What are the names of all colleges that have two or more players?,return colleges ;return players of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least two ;return names of  #4,"[""SELECT['colleges']"", ""PROJECT['players of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_1102,Show the name of colleges that have at least two players in descending alphabetical order.,return colleges ;return #1 with  at least two players ;return names of  #2 ;return #3 in descending order,"[""SELECT['colleges']"", ""FILTER['#1', 'with at least two players']"", ""PROJECT['names of #REF', '#2']"", ""FILTER['#3', 'in descending order']""]","['select', 'filter', 'project', 'filter']",train
SPIDER_train_1103,"What are the names of colleges that have two or more players, listed in descending alphabetical order?",return colleges ;return players of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least two ;return names of  #4 ;return #5 sorted by descending alphabetical order,"[""SELECT['colleges']"", ""PROJECT['players of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""PROJECT['names of #REF', '#4']"", ""SORT['#5', '#5', 'descending alphabetical order']""]","['select', 'project', 'group', 'comparative', 'project', 'sort']",train
SPIDER_train_1104,What are the names of teams that do no have match season record?,return teams ;return match season records of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  at least one ;return #1 besides #4 ;return the  names of #5,"[""SELECT['teams']"", ""PROJECT['match season records of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least one']"", ""DISCARD['#1', '#4']"", ""PROJECT['the names of #REF', '#5']""]","['select', 'project', 'group', 'comparative', 'discard', 'project']",train
SPIDER_train_1105,Return the names of teams that have no match season record.,return teams ;return #1 that  have  match season records ;return #1 besides #2 ;return names of  #3,"[""SELECT['teams']"", ""FILTER['#1', 'that have match season records']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_1106,What are the names of countries that have both players with position forward and players with position defender?,return countries ;return players  of #1 ;return positions of #2 ;return #1 where #3 is  forward ;return #1 where #3 is  defender ;return #1 of both #4 and #5 ;return names of #6,"[""SELECT['countries']"", ""PROJECT['players of #REF', '#1']"", ""PROJECT['positions of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is forward']"", ""COMPARATIVE['#1', '#3', 'is defender']"", ""INTERSECTION['#1', '#4', '#5']"", ""PROJECT['names of #REF', '#6']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_1107,"Return the names of countries that have players that play the Forward position, as well as players who play the Defender position.",return countries ;return players of  #1 ;return positions of  #2 ;return #1 where #3 is  Forward ;return #1 where #3 is  Defender ;return #1 of  both #4 and  #5 ;return names of  #6,"[""SELECT['countries']"", ""PROJECT['players of #REF', '#1']"", ""PROJECT['positions of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Forward']"", ""COMPARATIVE['#1', '#3', 'is Defender']"", ""INTERSECTION['#1', '#4', '#5']"", ""PROJECT['names of #REF', '#6']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_1108,Which college have both players with position midfielder and players with position defender?,return colleges ;return players of  #1 ;return positions of  #2 ;return #1 where #3 is  midfielder ;return #1 where #3 is  defender ;return #1 of  both #4 and  #5,"[""SELECT['colleges']"", ""PROJECT['players of #REF', '#1']"", ""PROJECT['positions of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is midfielder']"", ""COMPARATIVE['#1', '#3', 'is defender']"", ""INTERSECTION['#1', '#4', '#5']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection']",train
SPIDER_train_1109,"Return the colleges that have players who play the Midfielder position, as well as players who play the Defender position.",return colleges ;return players  of  #1 ;return positions of  #2 ;return #1 where  #3 is Midfielder ;return #1 where  #3 is Defender ;return #1 of  both #4 and #5,"[""SELECT['colleges']"", ""PROJECT['players of #REF', '#1']"", ""PROJECT['positions of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Midfielder']"", ""COMPARATIVE['#1', '#3', 'is Defender']"", ""INTERSECTION['#1', '#4', '#5']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection']",train
SPIDER_train_111,What are the names of stations that have latitude lower than 37.5?,return stations ;return latitude of  #1 ;return #1 where #2 is  lower than 37.5 ;return names of  #3,"[""SELECT['stations']"", ""PROJECT['latitude of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is lower than 37.5']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1110,How many climbers are there?,return climbers ;return number of #1,"[""SELECT['climbers']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_1111,Count the number of climbers.,return climbers ;return the number of #1,"[""SELECT['climbers']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_1112,List the names of climbers in descending order of points.,return climbers ;return names of  #1 ;return points of  #1 ;return #2 sorted by #3 in descending order,"[""SELECT['climbers']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['points of #REF', '#1']"", ""SORT['#2', '#3', 'in descending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_1113,"What are the names of the climbers, ordered by points descending?",return climbers ;return names of  #1 ;return points of  #1 ;return #2 sorted by #3 descending,"[""SELECT['climbers']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['points of #REF', '#1']"", ""SORT['#2', '#3', 'descending']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_1114,List the names of climbers whose country is not Switzerland.,return climbers ;return #1 with  country not  Switzerland ;return name of #2,"[""SELECT['climbers']"", ""FILTER['#1', 'with country not Switzerland']"", ""PROJECT['name of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_1115,What are the names of climbers who are not from the country of Switzerland?,return climbers ;return #1 from  the  country of  Switzerland ;return #1 besides  #2 ;return names of  #3,"[""SELECT['climbers']"", ""FILTER['#1', 'from the country of Switzerland']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_1116,What is the maximum point for climbers whose country is United Kingdom?,return climbers ;return countries of #1 ;return #1 where #2 is  United Kingdom ;return points of #3 ;return maximum of #4 for each #3,"[""SELECT['climbers']"", ""PROJECT['countries of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is United Kingdom']"", ""PROJECT['points of #REF', '#3']"", ""GROUP['max', '#4', '#3']"", ""UNION['#3', '#5']""]","['select', 'project', 'comparative', 'project', 'group', 'union']",train
SPIDER_train_1117,Return the maximum number of points for climbers from the United Kingdom.,return climbers ;return #1 from  the United Kingdom ;points of #2 ;return the number of #3 for each #2 ;return maximum of  #4,"[""SELECT['climbers']"", ""FILTER['#1', 'from the United Kingdom']"", ""PROJECT['of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""AGGREGATE['max', '#4']""]","['select', 'filter', 'project', 'group', 'aggregate']",train
SPIDER_train_1118,How many distinct countries are the climbers from?,return climbers ;return countries #1 are  from  ;return distinct #2 ;return number of #3,"[""SELECT['climbers']"", ""PROJECT['countries #REF are from', '#1']"", ""PROJECT['distinct #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_1119,Count the number of different countries that climbers are from.,return climbers ;return countries of #1 ;return different #2 ;return number of  #3,"[""SELECT['climbers']"", ""PROJECT['countries of #REF', '#1']"", ""PROJECT['different #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_112,What are the names of all stations with a latitude smaller than 37.5?,return stations ;return latitudes of  #1 ;return #1 where #2 is  lower than 37.5 ;return names of  #3,"[""SELECT['stations']"", ""PROJECT['latitudes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is lower than 37.5']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1120,What are the names of mountains in ascending alphabetical order?,return mountains ;return names of  #1 ;return #2 sorted by ascending alphabetical order,"[""SELECT['mountains']"", ""PROJECT['names of #REF', '#1']"", ""SORT['#2', '#2', 'ascending alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_1121,Give the names of mountains in alphabetical order.,return mountains ;return names of  #1 ;return #2 sorted by alphabetical order,"[""SELECT['mountains']"", ""PROJECT['names of #REF', '#1']"", ""SORT['#2', '#2', 'alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_1122,What are the countries of mountains with height bigger than 5000?,return mountains ;return height of  #1 ;return #1 where #2 is  bigger than 5000 ;return countries that  have  #3,"[""SELECT['mountains']"", ""PROJECT['height of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is bigger than 5000']"", ""PROJECT['countries that have #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1123,Return the countries of the mountains that have a height larger than 5000.,return mountains ;return heights of  #1 ;return #1 where #2 is  higher than 5000 ;return countries of  #3,"[""SELECT['mountains']"", ""PROJECT['heights of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 5000']"", ""PROJECT['countries of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1124,What is the name of the highest mountain?,return mountains ;return #1 that  is  the highest ;return name of #2,"[""SELECT['mountains']"", ""FILTER['#1', 'that is the highest']"", ""PROJECT['name of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_1125,Return the name of the mountain with the greatest height.,return mountains ;return heights of #1 ;return #1 where #2 is  highest ;return name of #3,"[""SELECT['mountains']"", ""PROJECT['heights of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_1126,List the distinct ranges of the mountains with the top 3 prominence.,return mountains ;return prominences of #1 ;return #1 where #2 is  top 3 ;return ranges of #3 ;return distinct #4,"[""SELECT['mountains']"", ""PROJECT['prominences of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is top 3']"", ""PROJECT['ranges of #REF', '#3']"", ""PROJECT['distinct #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_1127,What are the different ranges of the 3 mountains with the highest prominence?,return mountains ;return prominences of #1 ;return #1 where #2 is  the   highest ;return the   different ranges of #3,"[""SELECT['mountains']"", ""PROJECT['prominences of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the highest']"", ""PROJECT['the different ranges of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1128,Show names of climbers and the names of mountains they climb.,"return climbers ;return mountains #1 climb ;return names of #2 ;return #1 , #3","[""SELECT['climbers']"", ""PROJECT['mountains #REF climb', '#1']"", ""PROJECT['names of #REF', '#2']"", ""UNION['#1', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_1129,What are the names of climbers and the corresponding names of mountains that they climb?,"return climbers ;return names of  #1 ;return mountains #1 climb ;return names of  #3 ;return #2 ,  #4","[""SELECT['climbers']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['mountains #REF climb', '#1']"", ""PROJECT['names of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_113,"For each city, return the highest latitude among its stations.",return cities ;return stations of #1 ;return latitudes of #2 ;return the  highest #3 for each #1,"[""SELECT['cities']"", ""PROJECT['stations of #REF', '#1']"", ""PROJECT['latitudes of #REF', '#2']"", ""GROUP['max', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_1130,Show the names of climbers and the heights of mountains they climb.,"return climbers ;return names of  #1 ;return mountains #1 climb ;return heights of  #3 ;return #2 ,  #4","[""SELECT['climbers']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['mountains #REF climb', '#1']"", ""PROJECT['heights of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_1131,What are the names of climbers and the corresponding heights of the mountains that they climb?,"return climbers ;return names of  #1 ;return mountains #1 climb ;return heights of  #3 ;return #2 ,  #4","[""SELECT['climbers']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['mountains #REF climb', '#1']"", ""PROJECT['heights of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_1132,Show the height of the mountain climbed by the climber with the maximum points.,return climbers ;return points of #1 ;return #1 where #2 is  the   highest ;return mountains climbed by #3 ;return the   heights of #4,"[""SELECT['climbers']"", ""PROJECT['points of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the highest']"", ""PROJECT['mountains climbed by #REF', '#3']"", ""PROJECT['the heights of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_1133,What is the height of the mountain climbined by the climbing who had the most points?,return climbings ;return points of #1 ;return #1 where #2 is  the   highest ;return the   mountain climbined by #3 ;return the   height of #4,"[""SELECT['climbings']"", ""PROJECT['points of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the highest']"", ""PROJECT['the mountain climbined by #REF', '#3']"", ""PROJECT['the height of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_1134,"Show the distinct names of mountains climbed by climbers from country ""West Germany"".",return mountains ;return #1 climbed by climbers from West Germany ;return distinct names of  #2,"[""SELECT['mountains']"", ""FILTER['#1', 'climbed by climbers from West Germany']"", ""PROJECT['distinct names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_1135,What are the different names of mountains ascended by climbers from the country of West Germany?,return climbers ;return countries of  #1 ;return #1 where #2 is  West Germany ;return mountains ascended by #3 ;return different names of  #4,"[""SELECT['climbers']"", ""PROJECT['countries of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is West Germany']"", ""PROJECT['mountains ascended by #REF', '#3']"", ""PROJECT['different names of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_1136,Show the times used by climbers to climb mountains in Country Uganda.,return mountains ;return #1 in Uganda ;return climbers of #2 ;return times of #3,"[""SELECT['mountains']"", ""FILTER['#1', 'in Uganda']"", ""PROJECT['climbers of #REF', '#2']"", ""PROJECT['times of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_1137,What are the times used by climbers who climbed mountains in the country of Uganda?,return climbers ;return mountains #1 climbed ;return countries of  #2 ;return #1 where #3 is  Uganda ;return times used by #4,"[""SELECT['climbers']"", ""PROJECT['mountains #REF climbed', '#1']"", ""PROJECT['countries of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Uganda']"", ""PROJECT['times used by #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_1138,Please show the countries and the number of climbers from each country.,"return countries ;return climbers from #1 ;return number of  #2 for each  #1 ;return #1 ,  #3","[""SELECT['countries']"", ""PROJECT['climbers from #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_1139,How many climbers are from each country?,return countries ;return climbers of  #1 ;return number of #2 for each #1,"[""SELECT['countries']"", ""PROJECT['climbers of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_114,"For each city, what is the highest latitude for its stations?",return cities ;return stations of  #1 ;return latitudes of  #2 ;return the highest #3 for each #1,"[""SELECT['cities']"", ""PROJECT['stations of #REF', '#1']"", ""PROJECT['latitudes of #REF', '#2']"", ""GROUP['max', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_1140,List the countries that have more than one mountain.,return countries ;return mountains in #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is higher than one,"[""SELECT['countries']"", ""PROJECT['mountains in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than one']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_1141,Which countries have more than one mountain?,return countries ;return mountains in #1 ;return number of  #2 for each #1 ;return #1 where #3 is  more than  one,"[""SELECT['countries']"", ""PROJECT['mountains in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than one']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_1142,List the names of mountains that do not have any climber.,return mountains ;return #1 that  do not have any  climbers ;return names of #2,"[""SELECT['mountains']"", ""FILTER['#1', 'that do not have any climbers']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_1143,What are the names of countains that no climber has climbed?,return climbers ;return countains climbed of  #1 ;return countains besides  #2 ;return names of  #3,"[""SELECT['climbers']"", ""PROJECT['countains climbed of #REF', '#1']"", ""SELECT['countains']"", ""DISCARD['#3', '#2']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'select', 'discard', 'project']",train
SPIDER_train_1144,Show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200.,return countries ;return mountains  of  #1 ;return heights of  #2 ;return #1 where #3 is  higher than 5600 stories ;return #1 where #3 lower than 5200 stories ;return #1 of  both #4 and  #5,"[""SELECT['countries']"", ""PROJECT['mountains of #REF', '#1']"", ""PROJECT['heights of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is higher than 5600 stories']"", ""COMPARATIVE['#1', '#3', 'lower than 5200 stories']"", ""INTERSECTION['#1', '#4', '#5']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection']",train
SPIDER_train_1145,What are the countries that have both mountains that are higher than 5600 and lower than 5200?,return countries ;return mountains in #1 ;return height of  #2 ;return #1 where #3 is  higher than 5600 ;return #1 where #3 is  lower than 5200 ;return #1 of  both #4 and  #5,"[""SELECT['countries']"", ""PROJECT['mountains in #REF', '#1']"", ""PROJECT['height of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is higher than 5600']"", ""COMPARATIVE['#1', '#3', 'is lower than 5200']"", ""INTERSECTION['#1', '#4', '#5']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection']",train
SPIDER_train_1146,Show the range that has the most number of mountains.,return ranges ;return mountains of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['ranges']"", ""PROJECT['mountains of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_1147,Which range contains the most mountains?,return ranges ;return number of  mountains for each #1 ;return #1 where #2 is  highest,"[""SELECT['ranges']"", ""PROJECT['mountains', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_1148,Show the names of mountains with height more than 5000 or prominence more than 1000.,"return mountains ;return #1 with  height more  than  5000 ;return #1 with  prominence more  than  1000 ;return #2 , #3 ;return names of #4","[""SELECT['mountains']"", ""FILTER['#1', 'with height more than 5000']"", ""FILTER['#1', 'with prominence more than 1000']"", ""UNION['#2', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_1149,What are the names of mountains that have a height of over 5000 or a prominence of over 1000?,return mountains ;return heights of   #1 ;return #1 where #2 is higher than 5000 ;return prominences of   #1 ;return #1 where #4 is higher than 1000 ;return #3 or  #5 ;return names of   #6,"[""SELECT['mountains']"", ""PROJECT['heights of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 5000']"", ""PROJECT['prominences of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is higher than 1000']"", ""UNION['#3', '#5']"", ""PROJECT['names of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'comparative', 'union', 'project']",train
SPIDER_train_115,Give me the start station and end station for the trips with the three oldest id.,"return trips ;return ids of #1 ;return #1 where #2 are the   three oldest ;return start stations of #3 ;return end stations of #3 ;return #4 ,  #5","[""SELECT['trips']"", ""PROJECT['ids of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'are the three oldest']"", ""PROJECT['start stations of #REF', '#3']"", ""PROJECT['end stations of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1150,How many body builders are there?,return body builders ;return number of #1,"[""SELECT['body builders']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_1151,List the total scores of body builders in ascending order.,return body builders ;return scores of  #1 ;return sum of  #2 for each  #1 ;return #3 sorted by ascending order,"[""SELECT['body builders']"", ""PROJECT['scores of #REF', '#1']"", ""GROUP['sum', '#2', '#1']"", ""SORT['#3', '#3', 'ascending order']""]","['select', 'project', 'group', 'sort']",train
SPIDER_train_1152,List the snatch score and clean jerk score of body builders in ascending order of snatch score.,"return body builders ;return snatch scores of  #1 ;return clean jerk scores of  #1 ;return #2 ,  #3 ;return #4 sorted by #2 in ascending order","[""SELECT['body builders']"", ""PROJECT['snatch scores of #REF', '#1']"", ""PROJECT['clean jerk scores of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#4', '#2', 'in ascending order']""]","['select', 'project', 'project', 'union', 'sort']",train
SPIDER_train_1153,What is the average snatch score of body builders?,return body builders ;return snatch scores of  #1 ;return average of  #2,"[""SELECT['body builders']"", ""PROJECT['snatch scores of #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_1154,What are the clean and jerk score of the body builder with the highest total score?,return body builders ;return total scores of #1 ;return #1 where #2 is  the   highest ;return the   clean and jerk score  of #3,"[""SELECT['body builders']"", ""PROJECT['scores of #REF', '#1']"", ""GROUP['sum', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']"", ""PROJECT['the clean and jerk score of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_1155,What are the birthdays of people in ascending order of height?,return people ;return birthdays of  #1 ;return heights of  #1 ;return #2 sorted by #3 in ascending order,"[""SELECT['people']"", ""PROJECT['birthdays of #REF', '#1']"", ""PROJECT['heights of #REF', '#1']"", ""SORT['#2', '#3', 'in ascending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_1156,What are the names of body builders?,return body builders ;return names of  #1,"[""SELECT['body builders']"", ""PROJECT['names of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_1157,What are the names of body builders whose total score is higher than 300?,return body builders ;return scores of #1 ;return sum of #2 for each #1 ;return #1 where #3 is higher than 300 ;return names of #4,"[""SELECT['body builders']"", ""PROJECT['scores of #REF', '#1']"", ""GROUP['sum', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 300']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_1158,What is the name of the body builder with the greatest body weight?,return body builders ;return body weight of  #1 ;return #1 where #2 is  the  greatest ;return the  name of  #3,"[""SELECT['body builders']"", ""PROJECT['body weight of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the greatest']"", ""PROJECT['the name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1159,What are the birth date and birth place of the body builder with the highest total points?,"return body builders ;return points of  #1 ;return sum of  #2 for each  #1 ;return #1 where #3 is  highest ;return birth  date of  #4 ;return birth  place of  #4 ;return #5 ,  #6","[""SELECT['body builders']"", ""PROJECT['points of #REF', '#1']"", ""GROUP['sum', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['birth date of #REF', '#4']"", ""PROJECT['birth place of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_116,What is the station station and end station for the trips with the three smallest ids?,"return trips ;return id of #1 ;return #1 where #2 is  three smallest ;return station  station   of #3 ;return end station  of #3 ;return #4 ,  #5","[""SELECT['trips']"", ""PROJECT['id of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is three smallest']"", ""PROJECT['station station of #REF', '#3']"", ""PROJECT['end station of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1160,What are the heights of body builders with total score smaller than 315?,return body builders ;return scores of  #1 ;return sum of  #2 for each  #1 ;return #1 where #3 is  lower than 315 ;return heights of  #4,"[""SELECT['body builders']"", ""PROJECT['scores of #REF', '#1']"", ""GROUP['sum', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is lower than 315']"", ""PROJECT['heights of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_1161,What is the average total score of body builders with height bigger than 200?,return body builders ;return heights of  #1 ;return #1 where #2 is  higher than 200 ;return scores of  #3 ;return sum of  #4 for each  #3 ;return average of  #5,"[""SELECT['body builders']"", ""PROJECT['heights of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 200']"", ""PROJECT['scores of #REF', '#3']"", ""GROUP['sum', '#4', '#3']"", ""AGGREGATE['avg', '#5']""]","['select', 'project', 'comparative', 'project', 'group', 'aggregate']",train
SPIDER_train_1162,What are the names of body builders in descending order of total scores?,return body builders ;return names of #1 ;return scores of #1 ;return sum of #3 for each #1 ;return #2 sorted by #4 in  descending order,"[""SELECT['body builders']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['scores of #REF', '#1']"", ""GROUP['sum', '#3', '#1']"", ""SORT['#2', '#4', 'in descending order']""]","['select', 'project', 'project', 'group', 'sort']",train
SPIDER_train_1163,List each birth place along with the number of people from there.,"return birth places ;return people from  #1 ;return number of  #2 for each  #1 ;return #1 ,  #3","[""SELECT['birth places']"", ""PROJECT['people from #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_1164,What is the most common birth place of people?,return birth places ;return people with  #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['birth places']"", ""PROJECT['people with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_1165,What are the birth places that are shared by at least two people?,return people ;return number of  #1 for each birth place ;return birth places where #2 at least two,"[""SELECT['people']"", ""PROJECT['place', '#1']"", ""GROUP['count', '#1', '#2']"", ""PROJECT['birth places where #REF at least two', '#3']""]","['select', 'project', 'group', 'project']",train
SPIDER_train_1166,List the height and weight of people in descending order of height.,"return people ;return heights of  #1 ;return weights of  #1 ;return #2 ,  #3 ;return #4 sorted by #2 in descending order","[""SELECT['people']"", ""PROJECT['heights of #REF', '#1']"", ""PROJECT['weights of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#4', '#2', 'in descending order']""]","['select', 'project', 'project', 'union', 'sort']",train
SPIDER_train_1167,Show all information about each body builder.,return body builders ;return information about #1,"[""SELECT['body builders']"", ""PROJECT['information about #REF', '#1']""]","['select', 'project']",train
SPIDER_train_1168,List the names and origins of people who are not body builders.,"return people ;return #1 who  are  not  body builders ;return names of  #2 ;return origins of  #2 ;return #3 ,  #4","[""SELECT['people']"", ""FILTER['#1', 'who are not body builders']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['origins of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_1169,How many distinct birth places are there?,return birth places ;return distinct #1 ;return number of #2,"[""SELECT['birth places']"", ""PROJECT['distinct #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_117,What is the average latitude and longitude of stations located in San Jose city?,"return stations ;return cities #1 are located in ;return #1 where #2 is  San Jose ;return latitudes of #3 ;return longitudes of #3 ;return average of #4 ;return average of #5 ;return #6 ,  #7","[""SELECT['stations']"", ""PROJECT['cities #REF are located in', '#1']"", ""COMPARATIVE['#1', '#2', 'is San Jose']"", ""PROJECT['latitudes of #REF', '#3']"", ""PROJECT['longitudes of #REF', '#3']"", ""AGGREGATE['avg', '#4']"", ""AGGREGATE['avg', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'comparative', 'project', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_1170,How many persons are not body builders?,return persons ;return #1 who  are  body builders ;return #1 besides #2 ;return number of  #3,"[""SELECT['persons']"", ""FILTER['#1', 'who are body builders']"", ""DISCARD['#1', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'discard', 'aggregate']",train
SPIDER_train_1171,List the weight of the body builders who have snatch score higher than 140 or have the height greater than 200.,return body builders ;return snatch scores of  #1 ;return #1 where  #2 is higher than 140 ;return heights of  #1 ;return #1 where  #4 is higher than 200 ;return #3 or #5 ;return weights of  #6,"[""SELECT['body builders']"", ""PROJECT['snatch scores of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 140']"", ""PROJECT['heights of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is higher than 200']"", ""UNION['#3', '#5']"", ""PROJECT['weights of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'comparative', 'union', 'project']",train
SPIDER_train_1172,"What are the total scores of the body builders whose birthday contains the string ""January"" ?",return body builders ;return birthdays of  #1 ;return #1 where #2 contains the  string January ;return scores of  #3 ;return sum of  #4,"[""SELECT['body builders']"", ""PROJECT['birthdays of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'contains the string January']"", ""PROJECT['scores of #REF', '#3']"", ""AGGREGATE['sum', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_1173,What is the minimum snatch score?,return snatch scores ;return minimum of  #1,"[""SELECT['snatch scores']"", ""AGGREGATE['min', '#1']""]","['select', 'aggregate']",train
SPIDER_train_1174,How many elections are there?,return elections ;return number of #1,"[""SELECT['elections']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_1175,List the votes of elections in descending order.,return elections ;return votes of  #1 ;return #2 sorted by descending order,"[""SELECT['elections']"", ""PROJECT['votes of #REF', '#1']"", ""SORT['#2', '#2', 'descending order']""]","['select', 'project', 'sort']",train
SPIDER_train_1176,List the dates and vote percents of elections.,"return elections ;return dates of  #1 ;return vote percents of  #1 ;return #2 ,  #3","[""SELECT['elections']"", ""PROJECT['dates of #REF', '#1']"", ""PROJECT['vote percents of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_1177,What are the minimum and maximum vote percents of elections?,"return elections ;return vote percents of  #1 ;return minimum of  #2 ;return maximum of  #2 ;return #3 ,  #4","[""SELECT['elections']"", ""PROJECT['vote percents of #REF', '#1']"", ""AGGREGATE['min', '#2']"", ""AGGREGATE['max', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_1178,What are the names and parties of representatives?,"return representatives ;return names of  #1 ;return parties of  #1 ;return #2 ,  #3","[""SELECT['representatives']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['parties of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_1179,"What are the names of representatives whose party is not ""Republican""?",return representatives ;return parties of  #1 ;return #1 where #2 is  not  Republican ;return names of  #3,"[""SELECT['representatives']"", ""PROJECT['parties of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not Republican']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_118,What is the average latitude and longitude in San Jose?,"return latitudes ;return #1 in San Jose ;return longitudes ;return #3 in San Jose ;return average #2 ;return average #4 ;return #5 ,  #6","[""SELECT['latitudes']"", ""FILTER['#1', 'in San Jose']"", ""SELECT['longitudes']"", ""FILTER['#3', 'in San Jose']"", ""AGGREGATE['avg', '#2']"", ""AGGREGATE['avg', '#4']"", ""UNION['#5', '#6']""]","['select', 'filter', 'select', 'filter', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_1180,What are the life spans of representatives from New York state or Indiana state?,return representatives ;return states of  #1 ;return #1 where #2 is  New York ;return #1 where #2 is  Indiana ;return #3 or  #4 ;return life spans of  #5,"[""SELECT['representatives']"", ""PROJECT['states of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is New York']"", ""COMPARATIVE['#1', '#2', 'is Indiana']"", ""UNION['#3', '#4']"", ""PROJECT['life spans of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_1181,What are the names of representatives and the dates of elections they participated in.,"return representatives ;return elections #1 participated in ;return dates of  #2 ;return names of  #1 ;return #4 ,  #3","[""SELECT['representatives']"", ""PROJECT['elections #REF participated in', '#1']"", ""PROJECT['dates of #REF', '#2']"", ""PROJECT['names of #REF', '#1']"", ""UNION['#4', '#3']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_1182,What are the names of representatives with more than 10000 votes in election?,return representatives ;return votes in election of  #1 ;return number of  #2 ;return #1 where #3 is  more than 10000 ;return names of  #4,"[""SELECT['representatives']"", ""PROJECT['votes in election of #REF', '#1']"", ""AGGREGATE['count', '#2']"", ""COMPARATIVE['#1', '#3', 'is more than 10000']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_1183,What are the names of representatives in descending order of votes?,return representatives ;return names of #1 ;return votes of #1 ;return number of  #3 for each #1 ;return #2 sorted by #4 in  descending order,"[""SELECT['representatives']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['votes of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""SORT['#2', '#4', 'in descending order']""]","['select', 'project', 'project', 'group', 'sort']",train
SPIDER_train_1184,What is the party of the representative that has the smallest number of votes.,return representatives ;return votes of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  lowest ;return party of  #4,"[""SELECT['representatives']"", ""PROJECT['votes of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['party of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_1185,What are the lifespans of representatives in descending order of vote percent?,return representatives ;return lifespans of  #1 ;return vote percent of  #1 ;return #2 sorted by #3 in descending order,"[""SELECT['representatives']"", ""PROJECT['lifespans of #REF', '#1']"", ""PROJECT['vote percent of #REF', '#1']"", ""SORT['#2', '#3', 'in descending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_1186,"What is the average number of votes of representatives from party ""Republican""?",return representatives ;return #1 from the  Republican party ;return votes of #2 ;return number of  #3 for each #2 ;return the  average of #4,"[""SELECT['representatives']"", ""FILTER['#1', 'from the Republican party']"", ""PROJECT['votes of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""AGGREGATE['avg', '#4']""]","['select', 'filter', 'project', 'group', 'aggregate']",train
SPIDER_train_1187,What are the different parties of representative? Show the party name and the number of representatives in each party.,"return representatives ;return parties of #1 ;return the   different #2 ;return the   number of  #1 for each #3 ;return the   names of #3 ;return #5 ,  #4","[""SELECT['representatives']"", ""PROJECT['parties of #REF', '#1']"", ""PROJECT['the different #REF', '#2']"", ""GROUP['count', '#1', '#3']"", ""PROJECT['the names of #REF', '#3']"", ""UNION['#5', '#4']""]","['select', 'project', 'project', 'group', 'project', 'union']",train
SPIDER_train_1188,What is the party that has the largest number of representatives?,return party ;return representatives of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  largest,"[""SELECT['party']"", ""PROJECT['representatives of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_1189,What parties have at least three representatives?,return parties ;return representatives of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least three,"[""SELECT['parties']"", ""PROJECT['representatives of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least three']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_119,What is the id of the trip that has the shortest duration?,return trip ;return duration of  #1 ;return #1 where #2 is  shortest ;return id of  #3,"[""SELECT['trip']"", ""PROJECT['duration of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""PROJECT['id of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_1190,What states have at least two representatives?,return states ;return representatives of #1 ;return number of  #2 for each #1 ;return #1 where #3 is at least two,"[""SELECT['states']"", ""PROJECT['representatives of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_1191,List the names of representatives that have not participated in elections listed here.,return elections listed ;return representatives of #1 ;return representatives besides  #2 ;return names of #3,"[""SELECT['elections listed']"", ""PROJECT['representatives of #REF', '#1']"", ""SELECT['representatives']"", ""DISCARD['#3', '#2']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'select', 'discard', 'project']",train
SPIDER_train_1192,Show the parties that have both representatives in New York state and representatives in Pennsylvania state.,return representatives  ;return states of  #1 ;return #1 where #2 is  New York ;return #1 where #2 is  Pennsylvania ;return parties of #1 ;return #5 of both #3 and  #4,"[""SELECT['representatives']"", ""PROJECT['states of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is New York']"", ""COMPARATIVE['#1', '#2', 'is Pennsylvania']"", ""PROJECT['parties of #REF', '#1']"", ""INTERSECTION['#5', '#3', '#4']""]","['select', 'project', 'comparative', 'comparative', 'project', 'intersection']",train
SPIDER_train_1193,How many distinct parties are there for representatives?,return representatives ;return parties of  #1 ;return distinct #2 ;return number of  #3,"[""SELECT['representatives']"", ""PROJECT['parties of #REF', '#1']"", ""PROJECT['distinct #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_1194,How many apartment bookings are there in total?,return apartment bookings ;return number of #1,"[""SELECT['apartment bookings']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_1195,Count the total number of apartment bookings.,return apartment bookings ;return number of #1,"[""SELECT['apartment bookings']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_1196,Show the start dates and end dates of all the apartment bookings.,return apartment bookings ;return start dates of  #1 ;return end dates of  #1 ;return #2 or #3,"[""SELECT['apartment bookings']"", ""PROJECT['start dates of #REF', '#1']"", ""PROJECT['end dates of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_1197,What are the start date and end date of each apartment booking?,"return apartment bookings ;return start dates of  #1 ;return end dates of  #1 ;return #2 ,  #3","[""SELECT['apartment bookings']"", ""PROJECT['start dates of #REF', '#1']"", ""PROJECT['end dates of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_1198,Show all distinct building descriptions.,return buildings ;return distinct descriptions of #1,"[""SELECT['buildings']"", ""PROJECT['distinct descriptions of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_1199,Give me a list of all the distinct building descriptions.,return buildings ;return descriptions of  #1 ;return distinct #2,"[""SELECT['buildings']"", ""PROJECT['descriptions of #REF', '#1']"", ""PROJECT['distinct #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_12,What are the distinct ages of the heads who are acting?,return heads ;return #1 who  are  acting ;return distinct ages of  #2,"[""SELECT['heads']"", ""FILTER['#1', 'who are acting']"", ""PROJECT['distinct ages of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_120,What is the id of the shortest trip?,return trip ;return size of  #1 ;return #1 where #2 is  shortest ;return id of  #3,"[""SELECT['trip']"", ""PROJECT['size of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""PROJECT['id of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_1200,"Show the short names of the buildings managed by ""Emma"".",return buildings ;return #1 managed by Emma ;return short names of  #2,"[""SELECT['buildings']"", ""FILTER['#1', 'managed by Emma']"", ""PROJECT['short names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_1201,"Which buildings does ""Emma"" manage? Give me the short names of the buildings.",return buildings ;return #1 that  Emma manages ;return short names of  #2,"[""SELECT['buildings']"", ""FILTER['#1', 'that Emma manages']"", ""PROJECT['short names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_1202,"Show the addresses and phones of all the buildings managed by ""Brenden"".","return buildings ;return #1 managed by Brenden ;return addresses of  #2 ;return phones of  #2 ;return #3 ,   #4","[""SELECT['buildings']"", ""FILTER['#1', 'managed by Brenden']"", ""PROJECT['addresses of #REF', '#2']"", ""PROJECT['phones of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_1203,"What are the address and phone number of the buildings managed by ""Brenden""?","return buildings ;return #1 managed by Brenden ;return addresses of #2 ;return phone numbers of #2 ;return #3 ,  #4","[""SELECT['buildings']"", ""FILTER['#1', 'managed by Brenden']"", ""PROJECT['addresses of #REF', '#2']"", ""PROJECT['phone numbers of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_1204,"What are the building full names that contain the word ""court""?",return buildings ;return full names of  #1 ;return #1 where #2 contain the  word court,"[""SELECT['buildings']"", ""PROJECT['full names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'contain the word court']""]","['select', 'project', 'comparative']",train
SPIDER_train_1205,"Find all the building full names containing the word ""court"".",return buildings ;return names of  #1 ;return #2 containing the word court,"[""SELECT['buildings']"", ""PROJECT['names of #REF', '#1']"", ""FILTER['#2', 'containing the word court']""]","['select', 'project', 'filter']",train
SPIDER_train_1206,What is the minimum and maximum number of bathrooms of all the apartments?,"return apartments ;return bathrooms in #1 ;return number of  #2 ;return minimum of  #3 ;return maximum of  #3 ;return #4 ,  #5","[""SELECT['apartments']"", ""PROJECT['bathrooms in #REF', '#1']"", ""AGGREGATE['count', '#2']"", ""AGGREGATE['min', '#3']"", ""AGGREGATE['max', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_1207,Give me the minimum and maximum bathroom count among all the apartments.,"return apartments ;return bathrooms in #1 ;return number of  #2 for each #1 ;return minimum of  #3 ;return maximum of  #3 ;return #4 ,   #5","[""SELECT['apartments']"", ""PROJECT['bathrooms in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['min', '#3']"", ""AGGREGATE['max', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'group', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_1208,What is the average number of bedrooms of all apartments?,return apartments ;return bedrooms in #1 ;return number of  #2 ;return average of  #3,"[""SELECT['apartments']"", ""PROJECT['bedrooms in #REF', '#1']"", ""AGGREGATE['count', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'project', 'aggregate', 'aggregate']",train
SPIDER_train_1209,Find the average number of bedrooms of all the apartments.,return apartments ;return number of  bedrooms of  all the #1 ;return average of  #2,"[""SELECT['apartments']"", ""PROJECT['bedrooms of all the #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['avg', '#3']""]","['select', 'project', 'group', 'aggregate']",train
SPIDER_train_121,What is the total and maximum duration of trips with bike id 636?,"return trips ;return #1 with bike id 636 ;return the  total of  #2 ;return the  maximum duration of  #2 ;return #3 ,  #4","[""SELECT['trips']"", ""FILTER['#1', 'with bike id 636']"", ""AGGREGATE['sum', '#2']"", ""PROJECT['duration of #REF', '#2']"", ""GROUP['max', '#4', '#2']"", ""UNION['#3', '#5']""]","['select', 'filter', 'aggregate', 'project', 'group', 'union']",train
SPIDER_train_1210,Return the apartment number and the number of rooms for each apartment.,"return apartments ;return apartment numbers of  #1 ;return rooms in #1 ;return number of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['apartments']"", ""PROJECT['apartment numbers of #REF', '#1']"", ""PROJECT['rooms in #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_1211,What are the apartment number and the room count of each apartment?,"return apartments ;return apartment numbers of #1 ;return rooms of #1 ;return number of  #3 for each #1 ;return #2 ,  #4","[""SELECT['apartments']"", ""PROJECT['apartment numbers of #REF', '#1']"", ""PROJECT['rooms of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_1212,"What is the average number of rooms of apartments with type code ""Studio""?",return apartments ;return type codes of #1 ;return #1 where #2 is  Studio ;return rooms of #3 ;return number of  #4 ;return average of #5,"[""SELECT['apartments']"", ""PROJECT['type codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Studio']"", ""PROJECT['rooms of #REF', '#3']"", ""AGGREGATE['count', '#4']"", ""AGGREGATE['avg', '#5']""]","['select', 'project', 'comparative', 'project', 'aggregate', 'aggregate']",train
SPIDER_train_1213,"Find the average room count of the apartments that have the ""Studio"" type code.",return apartments ;return #1 that  have  Studio type code ;return room count of  #2 ;return average of  #3,"[""SELECT['apartments']"", ""FILTER['#1', 'that have Studio type code']"", ""PROJECT['room count of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_1214,"Return the apartment numbers of the apartments with type code ""Flat"".",return apartments ;return type codes of  #1 ;return #1 where #2 is  Flat ;return apartment numbers of  #3,"[""SELECT['apartments']"", ""PROJECT['type codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Flat']"", ""PROJECT['apartment numbers of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1215,"Which apartments have type code ""Flat""? Give me their apartment numbers.",return apartments ;return type codes of #1 ;return #1 where #2 is  Flat ;return apartment numbers of #3,"[""SELECT['apartments']"", ""PROJECT['type codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Flat']"", ""PROJECT['apartment numbers of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1216,Return the first names and last names of all guests,"return guests ;return first names of  #1 ;return last names of  #1 ;return #2 ,  #3","[""SELECT['guests']"", ""PROJECT['first names of #REF', '#1']"", ""PROJECT['last names of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_1217,What are the first names and last names of all the guests?,"return guests ;return first names of  #1 ;return last names of  #1 ;return #2 ,  #3","[""SELECT['guests']"", ""PROJECT['first names of #REF', '#1']"", ""PROJECT['last names of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_1218,"Return the date of birth for all the guests with gender code ""Male"".",return guests ;return gender codes of  #1 ;return #1 where #2 is  Male ;return dates of  birth of #3,"[""SELECT['guests']"", ""PROJECT['gender codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Male']"", ""PROJECT['dates of birth of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1219,"What are dates of birth of all the guests whose gender is ""Male""?",return guests ;return gender of #1 ;return #1 where #2 is Male ;return dates of birth of  #3,"[""SELECT['guests']"", ""PROJECT['gender of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Male']"", ""PROJECT['dates of birth of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_122,What is the total and maximum duration for all trips with the bike id 636?,"return trips ;return bikes of #1 ;return ids of #2 ;return #1 where #3 is  636 ;return durations of #4 ;return sum of #5 ;return maximum of #5 ;return #6 ,  #7","[""SELECT['trips']"", ""PROJECT['bikes of #REF', '#1']"", ""PROJECT['ids of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is 636']"", ""PROJECT['durations of #REF', '#4']"", ""AGGREGATE['sum', '#5']"", ""AGGREGATE['max', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'project', 'comparative', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_1220,"Show the apartment numbers, start dates, and end dates of all the apartment bookings.","return apartment  bookings ;return apartment  numbers of  #1 ;return start dates  of  #1 ;return end dates  of  #1 ;return #2 ,  #3 ,   #4","[""SELECT['apartment bookings']"", ""PROJECT['apartment numbers of #REF', '#1']"", ""PROJECT['start dates of #REF', '#1']"", ""PROJECT['end dates of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_1221,"What are the apartment number, start date, and end date of each apartment booking?","return apartment bookings ;return apartment numbers of #1 ;return start dates of #1 ;return end dates of #1 ;return #2 ,  #3 ,   #4","[""SELECT['apartment bookings']"", ""PROJECT['apartment numbers of #REF', '#1']"", ""PROJECT['start dates of #REF', '#1']"", ""PROJECT['end dates of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_1222,"What are the booking start and end dates of the apartments with type code ""Duplex""?","return apartments ;return type codes of  #1 ;return #1 where #2 is  Duplex ;return booking start dates of  #3 ;return booking end dates of  #3 ;return #4 ,  #5","[""SELECT['apartments']"", ""PROJECT['type codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Duplex']"", ""PROJECT['booking start dates of #REF', '#3']"", ""PROJECT['booking end dates of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1223,"Return the booking start date and end date for the apartments that have type code ""Duplex"".","return apartments ;return type codes of  #1 ;return #1 where #2 is  Duplex ;return booking start date  of  #3 ;return booking end date  of  #3 ;return #4 ,  #5","[""SELECT['apartments']"", ""PROJECT['type codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Duplex']"", ""PROJECT['booking start date of #REF', '#3']"", ""PROJECT['booking end date of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1224,What are the booking start and end dates of the apartments with more than 2 bedrooms?,"return apartments ;return bedrooms of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than 2 ;return booking start dates of  #4 ;return booking end dates of  #4 ;return #5 ,  #6","[""SELECT['apartments']"", ""PROJECT['bedrooms of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 2']"", ""PROJECT['booking start dates of #REF', '#4']"", ""PROJECT['booking end dates of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1225,Find the booking start date and end date for the apartments that have more than two bedrooms.,"return apartments ;return bedrooms in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than two ;return booking start dates of  #4 ;return booking end dates of  #4 ;return #5 ,  #6","[""SELECT['apartments']"", ""PROJECT['bedrooms in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than two']"", ""PROJECT['booking start dates of #REF', '#4']"", ""PROJECT['booking end dates of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1226,"What is the booking status code of the apartment with apartment number ""Suite 634""?",return apartments ;return apartment numbers of #1 ;return #1 where #2 is Suite 634 ;return booking status code of #3,"[""SELECT['apartments']"", ""PROJECT['apartment numbers of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Suite 634']"", ""PROJECT['booking status code of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1227,"Tell me the booking status code for the apartment with number ""Suite 634"".",return apartments ;return #1 with Suite 634 ;return booking status code of  #2,"[""SELECT['apartments']"", ""FILTER['#1', 'with Suite 634']"", ""PROJECT['booking status code of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_1228,"Show the distinct apartment numbers of the apartments that have bookings with status code ""Confirmed"".",return apartments ;return bookings of #1 ;return status codes of #2 ;return #1 where #3 is  Confirmed ;return apartment numbers of #4 ;return distinct #5,"[""SELECT['apartments']"", ""PROJECT['bookings of #REF', '#1']"", ""PROJECT['status codes of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Confirmed']"", ""PROJECT['apartment numbers of #REF', '#4']"", ""PROJECT['distinct #REF', '#5']""]","['select', 'project', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_1229,"Which apartments have bookings with status code ""Confirmed""? Return their apartment numbers.",return apartments ;return bookings of  #1 ;return statuses of  #2 ;return codes of  #3 ;return #1 where #4 is  Confirmed ;return apartment numbers of  #5,"[""SELECT['apartments']"", ""PROJECT['bookings of #REF', '#1']"", ""PROJECT['statuses of #REF', '#2']"", ""PROJECT['codes of #REF', '#3']"", ""COMPARATIVE['#1', '#4', 'is Confirmed']"", ""PROJECT['apartment numbers of #REF', '#5']""]","['select', 'project', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_123,"For each zip code, return the average mean temperature of August there.",return zip codes ;return temperatures of  #1 ;return #2 in August ;return mean of  #3 ;return average of  #4 for each #1,"[""SELECT['zip codes']"", ""PROJECT['temperatures of #REF', '#1']"", ""FILTER['#2', 'in August']"", ""AGGREGATE['avg', '#3']"", ""GROUP['avg', '#4', '#1']"", ""UNION['#1', '#5']""]","['select', 'project', 'filter', 'aggregate', 'group', 'union']",train
SPIDER_train_1230,"Show the average room count of the apartments that have booking status code ""Provisional"".",return apartments ;return booking status codes of #1 ;return #1 where #2 is Provisional ;return rooms of #3 ;return number of  #4 for each #3 ;return average of #5,"[""SELECT['apartments']"", ""PROJECT['booking status codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Provisional']"", ""PROJECT['rooms of #REF', '#3']"", ""GROUP['count', '#4', '#3']"", ""AGGREGATE['avg', '#5']""]","['select', 'project', 'comparative', 'project', 'group', 'aggregate']",train
SPIDER_train_1231,"What is the average room count of the apartments whose booking status code is ""Provisional""?",return apartments ;return #1 whose booking status code is  Provisional ;return the  room count of  #2 ;return the  average of  #3,"[""SELECT['apartments']"", ""FILTER['#1', 'whose booking status code is Provisional']"", ""PROJECT['the room count of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_1232,"Show the guest first names, start dates, and end dates of all the apartment bookings.","return all apartment bookings ;return the  guest first names of  #1 ;return the  start dates  of  #1 ;return the  end dates  of  #1 ;return #2 ,  #3 ,   #4","[""SELECT['all apartment bookings']"", ""PROJECT['the guest first names of #REF', '#1']"", ""PROJECT['the start dates of #REF', '#1']"", ""PROJECT['the end dates of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_1233,"What are the guest first name, start date, and end date of each apartment booking?","return apartment bookings ;return guest first names of  #1 ;return start dates of  #1 ;return end dates of  #1 ;return #2 ,  #3 ,   #4","[""SELECT['apartment bookings']"", ""PROJECT['guest first names of #REF', '#1']"", ""PROJECT['start dates of #REF', '#1']"", ""PROJECT['end dates of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_1234,"Show the start dates and end dates of all the apartment bookings made by guests with gender code ""Female"".","return apartment bookings ;return guests that  made #1 ;return gender codes of  #2 ;return #1 where #3 is  Female ;return start dates  of  #4 ;return end dates  of  #4 ;return #5 ,  #6","[""SELECT['apartment bookings']"", ""PROJECT['guests that made #REF', '#1']"", ""PROJECT['gender codes of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Female']"", ""PROJECT['start dates of #REF', '#4']"", ""PROJECT['end dates of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1235,"What are the start date and end date of the apartment bookings made by female guests (gender code ""Female"")?","return apartment bookings ;return #1 made by female guests ;return start dates of  #2 ;return end dates of  #2 ;return #3 ,  #4","[""SELECT['apartment bookings']"", ""FILTER['#1', 'made by female guests']"", ""PROJECT['start dates of #REF', '#2']"", ""PROJECT['end dates of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_1236,"Show the first names and last names of all the guests that have apartment bookings with status code ""Confirmed"".","return guests ;return apartment bookings of #1 ;return status codes of #2 ;return #1 where #3 is  Confirmed ;return first names  of #4 ;return last names  of #4 ;return #5 ,  #6","[""SELECT['guests']"", ""PROJECT['apartment bookings of #REF', '#1']"", ""PROJECT['status codes of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Confirmed']"", ""PROJECT['first names of #REF', '#4']"", ""PROJECT['last names of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1237,"Which guests have apartment bookings with status code ""Confirmed""? Return their first names and last names.","return guests ;return apartment bookings of #1 ;return status codes of #2 ;return #1 where #3 is  Confirmed ;return first names  of #4 ;return last names  of #4 ;return #5 ,  #6","[""SELECT['guests']"", ""PROJECT['apartment bookings of #REF', '#1']"", ""PROJECT['status codes of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Confirmed']"", ""PROJECT['first names of #REF', '#4']"", ""PROJECT['last names of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1238,Show the facility codes of apartments with more than 4 bedrooms.,return apartments ;return bedrooms in #1 ;return number of  #2 for each #1 ;return #1 where #3 is  more than  4 ;return the  facility codes of #4,"[""SELECT['apartments']"", ""PROJECT['bedrooms in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than 4']"", ""PROJECT['the facility codes of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_1239,What are the facility codes of the apartments with more than four bedrooms?,return apartments ;return bedrooms of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  higher than four ;return facility codes of #4,"[""SELECT['apartments']"", ""PROJECT['bedrooms of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than four']"", ""PROJECT['facility codes of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_124,"For each zip code, what is the average mean temperature for all dates that start with '8'?",return zip codes ;return mean temperatures of #1 ;return dates of #2 ;return #2 where #3 start with  '8 ;return the  average of #4 for each #1,"[""SELECT['zip codes']"", ""PROJECT['mean temperatures of #REF', '#1']"", ""PROJECT['dates of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'start with 8']"", ""GROUP['avg', '#4', '#1']"", ""UNION['#1', '#5']""]","['select', 'project', 'project', 'comparative', 'group', 'union']",train
SPIDER_train_1240,"Show the total number of rooms of all apartments with facility code ""Gym"".",return apartments ;return #1 with  facility code Gym ;return the  rooms of #2 ;return the  number of  #3 for each #2 ;return sum of #4,"[""SELECT['apartments']"", ""FILTER['#1', 'with facility code Gym']"", ""PROJECT['the rooms of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""AGGREGATE['sum', '#4']""]","['select', 'filter', 'project', 'group', 'aggregate']",train
SPIDER_train_1241,"Find the total number of rooms in the apartments that have facility code ""Gym"".",return apartments ;return #1 with  facility code Gym ;return rooms of  #2 ;return number of #3,"[""SELECT['apartments']"", ""FILTER['#1', 'with facility code Gym']"", ""PROJECT['rooms of #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_1242,"Show the total number of rooms of the apartments in the building with short name ""Columbus Square"".",return apartments ;return #1 in the  building with short name Columbus Square ;return the  number of  rooms of  #2 ;return sum of #3,"[""SELECT['apartments']"", ""FILTER['#1', 'in the building with short name Columbus Square']"", ""PROJECT['rooms of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""AGGREGATE['sum', '#4']""]","['select', 'filter', 'project', 'group', 'aggregate']",train
SPIDER_train_1243,"How many rooms in total are there in the apartments in the building with short name ""Columbus Square""?",return buildings ;return short names of  #1 ;return #1 where  #2 is Columbus Square ;return apartments in #3 ;return rooms in #4 ;return number of  #5,"[""SELECT['buildings']"", ""PROJECT['short names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Columbus Square']"", ""PROJECT['apartments in #REF', '#3']"", ""PROJECT['rooms in #REF', '#4']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'aggregate']",train
SPIDER_train_1244,Show the addresses of the buildings that have apartments with more than 2 bathrooms.,return buildings ;return apartments of  #1 ;return bathrooms in #2 ;return number of  #3 for each  #2 ;return #1 where #4 is  higher than 2 ;return addresses of  #5,"[""SELECT['buildings']"", ""PROJECT['apartments of #REF', '#1']"", ""PROJECT['bathrooms in #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""COMPARATIVE['#1', '#4', 'is higher than 2']"", ""PROJECT['addresses of #REF', '#5']""]","['select', 'project', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_1245,Which buildings have apartments that have more than two bathrooms? Give me the addresses of the buildings.,return apartments ;return number of  bathrooms for each  #1 ;return #1 where #2 is  more than two ;return building of  #3 ;return addresses of  #4,"[""SELECT['apartments']"", ""PROJECT['bathrooms', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than two']"", ""PROJECT['building of #REF', '#4']"", ""PROJECT['addresses of #REF', '#5']""]","['select', 'project', 'group', 'comparative', 'project', 'project']",train
SPIDER_train_1246,"Show the apartment type codes and apartment numbers in the buildings managed by ""Kyle"".","return buildings ;return #1 managed by Kyle ;return apartments in #2 ;return apartment  type codes of  #3 ;return apartment  numbers of  #3 ;return #4 ,  #5","[""SELECT['buildings']"", ""FILTER['#1', 'managed by Kyle']"", ""PROJECT['apartments in #REF', '#2']"", ""PROJECT['apartment type codes of #REF', '#3']"", ""PROJECT['apartment numbers of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_1247,"What apartment type codes and apartment numbers do the buildings managed by ""Kyle"" have?","return buildings ;return #1 which are  managed by Kyle ;return the  apartments of  #2 ;return the  apartment  type codes of  #3 ;return the  apartment  numbers of  #3 ;return #4 ,  #5","[""SELECT['buildings']"", ""FILTER['#1', 'which are managed by Kyle']"", ""PROJECT['the apartments of #REF', '#2']"", ""PROJECT['the apartment type codes of #REF', '#3']"", ""PROJECT['the apartment numbers of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_1248,Show the booking status code and the corresponding number of bookings.,"return bookings ;return status codes of #1 ;return number of  #1 for each #2 ;return #2 ,  #3","[""SELECT['bookings']"", ""PROJECT['status codes of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""UNION['#2', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_1249,How many bookings does each booking status have? List the booking status code and the number of corresponding bookings.,"return booking statuses ;return bookings that  have  #1 ;return number of  #2 for each  #1 ;return booking status  codes of  #1 ;return #4 ,  #3","[""SELECT['booking statuses']"", ""PROJECT['bookings that have #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['booking status codes of #REF', '#1']"", ""UNION['#4', '#3']""]","['select', 'project', 'group', 'project', 'union']",train
SPIDER_train_125,"From the trip record, find the number of unique bikes.",return trip record ;return bikes in #1 ;return number of unique #2,"[""SELECT['trip record']"", ""PROJECT['bikes in #REF', '#1']"", ""PROJECT['unique #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_1250,Return all the apartment numbers sorted by the room count in ascending order.,return apartments ;return apartment numbers of  #1 ;return room counts of  #1 ;return #2 sorted by #3 in ascending order,"[""SELECT['apartments']"", ""PROJECT['apartment numbers of #REF', '#1']"", ""PROJECT['room counts of #REF', '#1']"", ""SORT['#2', '#3', 'in ascending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_1251,Sort the apartment numbers in ascending order of room count.,return apartments ;return apartment numbers of  #1 ;return room counts of  #1 ;return #2 sorted by #3 in ascending order,"[""SELECT['apartments']"", ""PROJECT['apartment numbers of #REF', '#1']"", ""PROJECT['room counts of #REF', '#1']"", ""SORT['#2', '#3', 'in ascending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_1252,Return the apartment number with the largest number of bedrooms.,return apartment numbers ;return bedrooms of  #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is highest,"[""SELECT['apartment numbers']"", ""PROJECT['bedrooms of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_1253,What is the apartment number of the apartment with the most beds?,return apartments ;return beds in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return apartment  number of  #4,"[""SELECT['apartments']"", ""PROJECT['beds in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'group', 'superlative', 'aggregate']",train
SPIDER_train_1254,Show the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order.,"return apartment type codes ;return apartments  with #1 ;return number of  #2 for each  #1 ;return #1 ,  #3 ;return #4 sorted by #3 in ascending order","[""SELECT['apartment type codes']"", ""PROJECT['apartments with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']"", ""SORT['#4', '#3', 'in ascending order']""]","['select', 'project', 'group', 'union', 'sort']",train
SPIDER_train_1255,"Return each apartment type code with the number of apartments having that apartment type, in ascending order of the number of apartments.","return apartment type  codes ;return apartments  having #1 ;return number of  #2 for each  #1 ;return #1 ,  #3 ;return #4 sorted by #3 in ascending order","[""SELECT['apartment type codes']"", ""PROJECT['apartments having #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']"", ""SORT['#4', '#3', 'in ascending order']""]","['select', 'project', 'group', 'union', 'sort']",train
SPIDER_train_1256,Show the top 3 apartment type codes sorted by the average number of rooms in descending order.,return apartment type codes ;return average number of rooms of  #1 ;return #1 sorted by #2 in  descending order ;return top 3 of #3,"[""SELECT['apartment type codes']"", ""PROJECT['rooms of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""GROUP['avg', '#3', '#1']"", ""SORT['#1', '#4', 'in descending order']"", ""PROJECT['top 3 of #REF', '#5']""]","['select', 'project', 'group', 'group', 'sort', 'project']",train
SPIDER_train_1257,What are the top three apartment types in terms of the average room count? Give me the,"return apartment types ;return average room count of #1 ;return #1 where #2 is highest ;return #1 besides  #3 ;return #4 where #2 is highest ;return #4 besides  #5 ;return #6 where #2 is highest ;return #3 ,  #5 ,   #7","[""SELECT['apartment types']"", ""PROJECT['room count of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""DISCARD['#1', '#4']"", ""SUPERLATIVE['max', '#5', '#3']"", ""DISCARD['#5', '#6']"", ""SUPERLATIVE['max', '#7', '#3']"", ""UNION['#4', '#6', '#8']""]","['select', 'project', 'group', 'superlative', 'discard', 'superlative', 'discard', 'superlative', 'union']",train
SPIDER_train_1258,"Show the apartment type code that has the largest number of total rooms, together with the number of bathrooms and number of bedrooms.","return apartments ;return type codes of   #1 ;return rooms of   #2 ;return number of  #3 for each #2 ;return #2 where #4 is highest ;return bathrooms of   #5 ;return bedrooms of   #5 ;return number of  #6 ;return number of  #7 ;return #5 ,  #8 ,   #9","[""SELECT['apartments']"", ""PROJECT['type codes of #REF', '#1']"", ""PROJECT['rooms of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""SUPERLATIVE['max', '#2', '#4']"", ""PROJECT['bathrooms of #REF', '#5']"", ""PROJECT['bedrooms of #REF', '#5']"", ""AGGREGATE['count', '#6']"", ""AGGREGATE['count', '#7']"", ""UNION['#5', '#8', '#9']""]","['select', 'project', 'project', 'group', 'superlative', 'project', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_1259,"Which apartment type has the largest number of total rooms? Return the apartment type code, its number of bathrooms and number of bedrooms.","return apartment  types ;return rooms of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return apartment  type  code of  #4 ;return bathrooms of  #5 ;return number of  #6 ;return bedrooms of  #6 ;return number of  #8 ;return #5 ,  #7 ,   #9","[""SELECT['apartment types']"", ""PROJECT['rooms of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['apartment type code of #REF', '#4']"", ""PROJECT['bathrooms of #REF', '#5']"", ""AGGREGATE['count', '#6']"", ""PROJECT['bedrooms of #REF', '#6']"", ""AGGREGATE['count', '#8']"", ""UNION['#5', '#7', '#9']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'aggregate', 'project', 'aggregate', 'union']",train
SPIDER_train_126,How many different bike ids are there?,return bike ids ;return different #1 ;return number of #2,"[""SELECT['bike ids']"", ""PROJECT['different #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_1260,Show the most common apartment type code.,return apartment type codes ;return apartments of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['apartment type codes']"", ""PROJECT['apartments of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_1261,Which apartment type code appears the most often?,return apartments ;return type codes of  #1 ;return number of  #2 for each #1 ;return #2 where #3 is highest,"[""SELECT['apartments']"", ""PROJECT['type codes of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#2', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_1262,Show the most common apartment type code among apartments with more than 1 bathroom.,return apartment type codes ;return apartments of #1 ;return bathrooms of #2 ;return number of  #3 for each #2 ;return #2 where #4 is  higher than 1 ;return number of  #5 for each #1 ;return #1 where #6 is  highest,"[""SELECT['apartment type codes']"", ""PROJECT['apartments of #REF', '#1']"", ""PROJECT['bathrooms of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""COMPARATIVE['#2', '#4', 'is higher than 1']"", ""GROUP['count', '#5', '#1']"", ""SUPERLATIVE['max', '#1', '#6']""]","['select', 'project', 'project', 'group', 'comparative', 'group', 'superlative']",train
SPIDER_train_1263,Which apartment type code is the most common among apartments with more than one bathroom?,return apartments ;return bathrooms of #1 ;return number of  #2 for each #1 ;return #1 where #3 is higher than one ;return apartment type codes of #4 ;return number of  #4 for each #5 ;return #5 where #6 is highest,"[""SELECT['apartments']"", ""PROJECT['bathrooms of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than one']"", ""PROJECT['apartment type codes of #REF', '#4']"", ""GROUP['count', '#4', '#5']"", ""SUPERLATIVE['max', '#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'group', 'superlative']",train
SPIDER_train_1264,"Show each apartment type code, and the maximum and minimum number of rooms for each type.","return apartment type codes ;return rooms of #1 ;return number of  #2 for each #1 ;return maximum of #3 ;return minimum of #3 ;return #1 ,  #4 ,   #5","[""SELECT['apartment type codes']"", ""PROJECT['rooms of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['max', '#3']"", ""AGGREGATE['min', '#3']"", ""UNION['#1', '#4', '#5']""]","['select', 'project', 'group', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_1265,Return each apartment type code along with the maximum and minimum number of rooms among each type.,"return apartment types ;return codes of #1 ;return rooms of #1 ;return number of  #3 ;return maximum of #4 for each #1 ;return minimum of #4 for each #1 ;return #2 ,  #5 ,   #6","[""SELECT['apartment types']"", ""PROJECT['codes of #REF', '#1']"", ""PROJECT['rooms of #REF', '#1']"", ""AGGREGATE['count', '#3']"", ""GROUP['max', '#4', '#1']"", ""GROUP['min', '#4', '#1']"", ""UNION['#2', '#5', '#6']""]","['select', 'project', 'project', 'aggregate', 'group', 'group', 'union']",train
SPIDER_train_1266,Show each gender code and the corresponding count of guests sorted by the count in descending order.,"return gender codes ;return guests with #1 ;return number of  #2 for each  #1 ;return #1 ,  #3 ;return #4 sorted by #3 in descending order","[""SELECT['gender codes']"", ""PROJECT['guests with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']"", ""SORT['#4', '#3', 'in descending order']""]","['select', 'project', 'group', 'union', 'sort']",train
SPIDER_train_1267,Sort the gender codes in descending order of their corresponding number of guests. Return both the gender codes and counts.,"return gender codes ;return guests with #1 ;return number of  #2 for each  #1 ;return #1 ,  #3 ;return #4 sorted by #3 in descending order","[""SELECT['gender codes']"", ""PROJECT['guests with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']"", ""SORT['#4', '#3', 'in descending order']""]","['select', 'project', 'group', 'union', 'sort']",train
SPIDER_train_1268,How many apartments do not have any facility?,return apartments ;return #1 with  facility ;return #1 besides #2 ;return number of #3,"[""SELECT['apartments']"", ""FILTER['#1', 'with facility']"", ""DISCARD['#1', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'discard', 'aggregate']",train
SPIDER_train_1269,Find the number of apartments that have no facility.,return apartments ;return #1 with  facilities ;return #1 besides #2 ;return number of #3,"[""SELECT['apartments']"", ""FILTER['#1', 'with facilities']"", ""DISCARD['#1', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'discard', 'aggregate']",train
SPIDER_train_127,What is the number of distinct cities the stations are located at?,return stations ;return cities #1 are  located at ;return number of  distinct #2,"[""SELECT['stations']"", ""PROJECT['cities #REF are located at', '#1']"", ""PROJECT['distinct #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_1270,"Show the apartment numbers of apartments with bookings that have status code both ""Provisional"" and ""Confirmed""",return apartments ;return bookings of  #1 ;return #1 where #2 is  Provisional ;return #1 where #2 is  Confirmed ;return #1 of  both #3 and  #4 ;return apartment numbers of  #5,"[""SELECT['apartments']"", ""PROJECT['bookings of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Provisional']"", ""COMPARATIVE['#1', '#2', 'is Confirmed']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['apartment numbers of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_1271,"Which apartments have bookings with both status codes ""Provisional"" and ""Confirmed""? Give me the apartment numbers.",return apartments ;return bookings of #1 ;return status codes of #2 ;return #1 where #3 is Provisional ;return #1 where #3 is Confirmed ;return #1 of both #4 and  #5 ;return apartment numbers of #6,"[""SELECT['apartments']"", ""PROJECT['bookings of #REF', '#1']"", ""PROJECT['status codes of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Provisional']"", ""COMPARATIVE['#1', '#3', 'is Confirmed']"", ""INTERSECTION['#1', '#4', '#5']"", ""PROJECT['apartment numbers of #REF', '#6']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_1272,Show the apartment numbers of apartments with unit status availability of both 0 and 1.,return apartments ;return unit status availabilities of  #1 ;return #1 where #2 is  0 ;return #1 where #2 is  1 ;return #1 of  both #3 and  #4 ;return apartment numbers of  #5,"[""SELECT['apartments']"", ""PROJECT['unit status availabilities of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 0']"", ""COMPARATIVE['#1', '#2', 'is 1']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['apartment numbers of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_1273,Which apartments have unit status availability of both 0 and 1? Return their apartment numbers.,return apartments ;return unit status availabilities of #1 ;return #1 where #2 is 0 ;return #1 where #2 is 1 ;return #1 in  both #3 and  #4 ;return apartment numbers of #5,"[""SELECT['apartments']"", ""PROJECT['unit status availabilities of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 0']"", ""COMPARATIVE['#1', '#2', 'is 1']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['apartment numbers of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_1274,How many games are held after season 2007?,return games ;return seasons of  #1 ;return #1 where  #2 is  higher than 2007 ;return number of #3,"[""SELECT['games']"", ""PROJECT['seasons of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 2007']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_1275,List the dates of games by the home team name in descending order.,return games ;return dates of  #1 ;return home teams of  #1 ;return names of  #3 ;return #2 sorted by #4 in descending order,"[""SELECT['games']"", ""PROJECT['dates of #REF', '#1']"", ""PROJECT['home teams of #REF', '#1']"", ""PROJECT['names of #REF', '#3']"", ""SORT['#2', '#4', 'in descending order']""]","['select', 'project', 'project', 'project', 'sort']",train
SPIDER_train_1276,"List the season, home team, away team of all the games.","return games ;return seasons of  #1 ;return home teams of  #1 ;return away teams of  #1 ;return #2 ,  #3 , #4","[""SELECT['games']"", ""PROJECT['seasons of #REF', '#1']"", ""PROJECT['home teams of #REF', '#1']"", ""PROJECT['away teams of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_1277,"What are the maximum, minimum and average home games each stadium held?","return stadiums ;return home games #1 held ;return number of  #2 for each  #1 ;return maximum of  #3 ;return minimum of  #3 ;return average of  #3 ;return #4 ,  #5 ,   #6","[""SELECT['stadiums']"", ""PROJECT['home games #REF held', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['max', '#3']"", ""AGGREGATE['min', '#3']"", ""AGGREGATE['avg', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'project', 'group', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_1278,What is the average attendance of stadiums with capacity percentage higher than 100%?,return stadiums ;return capacity percentage of #1 ;return #1 where #2 is higher than 100 % ;return attendances of #3 ;return average of #4,"[""SELECT['stadiums']"", ""PROJECT['capacity percentage of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 100 %']"", ""PROJECT['attendances of #REF', '#3']"", ""AGGREGATE['avg', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_1279,"What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?","return players ;return injuries of #1 ;return #1 where #2 is  not 'Knee problem ;return player names of #3 ;return matches of #3 ;return number of  #5 for each #3 ;return information source of #3 ;return #4 ,  #6 ,   #7","[""SELECT['players']"", ""PROJECT['injuries of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not Knee problem']"", ""PROJECT['player names of #REF', '#3']"", ""PROJECT['matches of #REF', '#3']"", ""GROUP['count', '#5', '#3']"", ""PROJECT['information source of #REF', '#3']"", ""UNION['#4', '#6', '#7']""]","['select', 'project', 'comparative', 'project', 'project', 'group', 'project', 'union']",train
SPIDER_train_128,How many different cities have these stations?,return these stations ;return cities that  have  #1 ;return different #2 ;return number of  #3,"[""SELECT['these stations']"", ""PROJECT['cities that have #REF', '#1']"", ""PROJECT['different #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_1280,What is the season of the game which causes the player 'Walter Samuel' to get injured?,return 'Walter Samuel ;return game that  causes #1 to  get injured ;return season of #2,"[""SELECT['Walter Samuel']"", ""PROJECT['game that causes #REF to get injured', '#1']"", ""PROJECT['season of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_1281,"What are the ids, scores, and dates of the games which caused at least two injury accidents?","return games ;return injury accidents of #1 ;return number of  #2 for each #1 ;return #1 where #3 is at least two ;return ids of #4 ;return scores of #4 ;return dates of #4 ;return #5 ,  #6 ,   #7","[""SELECT['games']"", ""PROJECT['injury accidents of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""PROJECT['ids of #REF', '#4']"", ""PROJECT['scores of #REF', '#4']"", ""PROJECT['dates of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_1282,What are the id and name of the stadium where the most injury accidents happened?,"return stadiums ;return injury accidents in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return id of  #4 ;return name of  #4 ;return #5 ,  #6","[""SELECT['stadiums']"", ""PROJECT['injury accidents in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['id of #REF', '#4']"", ""PROJECT['name of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_1283,Find the id and name of the stadium where the largest number of injury accidents occurred.,"return stadiums ;return injury accidents of  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  highest ;return id of  #4 ;return name of  #4 ;return #5 ,   #6","[""SELECT['stadiums']"", ""PROJECT['injury accidents of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['id of #REF', '#4']"", ""PROJECT['name of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_1284,In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'?,"return players ;return injuries of #1 ;return #1 where #2 is  'Foot injury  ;return #1 where #2 is  'Knee problem ;return #3 ,  #4 ;return seasons of #5 ;return stadiums of #5 ;return #6 ,  #7","[""SELECT['players']"", ""PROJECT['injuries of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Foot injury']"", ""COMPARATIVE['#1', '#2', 'is Knee problem']"", ""UNION['#3', '#4']"", ""PROJECT['seasons of #REF', '#5']"", ""PROJECT['stadiums of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project', 'project', 'union']",train
SPIDER_train_1285,How many different kinds of information sources are there for injury accidents?,return injury accidents ;return information sources for #1 ;return different #2 ;return number of #3,"[""SELECT['injury accidents']"", ""PROJECT['information sources for #REF', '#1']"", ""PROJECT['different #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_1286,How many games are free of injury accidents?,return games ;return #1 with  injury accidents ;return #1 besides #2 ;return number of #3,"[""SELECT['games']"", ""FILTER['#1', 'with injury accidents']"", ""DISCARD['#1', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'discard', 'aggregate']",train
SPIDER_train_1287,How many distinct kinds of injuries happened after season 2010?,return injuries ;return #1 from  after 2010 season ;return distinct #2 ;return number of #3,"[""SELECT['injuries']"", ""FILTER['#1', 'from after 2010 season']"", ""PROJECT['distinct #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_1288,List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured.,return stadiums ;return players injured in #1 ;return #1 where  #2 is 'Walter Samuel ;return #1 where  #2 is 'Thiago Motta ;return #1 of  both #3 and #4 ;return name of  #5,"[""SELECT['stadiums']"", ""PROJECT['players injured in #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Walter Samuel']"", ""COMPARATIVE['#1', '#2', 'is Thiago Motta']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['name of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_1289,"Show the name, average attendance, total attendance for stadiums where no accidents happened.","return stadiums ;return stadiums with  accidents ;return #1 besides #2 ;return names of  #3 ;return average attendance of  #3 ;return total attendance of  #3 ;return #4 ,  #5 , #6","[""SELECT['stadiums']"", ""SELECT['stadiums with accidents']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['attendance of #REF', '#3']"", ""GROUP['avg', '#5', '#3']"", ""PROJECT['attendance of #REF', '#3']"", ""GROUP['sum', '#7', '#3']"", ""UNION['#4', '#6', '#8']""]","['select', 'select', 'discard', 'project', 'project', 'group', 'project', 'group', 'union']",train
SPIDER_train_129,How many stations does Mountain View city has?,return Mountain View city ;return stations of  #1 ;return number of  #2,"[""SELECT['Mountain View city']"", ""PROJECT['stations of #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_1290,"Which stadium name contains the substring ""Bank""?",return stadiums ;return names of  #1 ;return #1 where #2 contains substring Bank ;return name of  #3,"[""SELECT['stadiums']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'contains substring Bank']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1291,How many games has each stadium held?,return stadiums ;return games held in #1 ;return number of #2 for each #1,"[""SELECT['stadiums']"", ""PROJECT['games held in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_1292,"For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.","return injury accidents ;return games of   #1 ;return date of   #2 ;return injured player of   #1 ;return name of   #4 ;return game  season of   #2 ;return #3 ,  #5 ;return #7 sorted by #6","[""SELECT['injury accidents']"", ""PROJECT['games of #REF', '#1']"", ""PROJECT['date of #REF', '#2']"", ""PROJECT['injured player of #REF', '#1']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['game season of #REF', '#2']"", ""UNION['#3', '#5']"", ""SORT['#7', '#6']""]","['select', 'project', 'project', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_1293,List all country and league names.,"return countries ;return names of  #1 ;return leagues of  #1 ;return names of  #3 ;return #2 ,  #4","[""SELECT['countries']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['leagues of #REF', '#1']"", ""PROJECT['names of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_1294,How many leagues are there in England?,return leagues ;return #1 in England ;return number of  #2,"[""SELECT['leagues']"", ""FILTER['#1', 'in England']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_1295,What is the average weight of all players?,return players ;return weight of  #1 ;return average of  #2,"[""SELECT['players']"", ""PROJECT['weight of #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_1296,What is the maximum and minimum height of all players?,"return players ;return heights of #1 ;return the  lowest #2 ;return the  highest #2 ;return #4 ,  #3","[""SELECT['players']"", ""PROJECT['heights of #REF', '#1']"", ""AGGREGATE['min', '#2']"", ""AGGREGATE['max', '#2']"", ""UNION['#4', '#3']""]","['select', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_1297,List all player names who have an overall rating higher than the average.,return players ;return overall ratings of #1 ;return the  average of #2 ;return #1 where #2 is  higher than #3 ;return the  names of #4,"[""SELECT['players']"", ""PROJECT['overall ratings of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['the names of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_1298,What are the names of players who have the best dribbling?,return players ;return #1 who have the  best dribbling ;return the  names of #2,"[""SELECT['players']"", ""FILTER['#1', 'who have the best dribbling']"", ""PROJECT['the names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_1299,List the names of all players who have a crossing score higher than 90 and prefer their right foot.,return players ;return crossing scores of  #1 ;return #1 where  #2 is higher than 90 ;return foot #1 prefer ;return #1 where  #4 is right foot ;return #1 of  both #3 and #5 ;return names of  #6,"[""SELECT['players']"", ""PROJECT['crossing scores of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 90']"", ""PROJECT['foot #REF prefer', '#1']"", ""COMPARATIVE['#1', '#4', 'is right foot']"", ""INTERSECTION['#1', '#3', '#5']"", ""PROJECT['names of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'comparative', 'intersection', 'project']",train
SPIDER_train_13,List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.,return states ;return #1 where  secretary  of  'Treasury department born ;return #1 where  secretary  of  'Homeland Security born ;return #1 of  both #2 and #3,"[""SELECT['states']"", ""FILTER['#1', 'where secretary of Treasury department born']"", ""FILTER['#1', 'where secretary of Homeland Security born']"", ""INTERSECTION['#1', '#2', '#3']""]","['select', 'filter', 'filter', 'intersection']",train
SPIDER_train_130,How many stations are in Mountain View?,return stations ;return #1 in Mountain View ;return the  number of  #2,"[""SELECT['stations']"", ""FILTER['#1', 'in Mountain View']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_1300,List the names of all left-footed players who have overall rating between 85 and 90.,return left-footed players ;return ratings of  #1 ;return #1 where  #2 is at least 85 ;return #1 where  #2 is at most 90 ;return #1 of  both #3 and #4 ;return names of  #5,"[""SELECT['left-footed players']"", ""PROJECT['ratings of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least 85']"", ""COMPARATIVE['#1', '#2', 'is at most 90']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_1301,What is the average rating for right-footed players and left-footed players?,"return players  ;return #1 who are right-footed ;return #1 who are left-footed ;return #2 ,  #3 ;return ratings of #4 ;return average of #5","[""SELECT['players']"", ""FILTER['#1', 'who are right-footed']"", ""FILTER['#1', 'who are left-footed']"", ""UNION['#2', '#3']"", ""PROJECT['ratings of #REF', '#4']"", ""AGGREGATE['avg', '#5']""]","['select', 'filter', 'filter', 'union', 'project', 'aggregate']",train
SPIDER_train_1302,"Of all players with an overall rating greater than 80, how many are right-footed and left-footed?","return players ;return overall ratings of  #1 ;return #1 where #2 is  higher than 80 ;return #3 that  are  right-footed ;return number of  #4 ;return #3 that  are  left-footed ;return number of  #6 ;return #5 ,  #7","[""SELECT['players']"", ""PROJECT['overall ratings of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 80']"", ""FILTER['#3', 'that are right-footed']"", ""AGGREGATE['count', '#4']"", ""FILTER['#3', 'that are left-footed']"", ""AGGREGATE['count', '#6']"", ""UNION['#5', '#7']""]","['select', 'project', 'comparative', 'filter', 'aggregate', 'filter', 'aggregate', 'union']",train
SPIDER_train_1303,List all of the player ids with a height of at least 180cm and an overall rating higher than 85.,return player ids of  ;return heights of  #1 ;return #1 where #2 is  at least 180cm ;return overall ratings of  #1 ;return #1 where #4 is  higher than 85 ;return #1 of  both #3 and  #5,"[""SELECT['player ids of']"", ""PROJECT['heights of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least 180cm']"", ""PROJECT['overall ratings of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is higher than 85']"", ""INTERSECTION['#1', '#3', '#5']""]","['select', 'project', 'comparative', 'project', 'comparative', 'intersection']",train
SPIDER_train_1304,List all of the ids for left-footed players with a height between 180cm and 190cm.,return players ;return #1 that  are  left-footed ;return heights of  #2 ;return #1 where  #3 is at least 180cm ;return #1 where  #3 is at most 190cm ;return #1 of  both #4 and #5,"[""SELECT['players']"", ""FILTER['#1', 'that are left-footed']"", ""PROJECT['heights of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is at least 180cm']"", ""COMPARATIVE['#1', '#3', 'is at most 190cm']"", ""INTERSECTION['#1', '#4', '#5']""]","['select', 'filter', 'project', 'comparative', 'comparative', 'intersection']",train
SPIDER_train_1305,Who are the top 3 players in terms of overall rating?,return players ;return overall ratings of  #1 ;return #1 where #2 is  top 3,"[""SELECT['players']"", ""PROJECT['overall ratings of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is top 3']""]","['select', 'project', 'comparative']",train
SPIDER_train_1306,List the names and birthdays of the top five players in terms of potential.,"return players ;return potential of #1 ;return #1 where #2 is  top five ;return names of #3 ;return birthdays of #3 ;return #4 ,  #5","[""SELECT['players']"", ""PROJECT['potential of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is top five']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['birthdays of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1307,How many performances are there?,return performances ;return number of  #1,"[""SELECT['performances']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_1308,List the hosts of performances in ascending order of attendance.,return performances ;return hosts of  #1 ;return attendance of  #1 ;return #2 sorted by #3 in ascending order,"[""SELECT['performances']"", ""PROJECT['hosts of #REF', '#1']"", ""PROJECT['attendance of #REF', '#1']"", ""SORT['#2', '#3', 'in ascending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_1309,What are the dates and locations of performances?,"return performances ;return dates of  #1 ;return locations of  #1 ;return #2 ,  #3","[""SELECT['performances']"", ""PROJECT['dates of #REF', '#1']"", ""PROJECT['locations of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_131,Return the unique name for stations that have ever had 7 bikes available.,return stations ;return available bikes of #1 ;return number of  #2 for each #1 ;return #1 where #3 was  ever equal to 7 ;return the  unique names of #4,"[""SELECT['stations']"", ""PROJECT['available bikes of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'was ever equal to 7']"", ""PROJECT['the unique names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_1310,"Show the attendances of the performances at location ""TD Garden"" or ""Bell Centre""",return performances ;return #1 that  are  TD Garden ;return #1 that  are  Bell Centre ;return #2 or #3 ;return attendances of #4,"[""SELECT['performances']"", ""FILTER['#1', 'that are TD Garden']"", ""FILTER['#1', 'that are Bell Centre']"", ""UNION['#2', '#3']"", ""PROJECT['attendances of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_1311,What is the average number of attendees for performances?,return performances ;return number of  attendees for #1 ;return average of  #2,"[""SELECT['performances']"", ""PROJECT['attendees for #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['avg', '#3']""]","['select', 'project', 'group', 'aggregate']",train
SPIDER_train_1312,What is the date of the performance with the highest number of attendees?,return performances ;return the  number of  attendees for each  #1 ;return #1 where #2 is  the  highest ;return the  date of  #3,"[""SELECT['performances']"", ""PROJECT['attendees', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']"", ""PROJECT['the date of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_1313,Show different locations and the number of performances at each location.,"return locations ;return the  different #1 ;return performances at #2 ;return number of  #3 for each #2 ;return #2 ,  #4","[""SELECT['locations']"", ""PROJECT['the different #REF', '#1']"", ""PROJECT['performances at #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_1314,Show the most common location of performances.,return locations ;return performances in #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['locations']"", ""PROJECT['performances in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_1315,Show the locations that have at least two performances.,return locations ;return performances at #1 ;return number of  #2 for each #1 ;return #1 where #3 is  at least two,"[""SELECT['locations']"", ""PROJECT['performances at #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_1316,Show the locations that have both performances with more than 2000 attendees and performances with less than 1000 attendees.,return performances  ;return attendees of #1 ;return the  number of  #2 for each #1 ;return #1 where #3 is  more than  2000 ;return #1 where #3 is  less than  1000 ;return the  locations of #4 ;return the  locations of #5 ;return the  locations of #1 ; return #8 of both #6 and #7,"[""SELECT['performances']"", ""PROJECT['attendees of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than 2000']"", ""COMPARATIVE['#1', '#3', 'is less than 1000']"", ""PROJECT['the locations of #REF', '#4']"", ""PROJECT['the locations of #REF', '#5']"", ""PROJECT['the locations of #REF', '#1']"", ""INTERSECTION['#8', '#6', '#7']""]","['select', 'project', 'group', 'comparative', 'comparative', 'project', 'project', 'project', 'intersection']",train
SPIDER_train_1317,Show the names of members and the location of the performances they attended.,"return members ;return names of  #1 ;return performances #1 attended ;return locations of  #3 ;return #2 ,  #4","[""SELECT['members']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['performances #REF attended', '#1']"", ""PROJECT['locations of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_1318,Show the names of members and the location of performances they attended in ascending alphabetical order of their names.,"return members ;return names of   #1 ;return attended performances of   #1 ;return locations of   #3 ;return #2 ,  #4 ;return #5 sorted by #2 in  ascending alphabetical order","[""SELECT['members']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['attended performances of #REF', '#1']"", ""PROJECT['locations of #REF', '#3']"", ""UNION['#2', '#4']"", ""SORT['#5', '#2', 'in ascending alphabetical order']""]","['select', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_1319,"Show the dates of performances with attending members whose roles are ""Violin"".",return performances ;return attending members of  #1 ;return roles of  #2 ;return #1 where #3 is  Violin ;return dates of  #4,"[""SELECT['performances']"", ""PROJECT['attending members of #REF', '#1']"", ""PROJECT['roles of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Violin']"", ""PROJECT['dates of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_132,What are the different names for each station that has ever had 7 bikes available?,return stations ;return bikes available of #1 ;return #1 where #2 is 7 ;return the  names of #3,"[""SELECT['stations']"", ""PROJECT['bikes available of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 7']"", ""PROJECT['the names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1320,Show the names of members and the dates of performances they attended in descending order of attendance of the performances.,"return members ;return names of #1 ;return performances  #1 attended ;return dates of #3 ;return attendance of #3 ;return #2 , #4 ;return #6 sorted by #5 in descending order","[""SELECT['members']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['performances #REF attended', '#1']"", ""PROJECT['dates of #REF', '#3']"", ""PROJECT['attendance of #REF', '#3']"", ""UNION['#2', '#4']"", ""SORT['#6', '#5', 'in descending order']""]","['select', 'project', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_1321,List the names of members who did not attend any performance.,return members ;return #1 that  did  not attend any  performance ;return names of #2,"[""SELECT['members']"", ""FILTER['#1', 'that did not attend any performance']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_1322,Find the buildings which have rooms with capacity more than 50.,return rooms ;return #1 with  capacity more than  50 ;return buildings which  have  #2 ;return Find the #3,"[""SELECT['rooms']"", ""FILTER['#1', 'with capacity more than 50']"", ""PROJECT['buildings which have #REF', '#2']"", ""PROJECT['Find the #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_1323,What are the distinct buildings with capacities of greater than 50?,return distinct buildings ;return #1 with capacities greater than 50,"[""SELECT['distinct buildings']"", ""FILTER['#1', 'with capacities greater than 50']""]","['select', 'filter']",train
SPIDER_train_1324,Count the number of rooms that are not in the Lamberton building.,return rooms ;return buildings of #1 ;return #1 where #2 is Lamberton ;return #1 besides  #3 ;return number of  #4,"[""SELECT['rooms']"", ""PROJECT['buildings of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Lamberton']"", ""DISCARD['#1', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'comparative', 'discard', 'aggregate']",train
SPIDER_train_1325,How many classrooms are not in Lamberton?,return classrooms ;return #1 in Lamberton ;return #1 besides #2 ;return number of #3,"[""SELECT['classrooms']"", ""FILTER['#1', 'in Lamberton']"", ""DISCARD['#1', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'discard', 'aggregate']",train
SPIDER_train_1326,What is the name and building of the departments whose budget is more than the average budget?,"return departments ;return budgets of #1 ;return average of #2 ;return #1 where #2 is higher than #3 ;return name of #4 ;return building of #4 ;return #5 ,  #6","[""SELECT['departments']"", ""PROJECT['budgets of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['building of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1327,Give the name and building of the departments with greater than average budget.,"return departments ;return budgets of #1 ;return average of #2 ;return #1 where #2 is  higher than #3 ;return names of #4 ;return buildings of #4 ;return #5 ,  #6","[""SELECT['departments']"", ""PROJECT['budgets of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['buildings of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1328,Find the room number of the rooms which can sit 50 to 100 students and their buildings.,"return rooms ;return #1 that  sit at least 50 students ;return #1 that  sit at most 100 students ;return #1 in both #2 and #3 ;return room number of  #4 ;return buildings of  #4 ;return #5 ,   #6","[""SELECT['rooms']"", ""FILTER['#1', 'that sit at least 50 students']"", ""FILTER['#1', 'that sit at most 100 students']"", ""INTERSECTION['#1', '#2', '#3']"", ""AGGREGATE['count', '#4']"", ""PROJECT['buildings of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'filter', 'filter', 'intersection', 'aggregate', 'project', 'union']",train
SPIDER_train_1329,What are the room numbers and corresponding buildings for classrooms which can seat between 50 to 100 students?,"return classrooms ;return students #1 can seat ;return #1 where #2 is  at least 50 ;return #1 where #2 is  at most 100 ;return #1 of  both #3 and  #4 ;return room number of  of  #5 ;return buildings of  #5 ;return #6 ,  #7","[""SELECT['classrooms']"", ""PROJECT['students #REF can seat', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least 50']"", ""COMPARATIVE['#1', '#2', 'is at most 100']"", ""INTERSECTION['#1', '#3', '#4']"", ""AGGREGATE['count', '#5']"", ""PROJECT['buildings of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'aggregate', 'project', 'union']",train
SPIDER_train_133,Which start station had the most trips starting from August? Give me the name and id of the station.,"return start stations ;return trips of #1 ;return #2 starting from August ;return number of  #3 for each #1 ;return #1 where #4 is  the   highest ;return the   name of #5 ;return the   id of #5 ;return #6 ,  #7","[""SELECT['start stations']"", ""PROJECT['trips of #REF', '#1']"", ""FILTER['#2', 'starting from August']"", ""GROUP['count', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is the highest']"", ""PROJECT['the name of #REF', '#5']"", ""PROJECT['the id of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'filter', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1331,What is the department name and corresponding building for the department with the greatest budget?,"return departments ;return budgets of #1 ;return #1 where #2 is  the   greatest ;return the   name of #3 ;return the   building of #3 ;return #4 ,  #5","[""SELECT['departments']"", ""PROJECT['budgets of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the greatest']"", ""PROJECT['the name of #REF', '#3']"", ""PROJECT['the building of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1332,What is the name of the student who has the highest total credits in the History department.,return students ;return credits of #1 ;return #2 in  the  History department ;return sum of #3 for each #1 ;return #1 where #4 is highest ;return name of #5,"[""SELECT['students']"", ""PROJECT['credits of #REF', '#1']"", ""FILTER['#2', 'in the History department']"", ""GROUP['sum', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']"", ""PROJECT['name of #REF', '#5']""]","['select', 'project', 'filter', 'group', 'superlative', 'project']",train
SPIDER_train_1333,Give the name of the student in the History department with the most credits.,return students ;return #1 in History department ;return credits of  #2 ;return number of #3 for each #2 ;return #2 where  #4 is  highest ;return name of  #5,"[""SELECT['students']"", ""FILTER['#1', 'in History department']"", ""PROJECT['credits of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""SUPERLATIVE['max', '#2', '#4']"", ""PROJECT['name of #REF', '#5']""]","['select', 'filter', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_1334,How many rooms does the Lamberton building have?,return buildings ;return rooms of  #1 ;return #2 where  #1 is  Lamberton ;return number of #3,"[""SELECT['buildings']"", ""PROJECT['rooms of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Lamberton']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_1335,Count the number of classrooms in Lamberton.,return classrooms ;return #1 in Lamberton ;return number of  #2,"[""SELECT['classrooms']"", ""FILTER['#1', 'in Lamberton']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_1336,How many students have advisors?,return students ;return #1 that  have  advisors ;return number of  #2,"[""SELECT['students']"", ""FILTER['#1', 'that have advisors']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_1337,Count the number of students who have advisors.,return students ;return #1 with  advisors ;return number of #2,"[""SELECT['students']"", ""FILTER['#1', 'with advisors']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_1338,How many departments offer courses?,return departments ;return #1 which  offer courses ;return number of #2,"[""SELECT['departments']"", ""FILTER['#1', 'which offer courses']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_1339,Count the number of departments which offer courses.,return departments ;return #1 which offer courses ;return number of  #2,"[""SELECT['departments']"", ""FILTER['#1', 'which offer courses']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_134,What are the start station's name and id for the one that had the most start trips in August?,"return start stations ;return start trips of #1 ;return #2 in August ;return the   number of  #3 for each #1 ;return #1 where #4 is  the   highest ;return the   name of #5 ;return the   id of #5 ;return #6 ,  #7","[""SELECT['start stations']"", ""PROJECT['start trips of #REF', '#1']"", ""FILTER['#2', 'in August']"", ""GROUP['count', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is the highest']"", ""PROJECT['the name of #REF', '#5']"", ""PROJECT['the id of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'filter', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1340,How many different courses offered by Physics department?,return departments ;return courses offered by #1 ;return #2 where  #1 is  Physics ;return number of #3,"[""SELECT['departments']"", ""PROJECT['courses offered by #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Physics']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_1341,Count the number of courses in the Physics department.,return courses ;return departments of  #1 ;return #1 where #2 is  Physics ;return courses of  #3 ;return number of  #4,"[""SELECT['courses']"", ""PROJECT['departments of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Physics']"", ""PROJECT['courses of #REF', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_1342,Find the title of courses that have two prerequisites?,return courses ;return prerequisites of  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  two ;return titles of  #4,"[""SELECT['courses']"", ""PROJECT['prerequisites of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is two']"", ""PROJECT['titles of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_1343,What are the titles for courses with two prerequisites?,return courses ;return prerequisites of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  two ;return titles of  #4,"[""SELECT['courses']"", ""PROJECT['prerequisites of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is two']"", ""PROJECT['titles of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_1344,"Find the title, credit, and department name of courses that have more than one prerequisites?","return courses ;return prerequisites of #1 ;return number of #2 for each #1 ;return #1 where  #3 is  more than  one ;return title of  #4 ;return credit of  #4 ;return department name of  #4 ;return #5 ,   #6 , #7","[""SELECT['courses']"", ""PROJECT['prerequisites of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than one']"", ""PROJECT['title of #REF', '#4']"", ""PROJECT['credit of #REF', '#4']"", ""PROJECT['department name of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_1345,"What is the title, credit value, and department name for courses with more than one prerequisite?","return courses ;return prerequisites of #1 ;return number of #2 for each #1 ;return #1 where #3 is  higher than one ;return titles of #4 ;return credit values of #4 ;return departments of #4 ;return names of #7 ;return #5 , #6 ,  #8","[""SELECT['courses']"", ""PROJECT['prerequisites of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than one']"", ""PROJECT['titles of #REF', '#4']"", ""PROJECT['credit values of #REF', '#4']"", ""PROJECT['departments of #REF', '#4']"", ""PROJECT['names of #REF', '#7']"", ""UNION['#5', '#6', '#8']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_1346,How many courses that do not have prerequisite?,return courses ;return #1 that  have  prerequisite ;return #1 besides #2 ;return number of #3,"[""SELECT['courses']"", ""FILTER['#1', 'that have prerequisite']"", ""DISCARD['#1', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'discard', 'aggregate']",train
SPIDER_train_1347,Count the number of courses without prerequisites.,return courses ;return #1 without prerequisites ;return Count #2,"[""SELECT['courses']"", ""FILTER['#1', 'without prerequisites']"", ""PROJECT['Count #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_1348,Find the name of the courses that do not have any prerequisite?,return courses ;return #1 with  prerequisites ;return #1 not  in #2 ;return name of  #3,"[""SELECT['courses']"", ""FILTER['#1', 'with prerequisites']"", ""DISCARD['#1', '#2']"", ""PROJECT['name of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_1349,What are the titles of courses without prerequisites?,return courses ;return #1 with prerequisites ;return #1 besides  #2 ;return titles of  #3,"[""SELECT['courses']"", ""FILTER['#1', 'with prerequisites']"", ""DISCARD['#1', '#2']"", ""PROJECT['titles of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_135,Which bike traveled the most often in zip code 94002?,return bikes ;return #1 that  traveled in zip code 94002 ;return #1 where #2 is  most often,"[""SELECT['bikes']"", ""FILTER['#1', 'that traveled in zip code 94002']"", ""SUPERLATIVE['max', '#1', '#2']""]","['select', 'filter', 'superlative']",train
SPIDER_train_1350,How many different instructors have taught some course?,return instructors ;return #1 who  have  taught some course ;return different #2 ;return number of #3,"[""SELECT['instructors']"", ""FILTER['#1', 'who have taught some course']"", ""PROJECT['different #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_1351,Count the number of distinct instructors who have taught a course.,return instructors ;return #1 who  have  taught a course ;return the number of #2,"[""SELECT['instructors']"", ""FILTER['#1', 'who have taught a course']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_1352,Find the total budgets of the Marketing or Finance department.,return departments ;return budgets of  #1 ;return #2 where  #1 is  Marketing ;return #2 where  #1 is  Finance ;return #3 or  #4,"[""SELECT['departments']"", ""PROJECT['budgets of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Marketing']"", ""COMPARATIVE['#2', '#1', 'is Finance']"", ""UNION['#3', '#4']""]","['select', 'project', 'comparative', 'comparative', 'union']",train
SPIDER_train_1353,What is the sum of budgets of the Marketing and Finance departments?,return budgets ;return #1 of the  Marketing department ;return #1 of the  Finance department ;return the  sum of #2 and #3,"[""SELECT['budgets']"", ""FILTER['#1', 'of the Marketing department']"", ""FILTER['#1', 'of the Finance department']"", ""ARITHMETIC['sum', '#2', '#3']""]","['select', 'filter', 'filter', 'arithmetic']",train
SPIDER_train_1354,Find the department name of the instructor whose name contains 'Soisalon'.,return instructor ;return #1 whose name  contains 'Soisalon ;return department name  of  #2,"[""SELECT['instructor']"", ""FILTER['#1', 'whose name contains Soisalon']"", ""PROJECT['department name of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_1355,What is the name of the department with an instructure who has a name like 'Soisalon'?,return departments ;return instructures of #1 ;return names of #2 ;return #1 where #3 is  like 'Soisalon ;return name  of #4,"[""SELECT['departments']"", ""PROJECT['instructures of #REF', '#1']"", ""PROJECT['names of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is like Soisalon']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_1356,How many rooms whose capacity is less than 50 does the Lamberton building have?,return buildings ;return rooms of  #1 ;return #2 where  #1 is Lamberton ;return capacities of  #3 ;return #3 where  #4 is lower than 50 ;return number of  #5,"[""SELECT['buildings']"", ""PROJECT['rooms of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Lamberton']"", ""PROJECT['capacities of #REF', '#3']"", ""COMPARATIVE['#3', '#4', 'is lower than 50']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'comparative', 'project', 'comparative', 'aggregate']",train
SPIDER_train_1357,Count the number of rooms in Lamberton with capacity lower than 50.,return Lamberton ;return rooms of #1 ;return capacities of #2 ;return #2 where #3 is lower than 50 ;return number of  #4,"[""SELECT['Lamberton']"", ""PROJECT['rooms of #REF', '#1']"", ""PROJECT['capacities of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is lower than 50']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'project', 'comparative', 'aggregate']",train
SPIDER_train_1358,Find the name and budget of departments whose budgets are more than the average budget.,"return departments ;return budgets of #1 ;return average of #2 ;return #1 where #2 is  higher than #3 ;return names of #4 ;return budgets of #4 ;return #5 ,  #6","[""SELECT['departments']"", ""PROJECT['budgets of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['budgets of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1359,What are the names and budgets of departments with budgets greater than the average?,"return departments ;return budgets of  #1 ;return average of  #2 ;return #1 where #2 is  higher than #3 ;return names of  #4 ;return budgets of  #4 ;return #5 ,  #6","[""SELECT['departments']"", ""PROJECT['budgets of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['budgets of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_136,What is the id of the bike that traveled the most in 94002?,return bikes ;return traveled of #1 ;return #2 in  94002 ;return #1 where #3 is highest ;return id of #4,"[""SELECT['bikes']"", ""PROJECT['traveled of #REF', '#1']"", ""FILTER['#2', 'in 94002']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['id of #REF', '#4']""]","['select', 'project', 'filter', 'superlative', 'project']",train
SPIDER_train_1360,what is the name of the instructor who is in Statistics department and earns the lowest salary?,return instructors ;return departments of  #1 ;return #1 where #2 is  Statistics ;return salaries of  #3 ;return #3 where #4 is  lowest ;return name of  #5,"[""SELECT['instructors']"", ""PROJECT['departments of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Statistics']"", ""PROJECT['salaries of #REF', '#3']"", ""SUPERLATIVE['min', '#3', '#4']"", ""PROJECT['name of #REF', '#5']""]","['select', 'project', 'comparative', 'project', 'superlative', 'project']",train
SPIDER_train_1361,Give the name of the lowest earning instructor in the Statistics department.,return instructors ;return departments of  #1 ;return #1 where  #2 is  Statistics ;return earnings of  #3 ;return #1 where  #4 is  lowest ;return name of  #5,"[""SELECT['instructors']"", ""PROJECT['departments of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Statistics']"", ""PROJECT['earnings of #REF', '#3']"", ""SUPERLATIVE['min', '#1', '#4']"", ""PROJECT['name of #REF', '#5']""]","['select', 'project', 'comparative', 'project', 'superlative', 'project']",train
SPIDER_train_1362,Find the title of course that is provided by both Statistics and Psychology departments.,return courses ;return #1 provided by Statistics department ;return #1 provided by Psychology department ;return #1 of  both #2 and #3 ;return titles of  #4,"[""SELECT['courses']"", ""FILTER['#1', 'provided by Statistics department']"", ""FILTER['#1', 'provided by Psychology department']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['titles of #REF', '#4']""]","['select', 'filter', 'filter', 'intersection', 'project']",train
SPIDER_train_1363,What is the title of a course that is listed in both the Statistics and Psychology departments?,return course ;return #1 listed in Statistics department ;return #1 listed in Psychology department ;return #1 in both #2 and  #3 ;return title of  #4,"[""SELECT['course']"", ""FILTER['#1', 'listed in Statistics department']"", ""FILTER['#1', 'listed in Psychology department']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['title of #REF', '#4']""]","['select', 'filter', 'filter', 'intersection', 'project']",train
SPIDER_train_1364,Find the title of course that is provided by Statistics but not Psychology departments.,return courses ;return #1 provided by the  Statistics department ;return #1 provided by the  Psychology department ;return #1 in both #2 and #3 ;return #2 besides #4 ;return the  titles of #5,"[""SELECT['courses']"", ""FILTER['#1', 'provided by the Statistics department']"", ""FILTER['#1', 'provided by the Psychology department']"", ""INTERSECTION['#1', '#2', '#3']"", ""DISCARD['#2', '#4']"", ""PROJECT['the titles of #REF', '#5']""]","['select', 'filter', 'filter', 'intersection', 'discard', 'project']",train
SPIDER_train_1365,What are the titles of courses that are in the Statistics department but not the Psychology department?,return courses ;return #1 in the  Statistics department ;return #1 in the  Psychology department ;return #2 besides  #3 ;return the  titles of  #4,"[""SELECT['courses']"", ""FILTER['#1', 'in the Statistics department']"", ""FILTER['#1', 'in the Psychology department']"", ""DISCARD['#2', '#3']"", ""PROJECT['the titles of #REF', '#4']""]","['select', 'filter', 'filter', 'discard', 'project']",train
SPIDER_train_1366,Find the id of instructors who taught a class in Fall 2009 but not in Spring 2010.,return classes ;return #1 in  Fall 2009 ;return #1 in  Spring 2010 ;return instructors of #2 ;return instructors of #1 ;return #5 of both #2 and  #3 ;return #4 besides  #6 ;return ids of #7,"[""SELECT['classes']"", ""FILTER['#1', 'in Fall 2009']"", ""FILTER['#1', 'in Spring 2010']"", ""PROJECT['instructors of #REF', '#2']"", ""PROJECT['instructors of #REF', '#1']"", ""INTERSECTION['#5', '#2', '#3']"", ""DISCARD['#4', '#6']"", ""PROJECT['ids of #REF', '#7']""]","['select', 'filter', 'filter', 'project', 'project', 'intersection', 'discard', 'project']",train
SPIDER_train_1367,What are the ids of instructors who taught in the Fall of 2009 but not in the Spring of 2010?,return instructors ;return #1 who  taught in Falls 2009 ;return #1 who  taught in Spring 2010 ;return #1 besides  #3 ;return #1 of  both #2 and  #4 ;return ids of  #5,"[""SELECT['instructors']"", ""FILTER['#1', 'who taught in Falls 2009']"", ""FILTER['#1', 'who taught in Spring 2010']"", ""DISCARD['#1', '#3']"", ""INTERSECTION['#1', '#2', '#4']"", ""PROJECT['ids of #REF', '#5']""]","['select', 'filter', 'filter', 'discard', 'intersection', 'project']",train
SPIDER_train_1368,Find the name of students who took any class in the years of 2009 and 2010.,"return classes ;return #1 in  2009 ;return #1 in  2010 ;return #2 ,  #3 ;return students of #4 ;return names of #5","[""SELECT['classes']"", ""FILTER['#1', 'in 2009']"", ""FILTER['#1', 'in 2010']"", ""UNION['#2', '#3']"", ""PROJECT['students of #REF', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'filter', 'filter', 'union', 'project', 'project']",train
SPIDER_train_1369,What are the names of the students who took classes in 2009 or 2010?,return students ;return #1 who  took classes in 2009 ;return #1 who  took classes in 2010 ;return #2 or  #3 ;return names of  #4,"[""SELECT['students']"", ""FILTER['#1', 'who took classes in 2009']"", ""FILTER['#1', 'who took classes in 2010']"", ""UNION['#2', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_137,How many days had both mean humidity above 50 and mean visibility above 8?,return days ;return mean  humidity of  #1 ;return mean  visibility of  #1 ;return #1 where  #2 is  higher than 50 ;return #1 where  #3 is  higher than 8 ;return #1 of  both #4 and #5,"[""SELECT['days']"", ""PROJECT['mean humidity of #REF', '#1']"", ""PROJECT['mean visibility of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 50']"", ""COMPARATIVE['#1', '#3', 'is higher than 8']"", ""INTERSECTION['#1', '#4', '#5']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection']",train
SPIDER_train_1370,Find the names of the top 3 departments that provide the largest amount of courses?,return departments ;return courses #1 provide ;return number of #2 for each #1 ;return #1 where  #3 is  in top 3 ;return names of  #4,"[""SELECT['departments']"", ""PROJECT['courses #REF provide', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is in top 3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_1371,What are the names of the 3 departments with the most courses?,return departments ;return courses of #1 ;return number of  #2 for each #1 ;return the  3 highest of #3 ;return #1 where #3 is equal to any of #4 ;return names of #5,"[""SELECT['departments']"", ""PROJECT['courses of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['max', '#3']"", ""COMPARATIVE['#1', '#3', 'is equal to any of #4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'group', 'aggregate', 'comparative', 'project']",train
SPIDER_train_1372,Find the name of the department that offers the highest total credits?,return departments ;return credits #1 offers ;return sum of  #2 for each #1 ;return #1 where  #3 is  highest ;return names of  #4,"[""SELECT['departments']"", ""PROJECT['credits #REF offers', '#1']"", ""GROUP['sum', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_1373,What is the name of the department with the most credits?,return departments ;return credits of #1 ;return number of #2 for each #1 ;return #1 where #3 is  highest ;return name of #4,"[""SELECT['departments']"", ""PROJECT['credits of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_1374,List the names of all courses ordered by their titles and credits.,return courses ;return names of #1 ;return titles of #1 ;return credits of #1 ;return #3 and #4 ;return #2 sorted by #5,"[""SELECT['courses']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['titles of #REF', '#1']"", ""PROJECT['credits of #REF', '#1']"", ""UNION['#3', '#4']"", ""SORT['#2', '#5']""]","['select', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_1375,"Given the titles of all courses, in order of titles and credits.",return courses ;return titles of #1 ;return credits of #1 ;return #2 and #3 ;return #2 sorted by #4,"[""SELECT['courses']"", ""PROJECT['titles of #REF', '#1']"", ""PROJECT['credits of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#2', '#4']""]","['select', 'project', 'project', 'union', 'sort']",train
SPIDER_train_1376,Which department has the lowest budget?,return department ;return budget of  #1 ;return #1 where #2 is  lowest,"[""SELECT['department']"", ""PROJECT['budget of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']""]","['select', 'project', 'superlative']",train
SPIDER_train_1377,Give the name of the department with the lowest budget.,return departments ;return budgets of  #1 ;return #1 where  #2 is  lowest ;return name of  #3,"[""SELECT['departments']"", ""PROJECT['budgets of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_1378,List the names and buildings of all departments sorted by the budget from large to small.,"return departments ;return names of  #1 ;return buildings of  #1 ;return budgets of  #1 ;return #2 ,  #3 ;return #5 sorted by #4 from large to  small","[""SELECT['departments']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['buildings of #REF', '#1']"", ""PROJECT['budgets of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#5', '#4', 'from large to small']""]","['select', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_1379,"What are the names and buildings of the deparments, sorted by budget descending?","return deparments ;return names of  #1 ;return buildings of  #1 ;return budgets of  #1 ;return #2 ,  #3 ;return #5 sorted by #4 descending","[""SELECT['deparments']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['buildings of #REF', '#1']"", ""PROJECT['budgets of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#5', '#4', 'descending']""]","['select', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_138,What is the number of days that had an average humity above 50 and an average visibility above 8?,return days ;return humity of #1 ;return average  of #2 for each #1 ;return #1 where #3 is  higher than 50 ;return visibility of #1 ;return average  of #5 ;return #1 where #6 is  higher than 8 ;return #1 of both #4 and #7 ;return number of  #8,"[""SELECT['days']"", ""PROJECT['humity of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 50']"", ""PROJECT['visibility of #REF', '#1']"", ""AGGREGATE['avg', '#5']"", ""COMPARATIVE['#1', '#6', 'is higher than 8']"", ""INTERSECTION['#1', '#4', '#7']"", ""AGGREGATE['count', '#8']""]","['select', 'project', 'group', 'comparative', 'project', 'aggregate', 'comparative', 'intersection', 'aggregate']",train
SPIDER_train_1380,Who is the instructor with the highest salary?,return instructors ;return salaries of #1 ;return #1 where #2 is  the  highest,"[""SELECT['instructors']"", ""PROJECT['salaries of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the highest']""]","['select', 'project', 'comparative']",train
SPIDER_train_1381,Give the name of the highest paid instructor.,return instructors ;return names of  #1 ;return #2 where  #1 is  highest paid,"[""SELECT['instructors']"", ""PROJECT['names of #REF', '#1']"", ""SUPERLATIVE['max', '#2', '#1']""]","['select', 'project', 'superlative']",train
SPIDER_train_1382,List the information of all instructors ordered by their salary in ascending order.,return instructors ;return information of  #1 ;return salaries of  #1 ;return #2 sorted by #3 in ascending order,"[""SELECT['instructors']"", ""PROJECT['information of #REF', '#1']"", ""PROJECT['salaries of #REF', '#1']"", ""SORT['#2', '#3', 'in ascending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_1383,"Give all information regarding instructors, in order of salary from least to greatest.",return instructors ;return salaries of  #1 ;return all information regarding #1 sorted by #2 from least to  greatest,"[""SELECT['instructors']"", ""PROJECT['salaries of #REF', '#1']"", ""SORT['all information regarding #1', '#2 from least to greatest']""]","['select', 'project', 'sort']",train
SPIDER_train_1384,Find the name of the students and their department names sorted by their total credits in ascending order.,"return students ;return credits of #1 ;return sum of #2 for each #1 ;return #1 sorted by #3 in  ascending order ;return names of #4 ;return departments of #4 ;return names of #6 ;return #5 ,  #7","[""SELECT['students']"", ""PROJECT['credits of #REF', '#1']"", ""GROUP['sum', '#2', '#1']"", ""SORT['#1', '#3', 'in ascending order']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['departments of #REF', '#4']"", ""PROJECT['names of #REF', '#6']"", ""UNION['#5', '#7']""]","['select', 'project', 'group', 'sort', 'project', 'project', 'project', 'union']",train
SPIDER_train_1385,"What are the names of students and their respective departments, ordered by number of credits from least to greatest?","return students ;return names of #1 ;return departments of #1 ;return credits of #1 ;return number of  #4 for each #1 ;return #2 ,  #3 ;return #6 sorted by #5 from least to  greatest","[""SELECT['students']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['departments of #REF', '#1']"", ""PROJECT['credits of #REF', '#1']"", ""GROUP['count', '#4', '#1']"", ""UNION['#2', '#3']"", ""SORT['#6', '#5', 'from least to greatest']""]","['select', 'project', 'project', 'project', 'group', 'union', 'sort']",train
SPIDER_train_1386,list in alphabetic order all course names and their instructors' names in year 2008.,"return courses ;return years of #1 ;return #1 where #2 is 2008 ;return names of #3 ;return instructors of #3 ;return names of #5 ;return #4 ,  #6 ;return #7 sorted by alphabetic order","[""SELECT['courses']"", ""PROJECT['years of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 2008']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['instructors of #REF', '#3']"", ""PROJECT['names of #REF', '#5']"", ""UNION['#4', '#6']"", ""SORT['#7', '#7', 'alphabetic order']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_1387,"Show all titles and their instructors' names for courses in 2008, in alphabetical order by title.","return courses ;return #1 in  2008 ;return instructor names of #2 ;return titles of #2 ;return #3 ,  #4 ;return #5 sorted by #4 in alphabetical order","[""SELECT['courses']"", ""FILTER['#1', 'in 2008']"", ""PROJECT['instructor names of #REF', '#2']"", ""PROJECT['titles of #REF', '#2']"", ""UNION['#3', '#4']"", ""SORT['#5', '#4', 'in alphabetical order']""]","['select', 'filter', 'project', 'project', 'union', 'sort']",train
SPIDER_train_1388,Find the name of instructors who are advising more than one student.,return instructors ;return students #1 is  advising ;return number of #2 for each #1 ;return #1 where  #3 is  more than  one ;return names of  #4,"[""SELECT['instructors']"", ""PROJECT['students #REF is advising', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than one']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_1389,What are the names of instructors who advise more than one student?,return instructors ;return students #1 advise ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than one ;return names of  #4,"[""SELECT['instructors']"", ""PROJECT['students #REF advise', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than one']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_139,"What is the latitude, longitude, city of the station from which the shortest trip started?","return stations ;return trips started from  #1 ;return #1 where #2 is  shortest ;return latitude of  #3 ;return longitude of  #3 ;return city of  #3 ;return #4 ,  #5 ,   #6","[""SELECT['stations']"", ""PROJECT['trips started from #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""PROJECT['latitude of #REF', '#3']"", ""PROJECT['longitude of #REF', '#3']"", ""PROJECT['city of #REF', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'project', 'superlative', 'project', 'project', 'project', 'union']",train
SPIDER_train_1390,Find the name of the students who have more than one advisor?,return students ;return advisors of #1 ;return number of  #2 for each #1 ;return #1 where #3 is higher than one ;return names of #4,"[""SELECT['students']"", ""PROJECT['advisors of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than one']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_1391,What are the names of students who have more than one advisor?,return students ;return advisors of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than one ;return names of  #4,"[""SELECT['students']"", ""PROJECT['advisors of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than one']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_1392,Find the number of rooms with more than 50 capacity for each building.,return buildings ;return rooms of  #1 ;return capacities of  #2 ;return #2 where  #3 is  higher than 50 ;return number of #4 for each #1,"[""SELECT['buildings']"", ""PROJECT['rooms of #REF', '#1']"", ""PROJECT['capacities of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is higher than 50']"", ""GROUP['count', '#4', '#1']"", ""UNION['#1', '#5']""]","['select', 'project', 'project', 'comparative', 'group', 'union']",train
SPIDER_train_1393,How many rooms in each building have a capacity of over 50?,return buildings ;return rooms in #1 ;return capacities of  #2 ;return #2 where  #3 is  over 50 ;return number of #4 for each #1,"[""SELECT['buildings']"", ""PROJECT['rooms in #REF', '#1']"", ""PROJECT['capacities of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is over 50']"", ""GROUP['count', '#4', '#1']"", ""UNION['#1', '#5']""]","['select', 'project', 'project', 'comparative', 'group', 'union']",train
SPIDER_train_1394,Find the maximum and average capacity among rooms in each building.,"return building ;return rooms in each #1 ;return capacities of  #2 ;return maximum #3 ;return average #3 ;return #4 ,   #5","[""SELECT['building']"", ""PROJECT['rooms in each #REF', '#1']"", ""PROJECT['capacities of #REF', '#2']"", ""AGGREGATE['max', '#3']"", ""AGGREGATE['avg', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_1395,What are the greatest and average capacity for rooms in each building?,"return buildings ;return rooms in #1 ;return capacities of  #2 ;return highest #3 for each  #1 ;return average #3 for each  #1 ;return #4 ,  #5","[""SELECT['buildings']"", ""PROJECT['rooms in #REF', '#1']"", ""PROJECT['capacities of #REF', '#2']"", ""GROUP['max', '#3', '#1']"", ""GROUP['avg', '#3', '#1']"", ""UNION['#4', '#5']""]","['select', 'project', 'project', 'group', 'group', 'union']",train
SPIDER_train_1396,Find the title of the course that is offered by more than one department.,return course ;return departments with  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  more than  one ;return title of  #4,"[""SELECT['course']"", ""PROJECT['departments with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than one']"", ""PROJECT['title of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_1397,What are the titles of courses that are offered in more than one department?,return courses ;return departments #1 are  offered in ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than one ;return titles of  #4,"[""SELECT['courses']"", ""PROJECT['departments #REF are offered in', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than one']"", ""PROJECT['titles of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_1398,Find the total credits of courses provided by different department.,return departments ;return courses of  #1 ;return credits of  #2 ;return sum of  #3 for each #1,"[""SELECT['departments']"", ""PROJECT['courses of #REF', '#1']"", ""PROJECT['credits of #REF', '#2']"", ""GROUP['sum', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_1399,How many total credits are offered by each department?,return departments ;return credits offered by #1 ;return sum of  #2 for each #1,"[""SELECT['departments']"", ""PROJECT['credits offered by #REF', '#1']"", ""GROUP['sum', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_14,"Which department has more than 1 head at a time? List the id, name and the number of heads.","return departments ;return heads of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than 1 ;return ids of  #4 ;return names of  #4 ;return heads of  #4 ;return number of  #7 ;return #5 ,  #6 ,   #8","[""SELECT['departments']"", ""PROJECT['heads of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 1']"", ""PROJECT['ids of #REF', '#4']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['heads of #REF', '#4']"", ""AGGREGATE['count', '#7']"", ""UNION['#5', '#6', '#8']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'project', 'aggregate', 'union']",train
SPIDER_train_140,"What is the latitude, longitude, and city of the station from which the trip with smallest duration started?","return stations ;return trips started in #1 ;return durations of  #2 ;return #1 where #3 is  lowest ;return latitude of  #4 ;return longitude of  #4 ;return city of  #4 ;return #5 ,  #6 ,   #7","[""SELECT['stations']"", ""PROJECT['trips started in #REF', '#1']"", ""PROJECT['durations of #REF', '#2']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['latitude of #REF', '#4']"", ""PROJECT['longitude of #REF', '#4']"", ""PROJECT['city of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'project', 'superlative', 'project', 'project', 'project', 'union']",train
SPIDER_train_1401,What is the lowest salary in departments with average salary greater than the overall average.,return departments ;return salaries of #1 ;return average  of #2 for each #1 ;return average  of #2 ;return #1 where #3 is  higher than #4 ;return salaries of #5 ;return #6 that  is  lowest,"[""SELECT['departments']"", ""PROJECT['salaries of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#3', 'is higher than #4']"", ""PROJECT['salaries of #REF', '#5']"", ""FILTER['#6', 'that is lowest']""]","['select', 'project', 'group', 'aggregate', 'comparative', 'project', 'filter']",train
SPIDER_train_1402,Find the number of courses provided in each semester and year.,"return courses ;return semester of #1 ;return year of #1 ;return number of  #1 for each #2 ;return number of  #1 for each #3 ;return #4 ,  #5","[""SELECT['courses']"", ""PROJECT['semester of #REF', '#1']"", ""PROJECT['year of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""GROUP['count', '#1', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'project', 'group', 'group', 'union']",train
SPIDER_train_1403,How many courses are provided in each semester and year?,"return courses ;return semesters ;return years ;return number of  #1 for each #2, #3","[""SELECT['courses']"", ""SELECT['semesters']"", ""SELECT['years']"", ""GROUP['count', '#1', '#2']"", ""UNION['#2', '#4']""]","['select', 'select', 'select', 'group', 'union']",train
SPIDER_train_1404,Find the year which offers the largest number of courses.,return years ;return courses of #1 ;return number of  #2 for each #1 ;return #1 where #3 is highest,"[""SELECT['years']"", ""PROJECT['courses of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_1405,Which year had the greatest number of courses?,return years ;return courses in #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['years']"", ""PROJECT['courses in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_1406,Find the year and semester when offers the largest number of courses.,"return semesters ;return courses that  #1 offer ;return number of  #2 for each #1 ;return #1 where #3 is  the  largest ;return years ;return courses offer in #5 ;return number of  #6 for each #5 ;return #5 where #7 is  the  largest ;return #8 ,  #4","[""SELECT['semesters']"", ""PROJECT['courses that #REF offer', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the largest']"", ""SELECT['years']"", ""PROJECT['courses offer in #REF', '#5']"", ""GROUP['count', '#6', '#5']"", ""COMPARATIVE['#5', '#7', 'is the largest']"", ""UNION['#8', '#4']""]","['select', 'project', 'group', 'comparative', 'select', 'project', 'group', 'comparative', 'union']",train
SPIDER_train_1407,What is the year and semester with the most courses?,"return semesters ;return courses of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  the  highest ;return years ;return courses of #5 ;return number of  #6 for each #5 ;return #5 where #7 is  the  highest ;return #8 ,  #4","[""SELECT['semesters']"", ""PROJECT['courses of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']"", ""SELECT['years']"", ""PROJECT['courses of #REF', '#5']"", ""GROUP['count', '#6', '#5']"", ""COMPARATIVE['#5', '#7', 'is the highest']"", ""UNION['#8', '#4']""]","['select', 'project', 'group', 'comparative', 'select', 'project', 'group', 'comparative', 'union']",train
SPIDER_train_1408,Find the name of department has the highest amount of students?,return departments ;return students of  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  highest ;return name of  #4,"[""SELECT['departments']"", ""PROJECT['students of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_1409,What is the name of the deparment with the highest enrollment?,return deparments ;return enrollments of  #1 ;return #1 where #2 is  highest ;return name of  #3,"[""SELECT['deparments']"", ""PROJECT['enrollments of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_141,What are the ids of stations that are located in San Francisco and have average bike availability above 10.,return San Francisco ;return stations of #1 ;return bike availabilities of #2 ;return the  average of #3 for each #2 ;return #2 where #4 is higher than 10 ;return ids of #5,"[""SELECT['San Francisco']"", ""PROJECT['stations of #REF', '#1']"", ""PROJECT['bike availabilities of #REF', '#2']"", ""GROUP['avg', '#3', '#2']"", ""COMPARATIVE['#2', '#4', 'is higher than 10']"", ""PROJECT['ids of #REF', '#5']""]","['select', 'project', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_1410,Find the total number of students in each department.,return departments ;return students in #1 ;return number of #2 for each #1,"[""SELECT['departments']"", ""PROJECT['students in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_1411,How many students are in each department?,return departments ;return students in #1 ;return number of  #2 for each  #1,"[""SELECT['departments']"", ""PROJECT['students in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_1412,Find the semester and year which has the least number of student taking any class.,"return classes ;return students taking #1 ;return number of #2 for each #1 ;return #1 where  #3 is  lowest ;return semester of  #4 ;return year of  #4 ;return #5 ,   #6","[""SELECT['classes']"", ""PROJECT['students taking #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['semester of #REF', '#4']"", ""PROJECT['year of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_1413,Which semeseter and year had the fewest students?,"return semeseters ;return students of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  the  fewest ;return the  year of #4 ;return #4 ,  #5","[""SELECT['semeseters']"", ""PROJECT['students of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the fewest']"", ""PROJECT['the year of #REF', '#4']"", ""UNION['#4', '#5']""]","['select', 'project', 'group', 'comparative', 'project', 'union']",train
SPIDER_train_1414,What is the id of the instructor who advises of all students from History department?,return instructors ;return #1 who  advises all students from  History department ;return id of  #2,"[""SELECT['instructors']"", ""FILTER['#1', 'who advises all students from History department']"", ""PROJECT['id of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_1415,Give id of the instructor who advises students in the History department.,return History department ;return instructors of  #1 ;return #2 who  advises students ;return id of  #3,"[""SELECT['History department']"", ""PROJECT['instructors of #REF', '#1']"", ""FILTER['#2', 'who advises students']"", ""PROJECT['id of #REF', '#3']""]","['select', 'project', 'filter', 'project']",train
SPIDER_train_1416,Find the name and salary of the instructors who are advisors of any student from History department?,"return instructors ;return students of  #1 ;return departments of  #2 ;return #1 where  #3 is  History ;return name of  #4 ;return salary of  #4 ;return #5 ,   #6","[""SELECT['instructors']"", ""PROJECT['students of #REF', '#1']"", ""PROJECT['departments of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is History']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['salary of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1417,What are the names and salaries of instructors who advises students in the History department?,"return the  History department ;return students of #1 ;return instructors who  advises #2 ;return names of #3 ;return salaries of #3 ;return #4 ,  #5","[""SELECT['the History department']"", ""PROJECT['students of #REF', '#1']"", ""PROJECT['instructors who advises #REF', '#2']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['salaries of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_1418,Find the id of the courses that do not have any prerequisite?,return courses ;return #1 with  prerequisites ;return #1 besides #2 ;return ids of  #3,"[""SELECT['courses']"", ""FILTER['#1', 'with prerequisites']"", ""DISCARD['#1', '#2']"", ""PROJECT['ids of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_1419,What are the ids of courses without prerequisites?,return courses ;return the  prerequisites of #1 ;return the  number of  #2 for each #1 ;return #1 where #3 is  zero ;return the  ids of #4,"[""SELECT['courses']"", ""PROJECT['the prerequisites of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is zero']"", ""PROJECT['the ids of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_142,What are the ids of the stations in San Francisco that normally have more than 10 bikes available?,return stations ;return #1 in San Francisco ;return bikes available in #2 ;return number of  #3 for each  #2 ;return #2 where #4 is  higher than 10 ;return ids of  #5,"[""SELECT['stations']"", ""FILTER['#1', 'in San Francisco']"", ""PROJECT['bikes available in #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""COMPARATIVE['#2', '#4', 'is higher than 10']"", ""PROJECT['ids of #REF', '#5']""]","['select', 'filter', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_1421,What are the names of courses without prerequisites?,return courses ;return prerequisites of #1 ;return the  number of  #2 for each #1 ;return #1 where #3 is  zero ;return the  names of #4,"[""SELECT['courses']"", ""PROJECT['prerequisites of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is zero']"", ""PROJECT['the names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_1422,What is the title of the prerequisite class of International Finance course?,return the  International Finance course ;return the  prerequisite class of #1 ;return the  title of #2,"[""SELECT['the International Finance course']"", ""PROJECT['the prerequisite class of #REF', '#1']"", ""PROJECT['the title of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_1423,Give the title of the prerequisite to the course International Finance.,return courses ;return prerequisites of  #1 ;return #2 where  #1 is  International Finance,"[""SELECT['courses']"", ""PROJECT['prerequisites of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is International Finance']""]","['select', 'project', 'comparative']",train
SPIDER_train_1424,Find the title of course whose prerequisite is course Differential Geometry.,return courses ;return prerequisites of  #1 ;return #1 where  #2 is  Differential Geometry ;return title of  #3,"[""SELECT['courses']"", ""PROJECT['prerequisites of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Differential Geometry']"", ""PROJECT['title of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1425,What is the title of the course with Differential Geometry as a prerequisite?,return courses ;return prerequisites of #1 ;return #1 where #2 is  Differential Geometry ;return title of #3,"[""SELECT['courses']"", ""PROJECT['prerequisites of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Differential Geometry']"", ""PROJECT['title of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1426,Find the names of students who have taken any course in the fall semester of year 2003.,return courses ;return #1 in the year 2003 ;return #2 in the fall semester ;return students of  #3 ;return names of  #4,"[""SELECT['courses']"", ""FILTER['#1', 'in the year 2003']"", ""FILTER['#2', 'in the fall semester']"", ""PROJECT['students of #REF', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'filter', 'project', 'project']",train
SPIDER_train_1427,What are the names of students who took a course in the Fall of 2003?,return courses ;return #1 in the  Fall of 2003 ;return students who took #2 ;return the  names of #3,"[""SELECT['courses']"", ""FILTER['#1', 'in the Fall of 2003']"", ""PROJECT['students who took #REF', '#2']"", ""PROJECT['the names of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_1428,What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010?,return courses ;return #1 that  are offered at building Chandler ;return #2 in year 2010 ;return #3 in fall semester ;return title of #4,"[""SELECT['courses']"", ""FILTER['#1', 'that are offered at building Chandler']"", ""FILTER['#2', 'in year 2010']"", ""FILTER['#3', 'in fall semester']"", ""PROJECT['title of #REF', '#4']""]","['select', 'filter', 'filter', 'filter', 'project']",train
SPIDER_train_1429,Give the title of the course offered in Chandler during the Fall of 2010.,return courses ;return #1 offered in Chandler ;return #2 during Fall of  2010 ;return title of  #3,"[""SELECT['courses']"", ""FILTER['#1', 'offered in Chandler']"", ""FILTER['#2', 'during Fall of 2010']"", ""PROJECT['title of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_143,What are the names and ids of stations that had more than 14 bikes available on average or were installed in December?,"return stations ;return #1 that were installed in  December ;return available bikes of #1 ;return number of  #3 for each #1 ;return the  average of #4 for each #1 ;return #1 where #5 is higher than 14 ;return #6 ,  #2 ;return names of #7 ;return ids of #7 ;return #8 ,  #9","[""SELECT['stations']"", ""FILTER['#1', 'that were installed in December']"", ""PROJECT['available bikes of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""GROUP['avg', '#4', '#1']"", ""COMPARATIVE['#1', '#5', 'is higher than 14']"", ""UNION['#6', '#2']"", ""PROJECT['names of #REF', '#7']"", ""PROJECT['ids of #REF', '#7']"", ""UNION['#8', '#9']""]","['select', 'filter', 'project', 'group', 'group', 'comparative', 'union', 'project', 'project', 'union']",train
SPIDER_train_1430,Find the name of the instructors who taught C Programming course before.,return instructors ;return #1 that  taught C Programming course before ;return names of  #2,"[""SELECT['instructors']"", ""FILTER['#1', 'that taught C Programming course before']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_1431,What are the names of instructors who have taught C Programming courses?,return instructors ;return courses #1 have  taught ;return #1 where #2 is  C Programming ;return names of  #3,"[""SELECT['instructors']"", ""PROJECT['courses #REF have taught', '#1']"", ""COMPARATIVE['#1', '#2', 'is C Programming']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1432,Find the name and salary of instructors who are advisors of the students from the Math department.,"return the  Math department ;return students of #1 ;return advisors of #2 ;return #3 that are instructors ;return names of #4 ;return salaries of #4 ;return #5 ,  #6","[""SELECT['the Math department']"", ""PROJECT['students of #REF', '#1']"", ""PROJECT['advisors of #REF', '#2']"", ""FILTER['#3', 'that are instructors']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['salaries of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'project', 'filter', 'project', 'project', 'union']",train
SPIDER_train_1433,What are the names and salaries of instructors who advise students in the Math department?,"return instructors ;return students of #1 ;return departments of #2 ;return #1 where #3 is  Math ;return names of #4 ;return salaries of #4 ;return #5 ,  #6","[""SELECT['instructors']"", ""PROJECT['students of #REF', '#1']"", ""PROJECT['departments of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Math']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['salaries of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1434,"Find the name of instructors who are advisors of the students from the Math department, and sort the results by students' total credit.",return students ;return departments of  #1 ;return #1 where  #2 is  Math ;return advisors of  #3 ;return names of  #4 ;return credits of  #3 ;return sum of  #6 for each #3 ;return #5 sorted by #7,"[""SELECT['students']"", ""PROJECT['departments of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Math']"", ""PROJECT['advisors of #REF', '#3']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['credits of #REF', '#3']"", ""GROUP['sum', '#6', '#3']"", ""SORT['#5', '#7']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'group', 'sort']",train
SPIDER_train_1435,What are the names of all instructors who advise students in the math depart sorted by total credits of the student.,return students ;return #1 in the  math depart ;return total credits of  #2 ;return instructors who  advise #2 ;return names of  #4 ;return #5 sorted by #3,"[""SELECT['students']"", ""FILTER['#1', 'in the math depart']"", ""PROJECT['credits of #REF', '#2']"", ""GROUP['sum', '#3', '#2']"", ""PROJECT['instructors who advise #REF', '#2']"", ""PROJECT['names of #REF', '#5']"", ""SORT['#6', '#4']""]","['select', 'filter', 'project', 'group', 'project', 'project', 'sort']",train
SPIDER_train_1436,What is the course title of the prerequisite of course Mobile Computing?,return course  Mobile Computing ;return the  prerequisite of  #1 ;return the  course  title of  #2,"[""SELECT['course Mobile Computing']"", ""PROJECT['the prerequisite of #REF', '#1']"", ""PROJECT['the course title of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_1437,What is the title of the course that is a prerequisite for Mobile Computing?,return Mobile Computing ;return prerequisite courses of #1 ;return titles of #2,"[""SELECT['Mobile Computing']"", ""PROJECT['prerequisite courses of #REF', '#1']"", ""PROJECT['titles of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_1438,Find the name of instructor who is the advisor of the student who has the highest number of total credits.,return students ;return credits of  #1 ;return the   number of  #2 for each  #1 ;return #1 where  #3 is highest ;return advisor of  #4 ;return the   name of  #5,"[""SELECT['students']"", ""PROJECT['credits of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['advisor of #REF', '#4']"", ""PROJECT['the name of #REF', '#5']""]","['select', 'project', 'group', 'superlative', 'project', 'project']",train
SPIDER_train_1439,What is the name of the instructor who advises the student with the greatest number of total credits?,return instructors ;return students of #1 ;return credits of #2 ;return sum of #3 for each #2 ;return #1 where #4 is  highest ;return name of #5,"[""SELECT['instructors']"", ""PROJECT['students of #REF', '#1']"", ""PROJECT['credits of #REF', '#2']"", ""GROUP['sum', '#3', '#2']"", ""SUPERLATIVE['max', '#1', '#4']"", ""PROJECT['name of #REF', '#5']""]","['select', 'project', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_144,What are the names and ids of all stations that have more than 14 bikes available on average or had bikes installed in December?,"return stations ;return bikes  available of #1 ;return average of #2 for each #1 ;return #1 where #3 is higher than 14 ;return #1 that had bikes  installed in  December ;return #4 ,  #5 ;return names of #6 ;return ids of #6 ;return #7 ,  #8","[""SELECT['stations']"", ""PROJECT['bikes available of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 14']"", ""FILTER['#1', 'that had bikes installed in December']"", ""UNION['#4', '#5']"", ""PROJECT['names of #REF', '#6']"", ""PROJECT['ids of #REF', '#6']"", ""UNION['#7', '#8']""]","['select', 'project', 'group', 'comparative', 'filter', 'union', 'project', 'project', 'union']",train
SPIDER_train_1440,Find the name of instructors who didn't teach any courses?,return courses ;return instructors who  teach #1 ;return instructors besides #2 ;return names of #3,"[""SELECT['courses']"", ""PROJECT['instructors who teach #REF', '#1']"", ""SELECT['instructors']"", ""DISCARD['#3', '#2']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'select', 'discard', 'project']",train
SPIDER_train_1441,What are the names of instructors who didn't teach?,return instructors ;return #1 who  did not teach ;return names of  #2,"[""SELECT['instructors']"", ""FILTER['#1', 'who did not teach']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_1442,Find the id of instructors who didn't teach any courses?,return instructors ;return #1 who  did not  teach courses,"[""SELECT['instructors']"", ""FILTER['#1', 'who did not teach courses']""]","['select', 'filter']",train
SPIDER_train_1443,What are the ids of instructors who didnt' teach?,return instructors ;return #1 who  teach ;return #1 besides  #2 ;return ids of  #3,"[""SELECT['instructors']"", ""FILTER['#1', 'who teach']"", ""DISCARD['#1', '#2']"", ""PROJECT['ids of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_1444,Find the names of instructors who didn't each any courses in any Spring semester.,return courses ;return #1 in any  Spring semester ;return instructors of #2 ;return instructors besides #3 ;return names of #4,"[""SELECT['courses']"", ""FILTER['#1', 'in any Spring semester']"", ""PROJECT['instructors of #REF', '#2']"", ""SELECT['instructors']"", ""DISCARD['#4', '#3']"", ""PROJECT['names of #REF', '#5']""]","['select', 'filter', 'project', 'select', 'discard', 'project']",train
SPIDER_train_1445,What are the names of instructors who didn't teach courses in the Spring?,return instructors ;return #1 who  teach courses in the  Spring ;return #1 besides  #2 ;return names of  #3,"[""SELECT['instructors']"", ""FILTER['#1', 'who teach courses in the Spring']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_1446,Find the name of the department which has the highest average salary of professors.,return departments ;return professors of #1 ;return salaries of #2 ;return average of #3 for each #1 ;return #1 where #4 is highest ;return name of #5,"[""SELECT['departments']"", ""PROJECT['professors of #REF', '#1']"", ""PROJECT['salaries of #REF', '#2']"", ""GROUP['avg', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']"", ""PROJECT['name of #REF', '#5']""]","['select', 'project', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_1447,Which department has the highest average instructor salary?,return departments ;return instructors of #1 ;return salaries of #2 ;return average of #3 for each #1 ;return #1 where #4 is  highest,"[""SELECT['departments']"", ""PROJECT['instructors of #REF', '#1']"", ""PROJECT['salaries of #REF', '#2']"", ""GROUP['avg', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']""]","['select', 'project', 'project', 'group', 'superlative']",train
SPIDER_train_1448,Find the number and averaged salary of all instructors who are in the department with the highest budget.,"return departments ;return budgets of #1 ;return #1 where #2 is  the   highest ;return the   instructors in #3 ;return the   salaries of #4 ;return the   average of #5 ;return #5 ,  #6","[""SELECT['departments']"", ""PROJECT['budgets of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the highest']"", ""PROJECT['the instructors in #REF', '#3']"", ""PROJECT['the salaries of #REF', '#4']"", ""AGGREGATE['avg', '#5']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'aggregate', 'union']",train
SPIDER_train_1449,"How many instructors are in the department with the highest budget, and what is their average salary?","return departments ;return budgets of  #1 ;return #1 where  #2 is  highest ;return instructors of  #3 ;return number of #4 ;return salaries of  #4 ;return average of  #6 ;return #5 ,   #7","[""SELECT['departments']"", ""PROJECT['budgets of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['instructors of #REF', '#3']"", ""AGGREGATE['count', '#4']"", ""PROJECT['salaries of #REF', '#4']"", ""AGGREGATE['avg', '#6']"", ""UNION['#5', '#7']""]","['select', 'project', 'superlative', 'project', 'aggregate', 'project', 'aggregate', 'union']",train
SPIDER_train_145,What is the 3 most common cloud cover rates in the region of zip code 94107?,return regions ;return zip codes of #1 ;return #1 where #2 is 94107 ;return cloud cover rates of #3 ;return number of  #4 for each cloud cover rate ;return the  3 highest of #5 ;return #4 where #5 is equal to any of #6,"[""SELECT['regions']"", ""PROJECT['zip codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 94107']"", ""PROJECT['cloud cover rates of #REF', '#3']"", ""PROJECT['rate', '#4']"", ""GROUP['count', '#4', '#5']"", ""AGGREGATE['max', '#6']"", ""COMPARATIVE['#4', '#6', 'is equal to any of #7']""]","['select', 'project', 'comparative', 'project', 'project', 'group', 'aggregate', 'comparative']",train
SPIDER_train_1450,What is the title and credits of the course that is taught in the largest classroom (with the highest capacity)?,"return classrooms ;return capacities of #1 ;return #1 where #2 is  the   highest ;return the   course taught in #3 ;return the   title of #4 ;return the   credits of #4 ;return #5 ,  #6","[""SELECT['classrooms']"", ""PROJECT['capacities of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the highest']"", ""PROJECT['the course taught in #REF', '#3']"", ""PROJECT['the title of #REF', '#4']"", ""PROJECT['the credits of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_1451,Give the title and credits for the course that is taught in the classroom with the greatest capacity.,"return classrooms ;return capacities of  #1 ;return #1 where  #2 is  highest ;return course of  #3 ;return titles of  #4 ;return credits of  #4 ;return #5 ,   #6","[""SELECT['classrooms']"", ""PROJECT['capacities of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['course of #REF', '#3']"", ""PROJECT['titles of #REF', '#4']"", ""PROJECT['credits of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'superlative', 'project', 'project', 'project', 'union']",train
SPIDER_train_1452,Find the name of students who didn't take any course from Biology department.,return students ;return courses of #1 ;return departments of #2 ;return #1 where #3 is  not Biology ;return names of #4,"[""SELECT['students']"", ""PROJECT['courses of #REF', '#1']"", ""PROJECT['departments of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is not Biology']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_1453,What are the names of students who haven't taken any Biology courses?,return students ;return courses of  #1 ;return #1 where #2 is  not  Biology ;return names of  #3,"[""SELECT['students']"", ""PROJECT['courses of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not Biology']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1454,Find the total number of students and total number of instructors for each department.,"return departments ;return students of  #1 ;return number of #2 for each #1 ;return instructors of  #1 ;return number of #4 for each #1 ;return #3 ,   #5","[""SELECT['departments']"", ""PROJECT['students of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['instructors of #REF', '#1']"", ""GROUP['count', '#4', '#1']"", ""UNION['#3', '#5']""]","['select', 'project', 'group', 'project', 'group', 'union']",train
SPIDER_train_1455,How many students and instructors are in each department?,"return departments ;return students of  #1 ;return number of  #2 for each  #1 ;return instructors of  #1 ;return number of  #4 for each  #1 ;return #3 ,  #5","[""SELECT['departments']"", ""PROJECT['students of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['instructors of #REF', '#1']"", ""GROUP['count', '#4', '#1']"", ""UNION['#3', '#5']""]","['select', 'project', 'group', 'project', 'group', 'union']",train
SPIDER_train_1456,Find the name of students who have taken the prerequisite course of the course with title International Finance.,return courses ;return #1 with  title International Finance ;return prerequisite course of #2 ;return students who  have  taken #3 ;return name of #4,"[""SELECT['courses']"", ""FILTER['#1', 'with title International Finance']"", ""PROJECT['prerequisite course of #REF', '#2']"", ""PROJECT['students who have taken #REF', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'filter', 'project', 'project', 'project']",train
SPIDER_train_1457,What are the names of students who have taken the prerequisite for the course International Finance?,return the   course International Finance ;return the   prerequisite for #1 ;return students who have taken #2 ;return the   names of #3,"[""SELECT['the course International Finance']"", ""PROJECT['the prerequisite for #REF', '#1']"", ""PROJECT['students who have taken #REF', '#2']"", ""PROJECT['the names of #REF', '#3']""]","['select', 'project', 'project', 'project']",train
SPIDER_train_1458,Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department.,"return instructors  ;return departments of  #1 ;return #1 where  #2 is  Physics ;return salaries of  #3 ;return average of  #4 ;return salaries of  #1 ;return #1 where  #6 is  lower than #5 ;return names of  #7 ;return salaries of  #7 ;return #8 ,   #9","[""SELECT['instructors']"", ""PROJECT['departments of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Physics']"", ""PROJECT['salaries of #REF', '#3']"", ""AGGREGATE['avg', '#4']"", ""PROJECT['salaries of #REF', '#1']"", ""COMPARATIVE['#1', '#6', 'is lower than #5']"", ""PROJECT['names of #REF', '#7']"", ""PROJECT['salaries of #REF', '#7']"", ""UNION['#8', '#9']""]","['select', 'project', 'comparative', 'project', 'aggregate', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1459,What are the names and salaries for instructors who earn less than the average salary of instructors in the Physics department?,"return instructors ;return departments of  #1 ;return #1 where #2 is  Physics ;return salaries of  #3 ;return average of  #4 ;return salaries of  #1 ;return #1 where #6 is  lower than #5 ;return names of  #7 ;return salaries of  #7 ;return #8 ,  #9","[""SELECT['instructors']"", ""PROJECT['departments of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Physics']"", ""PROJECT['salaries of #REF', '#3']"", ""AGGREGATE['avg', '#4']"", ""PROJECT['salaries of #REF', '#1']"", ""COMPARATIVE['#1', '#6', 'is lower than #5']"", ""PROJECT['names of #REF', '#7']"", ""PROJECT['salaries of #REF', '#7']"", ""UNION['#8', '#9']""]","['select', 'project', 'comparative', 'project', 'aggregate', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_146,What are the 3 most common cloud covers in the zip code of 94107?,return cloud covers ;return #1 in the  zip code 94107 ;return the  3 most common #2,"[""SELECT['cloud covers']"", ""FILTER['#1', 'in the zip code 94107']"", ""PROJECT['the 3 most common #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_1460,Find the name of students who took some course offered by Statistics department.,return courses ;return #1 offered by Statistics department ;return students of  #2 ;return names of  #3,"[""SELECT['courses']"", ""FILTER['#1', 'offered by Statistics department']"", ""PROJECT['students of #REF', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_1461,What are the names of students who have taken Statistics courses?,return courses ;return #1 from  Statistics ;return students of  #2 ;return names of  #3,"[""SELECT['courses']"", ""FILTER['#1', 'from Statistics']"", ""PROJECT['students of #REF', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_1462,"Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles.","return courses ;return departments that  offered #1 ;return #1 where #2 is  Psychology ;return buildings of  #3 ;return room numbers of  #3 ;return semesters of  #3 ;return years of  #3 ;return course titles of  #3 ;return #4 ,  #5 ,   #6 , #7 ;return #9 sorted by #8","[""SELECT['courses']"", ""PROJECT['departments that offered #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Psychology']"", ""PROJECT['buildings of #REF', '#3']"", ""PROJECT['room numbers of #REF', '#3']"", ""PROJECT['semesters of #REF', '#3']"", ""PROJECT['years of #REF', '#3']"", ""PROJECT['course titles of #REF', '#3']"", ""UNION['#4', '#5', '#6', '#7']"", ""SORT['#9', '#8']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_1463,"What are the building, room number, semester and year of courses in the Psychology department, sorted using course title?","return courses ;return #1 in  the  Psychology department ;return building of #2 ;return room number of #2 ;return semester of #2 ;return year of #2 ;return course title of #2 ;return #3, #4, #5, #6 ;  sorted #8 by #7","[""SELECT['courses']"", ""FILTER['#1', 'in the Psychology department']"", ""PROJECT['building of #REF', '#2']"", ""AGGREGATE['count', '#2']"", ""PROJECT['semester of #REF', '#2']"", ""PROJECT['year of #REF', '#2']"", ""PROJECT['course title of #REF', '#2']"", ""UNION['#3', '#4', '#5', '#6']"", ""SORT['#8', '#7']""]","['select', 'filter', 'project', 'aggregate', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_1464,Find the names of all instructors in computer science department,return instructors ;return departments of  #1 ;return #1 where  #2 is computer science ;return names of  #3,"[""SELECT['instructors']"", ""PROJECT['departments of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is computer science']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1465,What are the names of all instructors in the Comp. Sci. department?,return instructors ;return departments of  #1 ;return #1 where #2 is  Comp Sci ;return names of  #3,"[""SELECT['instructors']"", ""PROJECT['departments of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Comp Sci']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1466,Find the names of all instructors in Comp. Sci. department with salary > 80000.,return instructors ;return #1 in Comp Sci department ;return #2 with  salary higher than 80000 ;return names of  #3,"[""SELECT['instructors']"", ""FILTER['#1', 'in Comp Sci department']"", ""FILTER['#2', 'with salary higher than 80000']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_1467,What are the names of the instructors in the Comp. Sci. department who earn more than 80000?,return instructors ;return #1 in the  Comp Sci department ;return #2 who  earn more than 80000,"[""SELECT['instructors']"", ""FILTER['#1', 'in the Comp Sci department']"", ""FILTER['#2', 'who earn more than 80000']""]","['select', 'filter', 'filter']",train
SPIDER_train_1468,Find the names of all instructors who have taught some course and the course_id.,"return instructors ;return #1 who  have  taught some course ;return names of  #2 ;return courses of  #2 ;return course_id of  #4 ;return #3 ,   #5","[""SELECT['instructors']"", ""FILTER['#1', 'who have taught some course']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['courses of #REF', '#2']"", ""PROJECT['course_id of #REF', '#4']"", ""UNION['#3', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_1469,"What are the names of all instructors who have taught a course, as well as the corresponding course id?","return instructors ;return #1 who have taught a course  ;return names of #2 ;return courses #2 taught ;return course  ids of #4 ;return #3 ,  #5","[""SELECT['instructors']"", ""FILTER['#1', 'who have taught a course']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['courses #REF taught', '#2']"", ""PROJECT['course ids of #REF', '#4']"", ""UNION['#3', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_147,What is the zip code in which the average mean sea level pressure is the lowest?,return zip codes ;return mean sea level pressure of #1 ;return average of #2 for each #1 ;return #1 where #3 is  lowest,"[""SELECT['zip codes']"", ""PROJECT['mean sea level pressure of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_1470,Find the names of all instructors in the Art department who have taught some course and the course_id.,"return courses ;return departments of  #1 ;return #1 where  #2 is  Art ;return instructors of  #3 ;return names of  #4 ;return course_ids of  #3 ;return #5 ,   #6","[""SELECT['courses']"", ""PROJECT['departments of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Art']"", ""PROJECT['instructors of #REF', '#3']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['course_ids of #REF', '#3']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_1471,"What are the names of Art instructors who have taught a course, and the corresponding course id?","return instructors ;return #1 of Art ;return #2 who  have taught a course ;return names of #3 ;return course of #4 ;return id of #5 ;return #4 ,  #6","[""SELECT['instructors']"", ""FILTER['#1', 'of Art']"", ""FILTER['#2', 'who have taught a course']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['course of #REF', '#4']"", ""PROJECT['id of #REF', '#5']"", ""UNION['#4', '#6']""]","['select', 'filter', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_1472,Find the names of all instructors whose name includes the substring “dar”.,return instructors ;return names of  #1 ;return #2 where  name includes dar,"[""SELECT['instructors']"", ""PROJECT['names of #REF', '#1']"", ""FILTER['#2', 'where name includes dar']""]","['select', 'project', 'filter']",train
SPIDER_train_1473,"What are the names of all instructors with names that include ""dar""?",return instructors ;return names of  #1 ;return #1 where #2 include dar ;return names of  #3,"[""SELECT['instructors']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'include dar']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1474,List in alphabetic order the names of all distinct instructors.,return instructors ;return distinct #1 ;return names of  #2 ;return #3 sorted by alphabetic order,"[""SELECT['instructors']"", ""PROJECT['distinct #REF', '#1']"", ""PROJECT['names of #REF', '#2']"", ""SORT['#3', '#3', 'alphabetic order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_1475,"List the distinct names of the instructors, ordered by name.",return instructors ;return names of  #1 ;return distinct #2 ;return #3 sorted by #2,"[""SELECT['instructors']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['distinct #REF', '#2']"", ""SORT['#3', '#2']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_1476,Find courses that ran in Fall 2009 or in Spring 2010.,"return courses ;return #1 that  ran in Fall 2009 ;return #1 that  ran in Spring 2010 ;return #2 ,   #3","[""SELECT['courses']"", ""FILTER['#1', 'that ran in Fall 2009']"", ""FILTER['#1', 'that ran in Spring 2010']"", ""UNION['#2', '#3']""]","['select', 'filter', 'filter', 'union']",train
SPIDER_train_1477,What are the ids for courses in the Fall of 2009 or the Spring of 2010?,return courses ;return #1 in the  Fall of  2009 ;return #1 in the  Spring of  2010 ;return #2 or  #3 ;return ids for #4,"[""SELECT['courses']"", ""FILTER['#1', 'in the Fall of 2009']"", ""FILTER['#1', 'in the Spring of 2010']"", ""UNION['#2', '#3']"", ""PROJECT['ids for #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_1478,Find courses that ran in Fall 2009 and in Spring 2010.,return courses ;return #1 that  ran in Fall 2009 ;return #1 that  ran in Spring 2010 ;return #1 of  both #2 and  #3,"[""SELECT['courses']"", ""FILTER['#1', 'that ran in Fall 2009']"", ""FILTER['#1', 'that ran in Spring 2010']"", ""INTERSECTION['#1', '#2', '#3']""]","['select', 'filter', 'filter', 'intersection']",train
SPIDER_train_1479,What are the ids for courses that were offered in both Fall of 2009 and Spring of 2010?,return courses ;return #1 offered in Fall 2009 ;return #1 offered in Spring 2010 ;return #1 of  both #2 and  #3 ;return ids of  #4,"[""SELECT['courses']"", ""FILTER['#1', 'offered in Fall 2009']"", ""FILTER['#1', 'offered in Spring 2010']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['ids of #REF', '#4']""]","['select', 'filter', 'filter', 'intersection', 'project']",train
SPIDER_train_148,What is the zip code that has the lowest average mean sea level pressure?,return zip codes ;return average mean sea level pressures of  #1 ;return lowest of  #2 ;return zip codes of #3,"[""SELECT['zip codes']"", ""PROJECT['mean sea level pressures of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""AGGREGATE['min', '#3']"", ""PROJECT['zip codes of #REF', '#4']""]","['select', 'project', 'group', 'aggregate', 'project']",train
SPIDER_train_1480,Find courses that ran in Fall 2009 but not in Spring 2010.,return courses ;return #1 that  ran in Fall 2009 ;return #1 that  ran in Spring 2010 ;return #1 in both #2 and  #3 ;return #2 besides #4,"[""SELECT['courses']"", ""FILTER['#1', 'that ran in Fall 2009']"", ""FILTER['#1', 'that ran in Spring 2010']"", ""INTERSECTION['#1', '#2', '#3']"", ""DISCARD['#2', '#4']""]","['select', 'filter', 'filter', 'intersection', 'discard']",train
SPIDER_train_1481,What are the ids of courses offered in Fall of 2009 but not in Spring of 2010?,return courses ;return #1 offered in Fall of   2009 ;return #1 not offered in Spring of   2010 ;return #1 of   both #2 and #3 ;return ids of   #4,"[""SELECT['courses']"", ""FILTER['#1', 'offered in Fall of 2009']"", ""FILTER['#1', 'not offered in Spring of 2010']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['ids of #REF', '#4']""]","['select', 'filter', 'filter', 'intersection', 'project']",train
SPIDER_train_1482,Find the salaries of all distinct instructors that are less than the largest salary.,return instructors ;return distinct #1 ;return salaries of  #2 ;return #2 where  #3 is  highest ;return #2 besides #4 ;return salaries of  #5,"[""SELECT['instructors']"", ""PROJECT['distinct #REF', '#1']"", ""PROJECT['salaries of #REF', '#2']"", ""SUPERLATIVE['max', '#2', '#3']"", ""DISCARD['#2', '#4']"", ""PROJECT['salaries of #REF', '#5']""]","['select', 'project', 'project', 'superlative', 'discard', 'project']",train
SPIDER_train_1483,What are the distinct salaries of all instructors who earned less than the maximum salary?,return instructors ;return salaries of  #1 ;return maximum of  #2 ;return #1 where #2 is  lower than #3 ;return distinct salaries of  #4,"[""SELECT['instructors']"", ""PROJECT['salaries of #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""COMPARATIVE['#1', '#2', 'is lower than #3']"", ""PROJECT['distinct salaries of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_1484,Find the total number of instructors who teach a course in the Spring 2010 semester.,return course ;return #1 in the Spring 2010 semester ;return instructors of #2 ;return number of #3,"[""SELECT['course']"", ""FILTER['#1', 'in the Spring 2010 semester']"", ""PROJECT['instructors of #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_1485,How many instructors teach a course in the Spring of 2010?,return instructors ;return courses of  #1 ;return #1 where  #2 is  in Spring of  2010 ;return number of #3,"[""SELECT['instructors']"", ""PROJECT['courses of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is in Spring of 2010']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_1486,Find the names and average salaries of all departments whose average salary is greater than 42000.,"return departments ;return average salaries of  #1 ;return #1 where  #2 is  greater than  42000 ;return names of  #3 ;return average salaries of  #3 ;return #4 ,   #5","[""SELECT['departments']"", ""PROJECT['salaries of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is greater than 42000']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['salaries of #REF', '#4']"", ""GROUP['avg', '#6', '#4']"", ""UNION['#5', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'group', 'union']",train
SPIDER_train_1487,What are the names and average salaries for departments with average salary higher than 42000?,"return departments ;return salaries of #1 ;return the  average  of #2 for each #1 ;return #1 where #3 is  higher than 42000 ;return the  names of #4 ;return salaries of #4 ;return the  average  of #6 for each #4 ;return #5 ,  #7","[""SELECT['departments']"", ""PROJECT['salaries of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 42000']"", ""PROJECT['the names of #REF', '#4']"", ""PROJECT['salaries of #REF', '#4']"", ""GROUP['avg', '#6', '#4']"", ""UNION['#5', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'group', 'union']",train
SPIDER_train_1488,Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department.,return instructors ;return #1 in  the  Biology department ;return salary of #2 ;return #1 besides  #2 ;return salary of #4 ;return #4 where #5 is higher than at least one of #3,"[""SELECT['instructors']"", ""FILTER['#1', 'in the Biology department']"", ""PROJECT['salary of #REF', '#2']"", ""DISCARD['#1', '#2']"", ""PROJECT['salary of #REF', '#4']"", ""COMPARATIVE['#4', '#5', 'is higher than at least one of #3']""]","['select', 'filter', 'project', 'discard', 'project', 'comparative']",train
SPIDER_train_1489,What are the names of instructors who earn more than at least one instructor from the Biology department?,return instructors ;return #1 of the  Biology department ;return #1 who  earn more than at least one #2,"[""SELECT['instructors']"", ""FILTER['#1', 'of the Biology department']"", ""FILTER['#1', 'who earn more than at least one #2']""]","['select', 'filter', 'filter']",train
SPIDER_train_149,What is the average bike availability in stations that are not located in Palo Alto?,return stations ;return #1 not  located in Palo Alto ;return bike availability of  #2 ;return average of  #3,"[""SELECT['stations']"", ""FILTER['#1', 'not located in Palo Alto']"", ""PROJECT['bike availability of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_1490,Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department.,return instructors ;return salary  of #1 ;return #1 in  Biology department ;return salary  of #3 ;return highest of #4 ;return #1 where #2 is higher than #5 ;return name of #6,"[""SELECT['instructors']"", ""PROJECT['salary of #REF', '#1']"", ""FILTER['#1', 'in Biology department']"", ""PROJECT['salary of #REF', '#3']"", ""AGGREGATE['max', '#4']"", ""COMPARATIVE['#1', '#2', 'is higher than #5']"", ""PROJECT['name of #REF', '#6']""]","['select', 'project', 'filter', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_1491,What are the names of all instructors with a higher salary than any of the instructors in the Biology department?,return instructors ;return #1 in  the  Biology department ;return salary of #2 ;return the  highest of #3 ;return salary of #1 ;return #1 where #5 is higher than #4 ;return names of #6,"[""SELECT['instructors']"", ""FILTER['#1', 'in the Biology department']"", ""PROJECT['salary of #REF', '#2']"", ""AGGREGATE['max', '#3']"", ""PROJECT['salary of #REF', '#1']"", ""COMPARATIVE['#1', '#5', 'is higher than #4']"", ""PROJECT['names of #REF', '#6']""]","['select', 'filter', 'project', 'aggregate', 'project', 'comparative', 'project']",train
SPIDER_train_1492,How many debates are there?,return debates ;return number of  #1,"[""SELECT['debates']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_1493,List the venues of debates in ascending order of the number of audience.,return debates ;return venues of  #1 ;return number of  audiences of   #1 ;return #2 sorted by #3 in ascending order,"[""SELECT['debates']"", ""PROJECT['venues of #REF', '#1']"", ""PROJECT['audiences of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""SORT['#2', '#4', 'in ascending order']""]","['select', 'project', 'project', 'group', 'sort']",train
SPIDER_train_1494,What are the date and venue of each debate?,"return debates ;return dates of  #1 ;return venues of  #1 ;return #2 ,  #3","[""SELECT['debates']"", ""PROJECT['dates of #REF', '#1']"", ""PROJECT['venues of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_1495,List the dates of debates with number of audience bigger than 150,return debates ;return audiences of  #1 ;return #1 where  #2 is higher than 150 ;return dates of  #3,"[""SELECT['debates']"", ""PROJECT['audiences of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 150']"", ""PROJECT['dates of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1496,Show the names of people aged either 35 or 36.,return people ;return #1 aged 35 ;return #1 aged 36 ;return #2 or #3 ;return names of #4,"[""SELECT['people']"", ""FILTER['#1', 'aged 35']"", ""FILTER['#1', 'aged 36']"", ""UNION['#2', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_1497,What is the party of the youngest people?,return people ;return youngness of #1 ;return #1 where #2 is  the  youngest ;return the  party of #3,"[""SELECT['people']"", ""PROJECT['youngness of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the youngest']"", ""PROJECT['the party of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1498,Show different parties of people along with the number of people in each party.,"return parties ;return people  in each #1 ;return number of #2 for each #1 ;return #1 ,   #3","[""SELECT['parties']"", ""PROJECT['people in each #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_1499,Show the party that has the most people.,return parties ;return people in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['parties']"", ""PROJECT['people in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_15,Which head's name has the substring 'Ha'? List the id and name.,"return heads ;return names of  #1 ;return #1 where #2 has  substring 'Ha ;return id of  #3 ;return name  of  #3 ;return #4 ,  #5","[""SELECT['heads']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'has substring Ha']"", ""PROJECT['id of #REF', '#3']"", ""PROJECT['name of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_150,What is the average bike availablility for stations not in Palo Alto?,return stations ;return bike availablilities of  #1 ;return #2 where #1 is  not  in Palo Alto ;return average of  #3,"[""SELECT['stations']"", ""PROJECT['bike availablilities of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is not in Palo Alto']"", ""AGGREGATE['avg', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_1500,Show the distinct venues of debates,return venues ;return #1 of  debates ;return distinct #2,"[""SELECT['venues']"", ""FILTER['#1', 'of debates']"", ""PROJECT['distinct #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_1501,"Show the names of people, and dates and venues of debates they are on the affirmative side.","return people ;return debates ;return affirmative side of #2 ;return #1 on #3 ;return names of #4 ;return dates of #2 ;return venues of #2 ;return #5 ,  #6 ,   #7","[""SELECT['people']"", ""SELECT['debates']"", ""PROJECT['affirmative side of #REF', '#2']"", ""FILTER['#1', 'on #3']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['dates of #REF', '#2']"", ""PROJECT['venues of #REF', '#2']"", ""UNION['#5', '#6', '#7']""]","['select', 'select', 'project', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_1502,"Show the names of people, and dates and venues of debates they are on the negative side, ordered in ascending alphabetical order of name.","return people ;return names of   #1 ;return debates of   #2 ;return #3 where #1 is on the  negative side ;return dates of   #4 ;return venues of   #4 ;return #2 ,  #5 ,   #6 ;return #7 sorted by #2","[""SELECT['people']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['debates of #REF', '#2']"", ""COMPARATIVE['#3', '#1', 'is on the negative side']"", ""PROJECT['dates of #REF', '#4']"", ""PROJECT['venues of #REF', '#4']"", ""UNION['#2', '#5', '#6']"", ""SORT['#7', '#2']""]","['select', 'project', 'project', 'comparative', 'project', 'project', 'union', 'sort']",train
SPIDER_train_1503,Show the names of people that are on affirmative side of debates with number of audience bigger than 200.,return debates ;return audiences of   #1 ;return size of   #2 ;return #1 where #3 is  bigger than  200 ;return the  affirmative sides of   #4 ;return people on #5 ;return names of   #6,"[""SELECT['debates']"", ""PROJECT['audiences of #REF', '#1']"", ""PROJECT['size of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is bigger than 200']"", ""PROJECT['the affirmative sides of #REF', '#4']"", ""PROJECT['people on #REF', '#5']"", ""PROJECT['names of #REF', '#6']""]","['select', 'project', 'project', 'comparative', 'project', 'project', 'project']",train
SPIDER_train_1504,Show the names of people and the number of times they have been on the affirmative side of debates.,return people ;return debates of #1 ;return #2 when  side is  affirmative ;return names of  #1 ;return number of  #3 for each  #4,"[""SELECT['people']"", ""PROJECT['debates of #REF', '#1']"", ""FILTER['#2', 'when side is affirmative']"", ""PROJECT['names of #REF', '#1']"", ""GROUP['count', '#3', '#4']"", ""UNION['#4', '#5']""]","['select', 'project', 'filter', 'project', 'group', 'union']",train
SPIDER_train_1505,Show the names of people who have been on the negative side of debates at least twice.,return debates ;return people ;return number of  #1 for each  #2 ;return #2 where  #3 is larger than or equal to  twice,"[""SELECT['debates']"", ""SELECT['people']"", ""GROUP['count', '#1', '#2']"", ""COMPARATIVE['#2', '#3', 'is larger than or equal to twice']""]","['select', 'select', 'group', 'comparative']",train
SPIDER_train_1506,List the names of people that have not been on the affirmative side of debates.,return people ;return sides of  debates of #1 ;return #1 where  #2 is affirmative ;return #1 besides #3 ;return names of  #4,"[""SELECT['people']"", ""PROJECT['sides of debates of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is affirmative']"", ""DISCARD['#1', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'comparative', 'discard', 'project']",train
SPIDER_train_1507,List the names of all the customers in alphabetical order.,return customers ;return names of  #1 ;return #2 sorted by alphabetical order,"[""SELECT['customers']"", ""PROJECT['names of #REF', '#1']"", ""SORT['#2', '#2', 'alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_1508,Sort the customer names in alphabetical order.,return customers ;return names of  #1 ;return #2 sorted by alphabetical order,"[""SELECT['customers']"", ""PROJECT['names of #REF', '#1']"", ""SORT['#2', '#2', 'alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_1509,"Find all the policy type codes associated with the customer ""Dayana Robel""",return Dayana Robel ;return policy type codes of #1,"[""SELECT['Dayana Robel']"", ""PROJECT['policy type codes of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_151,What is the average longitude of stations that never had bike availability more than 10?,return stations ;return bike availability of #1 ;return #1 where #2 was more than  10 ;return #1 besides #3 ;return longitudes of #4 ;return the  average of #5,"[""SELECT['stations']"", ""PROJECT['bike availability of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'was more than 10']"", ""DISCARD['#1', '#3']"", ""PROJECT['longitudes of #REF', '#4']"", ""AGGREGATE['avg', '#5']""]","['select', 'project', 'comparative', 'discard', 'project', 'aggregate']",train
SPIDER_train_1510,"What are the type codes of the policies used by the customer ""Dayana Robel""?",return policies ;return customers of #1 ;return #1 where #2 is  Dayana Robel ;return type codes of #3,"[""SELECT['policies']"", ""PROJECT['customers of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Dayana Robel']"", ""PROJECT['type codes of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1511,Which type of policy is most frequently used? Give me the policy type code.,return policies ;return types of #1 ;return how frequently #2 are used ;return #2 where #3 is  the  most frequently ;return the  policy type  code of #4,"[""SELECT['policies']"", ""PROJECT['types of #REF', '#1']"", ""PROJECT['how frequently #REF are used', '#2']"", ""COMPARATIVE['#2', '#3', 'is the most frequently']"", ""PROJECT['the policy type code of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_1512,Find the type code of the most frequently used policy.,return policies ;return most frequently used #1 ;return type code of #2,"[""SELECT['policies']"", ""PROJECT['most frequently used #REF', '#1']"", ""PROJECT['type code of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_1513,Find all the policy types that are used by more than 2 customers.,return Find all the policy types ;return #1 used by more than  2 customers,"[""SELECT['Find all the policy types']"", ""FILTER['#1', 'used by more than 2 customers']""]","['select', 'filter']",train
SPIDER_train_1514,Which types of policy are chosen by more than 2 customers? Give me the policy type codes.,return policies ;return customers with #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than 2 ;return policy type codes of  #4,"[""SELECT['policies']"", ""PROJECT['customers with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 2']"", ""PROJECT['policy type codes of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_1515,Find the total and average amount paid in claim headers.,"return claim headers ;return amount paid in #1 ;return average of  #2 ;return sum of  #2 ;return #4 ,   #3","[""SELECT['claim headers']"", ""PROJECT['amount paid in #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""AGGREGATE['sum', '#2']"", ""UNION['#4', '#3']""]","['select', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_1516,What are the total amount and average amount paid in claim headers?,"return claim headers ;return amounts paid in #1 ;return sum of  #2 ;return average of  #2 ;return #3 ,  #4","[""SELECT['claim headers']"", ""PROJECT['amounts paid in #REF', '#1']"", ""AGGREGATE['sum', '#2']"", ""AGGREGATE['avg', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_1517,Find the total amount claimed in the most recently created document.,return documents ;return when  #1 was created ;return #1 where #2 is  the  most recently ;return total amount claimed in #3,"[""SELECT['documents']"", ""PROJECT['when #REF was created', '#1']"", ""COMPARATIVE['#1', '#2', 'is the most recently']"", ""PROJECT['amount claimed in #REF', '#3']"", ""GROUP['sum', '#4', '#3']"", ""UNION['#3', '#5']""]","['select', 'project', 'comparative', 'project', 'group', 'union']",train
SPIDER_train_1518,How much amount in total were claimed in the most recently created document?,return documents ;return most recently created #1 ;return amounts claimed in #2 ;return sum of  #3,"[""SELECT['documents']"", ""PROJECT['most recently created #REF', '#1']"", ""PROJECT['amounts claimed in #REF', '#2']"", ""AGGREGATE['sum', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_1519,What is the name of the customer who has made the largest amount of claim in a single claim?,return customers ;return claims #1 made ;return amounts of #2 ;return #2 where #3 is  the   largest ;return #1 where #2 is  #4 ;return the   name of #5,"[""SELECT['customers']"", ""PROJECT['claims #REF made', '#1']"", ""PROJECT['amounts of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is the largest']"", ""COMPARATIVE['#1', '#2', 'is #4']"", ""PROJECT['the name of #REF', '#5']""]","['select', 'project', 'project', 'comparative', 'comparative', 'project']",train
SPIDER_train_152,What is the mean longitude for all stations that have never had more than 10 bikes available?,return stations ;return bikes available of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  at most 10 ;return longitudes of #4 ;return mean of #5,"[""SELECT['stations']"", ""PROJECT['bikes available of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at most 10']"", ""PROJECT['longitudes of #REF', '#4']"", ""AGGREGATE['avg', '#5']""]","['select', 'project', 'group', 'comparative', 'project', 'aggregate']",train
SPIDER_train_1520,Which customer made the largest amount of claim in a single claim? Return the customer details.,return customers ;return claims of  #1 ;return amounts of  #2 ;return #1 where #3 is  highest ;return details of  #4,"[""SELECT['customers']"", ""PROJECT['claims of #REF', '#1']"", ""PROJECT['amounts of #REF', '#2']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['details of #REF', '#4']""]","['select', 'project', 'project', 'superlative', 'project']",train
SPIDER_train_1521,What is the name of the customer who has made the minimum amount of payment in one claim?,return claims ;return payments of #1 ;return minimum of #2 ;return customer who made #3 ;return name of #4,"[""SELECT['claims']"", ""PROJECT['payments of #REF', '#1']"", ""AGGREGATE['min', '#2']"", ""PROJECT['customer who made #REF', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'aggregate', 'project', 'project']",train
SPIDER_train_1522,Which customer made the smallest amount of claim in one claim? Return the customer details.,return claims ;return amounts of #1 ;return #1 where #2 is  the  lowest ;return the  customer  who made #3 ;return the  customer  details of #4,"[""SELECT['claims']"", ""PROJECT['amounts of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the lowest']"", ""PROJECT['the customer who made #REF', '#3']"", ""PROJECT['the customer details of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_1523,Find the names of customers who have no policies associated.,return customers ;return policies associated with  #1 ;return the  number of  #2 for each #1 ;return #1 where #3 is  zero ;return the  names of #4,"[""SELECT['customers']"", ""PROJECT['policies associated with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is zero']"", ""PROJECT['the names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_1524,What are the names of customers who do not have any policies?,return customers ;return #1 with policies ;return #1 besides  #2 ;return names of  #3,"[""SELECT['customers']"", ""FILTER['#1', 'with policies']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_1525,How many claim processing stages are there in total?,return claims ;return processing stages of  #1 ;return number of #2,"[""SELECT['claims']"", ""PROJECT['processing stages of #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_1526,Find the number of distinct stages in claim processing.,return stages ;return #1 in claim processing ;return distinct #2 ;return number of #3,"[""SELECT['stages']"", ""FILTER['#1', 'in claim processing']"", ""PROJECT['distinct #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_1527,What is the name of the claim processing stage that most of the claims are on?,return claim processing stages ;return claims on  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return name of  #4,"[""SELECT['claim processing stages']"", ""PROJECT['claims on #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_1528,Which claim processing stage has the most claims? Show the claim status name.,return claim  processing stages ;return the  number of  claims for each  #1 ;return #1 where #2 is  the  highest ;return the  claim  status of  #3,"[""SELECT['claim processing stages']"", ""PROJECT['claims', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']"", ""PROJECT['the claim status of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_1529,"Find the names of customers whose name contains ""Diana"".",return customers ;return names of  #1 ;return #1 where  #2 contains Diana ;return names of  #3,"[""SELECT['customers']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'contains Diana']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_153,When and in what zip code did max temperature reach 80?,"return max temperature ;return #1 that  reach 80 ;return When did #2 ;return the  zip code of  #2 ;return #3 ,  #4","[""SELECT['max temperature']"", ""FILTER['#1', 'that reach 80']"", ""PROJECT['When did #REF', '#2']"", ""PROJECT['the zip code of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_1530,"Which customers have the substring ""Diana"" in their names? Return the customer details.",return customers ;return names of  #1 ;return #1 where #2 have  substring Diana ;return customer details of  #3,"[""SELECT['customers']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'have substring Diana']"", ""PROJECT['customer details of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1531,Find the names of the customers who have an deputy policy.,return customers ;return policies of  #1 ;return #1 where  #2 is  deputy ;return names of  #3,"[""SELECT['customers']"", ""PROJECT['policies of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is deputy']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1532,"Which customers have an insurance policy with the type code ""Deputy""? Give me the customer details.",return customers ;return insurance policies of #1 ;return type codes of #2 ;return #1 where #3 is  Deputy ;return customer details of #4,"[""SELECT['customers']"", ""PROJECT['insurance policies of #REF', '#1']"", ""PROJECT['type codes of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Deputy']"", ""PROJECT['customer details of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_1533,Find the names of customers who either have an deputy policy or uniformed policy.,return customers ;return policies of  #1 ;return #1 where  #2 is  deputy ;return #1 where  #2 is  uniformed ;return #3 or  #4 ;return names of  #5,"[""SELECT['customers']"", ""PROJECT['policies of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is deputy']"", ""COMPARATIVE['#1', '#2', 'is uniformed']"", ""UNION['#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_1534,"Which customers have an insurance policy with the type code ""Deputy"" or ""Uniform""? Return the customer details.","return customers ;return insurance policies of #1 ;return type codes of #2 ;return #1 where #3 is  Deputy ;return #1 where #3 is  Uniform ;return #4 ,  #5 ;return customer details of #6","[""SELECT['customers']"", ""PROJECT['insurance policies of #REF', '#1']"", ""PROJECT['type codes of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Deputy']"", ""COMPARATIVE['#1', '#3', 'is Uniform']"", ""UNION['#4', '#5']"", ""PROJECT['customer details of #REF', '#6']""]","['select', 'project', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_1535,Find the names of all the customers and staff members.,"return customers ;return staff members ;return #1 ,   #2 ;return names of  #3","[""SELECT['customers']"", ""SELECT['staff members']"", ""UNION['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'select', 'union', 'project']",train
SPIDER_train_1536,What are the names of the customers and staff members?,"return customers ;return names of  #1 ;return staff members ;return names of  #3 ;return #2 ,  #4","[""SELECT['customers']"", ""PROJECT['names of #REF', '#1']"", ""SELECT['staff members']"", ""PROJECT['names of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'select', 'project', 'union']",train
SPIDER_train_1537,Find the number of records of each policy type and its type code.,"return policy types ;return records of #1 ;return number of  #2 for each #1 ;return type codes of #1 ;return #3 ,  #4","[""SELECT['policy types']"", ""PROJECT['records of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['type codes of #REF', '#1']"", ""UNION['#3', '#4']""]","['select', 'project', 'group', 'project', 'union']",train
SPIDER_train_1538,"For each policy type, return its type code and its count in the record.","return policy types ;return type  codes of  #1 ;return counts of  #1 ;return #2 ,   #3","[""SELECT['policy types']"", ""PROJECT['type codes of #REF', '#1']"", ""PROJECT['counts of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_1539,Find the name of the customer that has been involved in the most policies.,return policies ;return customers who  has been involved in  #1 ;return number of  #1 for each #2 ;return #2 where #3 is highest,"[""SELECT['policies']"", ""PROJECT['customers who has been involved in #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""SUPERLATIVE['max', '#2', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_154,What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?,"return stations ;return temperatures of #1 ;return the  highest of #2 for each #1 ;return #1 where #3 is at least 80 ;return temperatures of #4 ;return the  highest of #5 for each #4 ;return when  was  #6 ;return zip codes of #4 ;return #8 ,  #7","[""SELECT['stations']"", ""PROJECT['temperatures of #REF', '#1']"", ""GROUP['max', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 80']"", ""PROJECT['temperatures of #REF', '#4']"", ""GROUP['max', '#5', '#4']"", ""PROJECT['when was #REF', '#6']"", ""PROJECT['zip codes of #REF', '#4']"", ""UNION['#8', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'group', 'project', 'project', 'union']",train
SPIDER_train_1540,Which customer have the most policies? Give me the customer details.,return customers ;return policies of #1 ;return number of  #2 ;return #1 where #3 is  highest ;return details of #4,"[""SELECT['customers']"", ""PROJECT['policies of #REF', '#1']"", ""AGGREGATE['count', '#2']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['details of #REF', '#4']""]","['select', 'project', 'aggregate', 'superlative', 'project']",train
SPIDER_train_1541,"What is the description of the claim status ""Open""?",return claim status ;return #1 that  is  Open ;return description of  #2,"[""SELECT['claim status']"", ""FILTER['#1', 'that is Open']"", ""PROJECT['description of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_1542,"Find the description of the claim status ""Open"".",return claim ;return #1 status Open ;return the description of  #2,"[""SELECT['claim']"", ""FILTER['#1', 'status Open']"", ""PROJECT['the description of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_1543,How many distinct claim outcome codes are there?,return claim outcome codes ;return distinct #1 ;return number of  #2,"[""SELECT['claim outcome codes']"", ""PROJECT['distinct #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_1544,Count the number of distinct claim outcome codes.,return claim outcome codes ;return #1 that  are  distinct ;return number of #2,"[""SELECT['claim outcome codes']"", ""FILTER['#1', 'that are distinct']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_1545,Which customer is associated with the latest policy?,return policies ;return #1 that  is  the  latest ;return customer associated with  #2,"[""SELECT['policies']"", ""FILTER['#1', 'that is the latest']"", ""PROJECT['customer associated with #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_1546,Find the customer who started a policy most recently.,return customers ;return when  #1 started a policy ;return #1 where #2 is  most recently,"[""SELECT['customers']"", ""PROJECT['when #REF started a policy', '#1']"", ""SUPERLATIVE['max', '#1', '#2']""]","['select', 'project', 'superlative']",train
SPIDER_train_1547,Show the number of accounts.,return accounts ;return number of  #1,"[""SELECT['accounts']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_1548,How many accounts are there?,return accounts ;return number of #1,"[""SELECT['accounts']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_1549,How many customers have opened an account?,return customers ;return #1 who  have  opened accounts ;return number of #2,"[""SELECT['customers']"", ""FILTER['#1', 'who have opened accounts']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_155,Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.,return trips ;return zip code areas of  #1 ;return average mean temperatures of  #2 ;return #1 where  #3 is  higher than 60 ;return ids of  #4,"[""SELECT['trips']"", ""PROJECT['zip code areas of #REF', '#1']"", ""PROJECT['mean temperatures of #REF', '#2']"", ""GROUP['avg', '#3', '#2']"", ""COMPARATIVE['#1', '#4', 'is higher than 60']"", ""PROJECT['ids of #REF', '#5']""]","['select', 'project', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_1550,Count the number of customers who have an account.,return customers ;return #1 with  an account ;return the number of  #2,"[""SELECT['customers']"", ""FILTER['#1', 'with an account']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_1551,"Show the id, the date of account opened, the account name, and other account detail for all accounts.",return accounts ;return id of  #1 ;return date of account   opened of  #1 ;return account   name of  #1 ;return other account   details of  #1 ;return #2 or #3 or  #4,"[""SELECT['accounts']"", ""PROJECT['id of #REF', '#1']"", ""PROJECT['date of account opened of #REF', '#1']"", ""PROJECT['account name of #REF', '#1']"", ""PROJECT['other account details of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_1552,"What are the ids, date opened, name, and other details for all accounts?","return accounts ;return ids of  #1 ;return dates opened of  #1 ;return names of  #1 ;return other details of  #1 ;return #2 ,  #3 ,   #4 , #5","[""SELECT['accounts']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['dates opened of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['other details of #REF', '#1']"", ""UNION['#2', '#3', '#4', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_1553,"Show the id, the account name, and other account details for all accounts by the customer with first name 'Meaghan'.",return customers ;return #1 with  first name  'Meaghan ;return id of  #2 ;return account  name  of  #2 ;return account  details of  #2 ;return #3 or #4 or  #5,"[""SELECT['customers']"", ""FILTER['#1', 'with first name Meaghan']"", ""PROJECT['id of #REF', '#2']"", ""PROJECT['account name of #REF', '#2']"", ""PROJECT['account details of #REF', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_1554,"What are the ids, names, dates of opening, and other details for accounts corresponding to the customer with the first name ""Meaghan""?","return customers ;return first names of  #1 ;return #1 where #2 is  Meaghan ;return accounts of  #3 ;return ids of  #4 ;return names of  #4 ;return dates of  opening of #4 ;return other details of  #4 ;return #5 ,  #6 ,   #7 , #8","[""SELECT['customers']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Meaghan']"", ""PROJECT['accounts of #REF', '#3']"", ""PROJECT['ids of #REF', '#4']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['dates of opening of #REF', '#4']"", ""PROJECT['other details of #REF', '#4']"", ""UNION['#5', '#6', '#7', '#8']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_1555,Show the account name and other account detail for all accounts by the customer with first name Meaghan and last name Keeling.,"return customers ;return first names of  #1 ;return #1 where #2 is  Meaghan ;return last names of  #1 ;return #1 where #4 is  Keeling ;return #1 of  both #3 and  #5 ;return account  names of  #6 ;return other account  details of  #6 ;return #7 ,  #8","[""SELECT['customers']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Meaghan']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is Keeling']"", ""INTERSECTION['#1', '#3', '#5']"", ""PROJECT['account names of #REF', '#6']"", ""PROJECT['other account details of #REF', '#6']"", ""UNION['#7', '#8']""]","['select', 'project', 'comparative', 'project', 'comparative', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_1556,What are the names and other details for accounts corresponding to the customer named Meaghan Keeling?,"return customers ;return #1 that is named Meaghan Keeling ;return accounts of #2 ;return names of #3 ;return other details of #3 ;return #4 ,  #5","[""SELECT['customers']"", ""FILTER['#1', 'that is named Meaghan Keeling']"", ""PROJECT['accounts of #REF', '#2']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['other details of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_1557,Show the first name and last name for the customer with account name 900.,"return customers ;return accounts of #1 ;return names of #2 ;return #1 where #3 is 900 ;return first name  of #4 ;return last name  of #4 ;return #5 ,  #6","[""SELECT['customers']"", ""PROJECT['accounts of #REF', '#1']"", ""PROJECT['names of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is 900']"", ""PROJECT['first name of #REF', '#4']"", ""PROJECT['last name of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1558,What are the full names of customers with the account name 900?,return customers ;return accounts of  #1 ;return names of  #2 ;return #1 where #3 is  900 ;return full names of  #4,"[""SELECT['customers']"", ""PROJECT['accounts of #REF', '#1']"", ""PROJECT['names of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is 900']"", ""PROJECT['full names of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_1559,How many customers don't have an account?,return customers ;return #1 who  have  accounts ;return #1 besides #2 ;return number of #3,"[""SELECT['customers']"", ""FILTER['#1', 'who have accounts']"", ""DISCARD['#1', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'discard', 'aggregate']",train
SPIDER_train_1560,Count the number of customers who do not have an account.,return customers ;return #1 who  do not  have  accounts ;return number of  #2,"[""SELECT['customers']"", ""FILTER['#1', 'who do not have accounts']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_1561,"Show the unique first names, last names, and phone numbers for all customers with any account.","return customers ;return unique first names  of #1 ;return unique last names  of #1 ;return unique phone numbers of #1 ;return #2 ,  #3 ,   #4","[""SELECT['customers']"", ""PROJECT['unique first names of #REF', '#1']"", ""PROJECT['unique last names of #REF', '#1']"", ""PROJECT['unique phone numbers of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_1562,"What are the distinct first names, last names, and phone numbers for customers with accounts?","return customers ;return #1 with accounts ;return first names of  #2 ;return last names of  #2 ;return phone numbers of  #2 ;return #3 ,  #4 ,   #5 ;return distinct #6","[""SELECT['customers']"", ""FILTER['#1', 'with accounts']"", ""PROJECT['first names of #REF', '#2']"", ""PROJECT['last names of #REF', '#2']"", ""PROJECT['phone numbers of #REF', '#2']"", ""UNION['#3', '#4', '#5']"", ""PROJECT['distinct #REF', '#6']""]","['select', 'filter', 'project', 'project', 'project', 'union', 'project']",train
SPIDER_train_1563,Show customer ids who don't have an account.,return customer ids ;return #1 who  have  an account ;return #1 besides  #2,"[""SELECT['customer ids']"", ""FILTER['#1', 'who have an account']"", ""DISCARD['#1', '#2']""]","['select', 'filter', 'discard']",train
SPIDER_train_1564,What are the customer ids for customers who do not have an account?,return customers ;return #1 who do not have an account ;return customer ids of #2,"[""SELECT['customers']"", ""FILTER['#1', 'who do not have an account']"", ""PROJECT['customer ids of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_1565,How many accounts does each customer have? List the number and customer id.,"return customers ;return accounts of  #1 ;return number of  #2 for each #1 ;return customer  ids of  #1 ;return #3 ,   #4","[""SELECT['customers']"", ""PROJECT['accounts of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['customer ids of #REF', '#1']"", ""UNION['#3', '#4']""]","['select', 'project', 'group', 'project', 'union']",train
SPIDER_train_1566,Count the number of accounts corresponding to each customer id.,return customers ;return id of #1 ;return accounts of #2 ;return number of  #3 for each #2,"[""SELECT['customers']"", ""PROJECT['id of #REF', '#1']"", ""PROJECT['accounts of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_1567,"What is the customer id, first and last name with most number of accounts.","return customers ;return accounts of #1 ;return number of  #2 for each #1 ;return #1 where #3 is the  highest ;return customer id of #4 ;return first name of #4 ;return last name of #4 ;return #5 ,  #6 ,   #7","[""SELECT['customers']"", ""PROJECT['accounts of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']"", ""PROJECT['customer id of #REF', '#4']"", ""PROJECT['first name of #REF', '#4']"", ""PROJECT['last name of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_1568,Return the id and full name of the customer with the most accounts.,"return customers ;return accounts of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return id of  #4 ;return full name of  #4 ;return #5 ,  #6","[""SELECT['customers']"", ""PROJECT['accounts of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['id of #REF', '#4']"", ""PROJECT['full name of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_1569,"Show id, first name and last name for all customers and the number of accounts.","return customers ;return ids of  #1 ;return first names of  #1 ;return last names of  #1 ;return accounts of  #1 ;return number of  #5 for each  #1 ;return #2 ,  #3 ,   #4 , #6","[""SELECT['customers']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['first names of #REF', '#1']"", ""PROJECT['last names of #REF', '#1']"", ""PROJECT['accounts of #REF', '#1']"", ""GROUP['count', '#5', '#1']"", ""UNION['#2', '#3', '#4', '#6']""]","['select', 'project', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_157,"For each zip code, return how many times max wind speed reached 25?",return zip codes ;return max wind speeds of #1 ;return times when  #2 reached 25 ;return number of  #3 for each #1,"[""SELECT['zip codes']"", ""PROJECT['max wind speeds of #REF', '#1']"", ""PROJECT['times when #REF reached 25', '#2']"", ""GROUP['count', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_1570,"What are the the full names and ids for all customers, and how many accounts does each have?","return customers ;return full names of  #1 ;return ids of  #1 ;return accounts of  #1 ;return number of  #4 for each  #1 ;return #2 ,  #3 ,   #5","[""SELECT['customers']"", ""PROJECT['full names of #REF', '#1']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['accounts of #REF', '#1']"", ""GROUP['count', '#4', '#1']"", ""UNION['#2', '#3', '#5']""]","['select', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_1571,Show first name and id for all customers with at least 2 accounts.,"return customers ;return accounts of #1 ;return number of #2 for each #1 ;return #1 where #3 is  at least 2 ;return first names of #4 ;return ids of #4 ;return #5 , #6","[""SELECT['customers']"", ""PROJECT['accounts of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 2']"", ""PROJECT['first names of #REF', '#4']"", ""PROJECT['ids of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1572,What are the first names and ids for customers who have two or more accounts?,"return customers ;return accounts of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least two ;return first names of  #4 ;return ids of  #4 ;return #5 ,  #6","[""SELECT['customers']"", ""PROJECT['accounts of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""PROJECT['first names of #REF', '#4']"", ""PROJECT['ids of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1573,Show the number of customers.,return customers ;return number of  #1,"[""SELECT['customers']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_1575,Show the number of customers for each gender.,return genders ;return customers of  #1 ;return number of  #2 for each  #1,"[""SELECT['genders']"", ""PROJECT['customers of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_1576,How many customers are there of each gender?,return customers ;return genders of #1 ;return number of  #1 for each #2,"[""SELECT['customers']"", ""PROJECT['genders of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""UNION['#2', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_1577,How many transactions do we have?,return transactions ;return number of  #1,"[""SELECT['transactions']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_1578,Count the number of transactions.,return transactions ;return number of  #1,"[""SELECT['transactions']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_1579,How many transaction does each account have? Show the number and account id.,"return accounts ;return transactions of  #1 ;return number of  #2 for each  #1 ;return account  ids of  #1 ;return #3 ,  #4","[""SELECT['accounts']"", ""PROJECT['transactions of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['account ids of #REF', '#1']"", ""UNION['#3', '#4']""]","['select', 'project', 'group', 'project', 'union']",train
SPIDER_train_158,"For each zip code, how many times has the maximum wind speed reached 25 mph?",return zip codes ;return maximum wind speeds of #1 ;return times when  #2 reached 25 mph ;return the  number of  #3 for each #1,"[""SELECT['zip codes']"", ""PROJECT['wind speeds of #REF', '#1']"", ""GROUP['max', '#2', '#1']"", ""PROJECT['times when #REF reached 25 mph', '#3']"", ""GROUP['count', '#4', '#1']"", ""UNION['#1', '#5']""]","['select', 'project', 'group', 'project', 'group', 'union']",train
SPIDER_train_1580,Count the number of financial transactions that correspond to each account id.,return account ids ;return financial transactions of #1 ;return number of  #2 for each #1,"[""SELECT['account ids']"", ""PROJECT['financial transactions of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_1581,How many transaction does account with name 337 have?,return account ;return names of  #1 ;return #1 where  #2 is 337 ;return transactions of  #3 ;return number of  #4,"[""SELECT['account']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 337']"", ""PROJECT['transactions of #REF', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_1582,Count the number of financial transactions that the account with the name 337 has.,return accounts ;return #1 with  the  name 337 ;return financial transactions of  #2 ;return the number of #3,"[""SELECT['accounts']"", ""FILTER['#1', 'with the name 337']"", ""PROJECT['financial transactions of #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_1583,"What is the average, minimum, maximum, and total transaction amount?","return transactions ;return amounts of  #1 ;return average of  #2 ;return minimum of  #2 ;return maximum of  #2 ;return sum of  #2 ;return #3 ,  #4 ,   #5 , #6","[""SELECT['transactions']"", ""PROJECT['amounts of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""AGGREGATE['min', '#2']"", ""AGGREGATE['max', '#2']"", ""AGGREGATE['sum', '#2']"", ""UNION['#3', '#4', '#5', '#6']""]","['select', 'project', 'aggregate', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_1584,"Return the average, minimum, maximum, and total transaction amounts.","return transactions ;return amounts of  #1 ;return average of  #2 ;return minimum of  #2 ;return maximum of  #2 ;return sum of  #2 ;return #3 ,  #4 ,   #5 , #6","[""SELECT['transactions']"", ""PROJECT['amounts of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""AGGREGATE['min', '#2']"", ""AGGREGATE['max', '#2']"", ""AGGREGATE['sum', '#2']"", ""UNION['#3', '#4', '#5', '#6']""]","['select', 'project', 'aggregate', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_1585,Show ids for all transactions whose amounts are greater than the average.,return transactions ;return amounts of  #1 ;return the  average of  #2 ;return #1 where  #2 is greater than  #3 ;return the  ids of  #4,"[""SELECT['transactions']"", ""PROJECT['amounts of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is greater than #3']"", ""PROJECT['the ids of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_1586,What are the ids for transactions that have an amount greater than the average amount of a transaction?,return transactions ;return amounts of  #1 ;return average of  #2 ;return #1 where #2 is  higher than #3 ;return ids of  #4,"[""SELECT['transactions']"", ""PROJECT['amounts of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['ids of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_1587,Show the transaction types and the total amount of transactions.,"return transactions ;return types of #1 ;return amounts of #1 ;return sum of #3 ;return #2 ,  #4","[""SELECT['transactions']"", ""PROJECT['types of #REF', '#1']"", ""PROJECT['amounts of #REF', '#1']"", ""AGGREGATE['sum', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'aggregate', 'union']",train
SPIDER_train_1588,What are total transaction amounts for each transaction type?,return transactions ;return types of  #1 ;return total transaction  amounts for each  #2,"[""SELECT['transactions']"", ""PROJECT['types of #REF', '#1']"", ""PROJECT['amounts', '#2']"", ""GROUP['sum', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_1589,"Show the account name, id and the number of transactions for each account.","return accounts ;return account names of #1 ;return ids of #1 ;return transactions of #1 ;return number of  #4 for each  #1 ;return #2 ,  #3 ,   #5","[""SELECT['accounts']"", ""PROJECT['account names of #REF', '#1']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['transactions of #REF', '#1']"", ""GROUP['count', '#4', '#1']"", ""UNION['#2', '#3', '#5']""]","['select', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_1590,"Return the names and ids of each account, as well as the number of transactions.","return accounts ;return names of  #1 ;return ids of  #1 ;return transactions of  #1 ;return number of  #4 for each  #1 ;return #2 ,  #3 ,   #5","[""SELECT['accounts']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['transactions of #REF', '#1']"", ""GROUP['count', '#4', '#1']"", ""UNION['#2', '#3', '#5']""]","['select', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_1591,Show the account id with most number of transactions.,return accounts ;return transactions of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest ;return account id of #4,"[""SELECT['accounts']"", ""PROJECT['transactions of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['account id of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_1592,What is the id of the account with the most transactions?,return accounts ;return transactions of  #1 ;return number of #2 for each  #1 ;return #1 where #3 is  highest ;return id of  #4,"[""SELECT['accounts']"", ""PROJECT['transactions of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['id of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_1593,Show the account id and name with at least 4 transactions.,"return accounts ;return transactions of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least 4 ;return account id of  #4 ;return name of  #4 ;return #5 ,  #6","[""SELECT['accounts']"", ""PROJECT['transactions of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 4']"", ""PROJECT['account id of #REF', '#4']"", ""PROJECT['name of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1594,What are the ids and names of accounts with 4 or more transactions?,"return accounts ;return transactions of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least 4 ;return ids of  #4 ;return names of  #4 ;return #5 ,  #6","[""SELECT['accounts']"", ""PROJECT['transactions of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 4']"", ""PROJECT['ids of #REF', '#4']"", ""PROJECT['names of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1595,Show all product sizes.,return products ;return sizes of #1,"[""SELECT['products']"", ""PROJECT['sizes of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_1596,What are the different product sizes?,return products ;return the  sizes of  #1,"[""SELECT['products']"", ""PROJECT['the sizes of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_1597,Show all product colors.,return products ;return colors of  #1,"[""SELECT['products']"", ""PROJECT['colors of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_1598,What are the different product colors?,return products ;return different colors of  #1,"[""SELECT['products']"", ""PROJECT['different colors of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_1599,Show the invoice number and the number of transactions for each invoice.,return invoice ;return transactions of #1 ;return number of  #2 for each  #1,"[""SELECT['invoice']"", ""PROJECT['transactions of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_16,How many farms are there?,return farms ;return number of #1,"[""SELECT['farms']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_1600,How many transactions correspond to each invoice number?,return invoice numbers ;return transactions of  #1 ;return number of #2 for each #1,"[""SELECT['invoice numbers']"", ""PROJECT['transactions of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_1601,What is the invoice number and invoice date for the invoice with most number of transactions?,"return invoices ;return transactions of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return invoice   number of  #4 ;return invoice   date of  #4 ;return #5 ,  #6","[""SELECT['invoices']"", ""PROJECT['transactions of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""AGGREGATE['count', '#4']"", ""PROJECT['invoice date of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'aggregate', 'project', 'union']",train
SPIDER_train_1602,What is the invoice number and invoice date corresponding to the invoice with the greatest number of transactions?,"return invoices ;return transactions of #1 ;return number of  #2 for each #1 ;return #1 where #3 is highest ;return invoice number of #4 ;return invoice date of #4 ;return #5 ,  #6","[""SELECT['invoices']"", ""PROJECT['transactions of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""AGGREGATE['count', '#4']"", ""PROJECT['invoice date of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'aggregate', 'project', 'union']",train
SPIDER_train_1603,How many invoices do we have?,return invoices ;return number of  #1,"[""SELECT['invoices']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_1604,Count the number of invoices.,return invoices ;return number of #1,"[""SELECT['invoices']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_1605,Show invoice dates and order id and details for all invoices.,"return invoices ;return dates of #1 ;return order ids of #1 ;return details of #1 ;return #2 ,  #3 ,   #4","[""SELECT['invoices']"", ""PROJECT['dates of #REF', '#1']"", ""PROJECT['order ids of #REF', '#1']"", ""PROJECT['details of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_1606,"What are the invoice dates, order ids, and order details for all invoices?","return invoices ;return invoice dates of  #1 ;return order  ids of  #1 ;return order  details of  #1 ;return #2 ,  #3 ,   #4","[""SELECT['invoices']"", ""PROJECT['invoice dates of #REF', '#1']"", ""PROJECT['order ids of #REF', '#1']"", ""PROJECT['order details of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_1607,Show the order ids and the number of invoices for each order.,"return orders ;return ids of #1 ;return invoices of #1 ;return number of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['orders']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['invoices of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_1608,How many invoices correspond to each order id?,return order ids ;return invoices of  #1 ;return number of  #2 for each  #1,"[""SELECT['order ids']"", ""PROJECT['invoices of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_1609,What is the order id and order details for the order more than two invoices.,"return orders ;return invoices of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  higher than two ;return order  id of #4 ;return order  details of #4 ;return #5 ,  #6","[""SELECT['orders']"", ""PROJECT['invoices of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than two']"", ""PROJECT['order id of #REF', '#4']"", ""PROJECT['order details of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_161,"For each trip, return its ending station's installation date.",return trips ;return ending stations of  #1 ;return installation dates of  #2,"[""SELECT['trips']"", ""PROJECT['ending stations of #REF', '#1']"", ""PROJECT['installation dates of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_1610,Return the order ids and details for orderes with two or more invoices.,"return orders ;return invoices of #1 ;return number of  #2 for each  #1 ;return #1 where #3 is at least two ;return order ids of #4 ;return details of #4 ;return #5 ,  #6","[""SELECT['orders']"", ""PROJECT['invoices of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""PROJECT['order ids of #REF', '#4']"", ""PROJECT['details of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1611,"What is the customer last name, id and phone number with most number of orders?","return customers ;return orders of #1 ;return number of  #2 for each #1 ;return #1 where #3 is highest ;return last name of #4 ;return id of #4 ;return phone number of #4 ;return #5 ,  #6 ,   #7","[""SELECT['customers']"", ""PROJECT['orders of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['last name of #REF', '#4']"", ""PROJECT['id of #REF', '#4']"", ""AGGREGATE['count', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'aggregate', 'union']",train
SPIDER_train_1612,"Return the last name, id and phone number of the customer who has made the greatest number of orders.","return customers ;return orders of  #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is highest ;return last name of  #4 ;return id of  #4 ;return phone number of  #4 ;return #5 ,  #6 , #7","[""SELECT['customers']"", ""PROJECT['orders of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['last name of #REF', '#4']"", ""PROJECT['id of #REF', '#4']"", ""AGGREGATE['count', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'aggregate', 'union']",train
SPIDER_train_1613,Show all product names without an order.,return product names ;return #1 without orders,"[""SELECT['product names']"", ""FILTER['#1', 'without orders']""]","['select', 'filter']",train
SPIDER_train_1614,What are the names of products that have never been ordered?,return products ;return #1 that  have  been ordered ;return #1 besides  #2 ;return names of  #3,"[""SELECT['products']"", ""FILTER['#1', 'that have been ordered']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_1615,Show all product names and the total quantity ordered for each product name.,"return product names ;return quantities ordered of #1 ;return sum of #2 for each #1 ;return #1 , #3","[""SELECT['product names']"", ""PROJECT['quantities ordered of #REF', '#1']"", ""GROUP['sum', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_1616,"What are the different product names, and what is the sum of quantity ordered for each product?","return products ;return different product names of  #1 ;return quantities ordered of  #1 ;return sum of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['products']"", ""PROJECT['different product names of #REF', '#1']"", ""PROJECT['quantities ordered of #REF', '#1']"", ""GROUP['sum', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_1617,Show the order ids and the number of items in each order.,"return orders ;return order  ids of  #1 ;return items of  #1 ;return number of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['orders']"", ""PROJECT['order ids of #REF', '#1']"", ""PROJECT['items of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_1618,How many order items correspond to each order id?,return order  ids ;return order  items of  #1 ;return number of #2 for each #1,"[""SELECT['order ids']"", ""PROJECT['order items of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_1619,Show the product ids and the number of unique orders containing each product.,"return products ;return product ids of  #1 ;return orders containing #1 ;return unique #3 ;return number of  #4 for each  #1 ;return #2 ,  #5","[""SELECT['products']"", ""PROJECT['product ids of #REF', '#1']"", ""PROJECT['orders containing #REF', '#1']"", ""PROJECT['unique #REF', '#3']"", ""GROUP['count', '#4', '#1']"", ""UNION['#2', '#5']""]","['select', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_162,What is the installation date for each ending station on all the trips?,return trips ;return ending station of #1 ;return installation dates of #2,"[""SELECT['trips']"", ""PROJECT['ending station of #REF', '#1']"", ""PROJECT['installation dates of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_1620,How many distinct order ids correspond to each product?,return products ;return order ids of  #1 ;return distinct #2 ;return number of #3 for each #1,"[""SELECT['products']"", ""PROJECT['order ids of #REF', '#1']"", ""PROJECT['distinct #REF', '#2']"", ""GROUP['count', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_1621,Show all product names and the number of customers having an order on each product.,"return products ;return names of #1 ;return customers that  have  orders on  #1 ;return number of #3 for each #1 ;return #2 , #4","[""SELECT['products']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['customers that have orders on #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_1622,"What are teh names of the different products, as well as the number of customers who have ordered each product.","return different products ;return names of #1 ;return customers who ordered #1 ;return number of  #3 for each #1 ;return #2 ,  #4","[""SELECT['different products']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['customers who ordered #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_1623,Show order ids and the number of products in each order.,"return orders ;return ids of #1 ;return products of #1 ;return number of  #3 for each #1 ;return #2 ,  #4","[""SELECT['orders']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['products of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_1624,How many different products correspond to each order id?,return order ids ;return products of  #1 ;return different #2 ;return number of  #3 for each  #1,"[""SELECT['order ids']"", ""PROJECT['products of #REF', '#1']"", ""PROJECT['different #REF', '#2']"", ""GROUP['count', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_1625,Show order ids and the total quantity in each order.,"return orders ;return order  ids of #1 ;return quantities of #1 ;return sum of #3 for each #1 ;return #2 ,  #4","[""SELECT['orders']"", ""PROJECT['order ids of #REF', '#1']"", ""PROJECT['quantities of #REF', '#1']"", ""GROUP['sum', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_1626,"Give the order ids for all orders, as well as the total product quantity in each.","return orders ;return ids of  #1 ;return products of  #1 ;return number of #3 for each #1 ;return #2 ,   #4","[""SELECT['orders']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['products of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_1627,How many products were not included in any order?,return products ;return #1 included in orders ;return #1 besides #2 ;return number of  #3,"[""SELECT['products']"", ""FILTER['#1', 'included in orders']"", ""DISCARD['#1', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'discard', 'aggregate']",train
SPIDER_train_1628,Count the number of products that were never ordered.,return products ;return #1 that  were ordered ;return #1 besides #2 ;return number of #3,"[""SELECT['products']"", ""FILTER['#1', 'that were ordered']"", ""DISCARD['#1', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'discard', 'aggregate']",train
SPIDER_train_1629,How many churches opened before 1850 are there?,return churches ;return #1 opened before 1850 ;return number of #2,"[""SELECT['churches']"", ""FILTER['#1', 'opened before 1850']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_163,Which trip started from the station with the largest dock count? Give me the trip id.,return stations ;return dock counts of  #1 ;return #1 where #2 is  largest ;return trips that  started from  #3 ;return trip  id of  #4,"[""SELECT['stations']"", ""PROJECT['dock counts of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['trips that started from #REF', '#3']"", ""PROJECT['trip id of #REF', '#4']""]","['select', 'project', 'superlative', 'project', 'project']",train
SPIDER_train_1630,"Show the name, open date, and organizer for all churches.","return churches ;return names of  #1 ;return open dates of  #1 ;return organizers of  #1 ;return #2 ,  #3 ,   #4","[""SELECT['churches']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['open dates of #REF', '#1']"", ""PROJECT['organizers of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_1631,List all church names in descending order of opening date.,return churches ;return opening dates of  #1 ;return names of  #1 ;return #3 sorted by #2 in descending order,"[""SELECT['churches']"", ""PROJECT['opening dates of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""SORT['#3', '#2', 'in descending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_1632,Show the opening year in whcih at least two churches opened.,return opening years ;return churches that  opened in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least two,"[""SELECT['opening years']"", ""PROJECT['churches that opened in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_1633,Show the organizer and name for churches that opened between 1830 and 1840.,"return churches ;return #1 that  opened between 1830 and 1840 ;return organizers of #2 ;return names of #2 ;return #3 ,  #4","[""SELECT['churches']"", ""FILTER['#1', 'that opened betweenleftside 1830']"", ""FILTER['#2', 'that opened betweenrightside 1840']"", ""PROJECT['organizers of #REF', '#3']"", ""PROJECT['names of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'filter', 'project', 'project', 'union']",train
SPIDER_train_1634,Show all opening years and the number of churches that opened in that year.,"return opening years ;return churches that  opened in #1 ;return number of #2 for each #1 ;return #1 , #3","[""SELECT['opening years']"", ""PROJECT['churches that opened in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_1635,Show the name and opening year for three churches that opened most recently.,"return churches ;return #1 that  opened most recently ;return the  names of #2 ;return the  opening years of #2 ;return #3 ,  #4","[""SELECT['churches']"", ""FILTER['#1', 'that opened most recently']"", ""PROJECT['the names of #REF', '#2']"", ""PROJECT['the opening years of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_1636,How many female people are older than 30 in our record?,return people ;return #1 who are female ;return #2 that  are older than  30 ;return number of  #3,"[""SELECT['people']"", ""FILTER['#1', 'who are female']"", ""FILTER['#2', 'that are older than 30']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'filter', 'aggregate']",train
SPIDER_train_1637,Show the country where people older than 30 and younger than 25 are from.,return people ;return #1 older than  30 ;return #1 younger than  25 ;return the  countries that  #2 are from ;return the  countries that  #3 are from ;return the countries that  #1 are from ;return #6 of both #4 and #5,"[""SELECT['people']"", ""FILTER['#1', 'older than 30']"", ""FILTER['#1', 'younger than 25']"", ""PROJECT['the countries that #REF are from', '#2']"", ""PROJECT['the countries that #REF are from', '#3']"", ""PROJECT['the countries that #REF are from', '#1']"", ""INTERSECTION['#6', '#4', '#5']""]","['select', 'filter', 'filter', 'project', 'project', 'project', 'intersection']",train
SPIDER_train_1638,"Show the minimum, maximum, and average age for all people.",return people ;return ages of  #1 ;return maximum of  #2 ;return minimum of  #2 ;return average of  #2 ;return #3 or  #4 or #5,"[""SELECT['people']"", ""PROJECT['ages of #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""AGGREGATE['min', '#2']"", ""AGGREGATE['avg', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'project', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_1639,Show the name and country for all people whose age is smaller than the average.,"return people ;return ages of #1 ;return average of #2 ;return #1 where #2 is lower than #3 ;return names of #4 ;return countries of #4 ;return #5 ,  #6","[""SELECT['people']"", ""PROJECT['ages of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is lower than #3']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['countries of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_164,What is the id of the trip that started from the station with the highest dock count?,return stations ;return docks of #1 ;return number of  #2 for each #1 ;return #1 where #3 is highest ;return trip that started from  #4 ;return id of #5,"[""SELECT['stations']"", ""PROJECT['docks of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['trip that started from #REF', '#4']"", ""PROJECT['id of #REF', '#5']""]","['select', 'project', 'group', 'superlative', 'project', 'project']",train
SPIDER_train_1640,Show the pair of male and female names in all weddings after year 2014,"return weddings ;return years of #1 ;return #1 where #2 is higher than 2014 ;return male names of #3 ;return female names of #3 ;return #4 ,  #5","[""SELECT['weddings']"", ""PROJECT['years of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 2014']"", ""PROJECT['male names of #REF', '#3']"", ""PROJECT['female names of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1641,Show the name and age for all male people who don't have a wedding.,return people ;return #1 with  weddings ;return #1 besides #2 ;return #3 that are male ;return names of  #4 ;return ages of  #4 ;return #5 or #6,"[""SELECT['people']"", ""FILTER['#1', 'with weddings']"", ""DISCARD['#1', '#2']"", ""FILTER['#3', 'that are male']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['ages of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'filter', 'discard', 'filter', 'project', 'project', 'union']",train
SPIDER_train_1642,Show all church names except for those that had a wedding in year 2015.,return churches ;return #1 that  had a wedding in 2015 ;return  #1 besides #2 ;return names of #3,"[""SELECT['churches']"", ""FILTER['#1', 'that had a wedding in 2015']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_1643,Show all church names that have hosted least two weddings.,return churches ;return weddings hosted of #1 ;return number of  #2 for each #1 ;return #1 where #3 is at least two ;return names of #4,"[""SELECT['churches']"", ""PROJECT['weddings hosted of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_1644,Show the names for all females from Canada having a wedding in year 2016.,return females ;return #1 from Canada ;return #2 that  are having a wedding ;return #3 in the  year 2016 ;return the  names of #4,"[""SELECT['females']"", ""FILTER['#1', 'from Canada']"", ""FILTER['#2', 'that are having a wedding']"", ""FILTER['#3', 'in the year 2016']"", ""PROJECT['the names of #REF', '#4']""]","['select', 'filter', 'filter', 'filter', 'project']",train
SPIDER_train_1645,How many weddings are there in year 2016?,return weddings ;return #1 in year 2016 ;return the  number of  #2,"[""SELECT['weddings']"", ""FILTER['#1', 'in year 2016']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_1646,Show the church names for the weddings of all people older than 30.,return people ;return #1 who are older than  30 ;return weddings of #2 ;return churches of #3 ;return names of #4,"[""SELECT['people']"", ""FILTER['#1', 'who are older than 30']"", ""PROJECT['weddings of #REF', '#2']"", ""PROJECT['churches of #REF', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'project', 'project', 'project']",train
SPIDER_train_1647,Show all countries and the number of people from each country.,"return countries ;return people from  #1 ;return number of  #2 for each  #1 ;return #1 ,  #3","[""SELECT['countries']"", ""PROJECT['people from #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_1648,How many churches have a wedding in year 2016?,return churches ;return weddings of  #1 ;return years of  #2 ;return #1 where  #3 is  2016 ;return number of #4,"[""SELECT['churches']"", ""PROJECT['weddings of #REF', '#1']"", ""PROJECT['years of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is 2016']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'project', 'comparative', 'aggregate']",train
SPIDER_train_1649,How many artists do we have?,return artists ;return number of #1,"[""SELECT['artists']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_165,Count the number of trips that did not end in San Francisco city.,return trips ;return #1 that  did not  end in San Francisco city ;return number of  #2 ;return Count #3,"[""SELECT['trips']"", ""FILTER['#1', 'that did not end in San Francisco city']"", ""AGGREGATE['count', '#2']"", ""PROJECT['Count #REF', '#3']""]","['select', 'filter', 'aggregate', 'project']",train
SPIDER_train_1650,Count the number of artists.,return artists ;return number of #1,"[""SELECT['artists']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_1651,"Show all artist name, age, and country ordered by the yeared they joined.","return artists ;return names of #1 ;return ages of #1 ;return countries of #1 ;return yeared joined of #1 ;return #2 ,  #3 ,   #4 ; return #6 sorted by #5","[""SELECT['artists']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['ages of #REF', '#1']"", ""PROJECT['countries of #REF', '#1']"", ""PROJECT['yeared joined of #REF', '#1']"", ""UNION['#2', '#3', '#4']"", ""SORT['#6', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_1652,"What are the names, ages, and countries of artists, sorted by the year they joined?","return artists ;return names of  #1 ;return ages of  #1 ;return countries of  #1 ;return year #1 joined ;return #2 ,  #3 ,   #4 ;return #6 sorted by #5","[""SELECT['artists']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['ages of #REF', '#1']"", ""PROJECT['countries of #REF', '#1']"", ""PROJECT['year #REF joined', '#1']"", ""UNION['#2', '#3', '#4']"", ""SORT['#6', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_1653,What are all distinct country for artists?,return artists ;return countries of #1 ;return the  distinct #2,"[""SELECT['artists']"", ""PROJECT['countries of #REF', '#1']"", ""PROJECT['the distinct #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_1654,Return the different countries for artists.,return artists ;return countries of  #1 ;return different #2,"[""SELECT['artists']"", ""PROJECT['countries of #REF', '#1']"", ""PROJECT['different #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_1655,Show all artist names and the year joined who are not from United States.,"return artist names ;return #1 who are not from the  United States ;return year joined of #2 ;return #2 ,  #3","[""SELECT['artist names']"", ""FILTER['#1', 'who are not from the United States']"", ""PROJECT['year joined of #REF', '#2']"", ""UNION['#2', '#3']""]","['select', 'filter', 'project', 'union']",train
SPIDER_train_1656,"What are the names and year of joining for artists that do not have the country ""United States""?","return artists ;return countries of  #1 ;return #1 where #2 is  not  United States ;return names of  #3 ;return years of  joining of #3 ;return #4 ,  #5","[""SELECT['artists']"", ""PROJECT['countries of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not United States']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['years of joining of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1657,How many artists are above age 46 and joined after 1990?,return artists ;return ages of  #1 ;return #1 where  #2 is  higher than 46 ;return #1 who  joined after 1990 ;return #1 of  both #3 and #4 ;return number of #5,"[""SELECT['artists']"", ""PROJECT['ages of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 46']"", ""FILTER['#1', 'who joined after 1990']"", ""INTERSECTION['#1', '#3', '#4']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'comparative', 'filter', 'intersection', 'aggregate']",train
SPIDER_train_1658,Count the number of artists who are older than 46 and joined after 1990.,return artists ;return #1 older than 46 ;return #1 that  joined after 1990 ;return #1 of  both #2 and  #3 ;return number of  #4,"[""SELECT['artists']"", ""FILTER['#1', 'older than 46']"", ""FILTER['#1', 'that joined after 1990']"", ""INTERSECTION['#1', '#2', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'filter', 'filter', 'intersection', 'aggregate']",train
SPIDER_train_1659,What is the average and minimum age of all artists from United States.,"return artists ;return #1 from  United States ;return ages of  #2 ;return average of  #3 ;return minimum of  #3 ;return #4 ,  #5","[""SELECT['artists']"", ""FILTER['#1', 'from United States']"", ""PROJECT['ages of #REF', '#2']"", ""AGGREGATE['avg', '#3']"", ""AGGREGATE['min', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_166,How many trips did not end in San Francisco?,return trips ;return #1 that  did  not end in San Francisco ;return number of  #2,"[""SELECT['trips']"", ""FILTER['#1', 'that did not end in San Francisco']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_1660,Return the average and minimum ages across artists from the United States.,"return artists ;return #1 from the  United States ;return ages of  #2 ;return average of  #3 ;return minimum of  #3 ;return #4 ,  #5","[""SELECT['artists']"", ""FILTER['#1', 'from the United States']"", ""PROJECT['ages of #REF', '#2']"", ""AGGREGATE['avg', '#3']"", ""AGGREGATE['min', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_1661,What is the name of the artist who joined latest?,return artists ;return #1 who  joined latest ;return name of  #2,"[""SELECT['artists']"", ""FILTER['#1', 'who joined latest']"", ""PROJECT['name of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_1662,Return the name of the artist who has the latest join year.,return artists ;return join years of  #1 ;return #1 where #2 is  latest ;return name of  #3,"[""SELECT['artists']"", ""PROJECT['join years of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is latest']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1663,How many exhibition are there in year 2005 or after?,return exhibitions ;return years of  #1 ;return #1 where  #2 is  2005 or  after ;return number of #3,"[""SELECT['exhibitions']"", ""PROJECT['years of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 2005 or after']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_1664,Count the number of exhibitions that happened in or after 2005.,"return exhibitions ;return when  did #1 happen ;return #1 where #2 is equal to 2005 ;return #1 where #2 is higher than 2005 ;return #3 ,  #4 ;return number of  #5","[""SELECT['exhibitions']"", ""PROJECT['when did #REF happen', '#1']"", ""COMPARATIVE['#1', '#2', 'is equal to 2005']"", ""COMPARATIVE['#1', '#2', 'is higher than 2005']"", ""UNION['#3', '#4']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'aggregate']",train
SPIDER_train_1665,Show theme and year for all exhibitions with ticket prices lower than 15.,"return exhibitions ;return ticket prices of #1 ;return #1 where #2 is  lower than 15 ;return themes of #3 ;return years of #3 ;return #4 ,  #5","[""SELECT['exhibitions']"", ""PROJECT['ticket prices of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is lower than 15']"", ""PROJECT['themes of #REF', '#3']"", ""PROJECT['years of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1666,What are the theme and year for all exhibitions that have a ticket price under 15?,"return exhibitions ;return #1 that  have  a ticket price under 15 ;return theme for all #2 ;return year for all #2 ;return #3 ,  #4","[""SELECT['exhibitions']"", ""FILTER['#1', 'that have a ticket price under 15']"", ""PROJECT['theme for all #REF', '#2']"", ""PROJECT['year for all #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_1667,Show all artist names and the number of exhibitions for each artist.,"return artists ;return names of  #1 ;return exhibitions of  #1 ;return number of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['artists']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['exhibitions of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_1668,How many exhibitions has each artist had?,return artists ;return exhibitions of  #1 ;return number of  #2 for each  #1,"[""SELECT['artists']"", ""PROJECT['exhibitions of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_1669,What is the name and country for the artist with most number of exhibitions?,"return artists ;return exhibitions of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return name of  #4 ;return country of  #4 ;return #5 ,  #6","[""SELECT['artists']"", ""PROJECT['exhibitions of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['country of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_167,"In zip code 94107, on which day neither Fog nor Rain was not observed?",return zip code 94107 ;return days that Fog observed In #1 ;return days that Rain observed In #1 ;return days besides  #2 ;return #4 besides  #3,"[""SELECT['zip code 94107']"", ""PROJECT['days that Fog observed In #REF', '#1']"", ""PROJECT['days that Rain observed In #REF', '#1']"", ""SELECT['days']"", ""DISCARD['#4', '#2']"", ""DISCARD['#5', '#3']""]","['select', 'project', 'project', 'select', 'discard', 'discard']",train
SPIDER_train_1670,Return the name and country corresponding to the artist who has had the most exhibitions.,"return artists ;return exhibitions of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return name of  #4 ;return country of  #4 ;return #5 ,  #6","[""SELECT['artists']"", ""PROJECT['exhibitions of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['country of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_1671,Show names for artists without any exhibition.,return artists ;return #1 without exhibitions ;return names of  #2,"[""SELECT['artists']"", ""FILTER['#1', 'without exhibitions']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_1672,What are the names of artists that have not had any exhibitions?,return artists ;return #1 who have not had exhibitions ;return names of #2,"[""SELECT['artists']"", ""FILTER['#1', 'who have not had exhibitions']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_1673,What is the theme and artist name for the exhibition with a ticket price higher than the average?,"return exhibitions ;return ticket prices of #1 ;return average of #2 ;return #1 where #2 is higher than #3 ;return theme of #4 ;return artist of #4 ;return name of #6 ;return #5 ,  #7","[""SELECT['exhibitions']"", ""PROJECT['ticket prices of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['theme of #REF', '#4']"", ""PROJECT['artist of #REF', '#4']"", ""PROJECT['name of #REF', '#6']"", ""UNION['#5', '#7']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_1674,Return the names of artists and the themes of their exhibitions that had a ticket price higher than average.,"return exhibitions ;return ticket prices of #1 ;return average of #2 ;return #1 where #2 is  higher than #3 ;return artists of #4 ;return names of #5 ;return themes of #4 ;return #6 ,  #7","[""SELECT['exhibitions']"", ""PROJECT['ticket prices of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['artists of #REF', '#4']"", ""PROJECT['names of #REF', '#5']"", ""PROJECT['themes of #REF', '#4']"", ""UNION['#6', '#7']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_1675,"Show the average, minimum, and maximum ticket prices for exhibitions for all years before 2009.","return exhibitions ;return years of #1 ;return #1 where #2 is lower than 2009 ;return ticket prices of #3 ;return average of #4 ;return minimum of #4 ;return maximum of #4 ;return #5 ,  #6 ,   #7","[""SELECT['exhibitions']"", ""PROJECT['years of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is lower than 2009']"", ""PROJECT['ticket prices of #REF', '#3']"", ""AGGREGATE['avg', '#4']"", ""AGGREGATE['min', '#4']"", ""AGGREGATE['max', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'comparative', 'project', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_1676,"What are the average, minimum, and maximum ticket prices for exhibitions that happened prior to 2009?","return exhibitions ;return #1 that  happened prior to 2009 ;return ticket prices for #2 ;return average of  #3 ;return minimum of  #3 ;return maximum of  #3 ;return #4 ,  #5 ,   #6","[""SELECT['exhibitions']"", ""FILTER['#1', 'that happened prior to 2009']"", ""PROJECT['ticket prices for #REF', '#2']"", ""AGGREGATE['avg', '#3']"", ""AGGREGATE['min', '#3']"", ""AGGREGATE['max', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'filter', 'project', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_1677,Show theme and year for all exhibitions in an descending order of ticket price.,"return exhibitions ;return themes of  #1 ;return years of  #1 ;return ticket prices of  #1 ;return #2 ,  #3 ;return #5 sorted by #4 in descending order","[""SELECT['exhibitions']"", ""PROJECT['themes of #REF', '#1']"", ""PROJECT['years of #REF', '#1']"", ""PROJECT['ticket prices of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#5', '#4', 'in descending order']""]","['select', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_1678,"What are the themes and years for exhibitions, sorted by ticket price descending?","return exhibitions ;return themes of #1 ;return years of #1 ;return ticket price of #1 ;return #2 ,  #3 ;return #5 sorted by #4 descending","[""SELECT['exhibitions']"", ""PROJECT['themes of #REF', '#1']"", ""PROJECT['years of #REF', '#1']"", ""PROJECT['ticket price of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#5', '#4', 'descending']""]","['select', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_1679,"What is the theme, date, and attendance for the exhibition in year 2004?","return exhibitions ;return years of  #1 ;return #1 where #2 is  2004 ;return theme of  #3 ;return date of  #3 ;return attendance of  #3 ;return #4 ,  #5 ,   #6","[""SELECT['exhibitions']"", ""PROJECT['years of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 2004']"", ""PROJECT['theme of #REF', '#3']"", ""PROJECT['date of #REF', '#3']"", ""PROJECT['attendance of #REF', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_168,On which day has it neither been foggy nor rained in the zip code of 94107?,return foggy days ;return #1 in zip code 94107 ;return days that rained ;return #3 in zip code 94107 ;return #2 or #4 ;return days besides #5,"[""SELECT['foggy days']"", ""FILTER['#1', 'in zip code 94107']"", ""SELECT['days that rained']"", ""FILTER['#3', 'in zip code 94107']"", ""UNION['#2', '#4']"", ""SELECT['days']"", ""DISCARD['#6', '#5']""]","['select', 'filter', 'select', 'filter', 'union', 'select', 'discard']",train
SPIDER_train_1680,"Return the themes, dates, and attendance for exhibitions that happened in 2004.",return exhibitions ;return #1 that  are  in 2004 ;return themes of  #2 ;return dates of  #2 ;return attendance of  #2 ;return #3 or #4 or  #5,"[""SELECT['exhibitions']"", ""FILTER['#1', 'that are in 2004']"", ""PROJECT['themes of #REF', '#2']"", ""PROJECT['dates of #REF', '#2']"", ""PROJECT['attendance of #REF', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_1681,Show all artist names who didn't have an exhibition in 2004.,return artist names ;return #1 who did  not have an exhibition in 2004,"[""SELECT['artist names']"", ""FILTER['#1', 'who did not have an exhibition in 2004']""]","['select', 'filter']",train
SPIDER_train_1682,What are the names of artists who did not have an exhibition in 2004?,return exhibitions ;return #1 in 2004 ;return the  artists of #2 ;return artists besides #3 ;return the  names of #4,"[""SELECT['exhibitions']"", ""FILTER['#1', 'in 2004']"", ""PROJECT['the artists of #REF', '#2']"", ""SELECT['artists']"", ""DISCARD['#4', '#3']"", ""PROJECT['the names of #REF', '#5']""]","['select', 'filter', 'project', 'select', 'discard', 'project']",train
SPIDER_train_1683,Show the theme for exhibitions with both records of an attendance below 100 and above 500.,return exhibitions ;return attendances of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  below 100 ;return #1 where #3 is  above 500 ;return #1 of both #4 and #5 ;return themes for #6,"[""SELECT['exhibitions']"", ""PROJECT['attendances of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is below 100']"", ""COMPARATIVE['#1', '#3', 'is above 500']"", ""INTERSECTION['#1', '#4', '#5']"", ""PROJECT['themes for #REF', '#6']""]","['select', 'project', 'group', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_1684,Which themes have had corresponding exhibitions that have had attendance both below 100 and above 500?,return themes ;return exhibitions with #1 ;return attendances of  #2 ;return #1 where #3 is  lower than 100 ;return #1 where #3 is  higher than 500 ;return #1 of  both #4 and  #5,"[""SELECT['themes']"", ""PROJECT['exhibitions with #REF', '#1']"", ""PROJECT['attendances of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is lower than 100']"", ""COMPARATIVE['#1', '#3', 'is higher than 500']"", ""INTERSECTION['#1', '#4', '#5']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection']",train
SPIDER_train_1685,How many exhibitions have a attendance more than 100 or have a ticket price below 10?,return exhibitions ;return attendance of  #1 ;return #1 where  #2 is  higher than 100 ;return ticket prices of  #1 ;return #1 where  #4 is  lower than 10 ;return #3 or  #5 ;return number of #6,"[""SELECT['exhibitions']"", ""PROJECT['attendance of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 100']"", ""PROJECT['ticket prices of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is lower than 10']"", ""UNION['#3', '#5']"", ""AGGREGATE['count', '#6']""]","['select', 'project', 'comparative', 'project', 'comparative', 'union', 'aggregate']",train
SPIDER_train_1686,Count the number of exhibitions that have had an attendnance of over 100 or a ticket prices under 10.,return exhibitions ;return attendnances of  #1 ;return #1 where #2 is  higher than 100 ;return ticket prices of  #1 ;return #1 where #4 is  lower than 10 ;return #3 or  #5 ;return number of  #6,"[""SELECT['exhibitions']"", ""PROJECT['attendnances of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 100']"", ""PROJECT['ticket prices of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is lower than 10']"", ""UNION['#3', '#5']"", ""AGGREGATE['count', '#6']""]","['select', 'project', 'comparative', 'project', 'comparative', 'union', 'aggregate']",train
SPIDER_train_1687,Show all artist names with an average exhibition attendance over 200.,return artist names ;return exhibition attendances of  #1 ;return average of  #2 for each  #1 ;return #1 where #3 is  higher than 200,"[""SELECT['artist names']"", ""PROJECT['exhibition attendances of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 200']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_1688,What are the names of artist whose exhibitions draw over 200 attendees on average?,return artists ;return exhibitions of  #1 ;return attendees of  #2 ;return number of  #3 for each  #1 ;return average of  #4 ;return #1 where #5 is  higher than 200 ;return names of  #6,"[""SELECT['artists']"", ""PROJECT['exhibitions of #REF', '#1']"", ""PROJECT['attendees of #REF', '#2']"", ""GROUP['count', '#3', '#1']"", ""AGGREGATE['avg', '#4']"", ""COMPARATIVE['#1', '#5', 'is higher than 200']"", ""PROJECT['names of #REF', '#6']""]","['select', 'project', 'project', 'group', 'aggregate', 'comparative', 'project']",train
SPIDER_train_1689,"Find the id of the item whose title is ""orange"".",return items ;return title of  #1 ;return #1 where  #2 is  orange ;return id of  #3,"[""SELECT['items']"", ""PROJECT['title of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is orange']"", ""PROJECT['id of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_169,What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?,return stations ;return latitude of #1 ;return #1 where #2 is higher than 37.4 ;return bike availabilities of #3 ;return the  lowest of #4 for each #3 ;return #3 where #5 is at least 7 ;return ids of #6,"[""SELECT['stations']"", ""PROJECT['latitude of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 37.4']"", ""PROJECT['bike availabilities of #REF', '#3']"", ""GROUP['min', '#4', '#3']"", ""COMPARATIVE['#3', '#5', 'is at least 7']"", ""PROJECT['ids of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_1690,List all information in the item table.,return item table ;return all information in #1,"[""SELECT['item table']"", ""PROJECT['all information in #REF', '#1']""]","['select', 'project']",train
SPIDER_train_1691,Find the number of reviews.,return reviews ;return number of #1,"[""SELECT['reviews']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_1693,Find the average and maximum rating of all reviews.,"return reviews ;return rating of  #1 ;return the average of  #2 ;return the maximum of  #2 ;return #3 ,   #4","[""SELECT['reviews']"", ""PROJECT['rating of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""AGGREGATE['max', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_1694,Find the highest rank of all reviews.,return reviews ;return ranks of  #1 ;return #1 where  #2 is  highest ;return rank of  #3,"[""SELECT['reviews']"", ""PROJECT['ranks of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['rank of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_1695,How many different users wrote some reviews?,return reviews ;return users who  wrote #1 ;return different #2 ;return number of #3,"[""SELECT['reviews']"", ""PROJECT['users who wrote #REF', '#1']"", ""PROJECT['different #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_1696,How many different items were reviewed by some users?,return items ;return #1 that  were reviewed by some users ;return different #2 ;return number of #3,"[""SELECT['items']"", ""FILTER['#1', 'that were reviewed by some users']"", ""PROJECT['different #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_1697,Find the number of items that did not receive any review.,return items ;return #1 with  reviews ;return #1 besides #2 ;return number of #3,"[""SELECT['items']"", ""FILTER['#1', 'with reviews']"", ""DISCARD['#1', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'discard', 'aggregate']",train
SPIDER_train_1698,Find the names of users who did not leave any review.,return users ;return #1 with  reviews ;return #1 besides #2 ;return names of  #3,"[""SELECT['users']"", ""FILTER['#1', 'with reviews']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_1699,Find the names of goods that receive a rating of 10.,return goods ;return ratings of  #1 ;return #1 where  #2 is  10 ;return names of  #3,"[""SELECT['goods']"", ""PROJECT['ratings of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 10']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_17,Count the number of farms.,return farms ;return number of #1,"[""SELECT['farms']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_170,What are the ids of all stations that have a latitude above 37.4 and have never had less than 7 bikes available?,return stations ;return latitude of #1 ;return #1 where #2 is  above 37.4 ;return bikes ;return #4 that  are available ;return number of  #5 for each #1 ;return #1 where #6 is  not less than  7 ;return #1 in both #3 and #7 ;return ids of #8,"[""SELECT['stations']"", ""PROJECT['latitude of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is above 37.4']"", ""SELECT['bikes']"", ""FILTER['#4', 'that are available']"", ""GROUP['count', '#5', '#1']"", ""COMPARATIVE['#1', '#6', 'is not less than 7']"", ""INTERSECTION['#1', '#3', '#7']"", ""PROJECT['ids of #REF', '#8']""]","['select', 'project', 'comparative', 'select', 'filter', 'group', 'comparative', 'intersection', 'project']",train
SPIDER_train_1700,Find the titles of items whose rating is higher than the average review rating of all items.,return items  ;return ratings of  #1 ;return average of  #2 ;return #1 where  #2 is  higher than #3 ;return titles of  #4,"[""SELECT['items']"", ""PROJECT['ratings of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['titles of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_1701,Find the titles of items that received any rating below 5.,return items ;return ratings of  #1 ;return #1 where  #2 is  lower than 5 ;return titles of  #3,"[""SELECT['items']"", ""PROJECT['ratings of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is lower than 5']"", ""PROJECT['titles of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1702,Find the titles of items that received both a rating higher than 8 and a rating below 5.,return items ;return ratings of #1 ;return #1 where #2 is higher than 8 ;return #1 where #2 is lower than 5 ;return #1 in  both #3 and  #4 ;return titles of #5,"[""SELECT['items']"", ""PROJECT['ratings of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 8']"", ""COMPARATIVE['#1', '#2', 'is lower than 5']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['titles of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_1703,Find the names of items whose rank is higher than 3 and whose average rating is above 5.,return items ;return rank of  #1 ;return rating of  #1 ;return average #3 for each #1 ;return #1 where  #2 is  higher than 3 ;return #1 where  #4 is  above 5 ;return #1 in both #5 and #6 ;return names of  #7,"[""SELECT['items']"", ""PROJECT['rank of #REF', '#1']"", ""PROJECT['rating of #REF', '#1']"", ""GROUP['avg', '#3', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 3']"", ""COMPARATIVE['#1', '#4', 'is above 5']"", ""INTERSECTION['#1', '#5', '#6']"", ""PROJECT['names of #REF', '#7']""]","['select', 'project', 'project', 'group', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_1704,Find the name of the item with the lowest average rating.,return items ;return ratings of  #1 ;return average #2 for each #1 ;return #1 where  #3 is  lowest ;return name of  #4,"[""SELECT['items']"", ""PROJECT['ratings of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_1705,List the titles of all items in alphabetic order .,return items ;return titles of  #1 ;return #2 sorted by alphabetic order,"[""SELECT['items']"", ""PROJECT['titles of #REF', '#1']"", ""SORT['#2', '#2', 'alphabetic order']""]","['select', 'project', 'sort']",train
SPIDER_train_1706,Find the name of the user who gives the most reviews.,return users ;return reviews ;return number of #2 for each #1 ;return #1 where  #3 is  highest ;return name of  #4,"[""SELECT['users']"", ""SELECT['reviews']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'select', 'group', 'superlative', 'project']",train
SPIDER_train_1708,Find the name and id of the good with the highest average rank.,"return good ;return average rank of  #1 ;return #1 where  #2 is  highest ;return name of  #3 ;return id of  #3 ;return #4 ,   #5","[""SELECT['good']"", ""PROJECT['rank of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['id of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_1709,"For each user, return the name and the average rating of reviews given by them.","return users ;return names of #1 ;return reviews of #1 ;return ratings of #3 ;return the  average of #4 for each #1 ;return #2 ,  #5","[""SELECT['users']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['reviews of #REF', '#1']"", ""PROJECT['ratings of #REF', '#3']"", ""GROUP['avg', '#4', '#1']"", ""UNION['#2', '#5']""]","['select', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_171,What are names of stations that have average bike availability above 10 and are not located in San Jose city?,return stations ;return bike availabilities of #1 ;return #1 where #2 is higher than 10 ;return #3 located in  San Jose city ;return #3 besides  #4 ;return names of #5,"[""SELECT['stations']"", ""PROJECT['bike availabilities of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 10']"", ""FILTER['#3', 'located in San Jose city']"", ""DISCARD['#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'filter', 'discard', 'project']",train
SPIDER_train_1710,"For each user, find their name and the number of reviews written by them.","return users ;return names of  #1 ;return reviews written by #1 ;return number of #3 for each #1 ;return #2 ,   #4","[""SELECT['users']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['reviews written by #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_1711,Find the name of the user who gave the highest rating.,return users ;return ratings of  #1 ;return #1 where  #2 is  highest ;return name of  #3,"[""SELECT['users']"", ""PROJECT['ratings of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_1713,Find each target user's name and average trust score.,return target users ;return name of  #1 ;return trust score of  #1 ;return average of  #3 ;return #2 and #4,"[""SELECT['target users']"", ""PROJECT['name of #REF', '#1']"", ""PROJECT['trust score of #REF', '#1']"", ""AGGREGATE['avg', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'aggregate', 'union']",train
SPIDER_train_1714,Find the name of the target user with the lowest trust score.,return target users ;return trust scores of  #1 ;return #1 where  #2 is  lowest ;return name of  #3,"[""SELECT['target users']"", ""PROJECT['trust scores of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_1715,Find the names of the items that did not receive any review.,return items ;return #1 with  reviews ;return #1 besides #2 ;return names of  #3,"[""SELECT['items']"", ""FILTER['#1', 'with reviews']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_1717,Find the number of users who did not write any review.,return users ;return reviews of #1 ;return number of  #2 for each #1 ;return #1 where #3 is zero,"[""SELECT['users']"", ""PROJECT['reviews of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is zero']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_1718,Find the number of items without any review.,return items ;return #1 with  reviews ;return #1 besides #2 ;return the number of #3,"[""SELECT['items']"", ""FILTER['#1', 'with reviews']"", ""DISCARD['#1', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'discard', 'aggregate']",train
SPIDER_train_1719,How many players are there?,return players ;return number of  #1,"[""SELECT['players']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_172,What are the names of all stations that have more than 10 bikes available and are not located in San Jose?,return stations ;return #1 not located in San Jose ;return bikes available of #2 ;return number of  #3 for each #2 ;return #2 where #4 is  higher than 10 ;return names of #5,"[""SELECT['stations']"", ""FILTER['#1', 'not located in San Jose']"", ""PROJECT['bikes available of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""COMPARATIVE['#2', '#4', 'is higher than 10']"", ""PROJECT['names of #REF', '#5']""]","['select', 'filter', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_1720,List the names of players in ascending order of votes.,return players ;return votes of  #1 ; return names of #1 ;return #3 sorted by #2 in ascending order,"[""SELECT['players']"", ""PROJECT['votes of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""SORT['#3', '#2', 'in ascending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_1721,What are the gender and occupation of players?,"return players ;return genders of  #1 ;return occupations of  #1 ;return #2,  #3","[""SELECT['players']"", ""PROJECT['genders of #REF', '#1']"", ""PROJECT['occupations of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_1722,"List the name and residence for players whose occupation is not ""Researcher"".","return players ;return occupations of  #1 ;return #1 where  #2 is not  Researcher ;return names of  #3 ;return residences of  #3 ;return #4 ,  #5","[""SELECT['players']"", ""PROJECT['occupations of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not Researcher']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['residences of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1723,"Show the names of sponsors of players whose residence is either ""Brandon"" or ""Birtle"".",return players ;return residences of  #1 ;return #1 where #2 is  Brandon ;return #1 where #2 is  Birtle ;return #3 or  #4 ;return sponsors of  #5 ;return names of  #6,"[""SELECT['players']"", ""PROJECT['residences of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Brandon']"", ""COMPARATIVE['#1', '#2', 'is Birtle']"", ""UNION['#3', '#4']"", ""PROJECT['sponsors of #REF', '#5']"", ""PROJECT['names of #REF', '#6']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project', 'project']",train
SPIDER_train_1724,What is the name of the player with the largest number of votes?,return players ;return votes of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return name of  #4,"[""SELECT['players']"", ""PROJECT['votes of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_1725,Show different occupations along with the number of players in each occupation.,"return players ;return occupations of #1 ;return the  different #2 ;return number of  #1 for each of #3 ;return #3 ,  #4","[""SELECT['players']"", ""PROJECT['occupations of #REF', '#1']"", ""PROJECT['the different #REF', '#2']"", ""GROUP['count', '#1', '#3']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_1726,Please show the most common occupation of players.,return players ;return occupations of #1 ;return number of  #1 for each #2 ;return #2 where #3 is  the  highest,"[""SELECT['players']"", ""PROJECT['occupations of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""COMPARATIVE['#2', '#3', 'is the highest']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_1727,Show the residences that have at least two players.,return residences ;return players in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least two,"[""SELECT['residences']"", ""PROJECT['players in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_1728,Show the names of players and names of their coaches.,"return players ;return names of #1 ;return coaches of #1 ;return names of #3 ;return #2 ,  #4","[""SELECT['players']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['coaches of #REF', '#1']"", ""PROJECT['names of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_1729,Show the names of players coached by the rank 1 coach.,return coaches ;return ranks of #1 ;return #1 where #2 is 1 ;return players of #3 ;return names of #4,"[""SELECT['coaches']"", ""PROJECT['ranks of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 1']"", ""PROJECT['players of #REF', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_173,"What are the name, latitude, and city of the station with the lowest latitude?","return stations ;return the  latitudes of  #1 ;return #1 where #2 is  the  lowest ;return the  name of  #3 ;return the  latitude of  #3 ;return the  city of  #3 ;return #4 ,  #5 ,   #6","[""SELECT['stations']"", ""PROJECT['the latitudes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the lowest']"", ""PROJECT['the name of #REF', '#3']"", ""PROJECT['the latitude of #REF', '#3']"", ""PROJECT['the city of #REF', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_1730,Show the names and genders of players with a coach starting after 2011.,"return coaches ;return #1 starting after 2011 ;return players of  #2 ;return names of  #3 ;return gender of  #3 ;return #4 ,  #5","[""SELECT['coaches']"", ""FILTER['#1', 'starting after 2011']"", ""PROJECT['players of #REF', '#2']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['gender of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_1731,Show the names of players and names of their coaches in descending order of the votes of players.,"return players ;return names of  #1 ;return coaches of  #1 ;return names of  #3 ;return votes of  #1 ;return #2 ,  #4 ;return #6 sorted by #5 in descending order","[""SELECT['players']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['coaches of #REF', '#1']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['votes of #REF', '#1']"", ""UNION['#2', '#4']"", ""SORT['#6', '#5', 'in descending order']""]","['select', 'project', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_1732,List the names of players that do not have coaches.,return players ;return #1 that  have  coaches ;return #1 besides  #2 ;return names of  #3,"[""SELECT['players']"", ""FILTER['#1', 'that have coaches']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_1733,"Show the residences that have both a player of gender ""M"" and a player of gender ""F"".",return residences ;return players of  #1 ;return #2 with  gender  M ;return #2 with  gender  F ;return #1 of  both #3 and #4,"[""SELECT['residences']"", ""PROJECT['players of #REF', '#1']"", ""FILTER['#2', 'with gender M']"", ""FILTER['#2', 'with gender F']"", ""INTERSECTION['#1', '#3', '#4']""]","['select', 'project', 'filter', 'filter', 'intersection']",train
SPIDER_train_1734,"How many coaches does each club has? List the club id, name and the number of coaches.","return clubs ;return coaches  of  #1 ;return number of #2 for each #1 ;return club  ids of  #1 ;return names of  #1 ;return #4 ,   #5 , #3","[""SELECT['clubs']"", ""PROJECT['coaches of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['club ids of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""UNION['#4', '#5', '#3']""]","['select', 'project', 'group', 'project', 'project', 'union']",train
SPIDER_train_1735,How many gold medals has the club with the most coaches won?,return clubs ;return coaches of  #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is highest ;return gold medals of  #4 ;return number of  #5,"[""SELECT['clubs']"", ""PROJECT['coaches of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['gold medals of #REF', '#4']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'group', 'superlative', 'project', 'aggregate']",train
SPIDER_train_1736,How many gymnasts are there?,return gymnasts ;return number of #1,"[""SELECT['gymnasts']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_1737,Count the number of gymnasts.,return gymnasts ;return number of  #1,"[""SELECT['gymnasts']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_1738,List the total points of gymnasts in descending order.,return gymnasts ;return points of  #1 ;return sum of  #2 for each  #1 ;return #3 sorted by descending order,"[""SELECT['gymnasts']"", ""PROJECT['points of #REF', '#1']"", ""GROUP['sum', '#2', '#1']"", ""SORT['#3', '#3', 'descending order']""]","['select', 'project', 'group', 'sort']",train
SPIDER_train_1739,"What are the total points for all gymnasts, ordered by total points descending?",return gymnasts ;return total  points  for all #1 ;return #2 ordered by #2 descending,"[""SELECT['gymnasts']"", ""PROJECT['points for all #REF', '#1']"", ""GROUP['sum', '#2', '#1']"", ""SORT['#3', '#3', 'descending']""]","['select', 'project', 'group', 'sort']",train
SPIDER_train_174,"What is the name, latitude, and city of the station that is located the furthest South?","return stations ;return #1 located the   furthest South ;return name of #2 ;return latitude of #2 ;return city of #2 ;return #3 ,  #4 ,   #5","[""SELECT['stations']"", ""FILTER['#1', 'located the furthest South']"", ""PROJECT['name of #REF', '#2']"", ""PROJECT['latitude of #REF', '#2']"", ""PROJECT['city of #REF', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_1740,List the total points of gymnasts in descending order of floor exercise points.,return gymnasts ;return points  of  #1 ;return sum of  #2 for each  #1 ;return floor exercise points  of  #1 ;return #3 sorted by #4 in descending order,"[""SELECT['gymnasts']"", ""PROJECT['points of #REF', '#1']"", ""GROUP['sum', '#2', '#1']"", ""PROJECT['floor exercise points of #REF', '#1']"", ""SORT['#3', '#4', 'in descending order']""]","['select', 'project', 'group', 'project', 'sort']",train
SPIDER_train_1741,"What are the total points of gymnasts, ordered by their floor exercise points descending?",return gymnasts ;return points  of  #1 ;return sum of  #2 for each  #1 ;return floor exercise points  of  #1 ;return #3 sorted by #4 descending,"[""SELECT['gymnasts']"", ""PROJECT['points of #REF', '#1']"", ""GROUP['sum', '#2', '#1']"", ""PROJECT['floor exercise points of #REF', '#1']"", ""SORT['#3', '#4', 'descending']""]","['select', 'project', 'group', 'project', 'sort']",train
SPIDER_train_1742,What is the average horizontal bar points for all gymnasts?,return gymnasts ;return horizontal bar points for all #1 ;return average #2,"[""SELECT['gymnasts']"", ""PROJECT['horizontal bar points for all #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_1743,Return the average horizontal bar points across all gymnasts.,return gymnasts ;return horizontal bar points of  #1 ;return average of  #2,"[""SELECT['gymnasts']"", ""PROJECT['horizontal bar points of #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_1744,What are the names of people in ascending alphabetical order?,return people ;return names of  #1 ;return #2 sorted by ascending alphabetical order,"[""SELECT['people']"", ""PROJECT['names of #REF', '#1']"", ""SORT['#2', '#2', 'ascending alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_1745,"Return the names of people, ordered alphabetically.",return people ;return names of  #1 ;return #2 ordered alphabetically,"[""SELECT['people']"", ""PROJECT['names of #REF', '#1']"", ""FILTER['#2', 'ordered alphabetically']""]","['select', 'project', 'filter']",train
SPIDER_train_1746,What are the names of gymnasts?,return gymnasts ;return names of  #1,"[""SELECT['gymnasts']"", ""PROJECT['names of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_1747,Return the names of the gymnasts.,return gymnasts ;return names of  #1,"[""SELECT['gymnasts']"", ""PROJECT['names of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_1748,"What are the names of gymnasts whose hometown is not ""Santo Domingo""?",return gymnasts ;return hometowns of  #1 ;return #1 where #2 is  not  Santo Domingo ;return names of  #3,"[""SELECT['gymnasts']"", ""PROJECT['hometowns of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not Santo Domingo']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1749,Return the names of gymnasts who did not grow up in Santo Domingo.,return gymnasts ;return #1 who  did not  grow up in Santo Domingo ;return names of  #2,"[""SELECT['gymnasts']"", ""FILTER['#1', 'who did not grow up in Santo Domingo']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_175,"What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?","return days ;return max gust speeds of #1 ;return #1 where #2 are top 3 highest ;return dates of #3 ;return mean  temperatures of #3 ;return mean  humidities of #3 ;return #4 ,  #5 ,   #6","[""SELECT['days']"", ""PROJECT['max gust speeds of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'are top 3 highest']"", ""PROJECT['dates of #REF', '#3']"", ""PROJECT['mean temperatures of #REF', '#3']"", ""PROJECT['mean humidities of #REF', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_1750,What is the age of the tallest person?,return people ;return the  height of  #1 ;return #1 where #2 is  the  tallest ;return the  age of  #3,"[""SELECT['people']"", ""PROJECT['the height of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the tallest']"", ""PROJECT['the age of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1751,Return the age of the person with the greatest height.,return people ;return heights of  #1 ;return #1 where  #2 is highest ;return age of  #3,"[""SELECT['people']"", ""PROJECT['heights of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['age of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_1752,List the names of the top 5 oldest people.,return people ;return oldness of #1 ;return the  top 5 #2 ;return #1 where #2 is  in #3 ;return the  names of #4,"[""SELECT['people']"", ""PROJECT['oldness of #REF', '#1']"", ""PROJECT['the top 5 #REF', '#2']"", ""COMPARATIVE['#1', '#2', 'is in #3']"", ""PROJECT['the names of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_1753,What are the names of the five oldest people?,return people ;return five oldest of  #1 ;return names of  #2,"[""SELECT['people']"", ""PROJECT['five oldest of #REF', '#1']"", ""PROJECT['names of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_1754,What is the total point count of the youngest gymnast?,return gymnasts ;return #1 that  is  youngest ;return points of #2 ;return sum of #3,"[""SELECT['gymnasts']"", ""FILTER['#1', 'that is youngest']"", ""PROJECT['points of #REF', '#2']"", ""AGGREGATE['sum', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_1755,Return the total points of the gymnast with the lowest age.,return gymnasts ;return ages of #1 ;return #1 where #2 is  the   lowest ;return points of #3 ;return sum of #4,"[""SELECT['gymnasts']"", ""PROJECT['ages of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the lowest']"", ""PROJECT['points of #REF', '#3']"", ""AGGREGATE['sum', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_1756,What is the average age of all gymnasts?,return gymnasts ;return age of  #1 ;return average of  #2,"[""SELECT['gymnasts']"", ""PROJECT['age of #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_1757,Return the average age across all gymnasts.,return gymnasts ;return ages of  #1 ;return average of  #2,"[""SELECT['gymnasts']"", ""PROJECT['ages of #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_1758,What are the distinct hometowns of gymnasts with total points more than 57.5?,return gymnasts ;return points of  #1 ;return sum of  #2 for each  #1 ;return #1 where #3 is  higher than 57.5 ;return distinct hometowns of  #4,"[""SELECT['gymnasts']"", ""PROJECT['points of #REF', '#1']"", ""GROUP['sum', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 57.5']"", ""PROJECT['distinct hometowns of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_1759,Give the different hometowns of gymnasts that have a total point score of above 57.5.,return gymnasts ;return scores of  #1 ;return sum of  #2 for each #1 ;return #1 where  #3 is  higher than 57.5 ;return different hometowns of  #4,"[""SELECT['gymnasts']"", ""PROJECT['scores of #REF', '#1']"", ""GROUP['sum', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 57.5']"", ""PROJECT['different hometowns of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_176,"What is the date, average temperature and mean humidity for the days with the 3 largest maximum gust speeds?","return maximum gust speeds ;return the  3 highest of #1 ;return dates of #2 ;return temperatures of #3 ;return the  average of #4 for each #3 ;return humidities of #3 ;return the  average of #6 for each #3 ;return #3 ,  #5 ,   #7","[""SELECT['maximum gust speeds']"", ""AGGREGATE['max', '#1']"", ""PROJECT['dates of #REF', '#2']"", ""PROJECT['temperatures of #REF', '#3']"", ""GROUP['avg', '#4', '#3']"", ""PROJECT['humidities of #REF', '#3']"", ""GROUP['avg', '#6', '#3']"", ""UNION['#3', '#5', '#7']""]","['select', 'aggregate', 'project', 'project', 'group', 'project', 'group', 'union']",train
SPIDER_train_1760,What are the hometowns of gymnasts and the corresponding number of gymnasts?,return gymnasts  ;return hometowns of  #1 ;return number of  #1 for each  #2,"[""SELECT['gymnasts']"", ""PROJECT['hometowns of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""UNION['#2', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_1761,How many gymnasts are from each hometown?,return hometowns ;return gymnasts of  #1 ;return number of #2 for each #1,"[""SELECT['hometowns']"", ""PROJECT['gymnasts of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_1762,What is the most common hometown of gymnasts?,return gymnasts ;return hometown of  #1 ;return number of  #1 for each  #2 ;return highest #3,"[""SELECT['gymnasts']"", ""PROJECT['hometown of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""AGGREGATE['max', '#3']""]","['select', 'project', 'group', 'aggregate']",train
SPIDER_train_1763,Return the hometown that is most common among gymnasts.,return hometowns ;return gymnasts from #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is highest,"[""SELECT['hometowns']"", ""PROJECT['gymnasts from #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_1764,What are the hometowns that are shared by at least two gymnasts?,return hometowns ;return gymnasts of #1 ;return number of #2 for each #1 ;return #1 where #3 is  at least two,"[""SELECT['hometowns']"", ""PROJECT['gymnasts of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_1765,Give the hometowns from which two or more gymnasts are from.,return hometowns ;return gymnasts from  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  two or  more,"[""SELECT['hometowns']"", ""PROJECT['gymnasts from #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is two or more']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_1766,List the names of gymnasts in ascending order by their heights.,return gymnasts ;return names of  #1 ;return heights of  #1 ;return #2 sorted by #3 in ascending order,"[""SELECT['gymnasts']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['heights of #REF', '#1']"", ""SORT['#2', '#3', 'in ascending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_1767,"What are the names of gymnasts, ordered by their heights ascending?",return gymnasts ;return heights of  #1 ;return names of  #1 ;return #3 ordered by #2 ascending,"[""SELECT['gymnasts']"", ""PROJECT['heights of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""SORT['#3', '#2', 'ascending']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_1768,List the distinct hometowns that are not associated with any gymnast.,return gymnasts ;return hometowns of  #1 ;return hometowns besides #2 ;return distinct #3,"[""SELECT['gymnasts']"", ""PROJECT['hometowns of #REF', '#1']"", ""SELECT['hometowns']"", ""DISCARD['#3', '#2']"", ""PROJECT['distinct #REF', '#4']""]","['select', 'project', 'select', 'discard', 'project']",train
SPIDER_train_1769,From which hometowns did no gymnasts come from?,return hometowns ;return #1 with  gymnasts ;return #1 besides #2,"[""SELECT['hometowns']"", ""FILTER['#1', 'with gymnasts']"", ""DISCARD['#1', '#2']""]","['select', 'filter', 'discard']",train
SPIDER_train_177,List the name and the number of stations for all the cities that have at least 15 stations.,"return cities ;return stations in #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is at least 15 ;return names of  #4 ;return stations in #4 ;return number of  #6 for each  #4 ;return #5 ,  #7","[""SELECT['cities']"", ""PROJECT['stations in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 15']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['stations in #REF', '#4']"", ""GROUP['count', '#6', '#4']"", ""UNION['#5', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'group', 'union']",train
SPIDER_train_1770,Show the hometowns shared by people older than 23 and younger than 20.,return hometowns ;return people in #1 ;return #2 older than  23 ;return #2 younger than  20 ;return #1 of both #3 and #4,"[""SELECT['hometowns']"", ""PROJECT['people in #REF', '#1']"", ""FILTER['#2', 'older than 23']"", ""FILTER['#2', 'younger than 20']"", ""INTERSECTION['#1', '#3', '#4']""]","['select', 'project', 'filter', 'filter', 'intersection']",train
SPIDER_train_1771,From which hometowns did both people older than 23 and younger than 20 come from?,return people ;return #1 older than 23 ;return #1 younger than 20 ;return #1 of  both #2 and  #3 ;return hometowns of  #4,"[""SELECT['people']"", ""FILTER['#1', 'older than 23']"", ""FILTER['#1', 'younger than 20']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['hometowns of #REF', '#4']""]","['select', 'filter', 'filter', 'intersection', 'project']",train
SPIDER_train_1772,How many distinct hometowns did these people have?,return these people ;return hometowns of  #1 ;return distinct #2 ;return number of  #3,"[""SELECT['these people']"", ""PROJECT['hometowns of #REF', '#1']"", ""PROJECT['distinct #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_1773,Count the number of different hometowns of these people.,return people ;return these #1 ;return hometowns of  #2 ;return number of #3,"[""SELECT['people']"", ""PROJECT['these #REF', '#1']"", ""PROJECT['hometowns of #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_1774,Show the ages of gymnasts in descending order of total points.,return gymnasts ;return ages of #1 ;return points of #1 ;return sum of #3 for each #1 ;return #2 sorted by #4 in descending order,"[""SELECT['gymnasts']"", ""PROJECT['ages of #REF', '#1']"", ""PROJECT['points of #REF', '#1']"", ""GROUP['sum', '#3', '#1']"", ""SORT['#2', '#4', 'in descending order']""]","['select', 'project', 'project', 'group', 'sort']",train
SPIDER_train_1775,"What are the ages of the gymnasts, ordered descending by their total points?",return gymnasts ;return points of  #1 ;return sum of  #2 for each  #1 ;return ages of  #1 ;return #4 sorted by #3 in descending order,"[""SELECT['gymnasts']"", ""PROJECT['points of #REF', '#1']"", ""GROUP['sum', '#2', '#1']"", ""PROJECT['ages of #REF', '#1']"", ""SORT['#4', '#3', 'in descending order']""]","['select', 'project', 'group', 'project', 'sort']",train
SPIDER_train_1776,Find the total savings balance of all accounts except the account with name ‘Brown’.,return accounts ;return names of  #1 ;return #1 where  #2 is  Brown ;return #1 besides #3 ;return savings balances of  #4 ;return sum of  #5,"[""SELECT['accounts']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Brown']"", ""DISCARD['#1', '#3']"", ""PROJECT['savings balances of #REF', '#4']"", ""AGGREGATE['sum', '#5']""]","['select', 'project', 'comparative', 'discard', 'project', 'aggregate']",train
SPIDER_train_1777,What is the total balance of savings accounts not belonging to someone with the name Brown?,return savings accounts ;return names #1 belong to ;return #1 where #2 is  not  Brown ;return balances of  #3 ;return sum of  #4,"[""SELECT['savings accounts']"", ""PROJECT['names #REF belong to', '#1']"", ""COMPARATIVE['#1', '#2', 'is not Brown']"", ""PROJECT['balances of #REF', '#3']"", ""AGGREGATE['sum', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_1778,How many accounts are there in total?,return accounts ;return number of #1,"[""SELECT['accounts']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_178,What is the name of every city that has at least 15 stations and how many stations does it have?,"return cities ;return stations in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least 15 ;return names of  #4 ;return stations in #4 ;return number of  #6 for each  #4 ;return #5 ,  #7","[""SELECT['cities']"", ""PROJECT['stations in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 15']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['stations in #REF', '#4']"", ""GROUP['count', '#6', '#4']"", ""UNION['#5', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'group', 'union']",train
SPIDER_train_1780,What is the total checking balance in all accounts?,return accounts ;return checking balances of  #1 ;return sum of  #2,"[""SELECT['accounts']"", ""PROJECT['checking balances of #REF', '#1']"", ""AGGREGATE['sum', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_1781,Find the total balance across checking accounts.,return checking accounts ;return balances of  #1 ;return sum of  #2,"[""SELECT['checking accounts']"", ""PROJECT['balances of #REF', '#1']"", ""AGGREGATE['sum', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_1782,Find the average checking balance.,return balance ;return Find the average #1,"[""SELECT['balance']"", ""AGGREGATE['avg', '#1']""]","['select', 'aggregate']",train
SPIDER_train_1783,What is the average balance in checking accounts?,return checking accounts ;return balances of  #1 ;return average of  #2,"[""SELECT['checking accounts']"", ""PROJECT['balances of #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_1784,How many accounts have a savings balance above the average savings balance?,return accounts ;return savings balances of  #1 ;return average of  #2 ;return #1 where  #2 is  higher than #3 ;return number of #4,"[""SELECT['accounts']"", ""PROJECT['savings balances of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'aggregate']",train
SPIDER_train_1785,Find the number of accounts with a savings balance that is higher than the average savings balance.,return accounts ;return savings balance of  #1 ;return #1 where  #2 is  higher than the average savings balance ;return number of #3,"[""SELECT['accounts']"", ""PROJECT['savings balance of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than the average savings balance']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_1786,Find the name and id of accounts whose checking balance is below the maximum checking balance.,"return accounts ;return checking balance of #1 ;return maximum checking balance ;return #1 where #2 is lower than #3 ;return name of #4 ;return id of #4 ;return #5 ,  #6","[""SELECT['accounts']"", ""PROJECT['checking balance of #REF', '#1']"", ""SELECT['maximum checking balance']"", ""COMPARATIVE['#1', '#2', 'is lower than #3']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['id of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'select', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1787,What are the customer id and name corresponding to accounts with a checking balance less than the largest checking balance?,"return accounts ;return checking balances of  #1 ;return #1 where #2 is  highest ;return #1 besides  #3 ;return customer ids of  #4 ;return name corresponding to #4 ;return #5 ,  #6","[""SELECT['accounts']"", ""PROJECT['checking balances of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""DISCARD['#1', '#3']"", ""PROJECT['customer ids of #REF', '#4']"", ""PROJECT['name corresponding to #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'superlative', 'discard', 'project', 'project', 'union']",train
SPIDER_train_1788,What is the checking balance of the account whose owner’s name contains the substring ‘ee’?,return accounts ;return owners of #1 ;return names of #2 ;return #1 where #3 contains substring ee ;return check balance of #4,"[""SELECT['accounts']"", ""PROJECT['owners of #REF', '#1']"", ""PROJECT['names of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'contains substring ee']"", ""PROJECT['check balance of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_1789,Find the balance of the checking account belonging to an owner whose name contains 'ee'.,return owners ;return names of  #1 ;return #1 where #2 contains 'ee ;return checking account of  #3 ;return balance of  #4,"[""SELECT['owners']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'contains ee']"", ""PROJECT['checking account of #REF', '#3']"", ""PROJECT['balance of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_179,Find the ids and names of stations from which at least 200 trips started.,"return stations ;return number of trips started from  #1 ;return #1 where  #2 is  at least 200 ;return ids of  #3 ;return names of  #3 ;return #4 ,   #5","[""SELECT['stations']"", ""PROJECT['trips started from #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 200']"", ""PROJECT['ids of #REF', '#4']"", ""PROJECT['names of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1790,Find the checking balance and saving balance in the Brown’s account.,"return accounts ;return #1 of  Brown ;return checking balance of  #2 ;return saving balance of  #2 ;return #3 ,   #4","[""SELECT['accounts']"", ""FILTER['#1', 'of Brown']"", ""PROJECT['checking balance of #REF', '#2']"", ""PROJECT['saving balance of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_1791,What are the checking and savings balances in accounts belonging to Brown?,"return accounts ;return #1 belonging to Brown ;return checking balances of  #2 ;return savings balances of  #2 ;return #3 ,  #4","[""SELECT['accounts']"", ""FILTER['#1', 'belonging to Brown']"", ""PROJECT['checking balances of #REF', '#2']"", ""PROJECT['savings balances of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_1792,"Find the names of accounts whose checking balance is above the average checking balance, but savings balance is below the average savings balance.",return accounts ;return checking  balance   of #1 ;return average of #2 ;return #1 where #2 is higher than #3 ;return savings  balance   of #1 ;return average of #5 ;return #1 where #5 is higher than #6 ;return #1 of both #4 and  #7 ;return names of #8,"[""SELECT['accounts']"", ""PROJECT['checking balance of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['savings balance of #REF', '#1']"", ""AGGREGATE['avg', '#5']"", ""COMPARATIVE['#1', '#5', 'is higher than #6']"", ""INTERSECTION['#1', '#4', '#7']"", ""PROJECT['names of #REF', '#8']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'aggregate', 'comparative', 'intersection', 'project']",train
SPIDER_train_1793,What are the names of accounts with checking balances greater than the average checking balance and savings balances below the average savings balance?,return accounts ;return checking balances of #1 ;return savings  balances of #1 ;return the  average of #2 ;return the  average of #3 ;return #1 where #2 is higher than #4 ;return #1 where #3 is lower than #5 ;return #1 in  both #6 and  #7 ;return names of #8,"[""SELECT['accounts']"", ""PROJECT['checking balances of #REF', '#1']"", ""PROJECT['savings balances of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""AGGREGATE['avg', '#3']"", ""COMPARATIVE['#1', '#2', 'is higher than #4']"", ""COMPARATIVE['#1', '#3', 'is lower than #5']"", ""INTERSECTION['#1', '#6', '#7']"", ""PROJECT['names of #REF', '#8']""]","['select', 'project', 'project', 'aggregate', 'aggregate', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_1794,Find the checking balance of the accounts whose savings balance is higher than the average savings balance.,return accounts ;return the savings balance of  #1 ;return the average of  #2 ;return #1 where  #2 is  higher than #3 ;return the checking balance of  #4,"[""SELECT['accounts']"", ""PROJECT['the savings balance of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['the checking balance of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_1795,What are the balances of checking accounts belonging to people with savings balances greater than the average savings balance?,return people ;return savings balances of #1 ;return the  average of #2 ;return #1 where #2 is  greater than  #3 ;return checking accounts belonging to  #4 ;return balances of #5,"[""SELECT['people']"", ""PROJECT['savings balances of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is greater than #3']"", ""PROJECT['checking accounts belonging to #REF', '#4']"", ""PROJECT['balances of #REF', '#5']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'project']",train
SPIDER_train_1796,List all customers’ names in the alphabetical order.,return customers ;return names of  #1 ;return #2 sorted by alphabetical order,"[""SELECT['customers']"", ""PROJECT['names of #REF', '#1']"", ""SORT['#2', '#2', 'alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_1797,What are the names of all the customers in alphabetical order?,return customers ;return names of  #1 ;return #2 sorted by alphabetical order,"[""SELECT['customers']"", ""PROJECT['names of #REF', '#1']"", ""SORT['#2', '#2', 'alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_1798,Find the name of account that has the lowest total checking and saving balance.,return accounts ;return checking balances of  #1 ;return saving balances of  #1 ;return sum of  #2 and  #3 for each  #1 ;return #1 where #4 is  lowest ;return name of  #5,"[""SELECT['accounts']"", ""PROJECT['checking balances of #REF', '#1']"", ""PROJECT['saving balances of #REF', '#1']"", ""GROUP['sum', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#4']"", ""PROJECT['name of #REF', '#5']""]","['select', 'project', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_1799,What is the name corresponding to the accoung with the lowest sum of checking and savings balances?,return accoungs ;return checking balances of  #1 ;return saving balances of  #1 ;return sum of  #2 and  #3 ;return #1 where #4 is  lowest ;return name corresponding to #5,"[""SELECT['accoungs']"", ""PROJECT['checking balances of #REF', '#1']"", ""PROJECT['saving balances of #REF', '#1']"", ""ARITHMETIC['sum', '#2', '#3']"", ""SUPERLATIVE['min', '#1', '#4']"", ""PROJECT['name corresponding to #REF', '#5']""]","['select', 'project', 'project', 'arithmetic', 'superlative', 'project']",train
SPIDER_train_18,List the total number of horses on farms in ascending order.,return farms ;return horses on  #1 ;return number of  #2 ;return #3 sorted by ascending order,"[""SELECT['farms']"", ""PROJECT['horses on #REF', '#1']"", ""AGGREGATE['count', '#2']"", ""SORT['#3', '#3', 'ascending order']""]","['select', 'project', 'aggregate', 'sort']",train
SPIDER_train_180,What are the ids and names of all start stations that were the beginning of at least 200 trips?,"return trips ;return start stations of #1 ;return number of  #1 for each #2 ;return #2 where #3 is at least 200 ;return names of #4 ;return ids of #4 ;return #6 ,  #5","[""SELECT['trips']"", ""PROJECT['start stations of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""COMPARATIVE['#2', '#3', 'is at least 200']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['ids of #REF', '#4']"", ""UNION['#6', '#5']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1800,Find the names and total checking and savings balances of accounts whose savings balance is higher than the average savings balance.,"return accounts ;return savings balances of #1 ;return average of #2 for each #1 ;return #1 where #2 is  higher than #3 ;return names of #4 ;return checking balance of #4 ;return savings balance of #4 ;return sum of #6 and #7 ;return #5 ,  #8","[""SELECT['accounts']"", ""PROJECT['savings balances of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['checking balance of #REF', '#4']"", ""PROJECT['savings balance of #REF', '#4']"", ""ARITHMETIC['sum', '#6', '#7']"", ""UNION['#5', '#8']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'project', 'arithmetic', 'union']",train
SPIDER_train_1801,What are the names and sum of checking and savings balances for accounts with savings balances higher than the average savings balance?,"return accounts ;return savings balances of #1 ;return average of #2 ;return #1 where #2 is  higher than #3 ;return names of #4 ;return checking balances  of #4 ;return savings balances of #4 ;return sum of #6 and #7 for each #4 ;return #5 ,  #8","[""SELECT['accounts']"", ""PROJECT['savings balances of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['checking balances of #REF', '#4']"", ""PROJECT['savings balances of #REF', '#4']"", ""GROUP['sum', '#6', '#4']"", ""UNION['#5', '#8']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_1802,Find the name and checking balance of the account with the lowest savings balance.,"return accounts ;return savings balances of  #1 ;return #1 where  #2 is  lowest ;return name of  #3 ;return checking balance of  #3 ;return #4 ,   #5","[""SELECT['accounts']"", ""PROJECT['savings balances of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""PROJECT['name of #REF', '#3']"", ""PROJECT['checking balance of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_1803,What are the names and balances of checking accounts belonging to the customer with the lowest savings balance?,"return customers ;return savings balances of  #1 ;return #1 where #2 is  lowest ;return names of  #3 ;return checking accounts of  #3 ;return balances of  #5 ;return #4 ,  #6","[""SELECT['customers']"", ""PROJECT['savings balances of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['checking accounts of #REF', '#3']"", ""PROJECT['balances of #REF', '#5']"", ""UNION['#4', '#6']""]","['select', 'project', 'superlative', 'project', 'project', 'project', 'union']",train
SPIDER_train_1804,Find the number of checking accounts for each account name.,return account names ;return checking accounts of  #1 ;return number of #2 for each #1,"[""SELECT['account names']"", ""PROJECT['checking accounts of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_1805,"What are the names of customers with accounts, and how many checking accounts do each of them have?","return customers ;return #1 with  accounts  ;return the  names of #2 ;return checking accounts  of #2 ;return the  number of  #4 for each #2 ;return #3 ,  #5","[""SELECT['customers']"", ""FILTER['#1', 'with accounts']"", ""PROJECT['the names of #REF', '#2']"", ""PROJECT['checking accounts of #REF', '#2']"", ""GROUP['count', '#4', '#2']"", ""UNION['#3', '#5']""]","['select', 'filter', 'project', 'project', 'group', 'union']",train
SPIDER_train_1806,Find the total saving balance for each account name.,return account names ;return savings balances of #1 ;return sum of #2 for each #1,"[""SELECT['account names']"", ""PROJECT['savings balances of #REF', '#1']"", ""GROUP['sum', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_1807,"What are the names of customers with accounts, and what are the total savings balances for each?","return customers ;return #1 with accounts ;return names of  #2 ;return savings balances of  #2 ;return sum of  #4 for each  #2 ;return #3 ,  #5","[""SELECT['customers']"", ""FILTER['#1', 'with accounts']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['savings balances of #REF', '#2']"", ""GROUP['sum', '#4', '#2']"", ""UNION['#3', '#5']""]","['select', 'filter', 'project', 'project', 'group', 'union']",train
SPIDER_train_1808,Find the name of accounts whose checking balance is below the average checking balance.,return accounts ;return checking  balances of #1 ;return average of #2 ;return #1 where #2 is higher than #3 ;return names of #4,"[""SELECT['accounts']"", ""PROJECT['checking balances of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_1809,What are the names of customers with checking balances lower than the average checking balance?,return customers ;return checking balances of  #1 ;return average of  #2 ;return #1 where #2 is  higher than #3 ;return names of  #4,"[""SELECT['customers']"", ""PROJECT['checking balances of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_181,Find the zip code in which the average mean visibility is lower than 10.,return zip codes ;return average mean visibilities of  #1 ;return #1 where  #2 is  lower than 10,"[""SELECT['zip codes']"", ""PROJECT['mean visibilities of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is lower than 10']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_1810,Find the saving balance of the account with the highest checking balance.,return accounts ;return checking balances of #1 ;return #1 where #2 is  the   highest ;return the   saving balance of #3,"[""SELECT['accounts']"", ""PROJECT['checking balances of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the highest']"", ""PROJECT['the saving balance of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1811,What is the savings balance of the account belonging to the customer with the highest checking balance?,return customers ;return checking balances of #1 ;return #1 where #2 is  the   highest ;return the   account of #3 ;return the   savings balance of #4,"[""SELECT['customers']"", ""PROJECT['checking balances of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the highest']"", ""PROJECT['the account of #REF', '#3']"", ""PROJECT['the savings balance of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_1812,Find the total checking and saving balance of all accounts sorted by the total balance in ascending order.,return accounts ;return checking balances of #1 ;return saving balances of #1 ;return the  sum of #2 and  #3 for each #1 ;return #4 sorted by ascending order,"[""SELECT['accounts']"", ""PROJECT['checking balances of #REF', '#1']"", ""PROJECT['saving balances of #REF', '#1']"", ""GROUP['sum', '#2', '#1']"", ""SORT['#4', '#4', 'ascending order']""]","['select', 'project', 'project', 'group', 'sort']",train
SPIDER_train_1813,"What is the sum of checking and savings balances for all customers, ordered by the total balance?",return customers ;return checking balances of #1 ;return savings balances of #1 ;return sum of #2 and #3 ;return #4 sorted by #4,"[""SELECT['customers']"", ""PROJECT['checking balances of #REF', '#1']"", ""PROJECT['savings balances of #REF', '#1']"", ""ARITHMETIC['sum', '#2', '#3']"", ""SORT['#4', '#4']""]","['select', 'project', 'project', 'arithmetic', 'sort']",train
SPIDER_train_1814,Find the name and checking balance of the account with the lowest saving balance.,"return accounts ;return saving balances of #1 ;return #1 where #2 is lowest ;return name of #3 ;return checking balance of #3 ;return #4 ,  #5","[""SELECT['accounts']"", ""PROJECT['saving balances of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""PROJECT['name of #REF', '#3']"", ""PROJECT['checking balance of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_1815,What is the name and checking balance of the account which has the lowest savings balance?,"return accounts ;return savings balances of #1 ;return #1 where #2 is  lowest ;return name of #3 ;return check balance of #3 ;return #4 , #5","[""SELECT['accounts']"", ""PROJECT['savings balances of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""PROJECT['name of #REF', '#3']"", ""PROJECT['check balance of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_1816,"Find the name, checking balance and saving balance of all accounts in the bank.","return accounts ;return names of  #1 ;return checking balances of  #1 ;return saving balances of  #1 ;return #2 ,  #3 ,   #4","[""SELECT['accounts']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['checking balances of #REF', '#1']"", ""PROJECT['saving balances of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_1817,"What are the names, checking balances, and savings balances for all customers?","return customers ;return names of  #1 ;return checking balances  of  #1 ;return savings balances  of  #1 ;return #2 ,  #3 ,   #4","[""SELECT['customers']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['checking balances of #REF', '#1']"", ""PROJECT['savings balances of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_1818,"Find the name, checking balance and savings balance of all accounts in the bank sorted by their total checking and savings balance in descending order.","return bank accounts ;return names of  #1 ;return checking  balance of  #1 ;return saving balance of  #1 ;return #2, #3, #4 ;return sum of  #3 and #4 ;return #5 sorted by #6 in descending order","[""SELECT['bank accounts']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['checking balance of #REF', '#1']"", ""PROJECT['saving balance of #REF', '#1']"", ""UNION['#2', '#3', '#4']"", ""ARITHMETIC['sum', '#3', '#4']"", ""SORT['#5', '#6', 'in descending order']""]","['select', 'project', 'project', 'project', 'union', 'arithmetic', 'sort']",train
SPIDER_train_1819,"What are the names, checking balances, and savings balances of customers, ordered by the total of checking and savings balances descending?","return customers ;return names of #1 ;return checking balances of #1 ;return savings  balances of #1 ;return sum of #3 for each #1 ;return sum of #4 for each #1 ;return #2 ,  #3 ,   #4 ; return #5, #6 ; sorted #7 by #8 descending","[""SELECT['customers']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['checking balances of #REF', '#1']"", ""PROJECT['savings balances of #REF', '#1']"", ""GROUP['sum', '#3', '#1']"", ""GROUP['sum', '#4', '#1']"", ""UNION['#2', '#3', '#4']"", ""UNION['#5', '#6']"", ""SORT['#7', '#8', 'descending']""]","['select', 'project', 'project', 'project', 'group', 'group', 'union', 'union', 'sort']",train
SPIDER_train_182,"For each zip code, select all those that have an average mean visiblity below 10.",return zip codes ;return mean visiblities of #1 ;return the  average of #2 for each #1 ;return #1 where #3 is  below 10,"[""SELECT['zip codes']"", ""PROJECT['mean visiblities of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is below 10']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_1820,Find the name of accounts whose checking balance is higher than corresponding saving balance.,return accounts ;return checking balance of  #1 ;return saving balance of  #1 ;return #1 where  #2 is  higher than #3 ;return names of  #4,"[""SELECT['accounts']"", ""PROJECT['checking balance of #REF', '#1']"", ""PROJECT['saving balance of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_1821,What are the names of customers with a higher checking balance than savings balance?,return customers ;return checking balances of  #1 ;return savings balances of  #1 ;return #1 where #2 is  higher than #3 ;return names of  #4,"[""SELECT['customers']"", ""PROJECT['checking balances of #REF', '#1']"", ""PROJECT['savings balances of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_1822,Find the name and total checking and savings balance of the accounts whose savings balance is lower than corresponding checking balance.,"return accounts ;return checking balances of #1 ;return savings  balances of #1 ;return #1 where #3 is lower than #2 ;return names of #4 ;return checking  balances of #4 ;return savings balances of #4 ;return sum of #6 and  #7 ;return #5 ,  #8","[""SELECT['accounts']"", ""PROJECT['checking balances of #REF', '#1']"", ""PROJECT['savings balances of #REF', '#1']"", ""COMPARATIVE['#1', '#3', 'is lower than #2']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['checking balances of #REF', '#4']"", ""PROJECT['savings balances of #REF', '#4']"", ""ARITHMETIC['sum', '#6', '#7']"", ""UNION['#5', '#8']""]","['select', 'project', 'project', 'comparative', 'project', 'project', 'project', 'arithmetic', 'union']",train
SPIDER_train_1823,"What are the names of customers who have a savings balance lower than their checking balance, and what is the total of their checking and savings balances?","return customers ;return savings balances of  #1 ;return checking balances of  #1 ;return #1 where #2 is  lower than #3 ;return checking balances of  #4 ;return savings balances of  #4 ;return sum of  #5 and  #6 for each  #4 ;return names of  #4 ;return #8 ,  #7","[""SELECT['customers']"", ""PROJECT['savings balances of #REF', '#1']"", ""PROJECT['checking balances of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is lower than #3']"", ""PROJECT['checking balances of #REF', '#4']"", ""PROJECT['savings balances of #REF', '#4']"", ""GROUP['sum', '#5', '#4']"", ""PROJECT['names of #REF', '#4']"", ""UNION['#8', '#7']""]","['select', 'project', 'project', 'comparative', 'project', 'project', 'group', 'project', 'union']",train
SPIDER_train_1824,Find the name and savings balance of the top 3 accounts with the highest saving balance sorted by savings balance in descending order.,"return accounts ;return savings  balances of #1 ;return the  3 highest of #2 ;return #1 where #2 is equal to any of #3 ;return names of #4 ;return savings  balances of #4 ;return #5 ,  #6 ;return #7 sorted by #6 in  descending order","[""SELECT['accounts']"", ""PROJECT['savings balances of #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""COMPARATIVE['#1', '#2', 'is equal to any of #3']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['savings balances of #REF', '#4']"", ""UNION['#5', '#6']"", ""SORT['#7', '#6', 'in descending order']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'project', 'union', 'sort']",train
SPIDER_train_1825,What are names and savings balances of the three accounts with the highest savings balances?,"return accounts ;return savings  balances of #1 ;return the  three highest of #2 ;return #1 where #2 is equal to any of #3 ;return names of #4 ;return savings  balances of #4 ;return #5 ,  #6","[""SELECT['accounts']"", ""PROJECT['savings balances of #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""COMPARATIVE['#1', '#2', 'is equal to any of #3']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['savings balances of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1826,How many main stream browsers whose market share is at least 5 exist?,return browsers ;return #1 that  are  main stream ;return market shares of  #2 ;return #2 where #3 is  at least 5 ;return number of  #4,"[""SELECT['browsers']"", ""FILTER['#1', 'that are main stream']"", ""PROJECT['market shares of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is at least 5']"", ""AGGREGATE['count', '#4']""]","['select', 'filter', 'project', 'comparative', 'aggregate']",train
SPIDER_train_1827,List the name of browsers in descending order by market share.,return browsers ;return names of  #1 ;return market share of  #1 ;return #2 sorted by #3 in descending order,"[""SELECT['browsers']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['market share of #REF', '#1']"", ""SORT['#2', '#3', 'in descending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_1828,"List the ids, names and market shares of all browsers.","return browsers ;return ids of  #1 ;return names of  #1 ;return market shares of  #1 ;return #2 ,  #3 , #4","[""SELECT['browsers']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['market shares of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_1829,"What is the maximum, minimum and average market share of the listed browsers?","return browsers ;return market shares of  #1 ;return maximum of  #2 ;return minimum of  #2 ;return average of  #2 ;return #3 ,  #4 ,   #5","[""SELECT['browsers']"", ""PROJECT['market shares of #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""AGGREGATE['min', '#2']"", ""AGGREGATE['avg', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'project', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_183,List all the cities in a decreasing order of each city's stations' highest latitude.,return cities ;return stations of #1 ;return latitudes of #2 ;return the  highest of #3 for each #1 ;return #1 sorted by #4 in decreasing order,"[""SELECT['cities']"", ""PROJECT['stations of #REF', '#1']"", ""PROJECT['latitudes of #REF', '#2']"", ""GROUP['max', '#3', '#1']"", ""SORT['#1', '#4', 'in decreasing order']""]","['select', 'project', 'project', 'group', 'sort']",train
SPIDER_train_1830,What is the id and market share of the browser Safari?,"return Safari ;return id of #1 ;return market share of #1 ;return #2 ,  #3","[""SELECT['Safari']"", ""PROJECT['id of #REF', '#1']"", ""PROJECT['market share of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_1831,What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?,"return web client accelerators ;return connection types #1 work with ;return #1 where #2 is  'Broadband ;return #1 besides  #3 ;return names of  #4 ;return os of  #4 ;return #5 ,  #6","[""SELECT['web client accelerators']"", ""PROJECT['connection types #REF work with', '#1']"", ""COMPARATIVE['#1', '#2', 'is Broadband']"", ""DISCARD['#1', '#3']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['os of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'discard', 'project', 'project', 'union']",train
SPIDER_train_1832,What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?,return cars ;return cylinders ;return number of  #2 for each  #1 ;return #1 where #3 is  4 ;return miles per gallon of  #4 ;return average of  #5,"[""SELECT['cars']"", ""SELECT['cylinders']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is 4']"", ""PROJECT['miles per gallon of #REF', '#4']"", ""AGGREGATE['avg', '#5']""]","['select', 'select', 'group', 'comparative', 'project', 'aggregate']",train
SPIDER_train_1833,What are the ids and names of the web accelerators that are compatible with two or more browsers?,"return web accelerators ;return compatible browsers of #1 ;return number of  #2 for each #1 ;return #1 where #3 is at least two ;return ids of #4 ;return names of #4 ;return #5 ,  #6","[""SELECT['web accelerators']"", ""PROJECT['compatible browsers of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""PROJECT['ids of #REF', '#4']"", ""PROJECT['names of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1834,What is the id and name of the browser that is compatible with the most web accelerators?,"return browsers ;return web accelerators compatible with #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return id of  #4 ;return name of  #4 ;return #5 ,  #6","[""SELECT['browsers']"", ""PROJECT['web accelerators compatible with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['id of #REF', '#4']"", ""PROJECT['name of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_1836,How many different kinds of clients are supported by the web clients accelerators?,return web clients  ;return accelerators of #1 ;return clients  that  are supported by #2 ;return kinds of #3 ;return number of  different #4,"[""SELECT['web clients']"", ""PROJECT['accelerators of #REF', '#1']"", ""PROJECT['clients that are supported by #REF', '#2']"", ""PROJECT['kinds of #REF', '#3']"", ""PROJECT['different #REF', '#4']"", ""GROUP['count', '#5', '#4']"", ""UNION['#4', '#6']""]","['select', 'project', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_1837,How many accelerators are not compatible with the browsers listed ?,return browsers ;return accelerators that  are  compatible with  #1 ;return accelerators besides #2 ;return number of  #3,"[""SELECT['browsers']"", ""PROJECT['accelerators that are compatible with #REF', '#1']"", ""SELECT['accelerators']"", ""DISCARD['#3', '#2']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'select', 'discard', 'aggregate']",train
SPIDER_train_1838,What distinct accelerator names are compatible with the browswers that have market share higher than 15?,return browswers ;return market shares of #1 ;return #1 where #2 is  higher than 15 ;return accelerators compatible with  #3 ;return distinct names of #4,"[""SELECT['browswers']"", ""PROJECT['market shares of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 15']"", ""PROJECT['accelerators compatible with #REF', '#3']"", ""PROJECT['distinct names of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_1839,List the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'.,return browsers ;return #1 that  are compatible with  'CACHEbox ;return #1 that  are compatible with  'Fasterfox ;return #1 in both #2 and #3 ;return the  names of #4,"[""SELECT['browsers']"", ""FILTER['#1', 'that are compatible with CACHEbox']"", ""FILTER['#1', 'that are compatible with Fasterfox']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['the names of #REF', '#4']""]","['select', 'filter', 'filter', 'intersection', 'project']",train
SPIDER_train_184,"For each city, list their names in decreasing order by their highest station latitude.",return cities ;return names of #1 ;return stations of #1 ;return latitudes of #3 ;return the  highest #4 for each #1 ;return #2 sorted by #5 in decreasing order,"[""SELECT['cities']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['stations of #REF', '#1']"", ""PROJECT['latitudes of #REF', '#3']"", ""GROUP['max', '#4', '#1']"", ""SORT['#2', '#5', 'in decreasing order']""]","['select', 'project', 'project', 'project', 'group', 'sort']",train
SPIDER_train_1840,Show the accelerator names and supporting operating systems that are not compatible with the browser named 'Opera'.,"return accelerators ;return compatible browsers of #1 ;return #1 where #2 is 'Opera ;return #1 besides  #3 ;return names of #4 ;return supporting operating systems of #4 ;return #5 ,  #6","[""SELECT['accelerators']"", ""PROJECT['compatible browsers of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Opera']"", ""DISCARD['#1', '#3']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['supporting operating systems of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'discard', 'project', 'project', 'union']",train
SPIDER_train_1841,"Which accelerator name contains substring ""Opera""?",return accelerators ;return names of #1 ;return #1 where #2 has substring Opera ;return name of #3,"[""SELECT['accelerators']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'has substring Opera']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1842,Find the number of web accelerators used for each Operating system.,return web accelerators ;return Operating systems ;return number of  #1 used for each #2,"[""SELECT['web accelerators']"", ""SELECT['Operating systems']"", ""GROUP['count', '#1', '#2']"", ""UNION['#2', '#3']""]","['select', 'select', 'group', 'union']",train
SPIDER_train_1843,give me names of all compatible browsers and accelerators in the descending order of compatible year,"return compatible browsers ;return accelerators ;return #1 ,  #2 ;return compatible year of #3 ;return names of  #3; return #5 sorted by #4 in descending order","[""SELECT['compatible browsers']"", ""SELECT['accelerators']"", ""UNION['#1', '#2']"", ""PROJECT['compatible year of #REF', '#3']"", ""PROJECT['names of #REF', '#3']"", ""SORT['#5', '#4', 'in descending order']""]","['select', 'select', 'union', 'project', 'project', 'sort']",train
SPIDER_train_1844,How many wrestlers are there?,return wrestlers ;return number of  #1,"[""SELECT['wrestlers']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_1845,Count the number of wrestlers.,return wrestlers ;return the number of #1,"[""SELECT['wrestlers']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_1846,List the names of wrestlers in descending order of days held.,return wrestlers ;return names of  #1 ;return days held of  #1 ;return #2 sorted by #3 in descending order,"[""SELECT['wrestlers']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['days held of #REF', '#1']"", ""SORT['#2', '#3', 'in descending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_1847,"What are the names of the wrestlers, ordered descending by days held?",return wrestlers ;return names of #1 ;return days held by #1 ;return number of  #3 for each #1 ;return #2 sorted by #4 in descending order,"[""SELECT['wrestlers']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['days held by #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""SORT['#2', '#4', 'in descending order']""]","['select', 'project', 'project', 'group', 'sort']",train
SPIDER_train_1848,What is the name of the wrestler with the fewest days held?,return wrestlers ;return days that  #1 held ;return number of  #2 for each  #1 ;return #1 where #3 is  fewest ;return name of  #4,"[""SELECT['wrestlers']"", ""PROJECT['days that #REF held', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is fewest']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_1849,Return the name of the wrestler who had the lowest number of days held.,return wrestlers ;return days held of #1 ;return number of  #2 for each #1 ;return #1 where #3 is lowest ;return name of #4,"[""SELECT['wrestlers']"", ""PROJECT['days held of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_185,What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.,"return cloud  cover  rates ;return the  5 highest of #1 ;return dates of #2 ;return #3 ,  #2","[""SELECT['cloud cover rates']"", ""AGGREGATE['max', '#1']"", ""PROJECT['dates of #REF', '#2']"", ""UNION['#3', '#2']""]","['select', 'aggregate', 'project', 'union']",train
SPIDER_train_1850,"What are the distinct reigns of wrestlers whose location is not ""Tokyo,Japan"" ?",return wrestlers ;return locations of  #1 ;return #1 where #2 is  not  Tokyo Japan ;return distinct reigns of  #3,"[""SELECT['wrestlers']"", ""PROJECT['locations of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not Tokyo Japan']"", ""PROJECT['distinct reigns of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1851,"Give the different reigns of wrestlers who are not located in Tokyo, Japan.",return wrestlers ;return #1 located in Tokyo Japan ;return #1 besides #2 ;return reigns of  #3 ;return different #4,"[""SELECT['wrestlers']"", ""FILTER['#1', 'located in Tokyo Japan']"", ""DISCARD['#1', '#2']"", ""PROJECT['reigns of #REF', '#3']"", ""PROJECT['different #REF', '#4']""]","['select', 'filter', 'discard', 'project', 'project']",train
SPIDER_train_1852,What are the names and location of the wrestlers?,"return wrestlers ;return names of  #1 ;return locations of  #1 ;return #2 ,  #3","[""SELECT['wrestlers']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['locations of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_1853,Give the names and locations of all wrestlers.,"return wrestlers ;return the  names of  #1 ;return the  locations of  #1 ;return #2 ,  #3","[""SELECT['wrestlers']"", ""PROJECT['the names of #REF', '#1']"", ""PROJECT['the locations of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_1854,"What are the elimination moves of wrestlers whose team is ""Team Orton""?",return wrestlers ;return teams of #1 ;return #1 where #2 is  Team Orton ;return elimination moves of #3,"[""SELECT['wrestlers']"", ""PROJECT['teams of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Team Orton']"", ""PROJECT['elimination moves of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1855,Return the elimination movies of wrestlers on Team Orton.,return wrestlers ;return elimination movies of  #1 ;return #2 where #1 is  on  Team Orton,"[""SELECT['wrestlers']"", ""PROJECT['elimination movies of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is on Team Orton']""]","['select', 'project', 'comparative']",train
SPIDER_train_1856,What are the names of wrestlers and the elimination moves?,"return wrestlers ;return names of  #1 ;return elimination moves of  #1 ;return #2 ,  #3","[""SELECT['wrestlers']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['elimination moves of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_1857,Give the names of wrestlers and their elimination moves.,"return wrestlers ;return names of  #1 ;return elimination moves of  #1 ;return #2 ,  #3","[""SELECT['wrestlers']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['elimination moves of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_1859,"What are the names of wrestlers and their teams in elimination, ordered descending by days held?","return wrestlers ;return names of #1 ;return teams of #1 ;return #3 in  elimination ;return days held of #1 ;return #2 ,  #4 ; return #6 sorted by #5 descending","[""SELECT['wrestlers']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['teams of #REF', '#1']"", ""FILTER['#3', 'in elimination']"", ""PROJECT['days held of #REF', '#1']"", ""UNION['#2', '#4']"", ""SORT['#6', '#5', 'descending']""]","['select', 'project', 'project', 'filter', 'project', 'union', 'sort']",train
SPIDER_train_186,What are the dates that have the 5 highest cloud cover rates and what are the rates?,"return dates ;return cloud cover rates of #1 ;return #1 where #2 are the   5 highest ;return cloud cover rates of #3 ;return #3 ,  #4","[""SELECT['dates']"", ""PROJECT['cloud cover rates of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'are the 5 highest']"", ""PROJECT['cloud cover rates of #REF', '#3']"", ""UNION['#3', '#4']""]","['select', 'project', 'comparative', 'project', 'union']",train
SPIDER_train_1860,List the time of elimination of the wrestlers with largest days held.,return wrestlers ;return the  days that  #1 held ;return the  number of  #2 for each #1 ;return #1 where #3 is  the  largest ;return the  times of elimination of  #4,"[""SELECT['wrestlers']"", ""PROJECT['the days that #REF held', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the largest']"", ""PROJECT['the times of elimination of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_1861,What is the time of elimination for the wrestler with the most days held?,return wrestlers ;return days held of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest ;return time of elimination of  #4,"[""SELECT['wrestlers']"", ""PROJECT['days held of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['time of elimination of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_1862,Show times of elimination of wrestlers with days held more than 50.,return wrestlers ;return days held of  #1 ;return #1 where #2 is  higher than 50 ;return times of  elimination of #3,"[""SELECT['wrestlers']"", ""PROJECT['days held of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 50']"", ""PROJECT['times of elimination of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1863,What are the times of elimination for wrestlers with over 50 days held?,return wrestlers ;return days held of  #1 ;return #1 where #2 is  higher than 50 ;return times of  elimination of #3,"[""SELECT['wrestlers']"", ""PROJECT['days held of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 50']"", ""PROJECT['times of elimination of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1864,Show different teams in eliminations and the number of eliminations from each team.,return teams ;return eliminations of #1 ;return number of #2 for each #1,"[""SELECT['teams']"", ""PROJECT['eliminations of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_1865,How many eliminations did each team have?,return teams ;return eliminations of  #1 ;return number of #2 for each #1,"[""SELECT['teams']"", ""PROJECT['eliminations of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_1866,Show teams that have suffered more than three eliminations.,return teams ;return eliminations of #1 ;return number of  #2 for each #1 ;return #1 where #3 is higher than three,"[""SELECT['teams']"", ""PROJECT['eliminations of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than three']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_1867,Which teams had more than 3 eliminations?,return teams ;return eliminations of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than 3,"[""SELECT['teams']"", ""PROJECT['eliminations of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 3']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_1868,Show the reign and days held of wrestlers.,"return wrestlers ;return reign of #1 ;return days held of #1 ;return #2 ,  #3","[""SELECT['wrestlers']"", ""PROJECT['reign of #REF', '#1']"", ""PROJECT['days held of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_1869,What are the reigns and days held of all wrestlers?,"return wrestlers ;return reigns of  #1 ;return days held of  #1 ;return #2 ,  #3","[""SELECT['wrestlers']"", ""PROJECT['reigns of #REF', '#1']"", ""PROJECT['days held of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_187,What are the ids and durations of the trips with the top 3 durations?,"return trips ;return durations of #1 ;return the  3 highest of #2 ;return #1 where #2 is equal to any of #3 ;return ids of #4 ;return #5 ,  #3","[""SELECT['trips']"", ""PROJECT['durations of #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""COMPARATIVE['#1', '#2', 'is equal to any of #3']"", ""PROJECT['ids of #REF', '#4']"", ""UNION['#5', '#3']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'union']",train
SPIDER_train_1870,What are the names of wrestlers days held less than 100?,return wrestlers ;return days #1 held ;return number of  #2 for each  #1 ;return #1 where #3 is  less than 100 ;return names of  #4,"[""SELECT['wrestlers']"", ""PROJECT['days #REF held', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is less than 100']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_1871,Return the names of wrestlers with fewer than 100 days held.,return wrestlers ;return days held of  #1 ;return #1 where #2 is  lower than 100 ;return names of  #3,"[""SELECT['wrestlers']"", ""PROJECT['days held of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is lower than 100']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1872,Please show the most common reigns of wrestlers.,return reigns ;return wrestlers with  #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['reigns']"", ""PROJECT['wrestlers with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_1873,Which reign is the most common among wrestlers?,return reigns ;return wrestlers with  #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['reigns']"", ""PROJECT['wrestlers with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_1874,List the locations that are shared by more than two wrestlers.,return locations ;return wrestlers in #1 ;return number of  #2 for each #1 ;return #1 where #3 is  higher than two,"[""SELECT['locations']"", ""PROJECT['wrestlers in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than two']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_1875,Which locations are shared by more than two wrestlers?,return locations ;return wrestlers of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 more than two,"[""SELECT['locations']"", ""PROJECT['wrestlers of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'more than two']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_1876,List the names of wrestlers that have not been eliminated.,return wrestlers ;return #1 who have not been eliminated ;return names of #2,"[""SELECT['wrestlers']"", ""FILTER['#1', 'who have not been eliminated']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_1877,What are the names of wrestlers who have never been eliminated?,return wrestlers ;return #1 who  have  been eliminated ;return #1 besides  #2 ;return names of  #3,"[""SELECT['wrestlers']"", ""FILTER['#1', 'who have been eliminated']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_1878,"Show the teams that have both wrestlers eliminated by ""Orton"" and wrestlers eliminated by ""Benjamin"".",return wrestlers  ;return #1 eliminated by Orton ;return #1 eliminated by Benjamin ;return teams of #1 ;return #4 of both #2 and  #3,"[""SELECT['wrestlers']"", ""FILTER['#1', 'eliminated by Orton']"", ""FILTER['#1', 'eliminated by Benjamin']"", ""PROJECT['teams of #REF', '#1']"", ""INTERSECTION['#4', '#2', '#3']""]","['select', 'filter', 'filter', 'project', 'intersection']",train
SPIDER_train_1879,What are the teams that have both wrestlers eliminated by Orton and wrestlers eliminated by Benjamin?,return teams ;return wrestlers  of #1 ;return #2 eliminated by  Orton ;return #2 eliminated by  Benjamin ;return #1 of both #3 and #4,"[""SELECT['teams']"", ""PROJECT['wrestlers of #REF', '#1']"", ""FILTER['#2', 'eliminated by Orton']"", ""FILTER['#2', 'eliminated by Benjamin']"", ""INTERSECTION['#1', '#3', '#4']""]","['select', 'project', 'filter', 'filter', 'intersection']",train
SPIDER_train_188,What are the ids of the trips that lasted the longest and how long did they last?,"return trips ;return how long #1 lasted ;return #1 where #2 is  the   longest ;return ids of #3 ;return how long #3 lasted ;return #4 ,  #5","[""SELECT['trips']"", ""PROJECT['how long #REF lasted', '#1']"", ""COMPARATIVE['#1', '#2', 'is the longest']"", ""PROJECT['ids of #REF', '#3']"", ""PROJECT['how long #REF lasted', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1880,What is the number of distinct teams that suffer elimination?,return teams ;return #1 that  suffer elimination ;return distinct #2 ;return number of  #3,"[""SELECT['teams']"", ""FILTER['#1', 'that suffer elimination']"", ""PROJECT['distinct #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_1881,How many different teams have had eliminated wrestlers?,return teams ;return wrestlers of  #1 ;return #1 where  #2 are  eliminated ;return different #3 ;return number of #4,"[""SELECT['teams']"", ""PROJECT['wrestlers of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'are eliminated']"", ""PROJECT['different #REF', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_1882,"Show the times of elimination by ""Punk"" or ""Orton"".",return times of  elimination ;return #1 by Punk ;return #1 by Orton ;return #2 or  #3,"[""SELECT['times of elimination']"", ""FILTER['#1', 'by Punk']"", ""FILTER['#1', 'by Orton']"", ""UNION['#2', '#3']""]","['select', 'filter', 'filter', 'union']",train
SPIDER_train_1883,What are the times of elimination for any instances in which the elimination was done by Punk or Orton?,"return instances ;return eliminations of #1 ;return #2 that was  done by Punk ;return #2 that was  done by Orton ;return #3 ,  #4 ;return times of #5","[""SELECT['instances']"", ""PROJECT['eliminations of #REF', '#1']"", ""FILTER['#2', 'that was done by Punk']"", ""FILTER['#2', 'that was done by Orton']"", ""UNION['#3', '#4']"", ""PROJECT['times of #REF', '#5']""]","['select', 'project', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_1884,How many schools are there?,return schools ;return number of #1,"[""SELECT['schools']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_1886,Show all school names in alphabetical order.,return school names ;return #1 sorted by alphabetical order,"[""SELECT['school names']"", ""SORT['#1', '#1', 'alphabetical order']""]","['select', 'sort']",train
SPIDER_train_1887,"List the name, location, mascot for all schools.","return schools ;return names of  #1 ;return locations of  #1 ;return mascots of  #1 ;return #2 ,  #3 , #4","[""SELECT['schools']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['locations of #REF', '#1']"", ""PROJECT['mascots of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_1888,What are the total and average enrollment of all schools?,"return schools ;return enrollments of  #1 ;return sum of  #2 ;return average of  #2 ;return #3 ,  #4","[""SELECT['schools']"", ""PROJECT['enrollments of #REF', '#1']"", ""AGGREGATE['sum', '#2']"", ""AGGREGATE['avg', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_1889,What are the mascots for schools with enrollments above the average?,return schools ;return enrollments of #1 ;return average of #2 ;return #1 where #2 is  higher than #3 ;return mascots of #4,"[""SELECT['schools']"", ""PROJECT['enrollments of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['mascots of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_189,"For each station, return its longitude and the average duration of trips that started from the station.","return stations ;return longitudes of  #1 ;return trips that  started from  #1 ;return duration of  #3 ;return average of  #4 for each #1 ;return #2 ,   #5","[""SELECT['stations']"", ""PROJECT['longitudes of #REF', '#1']"", ""PROJECT['trips that started from #REF', '#1']"", ""PROJECT['duration of #REF', '#3']"", ""GROUP['avg', '#4', '#1']"", ""UNION['#2', '#5']""]","['select', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_1890,List the name of the school with the smallest enrollment.,return schools ;return enrollment of #1 ;return #1 where #2 is lowest ;return name of #3,"[""SELECT['schools']"", ""PROJECT['enrollment of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_1891,"Show the average, maximum, minimum enrollment of all schools.","return schools ;return enrollments of  #1 ;return average of  #2 ;return maximum of  #2 ;return minimum of  #2 ;return #3 ,  #4 ,   #5","[""SELECT['schools']"", ""PROJECT['enrollments of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""AGGREGATE['max', '#2']"", ""AGGREGATE['min', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'project', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_1892,Show each county along with the number of schools and total enrollment in each county.,"return counties ;return schools in #1 ;return number of  #2 for each  #1 ;return enrollments of  #2 ;return sum of  #4 for each  #1 ;return #1 ,  #3 ,   #5","[""SELECT['counties']"", ""PROJECT['schools in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['enrollments of #REF', '#2']"", ""GROUP['sum', '#4', '#1']"", ""UNION['#1', '#3', '#5']""]","['select', 'project', 'group', 'project', 'group', 'union']",train
SPIDER_train_1893,"How many donors have endowment for school named ""Glenn""?",return donors ;return endowment of  #1 ;return schools of  #2 ;return #1 where  #3 is Glenn ;return number of  #4,"[""SELECT['donors']"", ""PROJECT['endowment of #REF', '#1']"", ""PROJECT['schools of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Glenn']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'project', 'comparative', 'aggregate']",train
SPIDER_train_1894,List each donator name and the amount of endowment in descending order of the amount of endowment.,"return donators ;return names of   #1 ;return endowments of   #1 ;return amounts of   #3 ;return #2 ,  #4 ;return #5 sorted by #4","[""SELECT['donators']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['endowments of #REF', '#1']"", ""PROJECT['amounts of #REF', '#3']"", ""UNION['#2', '#4']"", ""SORT['#5', '#4']""]","['select', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_1895,List the names of the schools without any endowment.,return schools ;return #1 with  endowments ;return #1 besides #2 ;return names of  #3,"[""SELECT['schools']"", ""FILTER['#1', 'with endowments']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_1896,List all the names of schools with an endowment amount smaller than or equal to 10.,return schools ;return endowments of  #1 ;return amounts of  #2 ;return #1 where  #3 is at most 10 ;return names of  #4,"[""SELECT['schools']"", ""PROJECT['endowments of #REF', '#1']"", ""PROJECT['amounts of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is at most 10']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_1897,"Show the names of donors who donated to both school ""Glenn"" and ""Triton.""",return schools ;return #1 that is  Glenn ;return #1 that is  Triton ;return donors of #1 ;return #4 of both #3 and #2,"[""SELECT['schools']"", ""FILTER['#1', 'that is Glenn']"", ""FILTER['#1', 'that is Triton']"", ""PROJECT['donors of #REF', '#1']"", ""INTERSECTION['#4', '#3', '#2']""]","['select', 'filter', 'filter', 'project', 'intersection']",train
SPIDER_train_1898,Show the names of all the donors except those whose donation amount less than 9.,return donors ;return donation amounts of #1 ;return #1 where #2 is  at least 9 ;return names of #3,"[""SELECT['donors']"", ""PROJECT['donation amounts of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least 9']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1899,List the amount and donor name for the largest amount of donation.,"return donations ;return amounts of  #1 ;return #1 where  #2 is highest ;return amount  of  #3 ;return donor names of  #3 ;return #4 ,  #5","[""SELECT['donations']"", ""PROJECT['amounts of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['amount of #REF', '#3']"", ""PROJECT['donor names of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_19,"What is the total horses record for each farm, sorted ascending?",return farms ;return horses on  #1 ;return number of  #2 for each  #1 ;return #3 sorted by ascending,"[""SELECT['farms']"", ""PROJECT['horses on #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SORT['#3', '#3', 'ascending']""]","['select', 'project', 'group', 'sort']",train
SPIDER_train_190,"For each start station id, what is its name, longitude and average duration of trips started there?","return station ids ;return names of  #1 ;return longitudes of  #1 ;return trips started of  #1 ;return duration of  #4 ;return average of  #5 for each #1 ;return #2 ,   #3 , #6","[""SELECT['station ids']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['longitudes of #REF', '#1']"", ""PROJECT['trips started of #REF', '#1']"", ""PROJECT['duration of #REF', '#4']"", ""GROUP['avg', '#5', '#1']"", ""UNION['#2', '#3', '#6']""]","['select', 'project', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_1900,How many budgets are above 3000 in year 2001 or before?,return budgets ;return #1 in the  year 2001 or  before ;return #2 that  are above 3000 ;return the  number of  #3,"[""SELECT['budgets']"", ""FILTER['#1', 'in the year 2001 or before']"", ""FILTER['#2', 'that are above 3000']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'filter', 'aggregate']",train
SPIDER_train_1901,Count the number of budgets in year 2001 or before whose budgeted amount is greater than 3000,return budgets ;return year of  #1 ;return budgeted amounts of  #1 ;return #1 where  #2 is  2001 or  before ;return #4 where  #3 is  greater than  3000 ;return the number of #5,"[""SELECT['budgets']"", ""PROJECT['year of #REF', '#1']"", ""PROJECT['budgeted amounts of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 2001 or before']"", ""COMPARATIVE['#4', '#3', 'is greater than 3000']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'project', 'comparative', 'comparative', 'aggregate']",train
SPIDER_train_1902,"Show each school name, its budgeted amount, and invested amount in year 2002 or after.","return schools ;return names of #1 ;return budgeted amounts of #1 ;return invested amounts of #1 ;return years of #3 ;return years of #4 ;return #3 where #5 is 2002 or  after ;return #4 where #6 is 2002 or  after ;return #2 ,  #7 ,   #8","[""SELECT['schools']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['budgeted amounts of #REF', '#1']"", ""PROJECT['invested amounts of #REF', '#1']"", ""PROJECT['years of #REF', '#3']"", ""PROJECT['years of #REF', '#4']"", ""COMPARATIVE['#3', '#5', 'is 2002 or after']"", ""COMPARATIVE['#4', '#6', 'is 2002 or after']"", ""UNION['#2', '#7', '#8']""]","['select', 'project', 'project', 'project', 'project', 'project', 'comparative', 'comparative', 'union']",train
SPIDER_train_1903,Show all donor names.,return donor ;return names of  #1,"[""SELECT['donor']"", ""PROJECT['names of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_1904,How many budget record has a budget amount smaller than the invested amount?,return budget  records ;return budget  amounts of  #1 ;return invested amounts of  #1 ;return #1 where  #2 is lower than #3 ;return number of  #4,"[""SELECT['budget records']"", ""PROJECT['budget amounts of #REF', '#1']"", ""PROJECT['invested amounts of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is lower than #3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'project', 'comparative', 'aggregate']",train
SPIDER_train_1905,"What is the total budget amount for school ""Glenn"" in all years?",return budget amounts ;return #1 for the school Glenn ;return sum of  #2,"[""SELECT['budget amounts']"", ""FILTER['#1', 'for the school Glenn']"", ""AGGREGATE['sum', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_1906,Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10.,"return schools ;return budget amounts of #1 ;return total  endowments of #1 ;return #1 where #2 is  greater than  100 ;return #1 where #3 is  greater than  10 ;return #4 ,  #5 ;return names of #6","[""SELECT['schools']"", ""PROJECT['budget amounts of #REF', '#1']"", ""PROJECT['endowments of #REF', '#1']"", ""GROUP['sum', '#3', '#1']"", ""COMPARATIVE['#1', '#2', 'is greater than 100']"", ""COMPARATIVE['#1', '#4', 'is greater than 10']"", ""UNION['#5', '#6']"", ""PROJECT['names of #REF', '#7']""]","['select', 'project', 'project', 'group', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_1907,Find the names of schools that have more than one donator with donation amount above 8.5.,return schools ;return donators of  #1 ;return donation amounts of  #2 ;return #2 where  #3 is  higher than 8.5 ;return number of #4 for each #1 ;return #1 where  #5 is  higher than one ;return names of  #6,"[""SELECT['schools']"", ""PROJECT['donators of #REF', '#1']"", ""PROJECT['donation amounts of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is higher than 8.5']"", ""GROUP['count', '#4', '#1']"", ""COMPARATIVE['#1', '#5', 'is higher than one']"", ""PROJECT['names of #REF', '#6']""]","['select', 'project', 'project', 'comparative', 'group', 'comparative', 'project']",train
SPIDER_train_1908,Find the number of schools that have more than one donator whose donation amount is less than 8.5.,return schools ;return donators to #1 ;return donations of  #2 ;return amounts of  #3 ;return #2 where #4 is  lower than 8.5 ;return number of  #5 for each  #1 ;return #1 where #6 is  higher than one ;return number of  #7,"[""SELECT['schools']"", ""PROJECT['donators to #REF', '#1']"", ""PROJECT['donations of #REF', '#2']"", ""PROJECT['amounts of #REF', '#3']"", ""COMPARATIVE['#2', '#4', 'is lower than 8.5']"", ""GROUP['count', '#5', '#1']"", ""COMPARATIVE['#1', '#6', 'is higher than one']"", ""AGGREGATE['count', '#7']""]","['select', 'project', 'project', 'project', 'comparative', 'group', 'comparative', 'aggregate']",train
SPIDER_train_191,"For each station, find its latitude and the minimum duration of trips that ended at the station.","return stations ;return latitude of  each #1 ;return trips that  ended at the  #1 ;return minimum duration of  #3 ;return #2 ,  #4","[""SELECT['stations']"", ""PROJECT['latitude of each #REF', '#1']"", ""PROJECT['trips that ended at the #REF', '#1']"", ""PROJECT['duration of #REF', '#3']"", ""GROUP['min', '#4', '#3']"", ""UNION['#2', '#5']""]","['select', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_1910,How many buildings are there?,return buildings ;return number of #1,"[""SELECT['buildings']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_1911,"Show the name, street address, and number of floors for all buildings ordered by the number of floors.","return buildings ;return names of #1 ;return street addresses of #1 ;return floors  of #1 ;return number of  #4 for each  #1 ;return #2 ,  #3 ,   #5 ;return #6 sorted by #5","[""SELECT['buildings']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['street addresses of #REF', '#1']"", ""PROJECT['floors of #REF', '#1']"", ""GROUP['count', '#4', '#1']"", ""UNION['#2', '#3', '#5']"", ""SORT['#6', '#5']""]","['select', 'project', 'project', 'project', 'group', 'union', 'sort']",train
SPIDER_train_1912,What is the name of the tallest building?,return buildings ;return tallest #1 ;return name of  #2,"[""SELECT['buildings']"", ""PROJECT['tallest #REF', '#1']"", ""PROJECT['name of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_1913,"What are the average, maximum, and minimum number of floors for all buildings?","return buildings ;return floors of  #1 ;return number of  #2 ;return average of  #3 ;return maximum of  #3 ;return minimum of  #3 ;return #4 ,  #5 ,   #6","[""SELECT['buildings']"", ""PROJECT['floors of #REF', '#1']"", ""AGGREGATE['count', '#2']"", ""AGGREGATE['avg', '#3']"", ""AGGREGATE['max', '#3']"", ""AGGREGATE['min', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'project', 'aggregate', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_1914,Show the number of buildings with a height above the average or a number of floors above the average.,"return buildings ;return heights of #1 ;return the   average  of #2 ;return #1 where #2 is  above #3 ;return floors of #1 ;return the   number of  #5 for each #1 ;return the   average  of #6 ;return #1 where #6 is  above #7 ;return #4 ,  #8 ;return the   number of  #9","[""SELECT['buildings']"", ""PROJECT['heights of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is above #3']"", ""PROJECT['floors of #REF', '#1']"", ""GROUP['count', '#5', '#1']"", ""AGGREGATE['avg', '#6']"", ""COMPARATIVE['#1', '#6', 'is above #7']"", ""UNION['#4', '#8']"", ""AGGREGATE['count', '#9']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'group', 'aggregate', 'comparative', 'union', 'aggregate']",train
SPIDER_train_1915,List the names of buildings with at least 200 feet of height and with at least 20 floors.,return buildings ;return heights of  #1 ;return #1 where  #2 is at least 200 feet ;return floors of  #1 ;return number of  #4 for each  #1 ;return #1 where  #5 is at least 20 ;return #1 of  both #3 and #6 ;return names of  #7,"[""SELECT['buildings']"", ""PROJECT['heights of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least 200 feet']"", ""PROJECT['floors of #REF', '#1']"", ""GROUP['count', '#4', '#1']"", ""COMPARATIVE['#1', '#5', 'is at least 20']"", ""INTERSECTION['#1', '#3', '#6']"", ""PROJECT['names of #REF', '#7']""]","['select', 'project', 'comparative', 'project', 'group', 'comparative', 'intersection', 'project']",train
SPIDER_train_1916,"Show the names and locations of institutions that are founded after 1990 and have the type ""Private"".","return institutions ;return #1 founded after 1990 ;return types of  #1 ;return #1 where #3 is  Private ;return #2 or  #4 ;return names of  #5 ;return locations of  #5 ;return #6 ,  #7","[""SELECT['institutions']"", ""FILTER['#1', 'founded after 1990']"", ""PROJECT['types of #REF', '#1']"", ""COMPARATIVE['#1', '#3', 'is Private']"", ""UNION['#2', '#4']"", ""PROJECT['names of #REF', '#5']"", ""PROJECT['locations of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'filter', 'project', 'comparative', 'union', 'project', 'project', 'union']",train
SPIDER_train_1917,"Show institution types, along with the number of institutions and total enrollment for each type.","return institution types ;return institutions of #1 ;return number of  #2 for each #1 ;return enrollments of #2 ;return sum of #4 for each #1 ;return #1 ,  #3 ,   #5","[""SELECT['institution types']"", ""PROJECT['institutions of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['enrollments of #REF', '#2']"", ""GROUP['sum', '#4', '#1']"", ""UNION['#1', '#3', '#5']""]","['select', 'project', 'group', 'project', 'group', 'union']",train
SPIDER_train_1918,Show the institution type with the largest number of institutions.,return institutions ;return types of #1 ;return number of  #1 for each #2 ;return #2 where #3 is  the  largest,"[""SELECT['institutions']"", ""PROJECT['types of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""COMPARATIVE['#2', '#3', 'is the largest']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_1919,Show the institution type with an institution founded after 1990 and an institution with at least 1000 enrollment.,return institutions ;return #1 founded after 1990 ;return #2 with  at least 1000 enrollment ;return types of  #3,"[""SELECT['institutions']"", ""FILTER['#1', 'founded after 1990']"", ""FILTER['#2', 'with at least 1000 enrollment']"", ""PROJECT['types of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_192,"For each end station id, what is its name, latitude, and minimum duration for trips ended there?","return end station ids ;return names of #1 ;return latitudes of #1 ;return trips that  ended in #1 ;return durations of #4 ;return minimum of #5 for each #1 ;return #2 ,  #3 ,   #6","[""SELECT['end station ids']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['latitudes of #REF', '#1']"", ""PROJECT['trips that ended in #REF', '#1']"", ""PROJECT['durations of #REF', '#4']"", ""GROUP['min', '#5', '#1']"", ""UNION['#2', '#3', '#6']""]","['select', 'project', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_1920,Show the name of buildings that do not have any institution.,return buildings ;return institutions of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  at least one ;return #1 besides #4 ;return the  names of #5,"[""SELECT['buildings']"", ""PROJECT['institutions of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least one']"", ""DISCARD['#1', '#4']"", ""PROJECT['the names of #REF', '#5']""]","['select', 'project', 'group', 'comparative', 'discard', 'project']",train
SPIDER_train_1921,Show the names of buildings except for those having an institution founded in 2003.,return institutions ;return #1 not  founded in  2003 ;return the  buildings of  #2 ;return the  names of  #3,"[""SELECT['institutions']"", ""FILTER['#1', 'not founded in 2003']"", ""PROJECT['the buildings of #REF', '#2']"", ""PROJECT['the names of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_1922,"For each building, show the name of the building and the number of institutions in it.","return buildings ;return names of  #1 ;return institutions in #1 ;return number of #3 for each #1 ;return #2 ,   #4","[""SELECT['buildings']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['institutions in #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_1923,Show the names and heights of buildings with at least two institutions founded after 1880.,"return buildings ;return institutions of  #1 ;return #2 founded after 1880 ;return number of  #3 for each  #1 ;return #1 where #4 is  at least two ;return names of  #5 ;return heights of  #5 ;return #6 ,  #7","[""SELECT['buildings']"", ""PROJECT['institutions of #REF', '#1']"", ""FILTER['#2', 'founded after 1880']"", ""GROUP['count', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is at least two']"", ""PROJECT['names of #REF', '#5']"", ""PROJECT['heights of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'filter', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1924,Show all the distinct institution types.,return institutions ;return types of  #1 ;return distinct #2,"[""SELECT['institutions']"", ""PROJECT['types of #REF', '#1']"", ""PROJECT['distinct #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_1925,Show institution names along with the number of proteins for each institution.,"return institutions ;return names of  #1 ;return proteins of  #1 ;return number of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['institutions']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['proteins of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_1926,"How many proteins are associated with an institution founded after 1880 or an institution with type ""Private""?","return institutions ;return #1 founded after 1880 ;return type of #1 ;return #1 where #3 is  Private ;return proteins associated with  #2 ;return proteins associated with  #4 ;return #5 ,  #6 ;return number of  #7","[""SELECT['institutions']"", ""FILTER['#1', 'founded after 1880']"", ""PROJECT['type of #REF', '#1']"", ""COMPARATIVE['#1', '#3', 'is Private']"", ""PROJECT['proteins associated with #REF', '#2']"", ""PROJECT['proteins associated with #REF', '#4']"", ""UNION['#5', '#6']"", ""AGGREGATE['count', '#7']""]","['select', 'filter', 'project', 'comparative', 'project', 'project', 'union', 'aggregate']",train
SPIDER_train_1927,Show the protein name and the institution name.,"return proteins ;return names of  #1 ;return institutions of  #1 ;return names of  #3 ;return #2 ,  #4","[""SELECT['proteins']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['institutions of #REF', '#1']"", ""PROJECT['names of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_1928,How many proteins are associated with an institution in a building with at least 20 floors?,return institutions ;return buildings of  #1 ;return floors of  #2 ;return number of  #3 for each  #1 ;return #1 where  #4 is higher than 20 ;return protein associated with  #5 ;return number of  #6,"[""SELECT['institutions']"", ""PROJECT['buildings of #REF', '#1']"", ""PROJECT['floors of #REF', '#2']"", ""GROUP['count', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is higher than 20']"", ""PROJECT['protein associated with #REF', '#5']"", ""AGGREGATE['count', '#6']""]","['select', 'project', 'project', 'group', 'comparative', 'project', 'aggregate']",train
SPIDER_train_1929,How many institutions do not have an associated protein in our record?,return institutions ;return #1 with  associated proteins ;return #1 besides #2 ;return number of #3,"[""SELECT['institutions']"", ""FILTER['#1', 'with associated proteins']"", ""DISCARD['#1', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'discard', 'aggregate']",train
SPIDER_train_193,List all the distinct stations from which a trip of duration below 100 started.,return stations ;return trips that  started in #1 ;return durations of  #2 ;return #1 where  #3 is lower than 100 ;return distinct #4,"[""SELECT['stations']"", ""PROJECT['trips that started in #REF', '#1']"", ""PROJECT['durations of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is lower than 100']"", ""PROJECT['distinct #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_1930,Show all the locations where no cinema has capacity over 800.,return locations ;return cinemas in #1 ;return capacities of #2 ;return #2 where #3 is  over 800 ;return number of  #4 for each #1 ;return #1 where #5 is  at least one ;return #1 besides #6,"[""SELECT['locations']"", ""PROJECT['cinemas in #REF', '#1']"", ""PROJECT['capacities of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is over 800']"", ""GROUP['count', '#4', '#1']"", ""COMPARATIVE['#1', '#5', 'is at least one']"", ""DISCARD['#1', '#6']""]","['select', 'project', 'project', 'comparative', 'group', 'comparative', 'discard']",train
SPIDER_train_1931,Show all the locations where some cinemas were opened in both year 2010 and year 2011.,return cinemas ;return #1 that  opened in 2010 ;return #1 that  opened in 2011 ;return #1 of  both #2 and  #3 ;return locations of  #4,"[""SELECT['cinemas']"", ""FILTER['#1', 'that opened in 2010']"", ""FILTER['#1', 'that opened in 2011']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['locations of #REF', '#4']""]","['select', 'filter', 'filter', 'intersection', 'project']",train
SPIDER_train_1932,How many cinema do we have?,return cinema ;return the  number of  #1,"[""SELECT['cinema']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_1933,Count the number of cinemas.,return cinemas ;return number of #1,"[""SELECT['cinemas']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_1934,"Show name, opening year, and capacity for each cinema.","return cinemas ;return name of  #1 ;return opening year of  #1 ;return capacity of  #1 ;return #2 , #3 ,  #4","[""SELECT['cinemas']"", ""PROJECT['name of #REF', '#1']"", ""PROJECT['opening year of #REF', '#1']"", ""PROJECT['capacity of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_1935,Show the cinema name and location for cinemas with capacity above average.,"return cinemas ;return capacities of #1 ;return average of #2 ;return #1 where #2 is  higher than #3 ;return names of #4 ;return locations of #4 ;return #5 , #6","[""SELECT['cinemas']"", ""PROJECT['capacities of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['locations of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1936,What are all the locations with a cinema?,return locations ;return #1 that  have  a cinema,"[""SELECT['locations']"", ""FILTER['#1', 'that have a cinema']""]","['select', 'filter']",train
SPIDER_train_1937,Find the distinct locations that has a cinema.,return locations ;return #1 that  has  cinema ;return distinct #2,"[""SELECT['locations']"", ""FILTER['#1', 'that has cinema']"", ""PROJECT['distinct #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_1938,Show all the cinema names and opening years in descending order of opening year.,"return cinemas ;return names of #1 ;return opening years of #1 ;return #2 ,  #3 ;return #4 sorted by #3 in descending order","[""SELECT['cinemas']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['opening years of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#4', '#3', 'in descending order']""]","['select', 'project', 'project', 'union', 'sort']",train
SPIDER_train_1939,What are the name and location of the cinema with the largest capacity?,"return cinema ;return capacity of #1 ;return the  #1 where #2 is the   largest ;return the  name of #3 ;return the  location of #3 ;return #4 ,  #5","[""SELECT['cinema']"", ""PROJECT['capacity of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the largest']"", ""PROJECT['the name of #REF', '#3']"", ""PROJECT['the location of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_194,What are all the different start station names for a trip that lasted less than 100?,return trips ;return #1 that  lasted less than 100 ;return start station of  #2 ;return #3 that  are  different ;return names of  #4,"[""SELECT['trips']"", ""FILTER['#1', 'that lasted less than 100']"", ""PROJECT['start station of #REF', '#2']"", ""FILTER['#3', 'that are different']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'project', 'filter', 'project']",train
SPIDER_train_1940,"Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later.","return cinemas ;return year opened of #1 ;return #1 where #2 is at least 2011 ;return capacities of #3 ;return average of #4 ;return minimum of #4 ;return maximum of #4 ;return #5 ,  #6 ,   #7","[""SELECT['cinemas']"", ""PROJECT['year opened of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least 2011']"", ""PROJECT['capacities of #REF', '#3']"", ""AGGREGATE['avg', '#4']"", ""AGGREGATE['min', '#4']"", ""AGGREGATE['max', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'comparative', 'project', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_1941,Show each location and the number of cinemas there.,"return locations ;return cinemas in #1 ;return number of #2 for each #1 ;return #1 , #3","[""SELECT['locations']"", ""PROJECT['cinemas in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_1942,What is the location with the most cinemas opened in year 2010 or later?,return locations ;return cinemas in #1 ;return years opened of #2 ;return #2 where #3 is  2010 or  later ;return number of #4 for each #1 ;return #1 where #5 is  highest,"[""SELECT['locations']"", ""PROJECT['cinemas in #REF', '#1']"", ""PROJECT['years opened of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is 2010 or later']"", ""GROUP['count', '#4', '#1']"", ""SUPERLATIVE['max', '#1', '#5']""]","['select', 'project', 'project', 'comparative', 'group', 'superlative']",train
SPIDER_train_1943,Show all the locations with at least two cinemas with capacity above 300.,return locations ;return cinemas in #1 ;return capacities of #2 ;return #2 where #3 is  higher than 300 ;return number of #4 for each #1 ;return #1 where #5 is  at least two,"[""SELECT['locations']"", ""PROJECT['cinemas in #REF', '#1']"", ""PROJECT['capacities of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is higher than 300']"", ""GROUP['count', '#4', '#1']"", ""COMPARATIVE['#1', '#5', 'is at least two']""]","['select', 'project', 'project', 'comparative', 'group', 'comparative']",train
SPIDER_train_1944,Which locations have 2 or more cinemas with capacity over 300?,return locations ;return cinemas of #1 ;return capacities of #2 ;return #2 where #3 is  over 300 ;return number of  #4 for each #1 ;return #1 where #5 is  at least 2,"[""SELECT['locations']"", ""PROJECT['cinemas of #REF', '#1']"", ""PROJECT['capacities of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is over 300']"", ""GROUP['count', '#4', '#1']"", ""COMPARATIVE['#1', '#5', 'is at least 2']""]","['select', 'project', 'project', 'comparative', 'group', 'comparative']",train
SPIDER_train_1945,Show the title and director for all films.,"return films ;return titles of  #1 ;return directors of  #1 ;return #2 ,  #3","[""SELECT['films']"", ""PROJECT['titles of #REF', '#1']"", ""PROJECT['directors of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_1946,What are the title and director of each film?,"return films ;return titles of  #1 ;return directors of  #1 ;return #2 ,  #3","[""SELECT['films']"", ""PROJECT['titles of #REF', '#1']"", ""PROJECT['directors of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_1947,Show all directors.,return directors,"[""SELECT['directors']""]",['select'],train
SPIDER_train_1948,Who are all the directors?,return directors,"[""SELECT['directors']""]",['select'],train
SPIDER_train_1949,List all directors along with the number of films directed by each director.,"return directors ;return films directed by #1 ;return number of  #2 for each  #1 ;return #1 ,  #3","[""SELECT['directors']"", ""PROJECT['films directed by #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_195,Find all the zip codes in which the max dew point have never reached 70.,return all zip codes ;return #1 where  max dews point less than  70,"[""SELECT['all zip codes']"", ""FILTER['#1', 'where max dews point less than 70']""]","['select', 'filter']",train
SPIDER_train_1950,What is total number of show times per dat for each cinema?,return cinemas ;return show times ;return number of  #2 per date for each #1,"[""SELECT['cinemas']"", ""SELECT['show times']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'select', 'group', 'union']",train
SPIDER_train_1951,What are the title and maximum price of each film?,"return films ;return titles of #1 ;return prices of #1 ;return maximum of #3 for each #1 ;return #2 , #4","[""SELECT['films']"", ""PROJECT['titles of #REF', '#1']"", ""PROJECT['prices of #REF', '#1']"", ""GROUP['max', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_1952,Give me the title and highest price for each film.,"return films ;return prices of #1 ;return the  highest #2 for each #1 ;return titles of #1 ;return #4 ,  #3","[""SELECT['films']"", ""PROJECT['prices of #REF', '#1']"", ""GROUP['max', '#2', '#1']"", ""PROJECT['titles of #REF', '#1']"", ""UNION['#4', '#3']""]","['select', 'project', 'group', 'project', 'union']",train
SPIDER_train_1953,"Show cinema name, film title, date, and price for each record in schedule.","return records ;return #1 in schedule ;return cinema names of #2 ;return film titles of #2 ;return dates of #2 ;return prices of #2 ;return #3 ,  #4 ,   #5 , #6","[""SELECT['records']"", ""FILTER['#1', 'in schedule']"", ""PROJECT['cinema names of #REF', '#2']"", ""PROJECT['film titles of #REF', '#2']"", ""PROJECT['dates of #REF', '#2']"", ""PROJECT['prices of #REF', '#2']"", ""UNION['#3', '#4', '#5', '#6']""]","['select', 'filter', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_1954,What are the title and director of the films without any schedule?,"return films ;return #1 with schedules ;return #1 besides  #2 ;return the  titles of  #3 ;return the  directors of  #3 ;return #4 ,  #5","[""SELECT['films']"", ""FILTER['#1', 'with schedules']"", ""DISCARD['#1', '#2']"", ""PROJECT['the titles of #REF', '#3']"", ""PROJECT['the directors of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'discard', 'project', 'project', 'union']",train
SPIDER_train_1955,Show director with the largest number of show times in total.,return directors ;return Show times of #1 ;return number of  #2 for each #1 ;return #1 where #3 is highest,"[""SELECT['directors']"", ""PROJECT['Show times of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_1956,Find the locations that have more than one movie theater with capacity above 300.,return locations ;return movie theaters in #1 ;return capacities of #2 ;return #2 where #3 is  higher than 300 ;return number of  #4 for each #1 ;return #1 where #5 is  higher than one,"[""SELECT['locations']"", ""PROJECT['movie theaters in #REF', '#1']"", ""PROJECT['capacities of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is higher than 300']"", ""GROUP['count', '#4', '#1']"", ""COMPARATIVE['#1', '#5', 'is higher than one']""]","['select', 'project', 'project', 'comparative', 'group', 'comparative']",train
SPIDER_train_1957,In which locations are there more than one movie theater with capacity above 300?,return locations ;return movie theaters in #1 ;return capacities of  #2 ;return #2 where  #3 is higher than 300 ;return number of  #4 for each  #1 ;return #1 where  #5 is higher than than  one,"[""SELECT['locations']"", ""PROJECT['movie theaters in #REF', '#1']"", ""PROJECT['capacities of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is higher than 300']"", ""GROUP['count', '#4', '#1']"", ""COMPARATIVE['#1', '#5', 'is higher than than one']""]","['select', 'project', 'project', 'comparative', 'group', 'comparative']",train
SPIDER_train_1958,How many films have the word 'Dummy' in their titles?,return films with  'Dummy in their titles ;return number of  #1,"[""SELECT['films with Dummy in their titles']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_1959,Count the number of films whose title contains the word 'Dummy'.,return films ;return titles of  #1 ;return #1 where #2 contains the  word 'Dummy ;return number of  #3,"[""SELECT['films']"", ""PROJECT['titles of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'contains the word Dummy']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_196,What are all the different zip codes that have a maximum dew point that was always below 70?,return zip codes ;return maximum dew points of  #1 ;return #1 where #2 is  lower than 70 ;return different #3,"[""SELECT['zip codes']"", ""PROJECT['dew points of #REF', '#1']"", ""GROUP['max', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is lower than 70']"", ""PROJECT['different #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_1960,Are the customers holding coupons with amount 500 bad or good?,"return customers ;return coupons of #1 ;return amounts of #2 ;return #1 where #3 is equal to 500 ;return if #4 are bad ;return if #4 are good ;return which is true of #5 ,  #6","[""SELECT['customers']"", ""PROJECT['coupons of #REF', '#1']"", ""PROJECT['amounts of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is equal to 500']"", ""BOOLEAN['#4', 'are bad']"", ""BOOLEAN['#4', 'are good']"", ""COMPARISON['true', '#5', '#6']""]","['select', 'project', 'project', 'comparative', 'boolean', 'boolean', 'comparison']",train
SPIDER_train_1961,"How many bookings did each customer make? List the customer id, first name, and the count.","return customers ;return customer  ids of  #1 ;return first names of  #1 ;return bookings of  #1 ;return number of #4 for each #1 ;return #2 ,   #3 , #5","[""SELECT['customers']"", ""PROJECT['customer ids of #REF', '#1']"", ""PROJECT['first names of #REF', '#1']"", ""PROJECT['bookings of #REF', '#1']"", ""GROUP['count', '#4', '#1']"", ""UNION['#2', '#3', '#5']""]","['select', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_1962,What is the maximum total amount paid by a customer? List the customer id and amount.,"return customer ;return amount paid by #1 ;return maximum of  #2 ;return #1 where #2 is  maximum ;return customer id of  #4 ;return #5 ,  #3","[""SELECT['customer']"", ""PROJECT['amount paid by #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""COMPARATIVE['#1', '#2', 'is maximum']"", ""PROJECT['customer id of #REF', '#4']"", ""UNION['#5', '#3']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'union']",train
SPIDER_train_1963,What are the id and the amount of refund of the booking that incurred the most times of payments?,"return bookings ;return times of payments of   #1 ;return number of #2 for each #1 ;return #1 where #3 is  highest ;return id of #4 ;return refund of #4 ;return amount of #6 ;return #5 , #7","[""SELECT['bookings']"", ""PROJECT['times of payments of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['id of #REF', '#4']"", ""PROJECT['refund of #REF', '#4']"", ""PROJECT['amount of #REF', '#6']"", ""UNION['#5', '#7']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'project', 'union']",train
SPIDER_train_1964,What is the id of the product that is booked for 3 times?,return product ;return times booked of  #1 ;return number of  #2 ;return #1 where #3 is  3 ;return id of  #4,"[""SELECT['product']"", ""PROJECT['times booked of #REF', '#1']"", ""AGGREGATE['count', '#2']"", ""COMPARATIVE['#1', '#3', 'is 3']"", ""PROJECT['id of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_1965,What is the product description of the product booked with an amount of 102.76?,return products ;return amounts #1 are booked with  ;return #1 where #2 is  102.76 ;return product  description of #3,"[""SELECT['products']"", ""PROJECT['amounts #REF are booked with', '#1']"", ""COMPARATIVE['#1', '#2', 'is 102.76']"", ""PROJECT['product description of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1966,What are the start date and end date of the booking that has booked the product named 'Book collection A'?,"return bookings ;return #1 that  has  booked the  product named 'Book collection A ;return start date  of  #2 ;return end date  of  #3 ;return #3 ,  #4","[""SELECT['bookings']"", ""FILTER['#1', 'that has booked the product named Book collection A']"", ""PROJECT['start date of #REF', '#2']"", ""PROJECT['end date of #REF', '#3']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_1967,What are the names of products whose availability equals to 1?,return products ;return availability of  #1 ;return #1 where #2 equals 1 ;return names of  #3,"[""SELECT['products']"", ""PROJECT['availability of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'equals 1']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1968,How many different product types are there?,return product types ;return number of #1,"[""SELECT['product types']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_1969,"What are the first name, last name, and gender of all the good customers? Order by their last name.","return good customers ;return first names of  #1 ;return last  names of  #1 ;return genders of  #1 ;return #2 ,  #3 ,   #4 ;return #5 sorted by #3","[""SELECT['good customers']"", ""PROJECT['first names of #REF', '#1']"", ""PROJECT['last names of #REF', '#1']"", ""PROJECT['genders of #REF', '#1']"", ""UNION['#2', '#3', '#4']"", ""SORT['#5', '#3']""]","['select', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_197,Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.,return trips ;return #1 in  zip code 94103 ;return duration of #2 ;return average of #3 ;return duration of #1 ;return #1 where #5 is at least #4 ;return id of #6,"[""SELECT['trips']"", ""FILTER['#1', 'in zip code 94103']"", ""PROJECT['duration of #REF', '#2']"", ""AGGREGATE['avg', '#3']"", ""PROJECT['duration of #REF', '#1']"", ""COMPARATIVE['#1', '#5', 'is at least #4']"", ""PROJECT['id of #REF', '#6']""]","['select', 'filter', 'project', 'aggregate', 'project', 'comparative', 'project']",train
SPIDER_train_1970,What is the average amount due for all the payments?,return payments ;return amount due of  #1 ;return average of  #2,"[""SELECT['payments']"", ""PROJECT['amount due of #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_1971,"What are the maximum, minimum, and average booked count for the products booked?","return products ;return #1 that  are booked ;return booked counts of #2 ;return maximum of #3 ;return minimum of #3 ;return average of #3 ;return #4 ,  #5 ,   #6","[""SELECT['products']"", ""FILTER['#1', 'that are booked']"", ""PROJECT['booked counts of #REF', '#2']"", ""AGGREGATE['max', '#3']"", ""AGGREGATE['min', '#3']"", ""AGGREGATE['avg', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'filter', 'project', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_1972,What are all the distinct payment types?,return payments ;return types of  #1 ;return distinct #2,"[""SELECT['payments']"", ""PROJECT['types of #REF', '#1']"", ""PROJECT['distinct #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_1973,What are the daily hire costs for the products with substring 'Book' in its name?,return products ;return names of  #1 ;return #1 where #2 has  substring 'Book ;return daily hire costs of  #3,"[""SELECT['products']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'has substring Book']"", ""PROJECT['daily hire costs of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_1974,How many products are never booked with amount higher than 200?,return products ;return amounts of #1 booked ;return #1 where #2 is  higher than 200 ;return #1 besides #3 ;return number of  #4,"[""SELECT['products']"", ""PROJECT['amounts of #REF booked', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 200']"", ""DISCARD['#1', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'comparative', 'discard', 'aggregate']",train
SPIDER_train_1975,What are the coupon amount of the coupons owned by both good and bad customers?,return customers ;return #1 that  are good ;return #1 that  are bad ;return coupons owned by #2 ;return coupons owned by #3 ;return coupons owned by #1 ;return #6 of both #4 and #5 ;return coupon amounts of #7,"[""SELECT['customers']"", ""FILTER['#1', 'that are good']"", ""FILTER['#1', 'that are bad']"", ""PROJECT['coupons owned by #REF', '#2']"", ""PROJECT['coupons owned by #REF', '#3']"", ""PROJECT['coupons owned by #REF', '#1']"", ""INTERSECTION['#6', '#4', '#5']"", ""PROJECT['coupon amounts of #REF', '#7']""]","['select', 'filter', 'filter', 'project', 'project', 'project', 'intersection', 'project']",train
SPIDER_train_1976,What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check',"return payments ;return amount paid of #1 ;return #1 where #2 is higher than 300 ;return type of #1 ;return #1 where #4 is 'Check ;return #3 ,  #5 ;return payment   date of #6","[""SELECT['payments']"", ""PROJECT['amount paid of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 300']"", ""PROJECT['type of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is Check']"", ""UNION['#3', '#5']"", ""PROJECT['payment date of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'comparative', 'union', 'project']",train
SPIDER_train_1977,What are the names and descriptions of the products that are of 'Cutlery' type and have daily hire cost lower than 20?,"return products ;return types of #1 ;return #1 where #2 is equal to 'Cutlery ;return daily hire costs of #3 ;return #3 where #4 is lower than 20 ;return names of #5 ;return descriptions of #5 ;return #6 ,  #7","[""SELECT['products']"", ""PROJECT['types of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is equal to Cutlery']"", ""PROJECT['daily hire costs of #REF', '#3']"", ""COMPARATIVE['#3', '#4', 'is lower than 20']"", ""PROJECT['names of #REF', '#5']"", ""PROJECT['descriptions of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'comparative', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_1978,How many phones are there?,return phones ;return number of  #1,"[""SELECT['phones']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_1979,List the names of phones in ascending order of price.,return phones ;return names of  #1 ;return prices of  #1 ;return #2 sorted by #3 in ascending order,"[""SELECT['phones']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['prices of #REF', '#1']"", ""SORT['#2', '#3', 'in ascending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_198,What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103?,return trips ;return zip codes of #1 ;return #1 where #2 is 94103 ;return durations of #3 ;return the  average of #4 ;return durations of #1 ;return #1 where #6 is equal to #5 ;return ids of #7,"[""SELECT['trips']"", ""PROJECT['zip codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 94103']"", ""PROJECT['durations of #REF', '#3']"", ""AGGREGATE['avg', '#4']"", ""PROJECT['durations of #REF', '#1']"", ""COMPARATIVE['#1', '#6', 'is equal to #5']"", ""PROJECT['ids of #REF', '#7']""]","['select', 'project', 'comparative', 'project', 'aggregate', 'project', 'comparative', 'project']",train
SPIDER_train_1980,What are the memories and carriers of phones?,"return phones ;return memories of  #1 ;return carriers of  #1 ;return #2 ,  #3","[""SELECT['phones']"", ""PROJECT['memories of #REF', '#1']"", ""PROJECT['carriers of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_1981,List the distinct carriers of phones with memories bigger than 32.,return carriers ;return phones of #1 ;return memories of #2 ;return #1 where #3 is  higher than 32 ;return distinct #4,"[""SELECT['carriers']"", ""PROJECT['phones of #REF', '#1']"", ""PROJECT['memories of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is higher than 32']"", ""PROJECT['distinct #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_1982,"Show the names of phones with carrier either ""Sprint"" or ""TMobile"".",return phones ;return carriers of  #1 ;return #1 where #2 is  Sprint ;return #1 where #2 is  TMobile ;return #3 or  #4 ;return names of  #5,"[""SELECT['phones']"", ""PROJECT['carriers of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Sprint']"", ""COMPARATIVE['#1', '#2', 'is TMobile']"", ""UNION['#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_1983,What is the carrier of the most expensive phone?,return carriers ;return phones of #1 ;return #1 where #2 is  the most expensive,"[""SELECT['carriers']"", ""PROJECT['phones of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the most expensive']""]","['select', 'project', 'comparative']",train
SPIDER_train_1984,Show different carriers of phones together with the number of phones with each carrier.,"return carriers of phones  ;return phones  of #1 ;return number of  #2 for each #1 ;return #1 ,  #3","[""SELECT['carriers of phones']"", ""PROJECT['phones of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_1985,Show the most frequently used carrier of the phones.,return phones ;return carrier of  #1 ;return most frequently used #2,"[""SELECT['phones']"", ""PROJECT['carrier of #REF', '#1']"", ""PROJECT['most frequently used #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_1986,Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64.,return phones  ;return memories of  #1 ;return #1 where #2 is  lower than 32 ;return #1 where #2 is  higher than 64 ;return #1 of  both #3 and  #4 ;return carriers of  #5,"[""SELECT['phones']"", ""PROJECT['memories of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is lower than 32']"", ""COMPARATIVE['#1', '#2', 'is higher than 64']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['carriers of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_1987,Show the names of phones and the districts of markets they are on.,"return phones ;return names of #1 ;return markets of #1 ;return districts of #3 ;return #2 ,  #4","[""SELECT['phones']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['markets of #REF', '#1']"", ""PROJECT['districts of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_1988,"Show the names of phones and the districts of markets they are on, in ascending order of the ranking of the market.","return phones ;return names of   #1 ;return markets of   #1 ;return districts of   #3 ;return rankings of   #3 ;return #2 ,  #4 ;return #6 sorted by #5 in  ascending order","[""SELECT['phones']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['markets of #REF', '#1']"", ""PROJECT['districts of #REF', '#3']"", ""PROJECT['rankings of #REF', '#3']"", ""UNION['#2', '#4']"", ""SORT['#6', '#5', 'in ascending order']""]","['select', 'project', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_1989,Show the names of phones that are on market with number of shops greater than 50.,"return market ;return shops of #1 ;return the  number of  #2 ;return #1 where #3 is higher than 50 ;return the  names of #4 ;return the  phone of #4 ;return #5 ,  #6","[""SELECT['market']"", ""PROJECT['shops of #REF', '#1']"", ""AGGREGATE['count', '#2']"", ""COMPARATIVE['#1', '#3', 'is higher than 50']"", ""PROJECT['the names of #REF', '#4']"", ""PROJECT['the phone of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_199,What are the dates in which the mean sea level pressure was between 30.3 and 31?,return mean sea level pressure ;return #1 between 30.3 and  31 ;return dates of  #2,"[""SELECT['mean sea level pressure']"", ""FILTER['#1', 'betweenleftside 30.3']"", ""FILTER['#2', 'betweenrightside 31']"", ""PROJECT['dates of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_1990,"For each phone, show its names and total number of stocks.","return phones ;return names of  #1 ;return stocks of  #1 ;return sum of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['phones']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['stocks of #REF', '#1']"", ""GROUP['sum', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_1991,"Show the names of phones that have total number of stocks bigger than 2000, in descending order of the total number of stocks.",return phones ;return stocks  of   #1 ;return number of  #2 for each #1 ;return #1 where #3 is  higher than 2000 ;return names of   #4 ;return stocks  of   #4 ;return number of  #6 for each #4 ;return #5 sorted by #7 in descending order,"[""SELECT['phones']"", ""PROJECT['stocks of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 2000']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['stocks of #REF', '#4']"", ""GROUP['count', '#6', '#4']"", ""SORT['#5', '#7', 'in descending order']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'group', 'sort']",train
SPIDER_train_1992,List the names of phones that are not on any market.,return phones ;return #1 on any market ;return #1 besides  #2 ;return name of #3,"[""SELECT['phones']"", ""FILTER['#1', 'on any market']"", ""DISCARD['#1', '#2']"", ""PROJECT['name of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_1993,How many gas companies are there?,return gas companies ;return number of #1,"[""SELECT['gas companies']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_1994,What is the total number of companies?,return companies ;return number of  #1,"[""SELECT['companies']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_1995,List the company name and rank for all companies in the decreasing order of their sales.,"return companies ;return names of  #1 ;return ranks of  #1 ;return sales of  #1 ;return #2 ,  #3 ;return #5 sorted by #4 in decreasing order","[""SELECT['companies']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['ranks of #REF', '#1']"", ""PROJECT['sales of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#5', '#4', 'in decreasing order']""]","['select', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_1996,What is the name and rank of every company ordered by descending number of sales?,"return companies ;return names of #1 ;return ranks of #1 ;return sales of #1 ;return #2 , #3 ;return #5 sorted by #4 descending","[""SELECT['companies']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['ranks of #REF', '#1']"", ""PROJECT['sales of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#5', '#4', 'descending']""]","['select', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_1997,Show the company name and the main industry for all companies whose headquarters are not from USA.,return companies ;return headquarters of  #1 ;return #2 not  from  USA ;return company names of  #3 ;return main industry of  #3,"[""SELECT['companies']"", ""PROJECT['headquarters of #REF', '#1']"", ""FILTER['#2', 'not from USA']"", ""PROJECT['company names of #REF', '#3']"", ""PROJECT['main industry of #REF', '#3']""]","['select', 'project', 'filter', 'project', 'project']",train
SPIDER_train_1998,What are the companies and main industries of all companies that are not headquartered in the United States?,"return companies  ;return #1 headquartered in the  United States ;return #1 besides #2 ;return the  main industries of #3 ;return #3 ,  #4","[""SELECT['companies']"", ""FILTER['#1', 'headquartered in the United States']"", ""DISCARD['#1', '#2']"", ""PROJECT['the main industries of #REF', '#3']"", ""UNION['#3', '#4']""]","['select', 'filter', 'discard', 'project', 'union']",train
SPIDER_train_1999,Show all company names and headquarters in the descending order of market value.,"return companies ;return names of #1 ;return headquarters of #1 ;return market values of #1 ;return #2 ,  #3 ; return #5 sorted by #4 in  descending order","[""SELECT['companies']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['headquarters of #REF', '#1']"", ""PROJECT['market values of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#5', '#4', 'in descending order']""]","['select', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_2,"List the creation year, name and budget of each department.","return departments ;return creation years of  #1 ;return names of  #1 ;return budgets of  #1 ;return #2 ,  #3 , #4","[""SELECT['departments']"", ""PROJECT['creation years of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['budgets of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_20,"What are the hosts of competitions whose theme is not ""Aliens""?",return competitions ;return themes of  #1 ;return #1 where #2 is  not  Aliens ;return hosts of  #3,"[""SELECT['competitions']"", ""PROJECT['themes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not Aliens']"", ""PROJECT['hosts of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_200,What are the dates that have an average sea level pressure between 30.3 and 31?,return dates ;return sea level pressures of #1 ;return the  average of #2 for each #1 ;return #1 where #3 is between 30.3 and  31,"[""SELECT['dates']"", ""PROJECT['sea level pressures of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is  betweenleftside 30.3']"", ""COMPARATIVE['#4', '#3', 'is  betweenrightside 31']""]","['select', 'project', 'group', 'comparative', 'comparative']",train
SPIDER_train_2000,What are the names and headquarters of all companies ordered by descending market value?,"return companies ;return names of  #1 ;return headquarters of  #1 ;return market values of  #1 ;return #2 ,  #3 ;return #5 sorted by descending #4","[""SELECT['companies']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['headquarters of #REF', '#1']"", ""PROJECT['market values of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#5', '#4', 'descending']""]","['select', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_2001,"Show minimum, maximum, and average market value for all companies.","return companies ;return market values of #1 ;return minimum of #2 ;return maximum of #2 ;return average of #2 ;return #3 ,  #4 ,   #5","[""SELECT['companies']"", ""PROJECT['market values of #REF', '#1']"", ""AGGREGATE['min', '#2']"", ""AGGREGATE['max', '#2']"", ""AGGREGATE['avg', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'project', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_2002,"What is the minimum, maximum, and average market value for every company?","return companies ;return market values of #1 ;return minimum of #2 ;return maximum of #2 ;return average of #2 ;return #3 , #4 ,  #5","[""SELECT['companies']"", ""PROJECT['market values of #REF', '#1']"", ""AGGREGATE['min', '#2']"", ""AGGREGATE['max', '#2']"", ""AGGREGATE['avg', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'project', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_2003,Show all main industry for all companies.,return all companies ;return all main industries of  #1,"[""SELECT['all companies']"", ""PROJECT['all main industries of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_2004,What are the different main industries for all companies?,return companies ;return different main industries of  #1,"[""SELECT['companies']"", ""PROJECT['different main industries of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_2005,List all headquarters and the number of companies in each headquarter.,"return headquarters ;return companies in #1 ;return number of  #2 for each  #1 ;return #1 ,  #3","[""SELECT['headquarters']"", ""PROJECT['companies in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_2006,"For each headquarter, what are the headquarter and how many companies are centered there?","return headquarters ;return companies centered in #1 ;return #1 ,  #2","[""SELECT['headquarters']"", ""PROJECT['companies centered in #REF', '#1']"", ""UNION['#1', '#2']""]","['select', 'project', 'union']",train
SPIDER_train_2007,Show all main industry and total market value in each industry.,return main industries ;return total market values of  #1,"[""SELECT['main industries']"", ""PROJECT['market values of #REF', '#1']"", ""GROUP['sum', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_2008,What are the main indstries and total market value for each industry?,"return main indstries ;return market values of #1 ;return sum of #2 for each #1 ;return #1 ,  #3","[""SELECT['main indstries']"", ""PROJECT['market values of #REF', '#1']"", ""GROUP['sum', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_2009,List the main industry with highest total market value and its number of companies.,"return industries ;return companies of  #1 ;return market values of  #2 ;return sum of  #3 for each  #1 ;return #1 where  #4 is highest ;return companies of  #5 ;return number of  #6 ;return #5 ,  #7","[""SELECT['industries']"", ""PROJECT['companies of #REF', '#1']"", ""PROJECT['market values of #REF', '#2']"", ""GROUP['sum', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']"", ""PROJECT['companies of #REF', '#5']"", ""AGGREGATE['count', '#6']"", ""UNION['#5', '#7']""]","['select', 'project', 'project', 'group', 'superlative', 'project', 'aggregate', 'union']",train
SPIDER_train_2010,"For each main industry, what is the total number of companies for the industry with the highest total market value?",return main industries ;return companies of #1 ;return market values of #2 ;return sum of #3 for each #1 ;return #1 where #4 is  highest ;return companies of #5 ;return number of  #6,"[""SELECT['main industries']"", ""PROJECT['companies of #REF', '#1']"", ""PROJECT['market values of #REF', '#2']"", ""GROUP['sum', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']"", ""PROJECT['companies of #REF', '#5']"", ""AGGREGATE['count', '#6']""]","['select', 'project', 'project', 'group', 'superlative', 'project', 'aggregate']",train
SPIDER_train_2011,Show headquarters with at least two companies in the banking industry.,return headquarters ;return companies in #1 ;return industries of #2 ;return #2 where #3 is  banking ;return number of  #4 for each #1 ;return #1 where #5 is  at least two,"[""SELECT['headquarters']"", ""PROJECT['companies in #REF', '#1']"", ""PROJECT['industries of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is banking']"", ""GROUP['count', '#4', '#1']"", ""COMPARATIVE['#1', '#5', 'is at least two']""]","['select', 'project', 'project', 'comparative', 'group', 'comparative']",train
SPIDER_train_2012,What are the headquarters with at least two companies in the banking industry?,return headquarters ;return companies in #1 ;return industries of #2 ;return #2 where #3 is  banking ;return number of #4 for each #1 ;return #1 where #5 is  at least two,"[""SELECT['headquarters']"", ""PROJECT['companies in #REF', '#1']"", ""PROJECT['industries of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is banking']"", ""GROUP['count', '#4', '#1']"", ""COMPARATIVE['#1', '#5', 'is at least two']""]","['select', 'project', 'project', 'comparative', 'group', 'comparative']",train
SPIDER_train_2013,"Show gas station id, location, and manager_name for all gas stations ordered by open year.","return gas stations ;return gas station ids of #1 ;return locations of #1 ;return manager_names of #1 ;return open years of #1 ;return #2 ,  #3 ,   #4 ;return #6 sorted by #5","[""SELECT['gas stations']"", ""PROJECT['gas station ids of #REF', '#1']"", ""PROJECT['locations of #REF', '#1']"", ""PROJECT['manager_names of #REF', '#1']"", ""PROJECT['open years of #REF', '#1']"", ""UNION['#2', '#3', '#4']"", ""SORT['#6', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_2014,"What are the gas station ids, locations, and manager names for the gas stations ordered by opening year?","return gas stations ;return ids of #1 ;return locations of #1 ;return managers of #1 ;return opening years of #1 ;return #2 ,  #3 ,   #4 ;return #6 sorted by #5","[""SELECT['gas stations']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['locations of #REF', '#1']"", ""PROJECT['managers of #REF', '#1']"", ""PROJECT['opening years of #REF', '#1']"", ""UNION['#2', '#3', '#4']"", ""SORT['#6', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_2015,How many gas station are opened between 2000 and 2005?,return gas stations ;return #1 that  opened between 2000 and 2005 ;return the  number of  #2,"[""SELECT['gas stations']"", ""FILTER['#1', 'that opened betweenleftside 2000']"", ""FILTER['#2', 'that opened betweenrightside 2005']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'filter', 'aggregate']",train
SPIDER_train_2016,What is the total number of gas stations that opened between 2000 and 2005?,return gas stations ;return #1 that  opened between 2000 to  2005 ;return the  number of  #2,"[""SELECT['gas stations']"", ""FILTER['#1', 'that opened between 2000 to 2005']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_2017,Show all locations and the number of gas stations in each location ordered by the count.,return locations ;return gas stations in #1 ;return number of #2 for each #1 ;return #3 sorted by #3,"[""SELECT['locations']"", ""PROJECT['gas stations in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SORT['#3', '#3']""]","['select', 'project', 'group', 'sort']",train
SPIDER_train_2018,"For each location, how many gas stations are there in order?",return locations ;return gas stations ;return number of #2 for each #1 ;return #1 sorted by #3 in order,"[""SELECT['locations']"", ""SELECT['gas stations']"", ""GROUP['count', '#2', '#1']"", ""SORT['#1', '#3', 'in order']""]","['select', 'select', 'group', 'sort']",train
SPIDER_train_2019,Show all headquarters with both a company in banking industry and a company in Oil and gas.,return headquarters ;return companies in #1 ;return industries of  #2 ;return #1 where #3 is  banking ;return #1 where #3 is  Oil and  gas ;return #1 of  both #4 and  #5,"[""SELECT['headquarters']"", ""PROJECT['companies in #REF', '#1']"", ""PROJECT['industries of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is banking']"", ""COMPARATIVE['#1', '#3', 'is Oil and gas']"", ""INTERSECTION['#1', '#4', '#5']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection']",train
SPIDER_train_202,"What are the days that had the smallest temperature range, and what was that range?","return days ;return the  temperature ranges of #1 ;return the  smallest of #2 ;return #1 where #2 is  #3 ;return #4 ,  #3","[""SELECT['days']"", ""PROJECT['the temperature ranges of #REF', '#1']"", ""AGGREGATE['min', '#2']"", ""COMPARATIVE['#1', '#2', 'is #3']"", ""UNION['#4', '#3']""]","['select', 'project', 'aggregate', 'comparative', 'union']",train
SPIDER_train_2020,What are the headquarters that have both a company in the banking and 'oil and gas' industries?,return headquarters ;return companies in #1 ;return industries of  #2 ;return #1 where #3 is  banking ;return #1 where #3 is  'oil and  gas ;return #1 of  both #4 and  #5,"[""SELECT['headquarters']"", ""PROJECT['companies in #REF', '#1']"", ""PROJECT['industries of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is banking']"", ""COMPARATIVE['#1', '#3', 'is oil and gas']"", ""INTERSECTION['#1', '#4', '#5']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection']",train
SPIDER_train_2021,Show all headquarters without a company in banking industry.,return companies ;return industries of #1 ;return #1 where #2 is  banking ;return the  headquarters of #3 ;return headquarters besides #4,"[""SELECT['companies']"", ""PROJECT['industries of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is banking']"", ""PROJECT['the headquarters of #REF', '#3']"", ""SELECT['headquarters']"", ""DISCARD['#5', '#4']""]","['select', 'project', 'comparative', 'project', 'select', 'discard']",train
SPIDER_train_2022,What are the headquarters without companies that are in the banking industry?,return headquarters ;return companies in #1 ;return industries of  #2 ;return #1 where #3 is  not  banking,"[""SELECT['headquarters']"", ""PROJECT['companies in #REF', '#1']"", ""PROJECT['industries of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is not banking']""]","['select', 'project', 'project', 'comparative']",train
SPIDER_train_2023,Show the company name with the number of gas station.,"return companies ;return names of  #1 ;return gas stations of  #1 ;return number of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['companies']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['gas stations of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_2024,"For each company id, what are the companies and how many gas stations does each one operate?","return company ids ;return companies of #1 ;return gas stations of #1 ;return number of  #3 for each #1 ;return #2 ,  #4","[""SELECT['company ids']"", ""PROJECT['companies of #REF', '#1']"", ""PROJECT['gas stations of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_2025,Show company name and main industry without a gas station.,"return companies ;return #1 without gas stations ;return name of  #2 ;return industry of  #2 ;return #3 ,  #4","[""SELECT['companies']"", ""FILTER['#1', 'without gas stations']"", ""PROJECT['name of #REF', '#2']"", ""PROJECT['industry of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_2026,What are the main industries of the companies without gas stations and what are the companies?,"return companies  ;return #1 without gas stations ;return industries of  #2 ;return #2 ,  #3","[""SELECT['companies']"", ""FILTER['#1', 'without gas stations']"", ""PROJECT['industries of #REF', '#2']"", ""UNION['#2', '#3']""]","['select', 'filter', 'project', 'union']",train
SPIDER_train_2027,Show the manager name for gas stations belonging to the ExxonMobil company.,return gas stations ;return #1 belonging to  ExxonMobil ;return managers of  #2,"[""SELECT['gas stations']"", ""FILTER['#1', 'belonging to ExxonMobil']"", ""PROJECT['managers of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2028,What are the names of the managers for gas stations that are operated by the ExxonMobil company?,return gas stations ;return #1 operated by ExxonMobil company ;return managers of  #2 ;return names of  #3,"[""SELECT['gas stations']"", ""FILTER['#1', 'operated by ExxonMobil company']"", ""PROJECT['managers of #REF', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_2029,Show all locations where a gas station for company with market value greater than 100 is located.,return companies ;return #1 with market value greater than  100 ;return gas stations of #2 ;return locations of  #3,"[""SELECT['companies']"", ""FILTER['#1', 'with market value greater than 100']"", ""PROJECT['gas stations of #REF', '#2']"", ""PROJECT['locations of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_203,What are the id and name of the stations that have ever had more than 12 bikes available?,"return stations ;return bikes available of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  higher than 12 ;return id of #4 ;return name of #4 ;return #5 ,  #6","[""SELECT['stations']"", ""PROJECT['bikes available of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 12']"", ""PROJECT['id of #REF', '#4']"", ""PROJECT['name of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_2030,What are the locations that have gas stations owned by a company with a market value greater than 100?,return locations ;return gas stations in #1 ;return companies of #2 ;return market values of #3 ;return #1 where #4 is  higher than 100,"[""SELECT['locations']"", ""PROJECT['gas stations in #REF', '#1']"", ""PROJECT['companies of #REF', '#2']"", ""PROJECT['market values of #REF', '#3']"", ""COMPARATIVE['#1', '#4', 'is higher than 100']""]","['select', 'project', 'project', 'project', 'comparative']",train
SPIDER_train_2031,Show the manager name with most number of gas stations opened after 2000.,return gas stations ;return #1 opened after 2000 ;return managers ;return number of  #2 for each  #3 ;return #3 where  #4 is highest,"[""SELECT['gas stations']"", ""FILTER['#1', 'opened after 2000']"", ""SELECT['managers']"", ""GROUP['count', '#2', '#3']"", ""SUPERLATIVE['max', '#3', '#4']""]","['select', 'filter', 'select', 'group', 'superlative']",train
SPIDER_train_2032,What is the name of the manager with the most gas stations that opened after 2000?,return managers ;return gas stations of #1 ;return #2 that  opened after 2000 ;return number of #3 for each #1 ;return #1 where #4 is  highest ;return name of #5,"[""SELECT['managers']"", ""PROJECT['gas stations of #REF', '#1']"", ""FILTER['#2', 'that opened after 2000']"", ""GROUP['count', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']"", ""PROJECT['name of #REF', '#5']""]","['select', 'project', 'filter', 'group', 'superlative', 'project']",train
SPIDER_train_2033,order all gas station locations by the opening year.,return gas stations ;return locations of  #1 ;return opening years of  #1 ;return #2 sorted by #3,"[""SELECT['gas stations']"", ""PROJECT['locations of #REF', '#1']"", ""PROJECT['opening years of #REF', '#1']"", ""SORT['#2', '#3']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_2034,What are the locations of all the gas stations ordered by opening year?,return gas stations ;return locations of  #1 ;return opening years of  #1 ;return #2 sorted by #3,"[""SELECT['gas stations']"", ""PROJECT['locations of #REF', '#1']"", ""PROJECT['opening years of #REF', '#1']"", ""SORT['#2', '#3']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_2035,"find the rank, company names, market values of the companies in the banking industry order by their sales and profits in billion.","return companies ;return #1 in  the  banking industry ;return ranks of #2 ;return company names of #2 ;return market values of #2 ;return sales of #2 ;return profits of #2 ;return division of #6 and a billion ;return division of #7 and  a billion ;return #3 ,  #4 ,   #5 ;return #8 , #9 ;return #10 sorted by #11","[""SELECT['companies']"", ""FILTER['#1', 'in the banking industry']"", ""PROJECT['ranks of #REF', '#2']"", ""PROJECT['company names of #REF', '#2']"", ""PROJECT['market values of #REF', '#2']"", ""PROJECT['sales of #REF', '#2']"", ""PROJECT['profits of #REF', '#2']"", ""PROJECT['division of #REF and a billion', '#6']"", ""PROJECT['division of #REF and a billion', '#7']"", ""UNION['#3', '#4', '#5']"", ""UNION['#8', '#9']"", ""SORT['#10', '#11']""]","['select', 'filter', 'project', 'project', 'project', 'project', 'project', 'project', 'project', 'union', 'union', 'sort']",train
SPIDER_train_2036,"What is the rank, company, and market value of every comapny in the banking industry ordered by sales and profits?","return company ;return #1 that  is  in the  banking industry ;return rank of #2 ;return market value of #2 ;return sales of #2 ;return profits of #2 ;return #3 ,  #2 ,   #4 ;return #5 ,  #6 ;return #7 ordered by #8","[""SELECT['company']"", ""FILTER['#1', 'that is in the banking industry']"", ""PROJECT['rank of #REF', '#2']"", ""PROJECT['market value of #REF', '#2']"", ""PROJECT['sales of #REF', '#2']"", ""PROJECT['profits of #REF', '#2']"", ""UNION['#3', '#2', '#4']"", ""UNION['#5', '#6']"", ""SORT['#7', '#8']""]","['select', 'filter', 'project', 'project', 'project', 'project', 'union', 'union', 'sort']",train
SPIDER_train_2037,find the location and Representative name of the gas stations owned by the companies with top 3 Asset amounts.,"return companies ;return Asset amounts of #1 ;return #1 where #2 are in the   top 3 ;return gas stations owned by #3 ;return locations of #4 ;return Representative of #4 ;return name of #6 ;return #5 ,  #7","[""SELECT['companies']"", ""PROJECT['Asset amounts of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'are in the top 3']"", ""PROJECT['gas stations owned by #REF', '#3']"", ""PROJECT['locations of #REF', '#4']"", ""PROJECT['Representative of #REF', '#4']"", ""PROJECT['name of #REF', '#6']"", ""UNION['#5', '#7']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_2038,What are the locations and representatives' names of the gas stations owned by the companies with the 3 largest amounts of assets?,"return companies ;return amounts of assets of  #1 ;return the  3 highest of #2 ;return #1 where #2 is equal to any of #3 ;return gas stations owned by #4 ;return locations of #5 ;return representatives of #5 ;return names of #7 ;return #6 ,  #8","[""SELECT['companies']"", ""PROJECT['amounts of assets of #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""COMPARATIVE['#1', '#2', 'is equal to any of #3']"", ""PROJECT['gas stations owned by #REF', '#4']"", ""PROJECT['locations of #REF', '#5']"", ""PROJECT['representatives of #REF', '#5']"", ""PROJECT['names of #REF', '#7']"", ""UNION['#6', '#8']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_2039,How many regions do we have?,return regions ;return number of  #1,"[""SELECT['regions']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_204,What are the different ids and names of the stations that have had more than 12 bikes available?,"return stations ;return bikes available in #1 ;return #1 where #2 is  higher than 12 ;return different ids of  #3 ;return different names of  #3 ;return #4 ,  #5","[""SELECT['stations']"", ""PROJECT['bikes available in #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 12']"", ""PROJECT['different ids of #REF', '#3']"", ""PROJECT['different names of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_2040,Count the number of regions.,return regions ;return number of #1,"[""SELECT['regions']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_2041,Show all distinct region names ordered by their labels.,return distinct regions ;return labels of  #1 ;return names of  #1 ;return #3 ordered by #2,"[""SELECT['distinct regions']"", ""PROJECT['labels of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""SORT['#3', '#2']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_2042,"What are the different region names, ordered by labels?",return regions ;return different names of  #1 ; return labels of #1; return #2 ordered by #3,"[""SELECT['regions']"", ""PROJECT['different names of #REF', '#1']"", ""PROJECT['labels of #REF', '#1']"", ""SORT['#2', '#3']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_2043,How many parties do we have?,return parties ;return number of #1,"[""SELECT['parties']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_2044,Count the number of different parties.,return parties ;return number of different #1,"[""SELECT['parties']"", ""PROJECT['different #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_2045,"Show the ministers and the time they took and left office, listed by the time they left office.","return the   ministers ;return the   times #1 took office ;return the   times #1 left office ;return #1 ,  #2 ,   #3 ;return #4 sorted by #3","[""SELECT['the ministers']"", ""PROJECT['the times #REF took office', '#1']"", ""PROJECT['the times #REF left office', '#1']"", ""UNION['#1', '#2', '#3']"", ""SORT['#4', '#3']""]","['select', 'project', 'project', 'union', 'sort']",train
SPIDER_train_2046,"Who are the ministers, when did they take office, and when did they leave office, ordered by when they left office?","return ministers ;return when   #1 take office   ;return when   #1 leave office   ;return #1 ,  #2 ,   #3 ;return #4 sorted by #3","[""SELECT['ministers']"", ""PROJECT['when #REF take office', '#1']"", ""PROJECT['when #REF leave office', '#1']"", ""UNION['#1', '#2', '#3']"", ""SORT['#4', '#3']""]","['select', 'project', 'project', 'union', 'sort']",train
SPIDER_train_2047,Show the minister who took office after 1961 or before 1959.,return minister ;return #1 who  took office after 1961 ;return #1 who  took office before 1959 ;return #2 or #3,"[""SELECT['minister']"", ""FILTER['#1', 'who took office after 1961']"", ""FILTER['#1', 'who took office before 1959']"", ""UNION['#2', '#3']""]","['select', 'filter', 'filter', 'union']",train
SPIDER_train_2048,Who are the ministers who took office after 1961 or before 1959?,return ministers ;return #1 who  took office after 1961 ;return #1 who  took office before 1959 ;return #2 or  #3,"[""SELECT['ministers']"", ""FILTER['#1', 'who took office after 1961']"", ""FILTER['#1', 'who took office before 1959']"", ""UNION['#2', '#3']""]","['select', 'filter', 'filter', 'union']",train
SPIDER_train_2049,Show all ministers who do not belong to Progress Party.,return ministers ;return Party of  #1 ;return #1 where #2 is  not  Progress Party,"[""SELECT['ministers']"", ""PROJECT['Party of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not Progress Party']""]","['select', 'project', 'comparative']",train
SPIDER_train_205,Give me the zip code where the average mean humidity is below 70 and at least 100 trips took place.,return zip codes ;return average mean humidity of  #1 ;return #1 where  #2 is  lower than 70 ;return trips that  took place in #1 ;return number of  #4 for each #1 ;return #1 where  #5 is  at least 100 ;return #1 of  both #3 and #6,"[""SELECT['zip codes']"", ""PROJECT['mean humidity of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is lower than 70']"", ""PROJECT['trips that took place in #REF', '#1']"", ""GROUP['count', '#5', '#1']"", ""COMPARATIVE['#1', '#6', 'is at least 100']"", ""INTERSECTION['#1', '#4', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'group', 'comparative', 'intersection']",train
SPIDER_train_2050,Which ministers are not a part of the Progress Party?,return ministers ;return Party of #1 ;return #1 where #2 is the  Progress Party ;return #1 besides  #3,"[""SELECT['ministers']"", ""PROJECT['Party of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the Progress Party']"", ""DISCARD['#1', '#3']""]","['select', 'project', 'comparative', 'discard']",train
SPIDER_train_2051,Show all ministers and parties they belong to in descending order of the time they took office.,"return ministers ;return parties #1 belong to ;return time #1 took office ;return #1 ,  #2 ;return #4 sorted by #3 in descending order","[""SELECT['ministers']"", ""PROJECT['parties #REF belong to', '#1']"", ""PROJECT['time #REF took office', '#1']"", ""UNION['#1', '#2']"", ""SORT['#4', '#3', 'in descending order']""]","['select', 'project', 'project', 'union', 'sort']",train
SPIDER_train_2052,"Who are the ministers and what parties do they belong to, listed descending by the times they took office?","return ministers ;return parties of  #1 ;return times #1 took office ;return #1 ,  #2 ;return #4 sorted by #3 descending","[""SELECT['ministers']"", ""PROJECT['parties of #REF', '#1']"", ""PROJECT['times #REF took office', '#1']"", ""UNION['#1', '#2']"", ""SORT['#4', '#3', 'descending']""]","['select', 'project', 'project', 'union', 'sort']",train
SPIDER_train_2053,Return the minister who left office at the latest time.,return ministers ;return time that #1 left office ;return #1 where #2 is highest,"[""SELECT['ministers']"", ""PROJECT['time that #REF left office', '#1']"", ""SUPERLATIVE['max', '#1', '#2']""]","['select', 'project', 'superlative']",train
SPIDER_train_2054,Which minister left office the latest?,return ministers ;return when  #1 left office ;return #1 where #2 is  latest,"[""SELECT['ministers']"", ""PROJECT['when #REF left office', '#1']"", ""COMPARATIVE['#1', '#2', 'is latest']""]","['select', 'project', 'comparative']",train
SPIDER_train_2055,List member names and their party names.,"return members ;return parties of  #1 ;return names of #1 ;return names of #2 ;return #3 , #4","[""SELECT['members']"", ""PROJECT['parties of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['names of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_2056,What are the names of members and their corresponding parties?,"return members ;return names of  #1 ;return parties of  #1 ;return #2 ,  #3","[""SELECT['members']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['parties of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_2057,Show all party names and the number of members in each party.,"return parties ;return names of #1 ;return members of #1 ;return number of #3 for each #1 ;return #2 , #4","[""SELECT['parties']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['members of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_2058,How many members are in each party?,return parties ;return members of  #1 ;return number of #2 for each #1,"[""SELECT['parties']"", ""PROJECT['members of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_2059,What is the name of party with most number of members?,return parties ;return members of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest ;return name of #4,"[""SELECT['parties']"", ""PROJECT['members of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_206,What are the zip codes that have an average mean humidity below 70 and had at least 100 trips come through there?,return zip codes ;return the  average mean humidities of #1 ;return #1 where #2 is  below 70 ;return the  trips that  come through #1 ;return the  number of  #4 for each #1 ;return #1 where #5 is  at least 100 ;return #1 in both #3 and #6,"[""SELECT['zip codes']"", ""PROJECT['mean humidities of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is below 70']"", ""PROJECT['the trips that come through #REF', '#1']"", ""GROUP['count', '#5', '#1']"", ""COMPARATIVE['#1', '#6', 'is at least 100']"", ""INTERSECTION['#1', '#4', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'group', 'comparative', 'intersection']",train
SPIDER_train_2060,Return the name of the party with the most members.,return parties ;return members of  #1 ;return the number of #2 for each #1 ;return #1 where #3 is highest,"[""SELECT['parties']"", ""PROJECT['members of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_2061,Show all party names and their region names.,"return parties ;return names  of  #1 ;return regions of  #1 ;return names  of  #3 ;return #2 ,   #4","[""SELECT['parties']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['regions of #REF', '#1']"", ""PROJECT['names of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_2062,What are the names of parties and their respective regions?,"return parties ;return names of  #1 ;return regions of  #1 ;return #2 ,  #3","[""SELECT['parties']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['regions of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_2063,Show names of parties that does not have any members.,return parties ;return #1 that  do not  have  any members ;return names of  #2,"[""SELECT['parties']"", ""FILTER['#1', 'that do not have any members']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2064,What are the names of parties that have no members?,return parties ;return members of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  zero ;return the  names of #4,"[""SELECT['parties']"", ""PROJECT['members of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is zero']"", ""PROJECT['the names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_2065,Show the member names which are in both the party with id 3 and the party with id 1.,return members ;return parties of  #1 ;return id of  #2 ;return #1 where #3 is  3 ;return #1 where #3 is  1 ;return #1 of  both #4 and  #5 ;return names of  #6,"[""SELECT['members']"", ""PROJECT['parties of #REF', '#1']"", ""PROJECT['id of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is 3']"", ""COMPARATIVE['#1', '#3', 'is 1']"", ""INTERSECTION['#1', '#4', '#5']"", ""PROJECT['names of #REF', '#6']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_2066,Which member names are shared among members in the party with the id 3 and the party with the id 1?,return parties ;return ids of #1 ;return #1 where #2 is  3 ;return #1 where #2 is  1 ;return members in #3 ;return members in #4  ;return members in #1 ;return names of #5 ;return names of #6 ;return names of #7 ;return #10 of both #8 and #9,"[""SELECT['parties']"", ""PROJECT['ids of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 3']"", ""COMPARATIVE['#1', '#2', 'is 1']"", ""PROJECT['members in #REF', '#3']"", ""PROJECT['members in #REF', '#4']"", ""PROJECT['members in #REF', '#1']"", ""PROJECT['names of #REF', '#5']"", ""PROJECT['names of #REF', '#6']"", ""PROJECT['names of #REF', '#7']"", ""INTERSECTION['#10', '#8', '#9']""]","['select', 'project', 'comparative', 'comparative', 'project', 'project', 'project', 'project', 'project', 'project', 'intersection']",train
SPIDER_train_2067,Show member names that are not in the Progress Party.,return members ;return Party of  #1 ;return #1 where #2 is  not  Progress Party ;return names of  #3,"[""SELECT['members']"", ""PROJECT['Party of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not Progress Party']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_2068,Which member names corresponding to members who are not in the Progress Party?,return the  Progress Party ;return members of #1 ;return members besides  #2 ;return names of #3,"[""SELECT['the Progress Party']"", ""PROJECT['members of #REF', '#1']"", ""SELECT['members']"", ""DISCARD['#3', '#2']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'select', 'discard', 'project']",train
SPIDER_train_2069,How many party events do we have?,return party events ;return number of  #1,"[""SELECT['party events']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_207,What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?,return stations ;return #1 that are located in  Palo Alto city ;return trips of #2 ;return #3 where #2 is the  ending point ;return number of  #4 for each #2 ;return #2 where #5 is lower than 100,"[""SELECT['stations']"", ""FILTER['#1', 'that are located in Palo Alto city']"", ""PROJECT['trips of #REF', '#2']"", ""COMPARATIVE['#3', '#2', 'is the ending point']"", ""GROUP['count', '#4', '#2']"", ""COMPARATIVE['#2', '#5', 'is lower than 100']""]","['select', 'filter', 'project', 'comparative', 'group', 'comparative']",train
SPIDER_train_2070,Count the number of party events.,return party ;return events in #1 ;return the number of  #2,"[""SELECT['party']"", ""PROJECT['events in #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_2071,Show party names and the number of events for each party.,"return party ;return events of #1 ;return number of  #2 for each #1 ;return names of #1 ;return #3 ,  #4","[""SELECT['party']"", ""PROJECT['events of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['names of #REF', '#1']"", ""UNION['#3', '#4']""]","['select', 'project', 'group', 'project', 'union']",train
SPIDER_train_2072,How many events are there for each party?,return parties ;return events of  #1 ;return number of #2 for each #1,"[""SELECT['parties']"", ""PROJECT['events of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_2073,Show all member names who are not in charge of any event.,return members ;return #1 who  are in  charge of any event ;return #1 besides  #2 ;return names of #3,"[""SELECT['members']"", ""FILTER['#1', 'who are in charge of any event']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_2074,What are the names of members who are not in charge of any events?,return members ;return #1 in charge of  event ;return #1 besides  #2 ;return names of  #3,"[""SELECT['members']"", ""FILTER['#1', 'in charge of event']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_2075,What are the names of parties with at least 2 events?,return parties ;return events of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least 2 ;return names of  #4,"[""SELECT['parties']"", ""PROJECT['events of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 2']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_2076,Return the names of parties that have two or more events.,return parties ;return events of #1 ;return number of  #2 for each #1 ;return #1 where #3 is at least two ;return names of #4,"[""SELECT['parties']"", ""PROJECT['events of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_2077,What is the name of member in charge of greatest number of events?,return members ;return events #1 is  in charge of  ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return name of  #4,"[""SELECT['members']"", ""PROJECT['events #REF is in charge of', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_2078,Return the name of the member who is in charge of the most events.,return members ;return events #1 is  in charge of ;return number of #2 for each #1 ;return #1 where #3 is  highest ;return name of #4,"[""SELECT['members']"", ""PROJECT['events #REF is in charge of', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_2079,find the event names that have more than 2 records.,return events ;return records of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  more than 2 ;return names of  #4,"[""SELECT['events']"", ""PROJECT['records of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than 2']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_208,What are the names of the stations that are located in Palo Alto but have never been the ending point of the trips,return stations ;return #1 located in Palo Alto ;return #2 that  have  never been the  ending point of  the   trips ;return names of  #3,"[""SELECT['stations']"", ""FILTER['#1', 'located in Palo Alto']"", ""FILTER['#2', 'that have never been the ending point of the trips']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_2080,Which event names were used more than twice for party events?,return party events ;return event names of #1 ;return number of  #1 for each #2 ;return #2 where #3 is  more than  two,"[""SELECT['party events']"", ""PROJECT['event names of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""COMPARATIVE['#2', '#3', 'is more than two']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_2081,How many Annual Meeting events happened in the United Kingdom region?,return Annual Meeting events ;return #1 in the  United Kingdom region ;return the  number of  #2,"[""SELECT['Annual Meeting events']"", ""FILTER['#1', 'in the United Kingdom region']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_2082,Count the number of Annual Meeting events that took place in the region of the United Kingdom.,return Annual Meeting events ;return #1 where  region is  United Kingdom ;return number of #2,"[""SELECT['Annual Meeting events']"", ""FILTER['#1', 'where region is United Kingdom']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_2083,How many pilots are there?,return pilots ;return number of  #1,"[""SELECT['pilots']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_2084,List the names of pilots in ascending order of rank.,return pilots ;return names of  #1 ;return ranks of  #1 ;return #2 sorted by #3 in ascending order,"[""SELECT['pilots']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['ranks of #REF', '#1']"", ""SORT['#2', '#3', 'in ascending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_2085,What are the positions and teams of pilots?,"return pilots ;return positions of  #1 ;return teams of  #1 ;return #2 ,  #3","[""SELECT['pilots']"", ""PROJECT['positions of #REF', '#1']"", ""PROJECT['teams of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_2086,List the distinct positions of pilots older than 30.,return pilots ;return #1 older than  30 ;return positions of  #2 ;return distinct #3,"[""SELECT['pilots']"", ""FILTER['#1', 'older than 30']"", ""PROJECT['positions of #REF', '#2']"", ""PROJECT['distinct #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_2087,"Show the names of pilots from team ""Bradley"" or ""Fordham"".",return pilots ;return teams of #1 ;return #1 where #2 is Bradley ;return #1 where #2 is Fordham ;return #3 or  #4 ;return names of #5,"[""SELECT['pilots']"", ""PROJECT['teams of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Bradley']"", ""COMPARATIVE['#1', '#2', 'is Fordham']"", ""UNION['#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_2088,What is the joined year of the pilot of the highest rank?,return pilots ;return ranks of #1 ;return #1 where #2 is  highest ;return joined year of #3,"[""SELECT['pilots']"", ""PROJECT['ranks of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['joined year of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_2089,What are the different nationalities of pilots? Show each nationality and the number of pilots of each nationality.,"return pilots  ;return number of  #1 for each  nationality  ;return nationality  ,  #2","[""SELECT['pilots']"", ""PROJECT['nationality', '#1']"", ""GROUP['count', '#1', '#2']"", ""PROJECT['nationality , #REF', '#3']""]","['select', 'project', 'group', 'project']",train
SPIDER_train_209,How many trips started from Mountain View city and ended at Palo Alto city?,return trips ;return #1 that  started from Mountain View city and ended at most Palo Alto city  ;return number of  #2,"[""SELECT['trips']"", ""FILTER['#1', 'that started from Mountain View city and ended at most Palo Alto city']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_2090,Show the most common nationality of pilots.,return pilots ;return nationalities of #1 ;return number of  #1 for each #2 ;return #2 where #3 is  most,"[""SELECT['pilots']"", ""PROJECT['nationalities of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""SUPERLATIVE['max', '#2', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_2091,Show the pilot positions that have both pilots joining after year 2005 and pilots joining before 2000.,return pilots ;return #1 joining after 2005 ;return #1 joining before 2000 ;return pilot positions of #1 ;reutrn #4 of both #2 and #3,"[""SELECT['pilots']"", ""FILTER['#1', 'joining after 2005']"", ""FILTER['#1', 'joining before 2000']"", ""PROJECT['pilot positions of #REF', '#1']"", ""INTERSECTION['#4', '#2', '#3']""]","['select', 'filter', 'filter', 'project', 'intersection']",train
SPIDER_train_2092,Show the names of pilots and models of aircrafts they have flied with.,return pilots ;return aircrafts that  #1 flied ;return models of  #2 ;return names of  #1 ;return #3 or #4,"[""SELECT['pilots']"", ""PROJECT['aircrafts that #REF flied', '#1']"", ""PROJECT['models of #REF', '#2']"", ""PROJECT['names of #REF', '#1']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_2093,Show the names of pilots and fleet series of the aircrafts they have flied with in ascending order of the rank of the pilot.,"return pilots ;return names of  #1 ;return aircrafts #1 have  flied ;return fleet series of  #3 ;return ranks of  #1 ;return #2 ,  #4 ;return #6 sorted by #5 in ascending order","[""SELECT['pilots']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['aircrafts #REF have flied', '#1']"", ""PROJECT['fleet series of #REF', '#3']"", ""PROJECT['ranks of #REF', '#1']"", ""UNION['#2', '#4']"", ""SORT['#6', '#5', 'in ascending order']""]","['select', 'project', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_2094,Show the fleet series of the aircrafts flied by pilots younger than 34,return pilots ;return #1 younger than  34 ;return aircrafts flied by #2 ;return fleet series of #3,"[""SELECT['pilots']"", ""FILTER['#1', 'younger than 34']"", ""PROJECT['aircrafts flied by #REF', '#2']"", ""PROJECT['fleet series of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_2095,Show the names of pilots and the number of records they have.,"return pilots ;return names of  #1 ;return records of  #1 ;return number of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['pilots']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['records of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_2096,Show names of pilots that have more than one record.,return pilots ;return records of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  higher than one ;return names of #4,"[""SELECT['pilots']"", ""PROJECT['records of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than one']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_2097,List the names of pilots that do not have any record.,return pilots ;return #1 with  records ;return #1 besides #2 ;return names of  #3,"[""SELECT['pilots']"", ""FILTER['#1', 'with records']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_2098,What document status codes do we have?,return documents ;return status codes of  #1,"[""SELECT['documents']"", ""PROJECT['status codes of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_2099,What is the description of document status code 'working'?,return document status codes ;return descriptions of  #1 ;return #2 where #1 is  'working,"[""SELECT['document status codes']"", ""PROJECT['descriptions of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is working']""]","['select', 'project', 'comparative']",train
SPIDER_train_21,Return the hosts of competitions for which the theme is not Aliens?,return competitions ;return themes of  #1 ;return #1 where  #2 is not  Aliens ;return hosts of  #3,"[""SELECT['competitions']"", ""PROJECT['themes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not Aliens']"", ""PROJECT['hosts of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_210,How many trips stated from  a station in Mountain View and ended at one in Palo Alto?,return trips ;return #1 stated from  a station in Mountain View and  ended at one in  Palo Alto ;return number of  #2,"[""SELECT['trips']"", ""FILTER['#1', 'stated from a station in Mountain View and ended at one in Palo Alto']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_2100,What document type codes do we have?,return documents ;return type codes of  #1,"[""SELECT['documents']"", ""PROJECT['type codes of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_2101,What is the description of document type 'Paper'?,return document types ;return descriptions of  #1 ;return #2 where #1 is  'Paper,"[""SELECT['document types']"", ""PROJECT['descriptions of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Paper']""]","['select', 'project', 'comparative']",train
SPIDER_train_2102,What are the shipping agent names?,return names ;return #1 that  are  shipping agents,"[""SELECT['names']"", ""FILTER['#1', 'that are shipping agents']""]","['select', 'filter']",train
SPIDER_train_2103,What is the shipping agent code of shipping agent UPS?,return the  shipping agent  UPS ;return the  shipping agent  code of #1,"[""SELECT['the shipping agent UPS']"", ""PROJECT['the shipping agent code of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_2104,What are all role codes?,return role codes,"[""SELECT['role codes']""]",['select'],train
SPIDER_train_2105,What is the description of role code ED?,return role code ED ;return description of #1,"[""SELECT['role code ED']"", ""PROJECT['description of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_2106,How many employees do we have?,return employees ;return number of  #1,"[""SELECT['employees']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_2107,What is the role of the employee named Koby?,return employee ;return #1 named Koby ;return role of  #2,"[""SELECT['employee']"", ""FILTER['#1', 'named Koby']"", ""PROJECT['role of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2108,List all document ids and receipt dates of documents.,"return documents ;return document ids of  #1 ;return receipt dates of  #1 ;return #2 ,  #3","[""SELECT['documents']"", ""PROJECT['document ids of #REF', '#1']"", ""PROJECT['receipt dates of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_2109,"How many employees does each role have? List role description, id and number of employees.","return roles ;return employees of  #1 ;return number of #2 for each #1 ;return role descriptions of  #1 ;return ids of  #1 ;return #4 ,   #5 , #3","[""SELECT['roles']"", ""PROJECT['employees of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['role descriptions of #REF', '#1']"", ""PROJECT['ids of #REF', '#1']"", ""UNION['#4', '#5', '#3']""]","['select', 'project', 'group', 'project', 'project', 'union']",train
SPIDER_train_211,What is the average latitude and longitude of the starting points of all trips?,"return trips ;return starting points of #1 ;return latitudes of #2 ;return longitudes of #2 ;return average of #3 ;return average of #4 ;return #5 ,  #6","[""SELECT['trips']"", ""PROJECT['starting points of #REF', '#1']"", ""PROJECT['latitudes of #REF', '#2']"", ""PROJECT['longitudes of #REF', '#2']"", ""AGGREGATE['avg', '#3']"", ""AGGREGATE['avg', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'project', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_2110,List roles that have more than one employee. List the role description and number of employees.,"return roles ;return employees in #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is higher than one ;return role description of  #4 ;return employees in #4 ;return number of  #6 for each  #1 ;return #5 ,  #7","[""SELECT['roles']"", ""PROJECT['employees in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than one']"", ""PROJECT['role description of #REF', '#4']"", ""PROJECT['employees in #REF', '#4']"", ""GROUP['count', '#6', '#1']"", ""UNION['#5', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'group', 'union']",train
SPIDER_train_2111,What is the document status description of the document with id 1?,return documents ;return ids of  #1 ;return #1 where #2 is  1 ;return document status of  #3 ;return description of  #4,"[""SELECT['documents']"", ""PROJECT['ids of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 1']"", ""PROJECT['document status of #REF', '#3']"", ""PROJECT['description of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_2112,How many documents have the status code done?,return documents ;return status codes of  #1 ;return #1 where  #2 is  done ;return number of #3,"[""SELECT['documents']"", ""PROJECT['status codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is done']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_2113,List the document type code for the document with the id 2.,return documents ;return ids of  #1 ;return #1 where  #2 is 2 ;return document type code of  #3,"[""SELECT['documents']"", ""PROJECT['ids of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 2']"", ""PROJECT['document type code of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_2114,List the document ids for any documents with the status code done and the type code paper.,return documents ;return status codes of  #1 ;return #1 where  #2 is done ;return type codes of  #1 ;return #1 where  #4 is paper ;return #1 of  both #3 and #5 ;return document ids of  #6,"[""SELECT['documents']"", ""PROJECT['status codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is done']"", ""PROJECT['type codes of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is paper']"", ""INTERSECTION['#1', '#3', '#5']"", ""PROJECT['document ids of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'comparative', 'intersection', 'project']",train
SPIDER_train_2115,What is the name of the shipping agent of the document with id 2?,return documents ;return #1 with  id 2 ;return the   shipping agent of #2 ;return the   name of #3,"[""SELECT['documents']"", ""FILTER['#1', 'with id 2']"", ""PROJECT['the shipping agent of #REF', '#2']"", ""PROJECT['the name of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_2116,How many documents were shipped by USPS?,return documents ;return #1 shipped by USPS ;return number of #2,"[""SELECT['documents']"", ""FILTER['#1', 'shipped by USPS']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_2117,Which shipping agent shipped the most documents? List the shipping agent name and the number of documents.,"return shipping agent  ;return documents  shipped ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return highest of  #3 ;return names of  #4 ;return #6 ,  #5","[""SELECT['shipping agent']"", ""SELECT['documents shipped']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""AGGREGATE['max', '#3']"", ""PROJECT['names of #REF', '#4']"", ""UNION['#6', '#5']""]","['select', 'select', 'group', 'superlative', 'aggregate', 'project', 'union']",train
SPIDER_train_2118,What is the receipt date of the document with id 3?,return documents ;return ids of #1 ;return #1 where #2 is  3 ;return the  receipt date of #3,"[""SELECT['documents']"", ""PROJECT['ids of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 3']"", ""PROJECT['the receipt date of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_2119,What address was the document with id 4 mailed to?,return documents ;return id of  #1 ;return #1 where #2 is  4 ;return address #3 was mailed to,"[""SELECT['documents']"", ""PROJECT['id of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 4']"", ""PROJECT['address #REF was mailed to', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_212,What is the average latitude and longitude of all starting stations for the trips?,"return trips ;return starting stations for #1 ;return latitudes of  #2 ;return average of  #3 ;return longitudes of  #2 ;return average of  #5 ;return #4 ,  #6","[""SELECT['trips']"", ""PROJECT['starting stations for #REF', '#1']"", ""PROJECT['latitudes of #REF', '#2']"", ""AGGREGATE['avg', '#3']"", ""PROJECT['longitudes of #REF', '#2']"", ""AGGREGATE['avg', '#5']"", ""UNION['#4', '#6']""]","['select', 'project', 'project', 'aggregate', 'project', 'aggregate', 'union']",train
SPIDER_train_2120,What is the mail date of the document with id 7?,return documents ;return ids of  #1 ;return #1 where #2 is  7 ;return mail date of  #3,"[""SELECT['documents']"", ""PROJECT['ids of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 7']"", ""PROJECT['mail date of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_2121,"List the document ids of documents with the status done and type Paper, which not shipped by the shipping agent named USPS.",return documents ;return statuses of #1 ;return type of #1 ;return #1 where #2 is  done ;return #1 where #3 is  Paper ;return #1 in both #4 and #5 ;return shipping agents that  shipped #6 ;return #6 where #7 is  named USPS ;return #6 besides #8 ;return the   document ids of #9,"[""SELECT['documents']"", ""PROJECT['statuses of #REF', '#1']"", ""PROJECT['type of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is done']"", ""COMPARATIVE['#1', '#3', 'is Paper']"", ""INTERSECTION['#1', '#4', '#5']"", ""PROJECT['shipping agents that shipped #REF', '#6']"", ""COMPARATIVE['#6', '#7', 'is named USPS']"", ""DISCARD['#6', '#8']"", ""PROJECT['the document ids of #REF', '#9']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection', 'project', 'comparative', 'discard', 'project']",train
SPIDER_train_2122,List document id of documents status is done and document type is Paper and the document is shipped by shipping agent named USPS.,return documents ;return status of #1 ;return #1 where #2 is done ;return type of #1 ;return #3 where #4 is Paper ;return shipping agent that shipped #1 ;return #5 where #6 is named USPS ;return id of #7,"[""SELECT['documents']"", ""PROJECT['status of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is done']"", ""PROJECT['type of #REF', '#1']"", ""COMPARATIVE['#3', '#4', 'is Paper']"", ""PROJECT['shipping agent that shipped #REF', '#1']"", ""COMPARATIVE['#5', '#6', 'is named USPS']"", ""PROJECT['id of #REF', '#7']""]","['select', 'project', 'comparative', 'project', 'comparative', 'project', 'comparative', 'project']",train
SPIDER_train_2123,What is draft detail of the document with id 7?,return documents ;return ids of #1 ;return #1 where #2 is  7 ;return draft detail of #3,"[""SELECT['documents']"", ""PROJECT['ids of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 7']"", ""PROJECT['draft detail of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_2124,How many draft copies does the document with id 2 have?,return documents ;return id of  #1 ;return #1 where  #2 is 2 ;return draft copies of  #3 ;return number of  #4,"[""SELECT['documents']"", ""PROJECT['id of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 2']"", ""PROJECT['draft copies of #REF', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_2125,Which document has the most draft copies? List its document id and number of draft copies.,"return documents ;return draft  copies  of #1 ;return number of  #2 for each #1 ;return the  highest of #3 ;return #1 where #3 is equal to #4 ;return document  id of #5 ;return #6 ,  #4","[""SELECT['documents']"", ""PROJECT['draft copies of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['max', '#3']"", ""COMPARATIVE['#1', '#3', 'is equal to #4']"", ""PROJECT['document id of #REF', '#5']"", ""UNION['#6', '#4']""]","['select', 'project', 'group', 'aggregate', 'comparative', 'project', 'union']",train
SPIDER_train_2126,Which documents have more than 1 draft copies? List document id and number of draft copies.,"return documents ;return draft  copies of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than 1 ;return document ids of  #4 ;return draft  copies of  #4 ;return number of  #6 ;return #5 ,  #7","[""SELECT['documents']"", ""PROJECT['draft copies of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 1']"", ""PROJECT['document ids of #REF', '#4']"", ""PROJECT['draft copies of #REF', '#4']"", ""AGGREGATE['count', '#6']"", ""UNION['#5', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'aggregate', 'union']",train
SPIDER_train_2127,List all employees in the circulation history of the document with id 1. List the employee's name.,return documents ;return id of  #1 ;return #1 where  #2 is 1 ;return circulation history of  #3 ;return employees in #4 ;return names of  #5,"[""SELECT['documents']"", ""PROJECT['id of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 1']"", ""PROJECT['circulation history of #REF', '#3']"", ""PROJECT['employees in #REF', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'project']",train
SPIDER_train_2128,List the employees who have not showed up in any circulation history of documents. List the employee's name.,return documents ;return circulation histories of #1 ;return employees who showed up in #2 ;return employees besides #3 ;return names of #4,"[""SELECT['documents']"", ""PROJECT['circulation histories of #REF', '#1']"", ""PROJECT['employees who showed up in #REF', '#2']"", ""SELECT['employees']"", ""DISCARD['#4', '#3']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'project', 'select', 'discard', 'project']",train
SPIDER_train_2129,Which employee has showed up in most circulation history documents. List the employee's name and the number of drafts and copies.,"return employees ;return circulation history documents #1 showed up in ;return number of  #2 for each #1 ;return #1 where #3 is  highest ;return name of #4 ;return drafts of #4 ;return number of  #6 ;return copies of #4 ;return number of  #8 ;return #5 ,  #7 ,   #9","[""SELECT['employees']"", ""PROJECT['circulation history documents #REF showed up in', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['drafts of #REF', '#4']"", ""AGGREGATE['count', '#6']"", ""PROJECT['copies of #REF', '#4']"", ""AGGREGATE['count', '#8']"", ""UNION['#5', '#7', '#9']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'aggregate', 'project', 'aggregate', 'union']",train
SPIDER_train_213,How many books are there?,return books ;return number of #1,"[""SELECT['books']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_2130,"For each document, list the number of employees who have showed up in the circulation history of that document. List the document ids and number of employees.","return documents ;return the   circulation history of   #1 ;return employees  who showed up in #2 ;return number of  #3 for each #1 ;return the   document  ids of   #1 ;return #5 ,  #4","[""SELECT['documents']"", ""PROJECT['the circulation history of #REF', '#1']"", ""PROJECT['employees who showed up in #REF', '#2']"", ""GROUP['count', '#3', '#1']"", ""PROJECT['the document ids of #REF', '#1']"", ""UNION['#5', '#4']""]","['select', 'project', 'project', 'group', 'project', 'union']",train
SPIDER_train_2131,List all department names ordered by their starting date.,return departments ;return names of  #1 ;return starting dates of  #1 ;return #2 sorted by #3,"[""SELECT['departments']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['starting dates of #REF', '#1']"", ""SORT['#2', '#3']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_2132,find all dependent names who have a spouse relation with some employee.,return employees ;return dependent names who  have a spouse relation with #1,"[""SELECT['employees']"", ""PROJECT['dependent names who have a spouse relation with #REF', '#1']""]","['select', 'project']",train
SPIDER_train_2133,how many female dependents are there?,return dependents ;return #1 that  are  female ;return number of  #2,"[""SELECT['dependents']"", ""FILTER['#1', 'that are female']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_2134,Find the names of departments that are located in Houston.,return departments ;return #1 located in Houston ;return names of  #2,"[""SELECT['departments']"", ""FILTER['#1', 'located in Houston']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2135,Return the first names and last names of employees who earn more than 30000 in salary.,"return employees ;return salaries of  #1 ;return #1 where  #2 is higher than 30000 ;return first names of  #3 ;return last names of  #3 ;return #4 ,  #5","[""SELECT['employees']"", ""PROJECT['salaries of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 30000']"", ""PROJECT['first names of #REF', '#3']"", ""PROJECT['last names of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_2136,Find the number of employees of each gender whose salary is lower than 50000.,return employees ;return salaries of  #1 ;return #1 where  #2 is  lower than than  50000 ;return genders of  #3 ;return number of #3 for each #4,"[""SELECT['employees']"", ""PROJECT['salaries of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is lower than than 50000']"", ""PROJECT['genders of #REF', '#3']"", ""GROUP['count', '#3', '#4']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'group', 'union']",train
SPIDER_train_2137,"list the first and last names, and the addresses of all employees in the ascending order of their birth date.","return employees ;return first names of  #1 ;return last names of  #1 ;return addresses of  #1 ;return birth dates of  #1 ;return #2 ,  #3 ,   #4 ;return #6 sorted by #5 in ascending order","[""SELECT['employees']"", ""PROJECT['first names of #REF', '#1']"", ""PROJECT['last names of #REF', '#1']"", ""PROJECT['addresses of #REF', '#1']"", ""PROJECT['birth dates of #REF', '#1']"", ""UNION['#2', '#3', '#4']"", ""SORT['#6', '#5', 'in ascending order']""]","['select', 'project', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_2138,what are the event details of the services that have the type code 'Marriage'?,return services ;return type codes of  #1 ;return #1 where #2 is  'Marriage ;return event details of  #3,"[""SELECT['services']"", ""PROJECT['type codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Marriage']"", ""PROJECT['event details of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_2139,What are the ids and details of events that have more than one participants?,"return events ;return participants of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than one ;return ids of  #4 ;return details of  #4 ;return #5 ,  #6","[""SELECT['events']"", ""PROJECT['participants of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than one']"", ""PROJECT['ids of #REF', '#4']"", ""PROJECT['details of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_214,List the writers of the books in ascending alphabetical order.,return books ;return writers of  #1 ;return #2 sorted by ascending alphabetical order,"[""SELECT['books']"", ""PROJECT['writers of #REF', '#1']"", ""SORT['#2', '#2', 'ascending alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_2140,"How many events have each participants attended? List the participant id, type and the number.","return participants ;return events #1 attended ;return number of #2 for each #1 ;return participant ids of  #1 ;return types of  #1 ;return #4 ,   #5 , #3","[""SELECT['participants']"", ""PROJECT['events #REF attended', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['participant ids of #REF', '#1']"", ""PROJECT['types of #REF', '#1']"", ""UNION['#4', '#5', '#3']""]","['select', 'project', 'group', 'project', 'project', 'union']",train
SPIDER_train_2141,"What are all the the participant ids, type code and details?","return participant ids ;return type codes of  #1 ;return details of  #1 ;return #1 ,  #2 ,   #3","[""SELECT['participant ids']"", ""PROJECT['type codes of #REF', '#1']"", ""PROJECT['details of #REF', '#1']"", ""UNION['#1', '#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_2142,How many participants belong to the type 'Organizer'?,return participants ;return types of  #1 ;return #1 where  #2 is  'Organizer ;return number of #3,"[""SELECT['participants']"", ""PROJECT['types of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Organizer']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_2143,List the type of the services in alphabetical order.,return services ;return types of  #1 ;return #2 sorted by alphabetical order,"[""SELECT['services']"", ""PROJECT['types of #REF', '#1']"", ""SORT['#2', '#2', 'alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_2144,List the service id and details for the events.,"return events ;return service ids of  #1 ;return details of  #1 ;return #2 ,  #3","[""SELECT['events']"", ""PROJECT['service ids of #REF', '#1']"", ""PROJECT['details of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_2145,How many events had participants whose details had the substring 'Dr.',return events ;return participants of  #1 ;return details of  #2 ;return #1 where  #3 has substring 'Dr ;return number of  #4,"[""SELECT['events']"", ""PROJECT['participants of #REF', '#1']"", ""PROJECT['details of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'has substring Dr']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'project', 'comparative', 'aggregate']",train
SPIDER_train_2146,What is the most common participant type?,return participant types ;return participants of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['participant types']"", ""PROJECT['participants of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_2147,Which service id and type has the least number of participants?,"return service ids ;return participants of #1 ;return number of #2 for each #1 ;return #1 where #3 is  the lowest ;return service type of #4 ;return #4 , #5","[""SELECT['service ids']"", ""PROJECT['participants of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the lowest']"", ""PROJECT['service type of #REF', '#4']"", ""UNION['#4', '#5']""]","['select', 'project', 'group', 'comparative', 'project', 'union']",train
SPIDER_train_2148,What is the id of the event with the most participants?,return events ;return participants of  events ;return number of  #2 for each  #1 ;return #1 where #3 is highest ;return id of  #4,"[""SELECT['events']"", ""SELECT['participants of events']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['id of #REF', '#4']""]","['select', 'select', 'group', 'superlative', 'project']",train
SPIDER_train_2149,Which events id does not have any participant with detail 'Kenyatta Kuhn'?,return events ids ;return participants of #1 ;return details of #2 ;return #1 where #3 is  not 'Kenyatta Kuhn,"[""SELECT['events ids']"", ""PROJECT['participants of #REF', '#1']"", ""PROJECT['details of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is not Kenyatta Kuhn']""]","['select', 'project', 'project', 'comparative']",train
SPIDER_train_215,List the titles of the books in ascending order of issues.,return books ;return titles of  #1 ;return issues of  #1 ;return #2 sorted by #3 in ascending order,"[""SELECT['books']"", ""PROJECT['titles of #REF', '#1']"", ""PROJECT['issues of #REF', '#1']"", ""SORT['#2', '#3', 'in ascending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_2150,Which services type had both successful and failure event details?,return service types ;return event details of #1 ;return #1 where #2 is successful ;return #1 where #2 is failure ;return #1 in  both #3 and  #4,"[""SELECT['service types']"", ""PROJECT['event details of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is successful']"", ""COMPARATIVE['#1', '#2', 'is failure']"", ""INTERSECTION['#1', '#3', '#4']""]","['select', 'project', 'comparative', 'comparative', 'intersection']",train
SPIDER_train_2151,How many events did not have any participants?,return events ;return #1 with  participants ;return #1 besides #2 ;return number of  #3,"[""SELECT['events']"", ""FILTER['#1', 'with participants']"", ""DISCARD['#1', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'discard', 'aggregate']",train
SPIDER_train_2152,What are all the distinct participant ids who attended any events?,return events ;return participant that  attended any  #1 ;return participant ids of #2 ;return the  distinct #3,"[""SELECT['events']"", ""PROJECT['participant that attended any #REF', '#1']"", ""PROJECT['participant ids of #REF', '#2']"", ""PROJECT['the distinct #REF', '#3']""]","['select', 'project', 'project', 'project']",train
SPIDER_train_2153,What is the name of the race held most recently?,return races ;return #1 held most recently ;return name of #2,"[""SELECT['races']"", ""FILTER['#1', 'held most recently']"", ""PROJECT['name of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2154,What is the name of the race that occurred most recently?,return races ;return when  #1 occurred ;return #1 where #2 is  the  most recently ;return the  name of #3,"[""SELECT['races']"", ""PROJECT['when #REF occurred', '#1']"", ""COMPARATIVE['#1', '#2', 'is the most recently']"", ""PROJECT['the name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_2155,What is the name and date of the most recent race?,"return races ;return #1 that  is  most recent ;return name of #2 ;return date of #2 ;return #3 , #4","[""SELECT['races']"", ""FILTER['#1', 'that is most recent']"", ""PROJECT['name of #REF', '#2']"", ""PROJECT['date of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_2156,What is the name and date of the race that occurred most recently?,"return race ;return #1 that  occurred most recently ;return name of  #2 ;return date of  #2 ;return #3 ,  #4","[""SELECT['race']"", ""FILTER['#1', 'that occurred most recently']"", ""PROJECT['name of #REF', '#2']"", ""PROJECT['date of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_2157,Find the names of all races held in 2017.,return races ;return #1 held in 2017 ;return names of  #2,"[""SELECT['races']"", ""FILTER['#1', 'held in 2017']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2158,What are the names of all the races that occurred in the year 2017?,return races ;return years #1 occurred ;return #1 where #2 is  2017 ;return names of  #3,"[""SELECT['races']"", ""PROJECT['years #REF occurred', '#1']"", ""COMPARATIVE['#1', '#2', 'is 2017']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_2159,Find the distinct names of all races held between 2014 and 2017?,return races ;return #1 held between 2014 and  2017 ;return distinct names of #2,"[""SELECT['races']"", ""FILTER['#1', 'held betweenleftside 2014']"", ""FILTER['#2', 'held betweenrightside 2017']"", ""PROJECT['distinct names of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_216,"What are the titles of the books whose writer is not ""Elaine Lee""?",return books ;return writers of  #1 ;return #1 where #2 is  not  Elaine Lee ;return titles of  #3,"[""SELECT['books']"", ""PROJECT['writers of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not Elaine Lee']"", ""PROJECT['titles of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_2160,What are the unique names of all race held between 2014 and 2017?,return races ;return #1 held between 2014 and 2017 ;return unique names of #2,"[""SELECT['races']"", ""FILTER['#1', 'held betweenleftside 2014']"", ""FILTER['#2', 'held betweenrightside 2017']"", ""PROJECT['unique names of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_2161,List the forename and surname of all distinct drivers who once had laptime less than 93000 milliseconds?,"return drivers ;return laptimes of #1 ;return #2 in milliseconds ;return #1 where #3 was once less than  93000 ;return the  distinct #4 ;return forenames of #5 ;return surnames of #5 ;return #6 ,  #7","[""SELECT['drivers']"", ""PROJECT['laptimes of #REF', '#1']"", ""FILTER['#2', 'in milliseconds']"", ""COMPARATIVE['#1', '#3', 'was once less than 93000']"", ""PROJECT['the distinct #REF', '#4']"", ""PROJECT['forenames of #REF', '#5']"", ""PROJECT['surnames of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'filter', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_2162,What are the forenames and surnames of all unique drivers who had a lap time of less than 93000 milliseconds?,"return unique drivers ;return lap times of  #1 ;return #1 where #2 is  lower than 93000 milliseconds ;return forenames of  #3 ;return surnames of  #3 ;return #4 ,  #5","[""SELECT['unique drivers']"", ""PROJECT['lap times of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is lower than 93000 milliseconds']"", ""PROJECT['forenames of #REF', '#3']"", ""PROJECT['surnames of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_2163,Find all the distinct id and nationality of drivers who have had laptime more than 100000 milliseconds?,"return drivers ;return #1 with  laptime more than  100000 milliseconds ;return #2 with  distinct id ;return nationality of  #2 ;return #3 ,   #4","[""SELECT['drivers']"", ""FILTER['#1', 'with laptime more than 100000 milliseconds']"", ""FILTER['#2', 'with distinct id']"", ""PROJECT['nationality of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'filter', 'project', 'union']",train
SPIDER_train_2164,What are the different driver ids and nationalities of all drivers who had a laptime of more than 100000 milliseconds?,"return drivers ;return laptimes of #1 ;return #1 where #2 was higher than 100000 milliseconds ;return different driver ids of #3 ;return nationalities of #3 ;return #4 ,  #5","[""SELECT['drivers']"", ""PROJECT['laptimes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'was higher than 100000 milliseconds']"", ""PROJECT['different driver ids of #REF', '#3']"", ""PROJECT['nationalities of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_2165,What are the forename and surname of the driver who has the smallest laptime?,"return drivers ;return laptimes of  #1 ;return #1 where #2 is  smallest ;return forename of  #3 ;return surname of  #3 ;return #4 ,  #5","[""SELECT['drivers']"", ""PROJECT['laptimes of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""PROJECT['forename of #REF', '#3']"", ""PROJECT['surname of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_2166,What is the forename and surname of the driver with the shortest laptime?,"return drivers ;return laptimes of  #1 ;return #1 where #2 is  shortest ;return forename of  #3 ;return surname of  #3 ;return #4 ,  #5","[""SELECT['drivers']"", ""PROJECT['laptimes of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""PROJECT['forename of #REF', '#3']"", ""PROJECT['surname of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_2167,What is the id and family name of the driver who has the longest laptime?,"return drivers ;return laptimes of #1 ;return #1 where #2 is  longest ;return id of #3 ;return family name of #3 ;return #4 ,  #5","[""SELECT['drivers']"", ""PROJECT['laptimes of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['id of #REF', '#3']"", ""PROJECT['family name of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_2168,What is the id and last name of the driver with the longest laptime?,"return drivers ;return laptimes of  #1 ;return #1 where #2 is  longest ;return id of  #3 ;return last name of  #3 ;return #4 ,  #5","[""SELECT['drivers']"", ""PROJECT['laptimes of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['id of #REF', '#3']"", ""PROJECT['last name of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_2169,"What is the id, forname and surname of the driver who had the first position in terms of laptime at least twice?","return drivers ;return #1 who  had the  first position in terms of  laptime ;return #2 at least twice ;return the  id of  #3 ;return the  forname of  #3 ;return the  surname of  #3 ;return #4 ,  #5 ,   #6","[""SELECT['drivers']"", ""FILTER['#1', 'who had the first position in terms of laptime']"", ""FILTER['#2', 'at least twice']"", ""PROJECT['the id of #REF', '#3']"", ""PROJECT['the forname of #REF', '#3']"", ""PROJECT['the surname of #REF', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'filter', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_217,What are the title and issues of the books?,"return books ;return titles of  #1 ;return issues of  #1 ;return #2 ,  #3","[""SELECT['books']"", ""PROJECT['titles of #REF', '#1']"", ""PROJECT['issues of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_2170,"What is the id, first name, and last name of the driver who was in the first position for laptime at least twice?","return drivers ;return #1 who  was in the  first  position for laptime ;return #1 where #2 is  at least twice ;return the  id of  #3 ;return the  first  name  of  #3 ;return the  last name  of  #3 ;return #4 ,  #5 ,   #6","[""SELECT['drivers']"", ""FILTER['#1', 'who was in the first position for laptime']"", ""COMPARATIVE['#1', '#2', 'is at least twice']"", ""PROJECT['the id of #REF', '#3']"", ""PROJECT['the first name of #REF', '#3']"", ""PROJECT['the last name of #REF', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'filter', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_2171,How many drivers participated in the race Australian Grand Prix held in 2009?,return Australian Grand Prix ;return #1 in 2009 ;return drivers of #2 ;return number of  #3,"[""SELECT['Australian Grand Prix']"", ""FILTER['#1', 'in 2009']"", ""PROJECT['drivers of #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_2172,How many drivers were in the Australian Grand Prix held in 2009?,return Australian Grand Prix ;return #1 held in 2009 ;return drivers in #2 ;return number of #3,"[""SELECT['Australian Grand Prix']"", ""FILTER['#1', 'held in 2009']"", ""PROJECT['drivers in #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_2173,How many drivers did not participate in the races held in 2009?,return races ;return #1 held in 2009 ;return drivers of  #2 ;return drivers besides #3 ;return number of #4,"[""SELECT['races']"", ""FILTER['#1', 'held in 2009']"", ""PROJECT['drivers of #REF', '#2']"", ""SELECT['drivers']"", ""DISCARD['#4', '#3']"", ""AGGREGATE['count', '#5']""]","['select', 'filter', 'project', 'select', 'discard', 'aggregate']",train
SPIDER_train_2174,How many drivers did not race in 2009?,return drivers ;return #1 that  race in 2009 ;return #1 besides #2 ;return number of #3,"[""SELECT['drivers']"", ""FILTER['#1', 'that race in 2009']"", ""DISCARD['#1', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'discard', 'aggregate']",train
SPIDER_train_2175,Give me a list of names and years of races that had any driver whose forename is Lewis?,"return races ;return drivers in #1 ;return forenames of  #2 ;return #1 where  #3 is  Lewis ;return names of  #4 ;return years of  #4 ;return #5 ,   #6","[""SELECT['races']"", ""PROJECT['drivers in #REF', '#1']"", ""PROJECT['forenames of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Lewis']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['years of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_2176,What are the names and years of all races that had a driver with the last name Lewis?,"return races ;return drivers of #1 ;return last names of #2 ;return #1 where #3 is  Lewis ;return names of #4 ;return years of #4 ;return #5 ,  #6","[""SELECT['races']"", ""PROJECT['drivers of #REF', '#1']"", ""PROJECT['last names of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Lewis']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['years of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_2177,Find the forename and surname of drivers whose nationality is German?,"return drivers ;return nationalities of  #1 ;return #1 where  #2 is  German ;return forenames of  #3 ;return surnames of  #3 ;return #4 ,   #5","[""SELECT['drivers']"", ""PROJECT['nationalities of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is German']"", ""PROJECT['forenames of #REF', '#3']"", ""PROJECT['surnames of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_2178,What is the first and last name of all the German drivers?,"return drivers ;return #1 who  are  German ;return first name of  all #2 ;return last name of  all #2 ;return #3 ,  #4","[""SELECT['drivers']"", ""FILTER['#1', 'who are German']"", ""PROJECT['first name of all #REF', '#2']"", ""PROJECT['last name of all #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_2179,Find the id and forenames of drivers who participated both the races with name Australian Grand Prix and the races with name Chinese Grand Prix?,"return races with  the name  Australian Grand Prix  ;return races with  the name  Chinese Grand Prix  ;return drivers ; return #3 of both #1 and #2 ;return ids of  #4 ;return forenames of  #5 ;return #5 ,   #6","[""SELECT['races with the name Australian Grand Prix']"", ""SELECT['races with the name Chinese Grand Prix']"", ""SELECT['drivers']"", ""INTERSECTION['#3', '#1', '#2']"", ""PROJECT['ids of #REF', '#4']"", ""PROJECT['forenames of #REF', '#5']"", ""UNION['#5', '#6']""]","['select', 'select', 'select', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_218,What are the dates of publications in descending order of price?,return publications ;return dates of  #1 ;return prices of  #1 ;return #2 sorted by #3 in descending order,"[""SELECT['publications']"", ""PROJECT['dates of #REF', '#1']"", ""PROJECT['prices of #REF', '#1']"", ""SORT['#2', '#3', 'in descending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_2180,What is the id and first name of all the drivers who participated in the Australian Grand Prix and the Chinese Grand Prix?,"return drivers ;return #1 who  participated in the  Australian Grand  Prix  ;return #1 who  participated in the  Chinese Grand  Prix  ;return #1 of  both #2 and  #3 ;return ids of  #4 ;return first names of  #4 ;return #5 ,  #6","[""SELECT['drivers']"", ""FILTER['#1', 'who participated in the Australian Grand Prix']"", ""FILTER['#1', 'who participated in the Chinese Grand Prix']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['ids of #REF', '#4']"", ""PROJECT['first names of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'filter', 'filter', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_2181,What are the forenames and surnames of drivers who participated in the races named Australian Grand Prix but not the races named Chinese Grand Prix?,"return drivers ;return races #1 participated in ;return #1 where #2 is  Australian Grand Prix ;return #1 where #2 is  not Chinese Grand Prix ;return #1 of both #3 and #4 ;return forenames of #5 ;return surnames of #5 ;return #6 ,  #7","[""SELECT['drivers']"", ""PROJECT['races #REF participated in', '#1']"", ""COMPARATIVE['#1', '#2', 'is Australian Grand Prix']"", ""COMPARATIVE['#1', '#2', 'is not Chinese Grand Prix']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['forenames of #REF', '#5']"", ""PROJECT['surnames of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_2182,What are the first and last names of all drivers who participated in the Australian Grand Prix but not the Chinese Grand Prix?,"return drivers ;return #1 who participated in the   Australian Grand Prix ;return #1 who participated in the   Chinese Grand Prix ;return #1 in both #2 and #3 ;return #2 besides #4 ;return the   first names of #5 ;return the   last names of #5 ;return #6 ,  #7","[""SELECT['drivers']"", ""FILTER['#1', 'who participated in the Australian Grand Prix']"", ""FILTER['#1', 'who participated in the Chinese Grand Prix']"", ""INTERSECTION['#1', '#2', '#3']"", ""DISCARD['#2', '#4']"", ""PROJECT['the first names of #REF', '#5']"", ""PROJECT['the last names of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'filter', 'filter', 'intersection', 'discard', 'project', 'project', 'union']",train
SPIDER_train_2183,Find all the forenames of distinct drivers who was in position 1 as standing and won?,return distinct drivers ;return #1 who  was in position 1 as standing ;return #2 and won ;return all the forenames of  #3,"[""SELECT['distinct drivers']"", ""FILTER['#1', 'who was in position 1 as standing']"", ""FILTER['#2', 'and won']"", ""PROJECT['all the forenames of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_2184,What are all the different first names of the drivers who are in position as standing and won?,return drivers ;return positions of #1 ;return #1 where #2 is standing ;return #3 that won ;return different first names of #4,"[""SELECT['drivers']"", ""PROJECT['positions of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is standing']"", ""FILTER['#3', 'that won']"", ""PROJECT['different first names of #REF', '#4']""]","['select', 'project', 'comparative', 'filter', 'project']",train
SPIDER_train_2185,Find all the forenames of distinct drivers who won in position 1 as driver standing and had more than 20 points?,return drivers ;return #1 who  won in  position 1 as driver standing ;return points of #2 ;return #2 where #3 is higher than 20 ;return distinct #4 ;return forenames of #5,"[""SELECT['drivers']"", ""FILTER['#1', 'who won in position 1 as driver standing']"", ""PROJECT['points of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is higher than 20']"", ""PROJECT['distinct #REF', '#4']"", ""PROJECT['forenames of #REF', '#5']""]","['select', 'filter', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_2186,What are the first names of the different drivers who won in position 1 as driver standing and had more than 20 points?,return drivers ;return #1 who  won in  position 1 ;return #2 as driver standing ;return points of #3 ;return #3 where #4 is higher than 20 ;return different #5 ;return first names of #6,"[""SELECT['drivers']"", ""FILTER['#1', 'who won in position 1']"", ""FILTER['#2', 'as driver standing']"", ""PROJECT['points of #REF', '#3']"", ""COMPARATIVE['#3', '#4', 'is higher than 20']"", ""PROJECT['different #REF', '#5']"", ""PROJECT['first names of #REF', '#6']""]","['select', 'filter', 'filter', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_2187,What are the numbers of constructors for different nationalities?,return constructors ;return #1 for different nationalities ;return numbers of  #2,"[""SELECT['constructors']"", ""FILTER['#1', 'for different nationalities']"", ""PROJECT['numbers of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2188,"For each nationality, how many different constructors are there?",return nationalities ;return constructors of  #1 ;return different #2 ;return number of #3 for each #1,"[""SELECT['nationalities']"", ""PROJECT['constructors of #REF', '#1']"", ""PROJECT['different #REF', '#2']"", ""GROUP['count', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_2189,What are the numbers of races for each constructor id?,return constructors ;return constructor ids of  #1 ;return races of  #2 ;return number of  #3 for each  #2,"[""SELECT['constructors']"", ""PROJECT['constructor ids of #REF', '#1']"", ""PROJECT['races of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_219,What are the distinct publishers of publications with price higher than 5000000?,return publications ;return prices of  #1 ;return #1 where #2 is  higher than 5000000 ;return distinct publishers of  #3,"[""SELECT['publications']"", ""PROJECT['prices of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 5000000']"", ""PROJECT['distinct publishers of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_2190,"For each constructor id, how many races are there?",return constructor ids ;return races of  #1 ;return number of #2 for each #1,"[""SELECT['constructor ids']"", ""PROJECT['races of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_2191,What are the names of races that were held after 2017 and the circuits were in the country of Spain?,return races ;return #1 held after 2017 ;return circuits of  #1 ;return countries of  #3 ;return #1 where #4 is  Spain ;return #1 of  both #2 and  #5 ;return names of  #6,"[""SELECT['races']"", ""FILTER['#1', 'held after 2017']"", ""PROJECT['circuits of #REF', '#1']"", ""PROJECT['countries of #REF', '#3']"", ""COMPARATIVE['#1', '#4', 'is Spain']"", ""INTERSECTION['#1', '#2', '#5']"", ""PROJECT['names of #REF', '#6']""]","['select', 'filter', 'project', 'project', 'comparative', 'intersection', 'project']",train
SPIDER_train_2192,What are the names of the races held after 2017 in Spain?,return races ;return #1 held after 2017 ;return #1 in Spain ;return #1 of  both #2 and  #3 ;return names of  #4,"[""SELECT['races']"", ""FILTER['#1', 'held after 2017']"", ""FILTER['#1', 'in Spain']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'filter', 'intersection', 'project']",train
SPIDER_train_2193,What are the unique names of races that held after 2000 and the circuits were in Spain?,return races ;return when  was  #1 ;return #1 where #2 is higher than 2000 ;return circuits of #3 ;return where are #4 ;return #3 where #5 is in  Spain ;return unique names of #6,"[""SELECT['races']"", ""PROJECT['when was #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 2000']"", ""PROJECT['circuits of #REF', '#3']"", ""PROJECT['where are #REF', '#4']"", ""COMPARATIVE['#3', '#5', 'is in Spain']"", ""PROJECT['unique names of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_2194,What are the names of all races held after 2000 in Spain?,return races ;return #1 held after 2000 ;return #2 in Spain ;return names of  #3,"[""SELECT['races']"", ""FILTER['#1', 'held after 2000']"", ""FILTER['#2', 'in Spain']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_2195,Find the distinct driver id and the stop number of all drivers that have a shorter pit stop duration than some drivers in the race with id 841.,"return drivers ;return races of #1 ;return ids of #2 ;return #1 where #3 is 841 ;return pit stop durations of #4 ;return highest of #5 ;return pit stop durations of #1 ;return #1 where #7 is lower than #6 ;return driver id of #8 ;return stops of #8 ;return number of  #10 ;return #9 ,  #11","[""SELECT['drivers']"", ""PROJECT['races of #REF', '#1']"", ""PROJECT['ids of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is 841']"", ""PROJECT['pit stop durations of #REF', '#4']"", ""AGGREGATE['max', '#5']"", ""PROJECT['pit stop durations of #REF', '#1']"", ""COMPARATIVE['#1', '#7', 'is lower than #6']"", ""PROJECT['driver id of #REF', '#8']"", ""PROJECT['stops of #REF', '#8']"", ""AGGREGATE['count', '#10']"", ""UNION['#9', '#11']""]","['select', 'project', 'project', 'comparative', 'project', 'aggregate', 'project', 'comparative', 'project', 'project', 'aggregate', 'union']",train
SPIDER_train_2196,What is the id and stop number for each driver that has a shorter pit stop than the driver in the race with id 841?,"return drivers ;return races of #1 ;return ids of #2 ;return #1 where #3 is  841 ;return the   pit stop  of #4 ;return the   pit stops of #1 ;return #1 where #6 is  shorter than  #5 ;return the   ids of #7 ;return the   stop  numbers of #7 ;return #8 ,  #9","[""SELECT['drivers']"", ""PROJECT['races of #REF', '#1']"", ""PROJECT['ids of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is 841']"", ""PROJECT['the pit stop of #REF', '#4']"", ""PROJECT['the pit stops of #REF', '#1']"", ""COMPARATIVE['#1', '#6', 'is shorter than #5']"", ""PROJECT['the ids of #REF', '#7']"", ""PROJECT['the stop numbers of #REF', '#7']"", ""UNION['#8', '#9']""]","['select', 'project', 'project', 'comparative', 'project', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_2197,Find the distinct driver id of all drivers that have a longer stop duration than some drivers in the race whose id is 841?,return drivers ;return races of #1 ;return ids of #2 ;return #1 where #3 is 841 ;return stop durations of #4 ;return lowest of #5 ;return stop durations of #1 ;return #1 where #7 is higher than #6 ;return distinct driver ids of #8,"[""SELECT['drivers']"", ""PROJECT['races of #REF', '#1']"", ""PROJECT['ids of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is 841']"", ""PROJECT['stop durations of #REF', '#4']"", ""AGGREGATE['min', '#5']"", ""PROJECT['stop durations of #REF', '#1']"", ""COMPARATIVE['#1', '#7', 'is higher than #6']"", ""PROJECT['distinct driver ids of #REF', '#8']""]","['select', 'project', 'project', 'comparative', 'project', 'aggregate', 'project', 'comparative', 'project']",train
SPIDER_train_2198,What are the different ids and stop durations of all the drivers whose stop lasted longer than the driver in the race with the id 841?,"return drivers ;return ids of #1 ;return #1 where #2 is 841 ;return stop durations of #1 ;return stop duration of #3 ;return #1 where #4 is higher than #5 ;return #2 where #1 is equal to #6 ;return #4 where #1 is equal to #6 ;return #7 ,  #8","[""SELECT['drivers']"", ""PROJECT['ids of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 841']"", ""PROJECT['stop durations of #REF', '#1']"", ""PROJECT['stop duration of #REF', '#3']"", ""COMPARATIVE['#1', '#4', 'is higher than #5']"", ""COMPARATIVE['#2', '#1', 'is equal to #6']"", ""COMPARATIVE['#4', '#1', 'is equal to #6']"", ""UNION['#7', '#8']""]","['select', 'project', 'comparative', 'project', 'project', 'comparative', 'comparative', 'comparative', 'union']",train
SPIDER_train_2199,List the forenames of all distinct drivers in alphabetical order?,return drivers ;return distinct #1 ;return forenames of  #2 ;return #3 sorted by alphabetical,"[""SELECT['drivers']"", ""PROJECT['distinct #REF', '#1']"", ""PROJECT['forenames of #REF', '#2']"", ""SORT['#3', '#3', 'alphabetical']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_22,What are the themes of farm competitions sorted by year in ascending order?,return farm competitions ;return year of #1 ;return #1 sorted by #2 in ascending order ;return themes of  #3,"[""SELECT['farm competitions']"", ""PROJECT['year of #REF', '#1']"", ""SORT['#1', '#2', 'in ascending order']"", ""PROJECT['themes of #REF', '#3']""]","['select', 'project', 'sort', 'project']",train
SPIDER_train_220,List the publisher of the publication with the highest price.,return publishers ;return publications of  #1 ;return prices of  #2 ;return #1 where  #3 is highest,"[""SELECT['publishers']"", ""PROJECT['publications of #REF', '#1']"", ""PROJECT['prices of #REF', '#2']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'project', 'superlative']",train
SPIDER_train_2200,What are the first names of all the different drivers in alphabetical order?,return different drivers ;return first names of  #1 ;return #2 sorted by alphabetical order,"[""SELECT['different drivers']"", ""PROJECT['first names of #REF', '#1']"", ""SORT['#2', '#2', 'alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_2201,List the names of all distinct races in reversed  lexicographic order?,return races ;return the  distinct #1 ;return names of #2 ;return #3 sorted by reversed lexicographic order,"[""SELECT['races']"", ""PROJECT['the distinct #REF', '#1']"", ""PROJECT['names of #REF', '#2']"", ""SORT['#3', '#3', 'reversed lexicographic order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_2202,What are the different names of all the races in reverse alphabetical order?,return races ;return different names of  #1 ;return #2 sorted by reverse alphabetical order,"[""SELECT['races']"", ""PROJECT['different names of #REF', '#1']"", ""SORT['#2', '#2', 'reverse alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_2203,What are the names of races held between 2009 and 2011?,return races ;return #1 held between 2009 and  2011 ;return names of  #2,"[""SELECT['races']"", ""FILTER['#1', 'held betweenleftside 2009']"", ""FILTER['#2', 'held betweenrightside 2011']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_2204,What are the names of all races held between 2009 and 2011?,return races ;return #1 held between 2009 and 2011 ;return names of  #2,"[""SELECT['races']"", ""FILTER['#1', 'held betweenleftside 2009']"", ""FILTER['#2', 'held betweenrightside 2011']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_2205,What are the names of races held after 12:00:00 or before 09:00:00?,return races ;return #1 held after 12:00:00 ;return #1 held before 09:00:00 ;return #2 or  #3 ;return names of  #4,"[""SELECT['races']"", ""FILTER['#1', 'held after 12:00:00']"", ""FILTER['#1', 'held before 09:00:00']"", ""UNION['#2', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_2206,What are the names of all races that occurred after 12:00:00 or before 09:00:00?,"return races ;return #1 occurred after 12:00:00 ;return #1 occurred before 09:00:00 ;return #2 ,  #3 ;return names of  #4","[""SELECT['races']"", ""FILTER['#1', 'occurred after 12:00:00']"", ""FILTER['#1', 'occurred before 09:00:00']"", ""UNION['#2', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_2207,"What are the drivers' first, last names and id who had more than 8 pit stops or participated in more than 5 race results?","return drivers ;return pit stops of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  more  than  8 ;return race results #1 participated in ;return number of  #5 for each #1 ;return #1 where #6 is  more  than  5 ;return #4 ,  #7 ;return first names of #8 ;return last names of #8 ;return ids of #8 ;return #9 ,  #10 ,   #11","[""SELECT['drivers']"", ""PROJECT['pit stops of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than 8']"", ""PROJECT['race results #REF participated in', '#1']"", ""GROUP['count', '#5', '#1']"", ""COMPARATIVE['#1', '#6', 'is more than 5']"", ""UNION['#4', '#7']"", ""PROJECT['first names of #REF', '#8']"", ""PROJECT['last names of #REF', '#8']"", ""PROJECT['ids of #REF', '#8']"", ""UNION['#9', '#10', '#11']""]","['select', 'project', 'group', 'comparative', 'project', 'group', 'comparative', 'union', 'project', 'project', 'project', 'union']",train
SPIDER_train_2208,"What are the drivers' first names,last names, and ids for all those that had more than 8 stops or participated in more than 5 races?","return drivers ;return stops of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  higher than 8 ;return races of #1 ;return number of  #5 for each #1 ;return #1 where #6 is  higher than 5 ;return #4 or  #5 ;return first names  of #8 ;return last names  of #8 ;return ids of #8 ;return #9 ,  #10 ,   #11","[""SELECT['drivers']"", ""PROJECT['stops of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 8']"", ""PROJECT['races of #REF', '#1']"", ""GROUP['count', '#5', '#1']"", ""COMPARATIVE['#1', '#6', 'is higher than 5']"", ""UNION['#4', '#5']"", ""PROJECT['first names of #REF', '#8']"", ""PROJECT['last names of #REF', '#8']"", ""PROJECT['ids of #REF', '#8']"", ""UNION['#9', '#10', '#11']""]","['select', 'project', 'group', 'comparative', 'project', 'group', 'comparative', 'union', 'project', 'project', 'project', 'union']",train
SPIDER_train_2209,What are the drivers' last names and id who had 11 pit stops and participated in more than 5 race results?,"return drivers ;return pit stops of #1 ;return number of  #2 for each #1 ;return #1 where #3 is 11 ;return race results of #1 ;return number of  #5 for each #1 ;return #1 where #6 is higher than 5 ;return #1 in  both #4 and  #7 ;return last names of #8 ;return id of #8 ;return #9 ,  #10","[""SELECT['drivers']"", ""PROJECT['pit stops of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is 11']"", ""PROJECT['race results of #REF', '#1']"", ""GROUP['count', '#5', '#1']"", ""COMPARATIVE['#1', '#6', 'is higher than 5']"", ""INTERSECTION['#1', '#4', '#7']"", ""PROJECT['last names of #REF', '#8']"", ""PROJECT['id of #REF', '#8']"", ""UNION['#9', '#10']""]","['select', 'project', 'group', 'comparative', 'project', 'group', 'comparative', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_221,List the publication dates of publications with 3 lowest prices.,return publications ;return prices of #1 ;return the  3 lowest #2 ;return #1 where #2 is  in #3 ;return publication dates of #4,"[""SELECT['publications']"", ""PROJECT['prices of #REF', '#1']"", ""AGGREGATE['min', '#2']"", ""COMPARATIVE['#1', '#2', 'is in #3']"", ""PROJECT['publication dates of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_2210,What are the last names and ids of all drivers who had 11 pit stops and participated in more than 5 races?,"return drivers ;return pit stops of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  11 ;return races #1 participated in ;return number of  #5 for each #1 ;return #1 where #6 is  higher than 5 ;return #1 of both #4 and #7 ;return last names of #8 ;return ids of #8 ;return #9 ,  #10","[""SELECT['drivers']"", ""PROJECT['pit stops of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is 11']"", ""PROJECT['races #REF participated in', '#1']"", ""GROUP['count', '#5', '#1']"", ""COMPARATIVE['#1', '#6', 'is higher than 5']"", ""INTERSECTION['#1', '#4', '#7']"", ""PROJECT['last names of #REF', '#8']"", ""PROJECT['ids of #REF', '#8']"", ""UNION['#9', '#10']""]","['select', 'project', 'group', 'comparative', 'project', 'group', 'comparative', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_2211,What is the id and last name of the driver who participated in the most races after 2010?,"return drivers ;return races #1 participated in ;return #2 after 2010 ;return number of  #3 for each  #1 ;return #1 where #4 is  highest ;return id of  #5 ;return last name of  #5 ;return #6 ,  #7","[""SELECT['drivers']"", ""PROJECT['races #REF participated in', '#1']"", ""FILTER['#2', 'after 2010']"", ""GROUP['count', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']"", ""PROJECT['id of #REF', '#5']"", ""PROJECT['last name of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'filter', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_2213,What are the names of circuits that belong to UK or Malaysia?,"return circuits ;return #1 belong to UK ;return #1 belong to Malaysia ;return #2 ,  #3 ;return names of  #4","[""SELECT['circuits']"", ""FILTER['#1', 'belong to UK']"", ""FILTER['#1', 'belong to Malaysia']"", ""UNION['#2', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_2214,What are the names of all the circuits that are in the UK or Malaysia?,return circuits ;return #1 in the  UK ;return #1 in Malaysia ;return #2 or  #3 ;return names of  #4,"[""SELECT['circuits']"", ""FILTER['#1', 'in the UK']"", ""FILTER['#1', 'in Malaysia']"", ""UNION['#2', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_2215,Find the id and location of circuits that belong to France or Belgium?,"return circuits ;return #1 that  belong to  France ;return #1 that  belong to  Belgium ;return ids of  #2 ;return locations of  #2 ;return ids of  #3 ;return locations of  #3 ;return #4 ,   #5 ;return #6 ,   #7 ;return #8 or  #9","[""SELECT['circuits']"", ""FILTER['#1', 'that belong to France']"", ""FILTER['#1', 'that belong to Belgium']"", ""PROJECT['ids of #REF', '#2']"", ""PROJECT['locations of #REF', '#2']"", ""PROJECT['ids of #REF', '#3']"", ""PROJECT['locations of #REF', '#3']"", ""UNION['#4', '#5']"", ""UNION['#6', '#7']"", ""UNION['#8', '#9']""]","['select', 'filter', 'filter', 'project', 'project', 'project', 'project', 'union', 'union', 'union']",train
SPIDER_train_2216,What are the ids and locations of all circuits in France or Belgium?,"return circuits ;return #1 in France ;return #1 in Belgium ;return #2 ,  #3 ;return the  ids of #4 ;return the  locations of #4 ;return #5 ,  #6","[""SELECT['circuits']"", ""FILTER['#1', 'in France']"", ""FILTER['#1', 'in Belgium']"", ""UNION['#2', '#3']"", ""PROJECT['the ids of #REF', '#4']"", ""PROJECT['the locations of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'filter', 'filter', 'union', 'project', 'project', 'union']",train
SPIDER_train_2217,Find the names of Japanese constructors that have once earned more than 5 points?,return constructors ;return #1 that are Japanese ;return earned points of #2 ;return #2 where #3 is higher than 5 ;return names of #4,"[""SELECT['constructors']"", ""FILTER['#1', 'that are Japanese']"", ""PROJECT['earned points of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is higher than 5']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'project', 'comparative', 'project']",train
SPIDER_train_2218,What are the names of all the Japanese constructors that have earned more than 5 points?,return constructors ;return #1 that  are  Japanese ;return points of  #2 ;return #2 where #3 is  higher than 5 ;return names of  #4,"[""SELECT['constructors']"", ""FILTER['#1', 'that are Japanese']"", ""PROJECT['points of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is higher than 5']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'project', 'comparative', 'project']",train
SPIDER_train_2219,What is the average fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?,return race named 'Monaco Grand Prix ;return #1 in 2008 ;return the  fastest lap speed of  #2 ;return the  average of  #3,"[""SELECT['race named Monaco Grand Prix']"", ""FILTER['#1', 'in 2008']"", ""PROJECT['the fastest lap speed of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_222,Show the title and publication dates of books.,"return books ;return titles of  #1 ;return publication dates of  #1 ;return #2 ,  #3","[""SELECT['books']"", ""PROJECT['titles of #REF', '#1']"", ""PROJECT['publication dates of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_2220,What is the average fastest lap speed for the Monaco Grand Prix in 2008?,return Monaco Grand Prix ;return #1 in 2008 ;return fastest lap speeds of #2 ;return average of #3,"[""SELECT['Monaco Grand Prix']"", ""FILTER['#1', 'in 2008']"", ""PROJECT['fastest lap speeds of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_2221,What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?,return races ;return #1 named 'Monaco Grand Prix ;return #2 in 2008 ;return fastest lap speeds of #3 ;return the  maximum of #4,"[""SELECT['races']"", ""FILTER['#1', 'named Monaco Grand Prix']"", ""FILTER['#2', 'in 2008']"", ""PROJECT['fastest lap speeds of #REF', '#3']"", ""AGGREGATE['max', '#4']""]","['select', 'filter', 'filter', 'project', 'aggregate']",train
SPIDER_train_2222,What is the maximum fastest lap speed in the Monaco Grand Prix in 2008?,return lap speeds ;return #1 in the  Monaco Grand Prix ;return #2 in 2008 ;return the  fastest #3,"[""SELECT['lap speeds']"", ""FILTER['#1', 'in the Monaco Grand Prix']"", ""FILTER['#2', 'in 2008']"", ""PROJECT['the fastest #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_2223,What are the maximum fastest lap speed in races held after 2004 grouped by race name and ordered by year?,return races ;return years of #1 ;return #1 where #2 is higher than 2004 ;return names of #3 ;return fastest lap speeds of #3 ;return the  highest of #5 for each #4 ;return years of #3 ;return #6 sorted by #7,"[""SELECT['races']"", ""PROJECT['years of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 2004']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['fastest lap speeds of #REF', '#3']"", ""GROUP['max', '#5', '#4']"", ""PROJECT['years of #REF', '#3']"", ""SORT['#6', '#7']""]","['select', 'project', 'comparative', 'project', 'project', 'group', 'project', 'sort']",train
SPIDER_train_2224,"For each race name, What is the maximum fastest lap speed for races after 2004 ordered by year?",return races ;return #1 after 2004 ;return names of #2 ;return lap speeds of #2 ;return maximum of  #4 for each #3 ;return year of #5 ;return #5 sorted by #6,"[""SELECT['races']"", ""FILTER['#1', 'after 2004']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['lap speeds of #REF', '#2']"", ""GROUP['max', '#4', '#3']"", ""PROJECT['year of #REF', '#5']"", ""SORT['#5', '#6']""]","['select', 'filter', 'project', 'project', 'group', 'project', 'sort']",train
SPIDER_train_2225,What are the average fastest lap speed in races held after 2004 grouped by race name and ordered by year?,return races ;return year of #1 ;return #1 where #2 is higher than 2004 ;return names of #3 ;return average fastest lap speed for each #4 ;return #5 sorted by #2,"[""SELECT['races']"", ""PROJECT['year of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 2004']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['speed', '#4']"", ""GROUP['avg', '#5', '#4']"", ""SORT['#6', '#2']""]","['select', 'project', 'comparative', 'project', 'project', 'group', 'sort']",train
SPIDER_train_2226,"What is the average fastest lap speed for races held after 2004, for each race, ordered by year?",return races ;return year of #1 ;return #1 where #2 is higher than 2004 ;return average fastest lap speed for each #3 ;return #4 sorted by #2,"[""SELECT['races']"", ""PROJECT['year of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 2004']"", ""PROJECT['speed', '#3']"", ""GROUP['avg', '#4', '#3']"", ""SORT['#5', '#2']""]","['select', 'project', 'comparative', 'project', 'group', 'sort']",train
SPIDER_train_2227,"Find the id, forename and number of races of all drivers who have at least participated in two races?","return drivers ;return races of  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  at least two ;return ids of  #4 ;return forenames of  #4 ;return races of  #4 ;return number of #7 for each #1 ;return #5 ,   #6 , #8","[""SELECT['drivers']"", ""PROJECT['races of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""PROJECT['ids of #REF', '#4']"", ""PROJECT['forenames of #REF', '#4']"", ""PROJECT['races of #REF', '#4']"", ""GROUP['count', '#7', '#1']"", ""UNION['#5', '#6', '#8']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_2228,"What is the id, forename, and number of races for all drivers that have participated in at least 2 races?","return drivers ;return races that #1 have participated ;return number of  #2 for each #1 ;return #1 where #3 is at least 2 ;return id of #4 ;return races of #4 ;return number of  #6 ;return forename of #4 ;return #5 ,  #8 ,   #7","[""SELECT['drivers']"", ""PROJECT['races that #REF have participated', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 2']"", ""PROJECT['id of #REF', '#4']"", ""PROJECT['races of #REF', '#4']"", ""AGGREGATE['count', '#6']"", ""PROJECT['forename of #REF', '#4']"", ""UNION['#5', '#8', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'aggregate', 'project', 'union']",train
SPIDER_train_2229,Find the driver id and number of races of all drivers who have at most participated in 30 races?,"return drivers ;return number of  races of #1 ;return #1 where  #2 is  at most 30 ;return driver id of  #3 ;return number of races of  #3 ;return #4 ,   #5","[""SELECT['drivers']"", ""PROJECT['races of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at most 30']"", ""PROJECT['driver id of #REF', '#4']"", ""PROJECT['races of #REF', '#4']"", ""GROUP['count', '#6', '#4']"", ""UNION['#5', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'group', 'union']",train
SPIDER_train_223,Show writers who have published a book with price more than 4000000.,return writers ;return books #1 published ;return prices of  #2 ;return #1 where #3 is  higher than 4000000,"[""SELECT['writers']"", ""PROJECT['books #REF published', '#1']"", ""PROJECT['prices of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is higher than 4000000']""]","['select', 'project', 'project', 'comparative']",train
SPIDER_train_2230,"For each id of a driver who participated in at most 30 races, how many races did they participate in?",return drivers ;return ids of #1 ;return races #2 participated in ;return number of  #3 for each #2 ;return #2 where #4 is  at most 30 ;return races of #5 ;return number of  #6 for each #5,"[""SELECT['drivers']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['races #REF participated in', '#2']"", ""GROUP['count', '#3', '#2']"", ""COMPARATIVE['#2', '#4', 'is at most 30']"", ""PROJECT['races of #REF', '#5']"", ""GROUP['count', '#6', '#5']"", ""UNION['#5', '#7']""]","['select', 'project', 'project', 'group', 'comparative', 'project', 'group', 'union']",train
SPIDER_train_2231,Find the id and surname of the driver who participated the most number of races?,"return drivers ;return races #1 participated in ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return id of  #4 ;return surname of  #4 ;return #5 ,  #6","[""SELECT['drivers']"", ""PROJECT['races #REF participated in', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['id of #REF', '#4']"", ""PROJECT['surname of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_2232,What are the ids and last names of all drivers who participated in the most races?,"return drivers ;return races #1 participated in ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return ids of  #4 ;return last names of  #4 ;return #5 ,  #6","[""SELECT['drivers']"", ""PROJECT['races #REF participated in', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['ids of #REF', '#4']"", ""PROJECT['last names of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_2233,How many technicians are there?,return technicians ;return number of  #1,"[""SELECT['technicians']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_2234,What is the number of technicians?,return technicians ;return the  number of  #1,"[""SELECT['technicians']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_2235,List the names of technicians in ascending order of age.,return technicians ;return names of  #1 ;return ages of  #1 ;return #2 sorted by #3 in ascending order,"[""SELECT['technicians']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['ages of #REF', '#1']"", ""SORT['#2', '#3', 'in ascending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_2236,What are the names of the technicians by ascending order of age?,return technicians ;return names of  #1 ;return ages of  #1 ;return #2 sorted by #3 in ascending order,"[""SELECT['technicians']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['ages of #REF', '#1']"", ""SORT['#2', '#3', 'in ascending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_2237,What are the team and starting year of technicians?,"return technicians ;return teams of  #1 ;return starting years of  #1 ;return #2 ,  #3","[""SELECT['technicians']"", ""PROJECT['teams of #REF', '#1']"", ""PROJECT['starting years of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_2238,What is the team and starting year for each technician?,"return technicians ;return teams of #1 ;return starting years of #1 ;return #2 ,  #3","[""SELECT['technicians']"", ""PROJECT['teams of #REF', '#1']"", ""PROJECT['starting years of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_2239,"List the name of technicians whose team is not ""NYY"".",return technicians ;return teams of  #1 ;return #1 where  #2 is not  NYY ;return names of  #3,"[""SELECT['technicians']"", ""PROJECT['teams of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not NYY']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_224,Show the titles of books in descending order of publication price.,return books ;return titles of  #1 ;return publication prices of  #1 ;return #2 sorted by #3 in descending order,"[""SELECT['books']"", ""PROJECT['titles of #REF', '#1']"", ""PROJECT['publication prices of #REF', '#1']"", ""SORT['#2', '#3', 'in descending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_2240,What is the name of the technician whose team is not 'NYY'?,return technician ;return teams of #1 ;return #1 where #2 is  not 'NYY ;return name of #3,"[""SELECT['technician']"", ""PROJECT['teams of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not NYY']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_2241,Show the name of technicians aged either 36 or 37,"return technicians ;return #1 that  are aged 36 ;return #1 that  are aged 37 ;return #2 ,  #3 ;return the  names of #4","[""SELECT['technicians']"", ""FILTER['#1', 'that are aged 36']"", ""FILTER['#1', 'that are aged 37']"", ""UNION['#2', '#3']"", ""PROJECT['the names of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_2242,What are the names of the technicians aged either 36 or 37?,return technicians ;return #1 aged 36 ;return #1 aged 37 ;return #2 or  #3 ;return names of  #4,"[""SELECT['technicians']"", ""FILTER['#1', 'aged 36']"", ""FILTER['#1', 'aged 37']"", ""UNION['#2', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_2243,What is the starting year of the oldest technicians?,return technicians ;return the  oldest #1 ;return the  starting year of #2,"[""SELECT['technicians']"", ""PROJECT['the oldest #REF', '#1']"", ""PROJECT['the starting year of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_2244,What is the starting year for the oldest technician?,return technicians ;return the  oldest #1 ;return the  starting year of #2,"[""SELECT['technicians']"", ""PROJECT['the oldest #REF', '#1']"", ""PROJECT['the starting year of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_2245,Show different teams of technicians and the number of technicians in each team.,"return technicians  ;return teams of #1 ;return the  different #2 ;return the  number of  #1 for each #3 ;return #3 ,  #4","[""SELECT['technicians']"", ""PROJECT['teams of #REF', '#1']"", ""PROJECT['the different #REF', '#2']"", ""GROUP['count', '#1', '#3']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_2246,"For each team, how many technicians are there?",return team ;return technician ;return number of #2 for each #1,"[""SELECT['team']"", ""SELECT['technician']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'select', 'group', 'union']",train
SPIDER_train_2247,Please show the team that has the most number of technicians.,return teams ;return technicians of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['teams']"", ""PROJECT['technicians of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_2248,What are the teams with the most technicians?,return teams ;return technicians of #1 ;return number of #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['teams']"", ""PROJECT['technicians of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_2249,Show the team that have at least two technicians.,return teams ;return technicians of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least two,"[""SELECT['teams']"", ""PROJECT['technicians of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_225,Show publishers that have more than one publication.,return publishers ;return publications of #1 ;return number of #2 for each #1 ;return #1 where #3 is  more than  one,"[""SELECT['publishers']"", ""PROJECT['publications of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than one']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_2250,What is the team with at least 2 technicians?,return teams ;return technicians of #1 ;return number of  #2 for each #1 ;return #1 where #3 is at least 2,"[""SELECT['teams']"", ""PROJECT['technicians of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 2']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_2251,Show names of technicians and series of machines they are assigned to repair.,"return technicians ;return names of  #1 ;return machines #1 are  assigned to repair ;return series of  #3 ;return #2 ,  #4","[""SELECT['technicians']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['machines #REF are assigned to repair', '#1']"", ""PROJECT['series of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_2252,What are the names of technicians and the machine series that they repair?,"return technicians ;return names of  #1 ;return machine series that  #1 repair ;return #2 ,  #3","[""SELECT['technicians']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['machine series that #REF repair', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_2253,Show names of technicians in ascending order of quality rank of the machine they are assigned.,return technicians ;return names of  #1 ;return machines #1 are  assigned ;return quality ranks of  #3 ;return #2 sorted by #4 in ascending order,"[""SELECT['technicians']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['machines #REF are assigned', '#1']"", ""PROJECT['quality ranks of #REF', '#3']"", ""SORT['#2', '#4', 'in ascending order']""]","['select', 'project', 'project', 'project', 'sort']",train
SPIDER_train_2254,What are the names of the technicians by ascending order of quality rank for the machine they are assigned?,return technicians ;return the   names of #1 ;return machines assigned to  #1 ;return the   quality ranks of #3 ;return #2 sorted by #4 in ascending order,"[""SELECT['technicians']"", ""PROJECT['the names of #REF', '#1']"", ""PROJECT['machines assigned to #REF', '#1']"", ""PROJECT['the quality ranks of #REF', '#3']"", ""SORT['#2', '#4', 'in ascending order']""]","['select', 'project', 'project', 'project', 'sort']",train
SPIDER_train_2255,Show names of technicians who are assigned to repair machines with value point more than 70.,return machines ;return value point of #1 ;return #1 where #2 is higher than 70 ;return technicians that are assigned to repair #3 ;return name of #4,"[""SELECT['machines']"", ""PROJECT['value point of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 70']"", ""PROJECT['technicians that are assigned to repair #REF', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_2256,What are the names of the technicians that are assigned to repair machines with more point values than 70?,return technicians ;return machines #1 are  assigned to repair ;return point values of  #2 ;return #1 where #3 is  higher than 70 ;return names of  #4,"[""SELECT['technicians']"", ""PROJECT['machines #REF are assigned to repair', '#1']"", ""PROJECT['point values of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is higher than 70']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_2257,Show names of technicians and the number of machines they are assigned to repair.,"return technicians ;return names of  #1 ;return machines #1 are  assigned to repair ;return number of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['technicians']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['machines #REF are assigned to repair', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_2258,What are the names of the technicians  and how many machines are they assigned to repair?,"return technicians ;return machines #1 are assigned to  repair ;return the  number of  #2 for each #1 ;return the  names of #1 ;return #4 ,  #3","[""SELECT['technicians']"", ""PROJECT['machines #REF are assigned to repair', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['the names of #REF', '#1']"", ""UNION['#4', '#3']""]","['select', 'project', 'group', 'project', 'union']",train
SPIDER_train_2259,List the names of technicians who have not been assigned to repair machines.,return technicians ;return #1 not assigned to  repair machines ;return names of #2,"[""SELECT['technicians']"", ""FILTER['#1', 'not assigned to repair machines']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_226,Show different publishers together with the number of publications they have.,"return different publishers ;return publications of  #1 ;return number of  #2 for each  #1 ;return #1 ,  #3","[""SELECT['different publishers']"", ""PROJECT['publications of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_2260,What are the names of the technicians that have not been assigned to repair machines?,return technicians ;return #1 that  have  been assigned to repair machines ;return #1 besides  #2,"[""SELECT['technicians']"", ""FILTER['#1', 'that have been assigned to repair machines']"", ""DISCARD['#1', '#2']""]","['select', 'filter', 'discard']",train
SPIDER_train_2261,"Show the starting years shared by technicians from team ""CLE"" and ""CWS"".",return teams ;return #1 that is CLE ;return #1 that is CWS ;return technicians of #2 ;return technicians of #3 ;return technicians of #1 ;return starting years of #4 ;return starting years of #5 ;return starting years of #6 ;return #9 of both #7 and #8,"[""SELECT['teams']"", ""FILTER['#1', 'that is CLE']"", ""FILTER['#1', 'that is CWS']"", ""PROJECT['technicians of #REF', '#2']"", ""PROJECT['technicians of #REF', '#3']"", ""PROJECT['technicians of #REF', '#1']"", ""PROJECT['starting years of #REF', '#4']"", ""PROJECT['starting years of #REF', '#5']"", ""PROJECT['starting years of #REF', '#6']"", ""INTERSECTION['#9', '#7', '#8']""]","['select', 'filter', 'filter', 'project', 'project', 'project', 'project', 'project', 'project', 'intersection']",train
SPIDER_train_2262,"What are the starting years shared by the technicians from the team ""CLE"" or ""CWS""?","return team ;return #1 CLE ;return #1 CWS ;return #2 ,  #3 ;return technicians from  #4 ;return starting years of  #5","[""SELECT['team']"", ""FILTER['#1', 'CLE']"", ""FILTER['#1', 'CWS']"", ""UNION['#2', '#3']"", ""PROJECT['technicians from #REF', '#4']"", ""PROJECT['starting years of #REF', '#5']""]","['select', 'filter', 'filter', 'union', 'project', 'project']",train
SPIDER_train_2263,How many entrepreneurs are there?,return entrepreneurs ;return number of #1,"[""SELECT['entrepreneurs']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_2264,Count the number of entrepreneurs.,return entrepreneurs ;return Count of  #1,"[""SELECT['entrepreneurs']"", ""PROJECT['Count of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_2265,List the companies of entrepreneurs in descending order of money requested.,return companies ;return #1 of  entrepreneurs ;return #2 in descending order of  money requested,"[""SELECT['companies']"", ""FILTER['#1', 'of entrepreneurs']"", ""FILTER['#2', 'in descending order of money requested']""]","['select', 'filter', 'filter']",train
SPIDER_train_2266,"What are the companies of entrepreneurs, ordered descending by amount of money requested?",return entrepreneurs ;return companies of  #1 ;return money #1 requested ;return amount of  #3 ;return #2 sorted by #4 in descending order,"[""SELECT['entrepreneurs']"", ""PROJECT['companies of #REF', '#1']"", ""PROJECT['money #REF requested', '#1']"", ""PROJECT['amount of #REF', '#3']"", ""SORT['#2', '#4', 'in descending order']""]","['select', 'project', 'project', 'project', 'sort']",train
SPIDER_train_2267,List the companies and the investors of entrepreneurs.,"return entrepreneurs ;return companies of  #1 ;return investors of  #1 ;return #2 ,  #3","[""SELECT['entrepreneurs']"", ""PROJECT['companies of #REF', '#1']"", ""PROJECT['investors of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_2268,What are the companies and investors that correspond to each entrepreneur?,"return entrepreneurs ;return companies that  correspond to #1 ;return investors that  correspond to #1 ;return #2 ,  #3","[""SELECT['entrepreneurs']"", ""PROJECT['companies that correspond to #REF', '#1']"", ""PROJECT['investors that correspond to #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_2269,What is the average money requested by all entrepreneurs?,return entrepreneurs ;return money requested by #1 ;return average of  #2,"[""SELECT['entrepreneurs']"", ""PROJECT['money requested by #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_227,Please show the most common publication date.,return publications ;return publication dates of #1 ;return number of  #1 for each #2 ;return #2 where #3 is  the  highest,"[""SELECT['publications']"", ""PROJECT['publication dates of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""COMPARATIVE['#2', '#3', 'is the highest']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_2270,Return the average money requested across all entrepreneurs.,return entrepreneurs ;return money #1 requested ;return average of  #2,"[""SELECT['entrepreneurs']"", ""PROJECT['money #REF requested', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_2271,What are the names of people in ascending order of weight?,return people ;return the  weight of  #1 ;return #1 sorted by #2 ;return the  names of  #3,"[""SELECT['people']"", ""PROJECT['the weight of #REF', '#1']"", ""SORT['#1', '#2']"", ""PROJECT['the names of #REF', '#3']""]","['select', 'project', 'sort', 'project']",train
SPIDER_train_2272,"Return the names of people, ordered by weight ascending.",return people ;return weights of #1 ;return names of  #1 ; return #3 sorted by #2,"[""SELECT['people']"", ""PROJECT['weights of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""SORT['#3', '#2']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_2273,What are the names of entrepreneurs?,return entrepreneurs ;return names of  #1,"[""SELECT['entrepreneurs']"", ""PROJECT['names of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_2274,Return the names of entrepreneurs.,return entrepreneurs ;return names of  #1,"[""SELECT['entrepreneurs']"", ""PROJECT['names of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_2275,"What are the names of entrepreneurs whose investor is not ""Rachel Elnaugh""?",return entrepreneurs ;return investors of  #1 ;return #1 where #2 is  not  Rachel Elnaugh ;return names of  #3,"[""SELECT['entrepreneurs']"", ""PROJECT['investors of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not Rachel Elnaugh']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_2276,Return the names of entrepreneurs do no not have the investor Rachel Elnaugh.,return entrepreneurs ;return investors of #1 ;return #1 where #2 is  Rachel Elnaugh ;return #1 besides #3 ;return names of #4,"[""SELECT['entrepreneurs']"", ""PROJECT['investors of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Rachel Elnaugh']"", ""DISCARD['#1', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'comparative', 'discard', 'project']",train
SPIDER_train_2277,What is the weight of the shortest person?,return person ;return #1 who is  the  shortest ;return weight of #2,"[""SELECT['person']"", ""FILTER['#1', 'who is the shortest']"", ""PROJECT['weight of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2278,Return the weight of the shortest person.,return person ;return shortest of  #1 ;return weight of  #2,"[""SELECT['person']"", ""AGGREGATE['min', '#1']"", ""PROJECT['weight of #REF', '#2']""]","['select', 'aggregate', 'project']",train
SPIDER_train_2279,What is the name of the entrepreneur with the greatest weight?,return entrepreneurs ;return weights of  #1 ;return #1 where #2 is  highest ;return name of  #3,"[""SELECT['entrepreneurs']"", ""PROJECT['weights of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_228,List the writers who have written more than one book.,return writers ;return books #1 have  written ;return number of  #2 for each  #1 ;return #1 where  #3 is higher than one,"[""SELECT['writers']"", ""PROJECT['books #REF have written', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than one']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_2280,Return the name of the heaviest entrepreneur.,return entrepreneurs ;return heaviest #1 ;return name of  #2,"[""SELECT['entrepreneurs']"", ""PROJECT['heaviest #REF', '#1']"", ""PROJECT['name of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_2281,What is the total money requested by entrepreneurs with height more than 1.85?,return entrepreneurs ;return heights of #1 ;return #1 where #2 is  more than  1.85 ;return money requested by #3 ;return the  sum of #4,"[""SELECT['entrepreneurs']"", ""PROJECT['heights of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is more than 1.85']"", ""PROJECT['money requested by #REF', '#3']"", ""AGGREGATE['sum', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_2282,Give the total money requested by entrepreneurs who are taller than 1.85.,return entrepreneurs ;return money requested by #1 ;return #2 where  #1 are  taller than  1.85 ;return sum of  #3,"[""SELECT['entrepreneurs']"", ""PROJECT['money requested by #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'are taller than 1.85']"", ""AGGREGATE['sum', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_2283,"What are the dates of birth of entrepreneurs with investor ""Simon Woodroffe"" or ""Peter Jones""?",return entrepreneurs ;return investors of  #1 ;return #1 where #2 is  Simon Woodroffe ;return #1 where #2 is  Peter Jones ;return #3 or  #4 ;return dates of  birth of #5,"[""SELECT['entrepreneurs']"", ""PROJECT['investors of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Simon Woodroffe']"", ""COMPARATIVE['#1', '#2', 'is Peter Jones']"", ""UNION['#3', '#4']"", ""PROJECT['dates of birth of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_2284,Return the dates of birth for entrepreneurs who have either the investor Simon Woodroffe or Peter Jones.,return entrepreneurs ;return investors of  #1 ;return #1 where  #2 is Simon Woodroffe ;return #1 where  #2 is Peter Jones ;return #3 or #4 ;return dates of  birth of #5,"[""SELECT['entrepreneurs']"", ""PROJECT['investors of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Simon Woodroffe']"", ""COMPARATIVE['#1', '#2', 'is Peter Jones']"", ""UNION['#3', '#4']"", ""PROJECT['dates of birth of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_2285,What are the weights of entrepreneurs in descending order of money requested?,return entrepreneurs ;return weights of  #1 ;return money #1 requested ;return #2 sorted by #3 in descending order,"[""SELECT['entrepreneurs']"", ""PROJECT['weights of #REF', '#1']"", ""PROJECT['money #REF requested', '#1']"", ""SORT['#2', '#3', 'in descending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_2286,"Return the weights of entrepreneurs, ordered descending by amount of money requested.",return entrepreneurs ;return weights of  #1 ;return amount of  money requested by #1 ;return #2 sorted by #3 in descending order,"[""SELECT['entrepreneurs']"", ""PROJECT['weights of #REF', '#1']"", ""PROJECT['amount of money requested by #REF', '#1']"", ""SORT['#2', '#3', 'in descending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_2287,What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor?,"return entrepreneurs  ;return investors of #1 ;return number of  #1 for each #2 ;return #2 ,  #3","[""SELECT['entrepreneurs']"", ""PROJECT['investors of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""UNION['#2', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_2288,How many entrepreneurs correspond to each investor?,return investors ;return entrepreneurs of  #1 ;return number of #2 for each #1,"[""SELECT['investors']"", ""PROJECT['entrepreneurs of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_2289,What is the investor that has invested in the most number of entrepreneurs?,return investors ;return entrepreneurs #1 invested in ;return number of #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['investors']"", ""PROJECT['entrepreneurs #REF invested in', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_229,List the titles of books that are not published.,return books ;return #1 that  are  not  published ;return titles of  #2,"[""SELECT['books']"", ""FILTER['#1', 'that are not published']"", ""PROJECT['titles of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2290,Return the investor who have invested in the greatest number of entrepreneurs.,return investors ;return entrepreneurs #1 invested in ;return number of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['investors']"", ""PROJECT['entrepreneurs #REF invested in', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_2291,What are the investors that have invested in at least two entrepreneurs?,return investors ;return entrepreneurs #1 invested in ;return number of  #2 for each  #1 ;return #1 where #3 is  at least two,"[""SELECT['investors']"", ""PROJECT['entrepreneurs #REF invested in', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_2292,Return the investors who have invested in two or more entrepreneurs.,return investors ;return entrepreneurs #1 invested in ;return number of  #2 for each  #1 ;return #1 where  #3 is at least two,"[""SELECT['investors']"", ""PROJECT['entrepreneurs #REF invested in', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_2293,List the names of entrepreneurs and their companies in descending order of money requested?,"return entrepreneurs ;return names of  #1 ;return companies of  #1 ;return money requested of  #1 ;return #2 ,  #3 ;return #5 sorted by #4 in descending order","[""SELECT['entrepreneurs']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['companies of #REF', '#1']"", ""PROJECT['money requested of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#5', '#4', 'in descending order']""]","['select', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_2294,"What are the names of entrepreneurs and their corresponding investors, ordered descending by the amount of money requested?","return entrepreneurs ;return names of  #1 ;return investors of  #1 ;return names of  #3 ;return amount of  money #1 requested ;return #2 ,  #4 ;return #6 sorted by #5 in descending order","[""SELECT['entrepreneurs']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['investors of #REF', '#1']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['amount of money #REF requested', '#1']"", ""UNION['#2', '#4']"", ""SORT['#6', '#5', 'in descending order']""]","['select', 'project', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_2295,List the names of people that are not entrepreneurs.,return people ;return #1 that  are  not  entrepreneurs ;return names of  #2,"[""SELECT['people']"", ""FILTER['#1', 'that are not entrepreneurs']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2296,What are the names of people who are not entrepreneurs?,return people ;return #1 who are entrepreneurs ;return #1 besides #2 ;return the  names of #3,"[""SELECT['people']"", ""FILTER['#1', 'who are entrepreneurs']"", ""DISCARD['#1', '#2']"", ""PROJECT['the names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_2297,Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000.,return entrepreneurs ;return #1 that  requested  more than  140000 ;return #1 that  requested  less than  120000 ;return investors of #2 ;return investors of #3 ;return investors of #1 ;return #6 of both #4 and #5,"[""SELECT['entrepreneurs']"", ""FILTER['#1', 'that requested more than 140000']"", ""FILTER['#1', 'that requested less than 120000']"", ""PROJECT['investors of #REF', '#2']"", ""PROJECT['investors of #REF', '#3']"", ""PROJECT['investors of #REF', '#1']"", ""INTERSECTION['#6', '#4', '#5']""]","['select', 'filter', 'filter', 'project', 'project', 'project', 'intersection']",train
SPIDER_train_2298,What are the investors who have invested in both entrepreneurs who requested more than 140000 and entrepreneurs who requested less than 120000?,return investors ;return entrepreneurs  ;return #2 who  requested  more than 140000 ;return #2 who  requested  less than 120000 ;return #1 who  invested in both #3 and  #4,"[""SELECT['investors']"", ""SELECT['entrepreneurs']"", ""FILTER['#2', 'who requested more than 140000']"", ""FILTER['#2', 'who requested less than 120000']"", ""INTERSECTION['#1', '#3', '#4']""]","['select', 'select', 'filter', 'filter', 'intersection']",train
SPIDER_train_2299,How many distinct companies are there?,return companies ;return distinct #1 ;return number of #2,"[""SELECT['companies']"", ""PROJECT['distinct #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_23,"Return the themes of farm competitions, sorted by year ascending.",return farm competitions ;return themes of  #1 ;return years of  #1 ;return #2 sorted by #3 ascending,"[""SELECT['farm competitions']"", ""PROJECT['themes of #REF', '#1']"", ""PROJECT['years of #REF', '#1']"", ""SORT['#2', '#3', 'ascending']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_230,Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000.,return publishers ;return publications of #1 ;return prices of #2 ;return #1 where #3 is  higher than 10000000 ;return #1 where #3 is  lower than 5000000 ;return #1 of both #4 and #5,"[""SELECT['publishers']"", ""PROJECT['publications of #REF', '#1']"", ""PROJECT['prices of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is higher than 10000000']"", ""COMPARATIVE['#1', '#3', 'is lower than 5000000']"", ""INTERSECTION['#1', '#4', '#5']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection']",train
SPIDER_train_2300,Count the number of different companies.,return different companies ;return Count the number of  #1,"[""SELECT['different companies']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_2301,Show the company of the tallest entrepreneur.,return entrepreneurs ;return tallest of  #1 ;return the  company of  #2,"[""SELECT['entrepreneurs']"", ""PROJECT['tallest of #REF', '#1']"", ""PROJECT['the company of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_2302,Which company was started by the entrepreneur with the greatest height?,return entrepreneurs ;return heights of #1 ;return #1 where #2 is  greatest ;return company started by #3,"[""SELECT['entrepreneurs']"", ""PROJECT['heights of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is greatest']"", ""PROJECT['company started by #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_2303,How many perpetrators are there?,return perpetrators ;return number of #1,"[""SELECT['perpetrators']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_2304,List the date of perpetrators in descending order of the number of people killed.,return perpetrators ;return dates of  #1 ;return number of  people killed of #1 ;return #2 sorted by #3 in descending order,"[""SELECT['perpetrators']"", ""PROJECT['dates of #REF', '#1']"", ""PROJECT['people killed of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""SORT['#2', '#4', 'in descending order']""]","['select', 'project', 'project', 'group', 'sort']",train
SPIDER_train_2305,List the number of people injured by perpetrators in ascending order.,return perpetrators ;return people injured by #1 ;return number of  #2 for each  #1 ;return #3 sorted by ascending order,"[""SELECT['perpetrators']"", ""PROJECT['people injured by #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SORT['#3', '#3', 'ascending order']""]","['select', 'project', 'group', 'sort']",train
SPIDER_train_2306,What is the average number of people injured by all perpetrators?,return people ;return #1 injured by all perpetrators ;return number of  #2 ;return average of  #3,"[""SELECT['people']"", ""FILTER['#1', 'injured by all perpetrators']"", ""AGGREGATE['count', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'filter', 'aggregate', 'aggregate']",train
SPIDER_train_2307,What is the location of the perpetrator with the largest kills.,return perpetrators ;return kills of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  the   largest ;return the   location of #4,"[""SELECT['perpetrators']"", ""PROJECT['kills of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the largest']"", ""PROJECT['the location of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_2308,What are the names of people in ascending order of height?,return people ;return names of  #1 ;return heights of  #1 ;return #2 sorted by #3 in ascending order,"[""SELECT['people']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['heights of #REF', '#1']"", ""SORT['#2', '#3', 'in ascending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_2309,What are the names of perpetrators?,return perpetrators ;return names of  #1,"[""SELECT['perpetrators']"", ""PROJECT['names of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_231,What is the number of distinct publication dates?,return distinct publication dates ;return the  number of  #1,"[""SELECT['distinct publication dates']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_2310,"What are the names of perpetrators whose country is not ""China""?",return perpetrators ;return countries of  #1 ;return #1 where #2 is  not  China ;return names of  #3,"[""SELECT['perpetrators']"", ""PROJECT['countries of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not China']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_2311,What is the name of the perpetrator with the biggest weight.,return perpetrators ;return weights of #1 ;return #1 where #2 is highest ;return name of #3,"[""SELECT['perpetrators']"", ""PROJECT['weights of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_2312,What is the total kills of the perpetrators with height more than 1.84.,return perpetrators ;return heights of #1 ;return #1 where #2 is  higher than 1.84 ;return kills of #3 ;return sum of #4,"[""SELECT['perpetrators']"", ""PROJECT['heights of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 1.84']"", ""PROJECT['kills of #REF', '#3']"", ""AGGREGATE['sum', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_2313,"What are the names of perpetrators in country ""China"" or ""Japan""?",return perpetrators ;return countries of  #1 ;return #1 where #2 is  China ;return #1 where #2 is  Japan ;return #3 or  #4 ;return names of  #5,"[""SELECT['perpetrators']"", ""PROJECT['countries of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is China']"", ""COMPARATIVE['#1', '#2', 'is Japan']"", ""UNION['#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_2314,What are the heights of perpetrators in descending order of the number of people they injured?,return perpetrators ;return heights of  #1 ;return people #1 injured ;return number of  #3 for each  #1 ;return #2 sorted by #4 in descending order,"[""SELECT['perpetrators']"", ""PROJECT['heights of #REF', '#1']"", ""PROJECT['people #REF injured', '#1']"", ""GROUP['count', '#3', '#1']"", ""SORT['#2', '#4', 'in descending order']""]","['select', 'project', 'project', 'group', 'sort']",train
SPIDER_train_2315,What are the countries of perpetrators? Show each country and the corresponding number of perpetrators there.,"return perpetrators  ;return countries of  #1 ;return number of  #1 for each  #2 ;return #2 ,  #3","[""SELECT['perpetrators']"", ""PROJECT['countries of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""UNION['#2', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_2316,What is the country that has the most perpetrators?,return countries ;return perpetrators of  #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['countries']"", ""PROJECT['perpetrators of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_2317,What are the countries that have at least two perpetrators?,return countries ;return perpetrators from  #1 ;return number of #2 for each #1 ;return #1 where #3 is  at least two,"[""SELECT['countries']"", ""PROJECT['perpetrators from #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_2318,List the names of perpetrators in descending order of the year.,return perpetrators ;return names of  #1 ;return years of  #1 ;return #2 sorted by #3 in descending order,"[""SELECT['perpetrators']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['years of #REF', '#1']"", ""SORT['#2', '#3', 'in descending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_2319,List the names of people that are not perpetrators.,return perpetrators ;return people besides #1 ;return names of  #2,"[""SELECT['perpetrators']"", ""SELECT['people']"", ""DISCARD['#2', '#1']"", ""PROJECT['names of #REF', '#3']""]","['select', 'select', 'discard', 'project']",train
SPIDER_train_232,How many distinct publication dates are there in our record?,return publication dates ;return distinct #1 ;return the number of #2,"[""SELECT['publication dates']"", ""PROJECT['distinct #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_2320,Show the countries that have both perpetrators with injures more than 50 and perpetrators with injures smaller than 20.,"return countries ;return perpetrators with injures of #1 ;return the  number of  #2 ;return #1 where #3 is higher than 50 ;return #1 where #3 is lower than 20 ;return #4 ,  #5","[""SELECT['countries']"", ""PROJECT['perpetrators with injures of #REF', '#1']"", ""AGGREGATE['count', '#2']"", ""COMPARATIVE['#1', '#3', 'is higher than 50']"", ""COMPARATIVE['#1', '#3', 'is lower than 20']"", ""UNION['#4', '#5']""]","['select', 'project', 'aggregate', 'comparative', 'comparative', 'union']",train
SPIDER_train_2321,How many distinct locations of perpetrators are there?,return distinct locations of  perpetrators ;return how many #1,"[""SELECT['distinct locations of perpetrators']"", ""PROJECT['how many #REF', '#1']""]","['select', 'project']",train
SPIDER_train_2322,Show the date of the tallest perpetrator.,return perpetrator ;return height of  #1 ;return #1 where #2 is  tallest ;return date of  #3,"[""SELECT['perpetrator']"", ""PROJECT['height of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is tallest']"", ""PROJECT['date of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_2323,In which year did the most recent crime happen?,return crimes ;return years of #1 ;return the  highest of #2,"[""SELECT['crimes']"", ""PROJECT['years of #REF', '#1']"", ""AGGREGATE['max', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_2324,Report the name of all campuses in Los Angeles county.,return campuses ;return counties of  #1 ;return #1 where #2 is  Los Angeles ;return names of  #3,"[""SELECT['campuses']"", ""PROJECT['counties of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Los Angeles']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_2325,What campuses are located in the county of Los Angeles?,return campuses ;return #1 located in the  county of  Los Angeles,"[""SELECT['campuses']"", ""FILTER['#1', 'located in the county of Los Angeles']""]","['select', 'filter']",train
SPIDER_train_2326,What are the names of all campuses located at Chico?,return campuses ;return #1 located at Chico ;return names of  #2,"[""SELECT['campuses']"", ""FILTER['#1', 'located at Chico']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2327,What campuses are located in Chico?,return campuses ;return #1 located in Chico,"[""SELECT['campuses']"", ""FILTER['#1', 'located in Chico']""]","['select', 'filter']",train
SPIDER_train_2328,Find all the campuses opened in 1958.,return campuses ;return #1 opened in 1958,"[""SELECT['campuses']"", ""FILTER['#1', 'opened in 1958']""]","['select', 'filter']",train
SPIDER_train_2329,What are the campuses that opened in 1958?,return campuses ;return #1 that  opened in 1958,"[""SELECT['campuses']"", ""FILTER['#1', 'that opened in 1958']""]","['select', 'filter']",train
SPIDER_train_233,"Show the prices of publications whose publisher is either ""Person"" or ""Wiley""",return publications ;return publishers of  #1 ;return #1 where #2 is  Person ;return #1 where #2 is  Wiley ;return #3 or  #4 ;return prices of  #5,"[""SELECT['publications']"", ""PROJECT['publishers of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Person']"", ""COMPARATIVE['#1', '#2', 'is Wiley']"", ""UNION['#3', '#4']"", ""PROJECT['prices of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_2330,Find the name of the campuses opened before 1800.,return campuses ;return #1 opened before 1800 ;return names of  #2,"[""SELECT['campuses']"", ""FILTER['#1', 'opened before 1800']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2331,What campuses opened before 1800?,return campuses ;return when  #1 opened ;return #1 where #2 is  before 1800,"[""SELECT['campuses']"", ""PROJECT['when #REF opened', '#1']"", ""COMPARATIVE['#1', '#2', 'is before 1800']""]","['select', 'project', 'comparative']",train
SPIDER_train_2332,Which campus was opened between 1935 and 1939?,return campuses ;return #1 opened between 1935 and 1939,"[""SELECT['campuses']"", ""FILTER['#1', 'opened betweenleftside 1935']"", ""FILTER['#2', 'opened betweenrightside 1939']""]","['select', 'filter', 'filter']",train
SPIDER_train_2333,What campuses opened between 1935 and 1939?,return campuses ;return #1 that  opened between 1935 and  1939,"[""SELECT['campuses']"", ""FILTER['#1', 'that opened betweenleftside 1935']"", ""FILTER['#2', 'that opened betweenrightside 1939']""]","['select', 'filter', 'filter']",train
SPIDER_train_2334,"Find the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco.","return campuses ;return #1 that  are  in Northridge ,   Los Angeles ;return #1 that  are  in San  Francisco ,   San Francisco  ;return #2 or  #3 ;return names of  #4","[""SELECT['campuses']"", ""FILTER['#1', 'that are in Northridge , Los Angeles']"", ""FILTER['#1', 'that are in San Francisco , San Francisco']"", ""UNION['#2', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_2335,"What campuses are located in Northridge, Los Angeles or in San Francisco, San Francisco?","return campuses ;return #1 located in Northridge Los Angeles ;return #1 located in San  Francisco  ;return #2 ,  #3","[""SELECT['campuses']"", ""FILTER['#1', 'located in Northridge Los Angeles']"", ""FILTER['#1', 'located in San Francisco']"", ""UNION['#2', '#3']""]","['select', 'filter', 'filter', 'union']",train
SPIDER_train_2336,"What is the campus fee of ""San Jose State University"" in year 1996?",return campus fees ;return #1 of  San Jose University ;return #2 in year 1996,"[""SELECT['campus fees']"", ""FILTER['#1', 'of San Jose University']"", ""FILTER['#2', 'in year 1996']""]","['select', 'filter', 'filter']",train
SPIDER_train_2337,What is the campus fee for San Jose State University in 1996?,return campus fees ;return #1 for San Jose University ;return #2 in 1996,"[""SELECT['campus fees']"", ""FILTER['#1', 'for San Jose University']"", ""FILTER['#2', 'in 1996']""]","['select', 'filter', 'filter']",train
SPIDER_train_2338,"What is the campus fee of ""San Francisco State University"" in year 1996?",return San Francisco State University ;return the  campus fees of  #1 ;return #2 in year 1996,"[""SELECT['San Francisco State University']"", ""PROJECT['the campus fees of #REF', '#1']"", ""FILTER['#2', 'in year 1996']""]","['select', 'project', 'filter']",train
SPIDER_train_2339,What is the campus fee for San Francisco State University in 1996?,return San Francisco State University ;return campus fee for #1 ;return #2 in 1996,"[""SELECT['San Francisco State University']"", ""PROJECT['campus fee for #REF', '#1']"", ""FILTER['#2', 'in 1996']""]","['select', 'project', 'filter']",train
SPIDER_train_234,How many actors are there?,return actors ;return number of #1,"[""SELECT['actors']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_2341,How many universities have a campus fee higher than average?,return universities ;return campus fees of  #1 ;return average of  #2 ;return #1 where  #2 is higher than #3 ;return number of  #4,"[""SELECT['universities']"", ""PROJECT['campus fees of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'aggregate']",train
SPIDER_train_2342,Find the count of universities whose campus fee is greater than the average campus fee.,return universities ;return campus fees of #1 ;return average of #2 ;return #1 where #2 is higher than #3 ;return number of  #4,"[""SELECT['universities']"", ""PROJECT['campus fees of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'aggregate']",train
SPIDER_train_2343,How many universities have a campus fee greater than the average?,return universities ;return campus fees of  #1 ;return average of  #2 ;return #1 where  #2 is greater than  #3 ;return number of  #4,"[""SELECT['universities']"", ""PROJECT['campus fees of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is greater than #3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'aggregate']",train
SPIDER_train_2344,Which university is in Los Angeles county and opened after 1950?,return universities ;return #1 in Los Angeles county ;return #2 opened after 1950,"[""SELECT['universities']"", ""FILTER['#1', 'in Los Angeles county']"", ""FILTER['#2', 'opened after 1950']""]","['select', 'filter', 'filter']",train
SPIDER_train_2345,What campuses are located in Los Angeles county and opened after 1950?,return campuses ;return counties of  #1 ;return #1 where #2 is  Los Angeles county ;return #3 that  opened after 1950,"[""SELECT['campuses']"", ""PROJECT['counties of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Los Angeles county']"", ""FILTER['#3', 'that opened after 1950']""]","['select', 'project', 'comparative', 'filter']",train
SPIDER_train_2346,Which year has the most degrees conferred?,return years ;return degrees conferred in #1 ;return number of #2 for each #1 ;return #1 where #3 is  the highest,"[""SELECT['years']"", ""PROJECT['degrees conferred in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_2347,In what year was the most degrees conferred?,return years ;return degrees conferred in #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is highest,"[""SELECT['years']"", ""PROJECT['degrees conferred in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_2348,Which campus has the most degrees conferred in all times?,return campuses ;return degrees that  #1 conferred ;return number of  #2 for each #1 ;return #1 where #3 is  the  highest,"[""SELECT['campuses']"", ""PROJECT['degrees that #REF conferred', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_2349,What campus has the most degrees  conferrred over its entire existence?,return campuses ;return degrees conferrred of #1 ;return number of  #2 for each #1 ;return #1 where #3 is highest,"[""SELECT['campuses']"", ""PROJECT['degrees conferrred of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_235,Count the number of actors.,return actors ;return number of #1,"[""SELECT['actors']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_2350,Which campus has the most faculties in year 2003?,return campuses ;return faculties of  #1 ;return number of  #2 for each  #1 ;return #3 in 2003 ;return #1 where #4 is  highest,"[""SELECT['campuses']"", ""PROJECT['faculties of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""FILTER['#3', 'in 2003']"", ""SUPERLATIVE['max', '#1', '#4']""]","['select', 'project', 'group', 'filter', 'superlative']",train
SPIDER_train_2351,What campus has the most faculties in 2003?,return campuses ;return faculties of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest in 2003,"[""SELECT['campuses']"", ""PROJECT['faculties of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_2352,Find the average fee on a CSU campus in 1996,return fees on  CSU campus ;return #1 in  1996 ;return average of  #2,"[""SELECT['fees on CSU campus']"", ""FILTER['#1', 'in 1996']"", ""AGGREGATE['avg', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_2353,What is the average fee for a CSU campus in the year of 1996?,return fees ;return #1 for a CSU campus ;return #2 in the  year of 1996 ;return the  average of #3,"[""SELECT['fees']"", ""FILTER['#1', 'for a CSU campus']"", ""FILTER['#2', 'in the year of 1996']"", ""AGGREGATE['avg', '#3']""]","['select', 'filter', 'filter', 'aggregate']",train
SPIDER_train_2354,What is the average fee on a CSU campus in 2005?,return CSU campuses ;return fees of  #1 ;return average of  #2 ;return #3 in 2005,"[""SELECT['CSU campuses']"", ""PROJECT['fees of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""FILTER['#3', 'in 2005']""]","['select', 'project', 'aggregate', 'filter']",train
SPIDER_train_2355,What is the average fee for a CSU campus in the year of 2005?,return campuses ;return fees of  #1 ;return #2 where #1 is  CSU ;return average of  #3 ;return #4 in 2005,"[""SELECT['campuses']"", ""PROJECT['fees of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is CSU']"", ""AGGREGATE['avg', '#3']"", ""FILTER['#4', 'in 2005']""]","['select', 'project', 'comparative', 'aggregate', 'filter']",train
SPIDER_train_2356,report the total number of degrees granted between 1998 and 2002.,return degrees ;return #1 granted between 1998 and  2002 ;return number of #2,"[""SELECT['degrees']"", ""FILTER['#1', 'granted betweenleftside 1998']"", ""FILTER['#2', 'granted betweenrightside 2002']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'filter', 'aggregate']",train
SPIDER_train_2357,how many degrees were conferred between 1998 and 2002?,return degrees ;return #1 conferred ;return #2 between 1998 and  2002 ;return number of  #3,"[""SELECT['degrees']"", ""FILTER['#1', 'conferred']"", ""FILTER['#2', 'betweenleftside 1998']"", ""FILTER['#3', 'betweenrightside 2002']"", ""AGGREGATE['count', '#4']""]","['select', 'filter', 'filter', 'filter', 'aggregate']",train
SPIDER_train_2358,"For each Orange county campus, report the number of degrees granted after 2000.",return campuses ;return #1 in Orange county ;return degrees granted after 2000 from #2 ;return number of  #3 for each  #2,"[""SELECT['campuses']"", ""FILTER['#1', 'in Orange county']"", ""PROJECT['degrees granted after 2000 from #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'filter', 'project', 'group', 'union']",train
SPIDER_train_2359,What is the total number of degrees granted after 2000 for each Orange county campus?,return campuses ;return #1 in Orange county ;return #2 after 2000 ;return degrees granted of #3 ;return number of  #4 for each #3,"[""SELECT['campuses']"", ""FILTER['#1', 'in Orange county']"", ""FILTER['#2', 'after 2000']"", ""PROJECT['degrees granted of #REF', '#3']"", ""GROUP['count', '#4', '#3']"", ""UNION['#3', '#5']""]","['select', 'filter', 'filter', 'project', 'group', 'union']",train
SPIDER_train_236,List the name of actors in ascending alphabetical order.,return actors ;return names of  #1 ;return #2 sorted by ascending alphabetical order,"[""SELECT['actors']"", ""PROJECT['names of #REF', '#1']"", ""SORT['#2', '#2', 'ascending alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_2360,Find the names of the campus which has more faculties in 2002 than every campus in Orange county.,return campuses ;return #1 in  Orange county ;return faculties of #2 ;return #3 in  2002 ;return number of  #4 for each #2 ;return the  highest of #5 ;return #1 besides  #2 ;return faculties of #7 ;return #8 in  2002 ;return number of  #9 for each #7 ;return #7 where #10 is higher than #6 ;return names of #11,"[""SELECT['campuses']"", ""FILTER['#1', 'in Orange county']"", ""PROJECT['faculties of #REF', '#2']"", ""FILTER['#3', 'in 2002']"", ""GROUP['count', '#4', '#2']"", ""AGGREGATE['max', '#5']"", ""DISCARD['#1', '#2']"", ""PROJECT['faculties of #REF', '#7']"", ""FILTER['#8', 'in 2002']"", ""GROUP['count', '#9', '#7']"", ""COMPARATIVE['#7', '#10', 'is higher than #6']"", ""PROJECT['names of #REF', '#11']""]","['select', 'filter', 'project', 'filter', 'group', 'aggregate', 'discard', 'project', 'filter', 'group', 'comparative', 'project']",train
SPIDER_train_2361,What are the names of the campus that have more faculties in 2002 than the maximum number in Orange county?,return campuses ;return #1 in  Orange county ;return faculties of #2 ;return #3 in  2002 ;return number of  #4 ;return the  highest of #5 ;return #1 besides  #2 ;return faculties of #7 ;return #8 in  2002 ;return number of  #9 for each #7 ;return #7 where #10 is higher than #6 ;return names of #11,"[""SELECT['campuses']"", ""FILTER['#1', 'in Orange county']"", ""PROJECT['faculties of #REF', '#2']"", ""FILTER['#3', 'in 2002']"", ""AGGREGATE['count', '#4']"", ""AGGREGATE['max', '#5']"", ""DISCARD['#1', '#2']"", ""PROJECT['faculties of #REF', '#7']"", ""FILTER['#8', 'in 2002']"", ""GROUP['count', '#9', '#7']"", ""COMPARATIVE['#7', '#10', 'is higher than #6']"", ""PROJECT['names of #REF', '#11']""]","['select', 'filter', 'project', 'filter', 'aggregate', 'aggregate', 'discard', 'project', 'filter', 'group', 'comparative', 'project']",train
SPIDER_train_2362,What campus had more than 400 total enrollment but more than 200 full time enrollment in year 1956?,return campuses ;return total enrollment of #1 ;return #2 in 1956 ;return full time enrollment of #1 ;return #4 in 1956 ;return #1 where #3 is  more than  400 ;return #1 where #5 is  more than  200 ;return #1 in both #6 and  #7,"[""SELECT['campuses']"", ""PROJECT['enrollment of #REF', '#1']"", ""GROUP['sum', '#2', '#1']"", ""FILTER['#3', 'in 1956']"", ""PROJECT['full time enrollment of #REF', '#1']"", ""FILTER['#5', 'in 1956']"", ""COMPARATIVE['#1', '#4', 'is more than 400']"", ""COMPARATIVE['#1', '#6', 'is more than 200']"", ""INTERSECTION['#1', '#7', '#8']""]","['select', 'project', 'group', 'filter', 'project', 'filter', 'comparative', 'comparative', 'intersection']",train
SPIDER_train_2363,"What campus started in year 1956, has more than 200 full time students, and more than 400 students enrolled?",return campuses ;return #1 that  started in the  year 1956 ;return full time students of #2 ;return the  number of  #3 for each #2 ;return #2 where #4 is  more  than  200 ;return students enrolled in #5 ;return the  number of  #6 for each #5 ;return #5 where #7 is  more  than  400,"[""SELECT['campuses']"", ""FILTER['#1', 'that started in the year 1956']"", ""PROJECT['full time students of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""COMPARATIVE['#2', '#4', 'is more than 200']"", ""PROJECT['students enrolled in #REF', '#5']"", ""GROUP['count', '#6', '#5']"", ""COMPARATIVE['#5', '#7', 'is more than 400']""]","['select', 'filter', 'project', 'group', 'comparative', 'project', 'group', 'comparative']",train
SPIDER_train_2364,How many campuses are there in Los Angeles county?,return counties ;return campuses in #1 ;return #2 where  #1 is Los Angeles ;return number of  #3,"[""SELECT['counties']"", ""PROJECT['campuses in #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Los Angeles']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_2365,How many campuses exist are in the county of LA?,return campuses ;return #1 in LA county ;return number of #2,"[""SELECT['campuses']"", ""FILTER['#1', 'in LA county']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_2366,List the campuses in Los Angeles county.,return campuses ;return counties of  #1 ;return #1 where  #2 is Los Angeles,"[""SELECT['campuses']"", ""PROJECT['counties of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Los Angeles']""]","['select', 'project', 'comparative']",train
SPIDER_train_2367,What campuses are in Los Angeles county?,return campuses ;return counties of  #1 ;return #1 where #2 is  Los Angeles county,"[""SELECT['campuses']"", ""PROJECT['counties of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Los Angeles county']""]","['select', 'project', 'comparative']",train
SPIDER_train_2368,"How many degrees were conferred in ""San Jose State University"" in 2000?",return degrees ;return #1 conferred in San Jose State University ;return #2 in 2000 ;return number of  #3,"[""SELECT['degrees']"", ""FILTER['#1', 'conferred in San Jose State University']"", ""FILTER['#2', 'in 2000']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'filter', 'aggregate']",train
SPIDER_train_2369,How many degrees were conferred at San Jose State University in 2000?,return degrees ;return #1 conferred at San Jose State University ;return #2 in 2000 ;return number of #3,"[""SELECT['degrees']"", ""FILTER['#1', 'conferred at San Jose State University']"", ""FILTER['#2', 'in 2000']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'filter', 'aggregate']",train
SPIDER_train_237,"What are the names of actors, ordered alphabetically?",return actors ;return names of  #1 ;return #2 ordered alphabetically,"[""SELECT['actors']"", ""PROJECT['names of #REF', '#1']"", ""FILTER['#2', 'ordered alphabetically']""]","['select', 'project', 'filter']",train
SPIDER_train_2370,"What are the degrees conferred in ""San Francisco State University"" in 2001.",return San Francisco State University ;return degrees conferred in #1 ;return #2 in 2001,"[""SELECT['San Francisco State University']"", ""PROJECT['degrees conferred in #REF', '#1']"", ""FILTER['#2', 'in 2001']""]","['select', 'project', 'filter']",train
SPIDER_train_2371,What degrees were conferred in San Francisco State University in the year 2001?,return San Francisco State University ;return #1 in 2001 ;return degrees conferred in #2,"[""SELECT['San Francisco State University']"", ""FILTER['#1', 'in 2001']"", ""PROJECT['degrees conferred in #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2372,How many faculty is there in total in the year of 2002?,return faculty ;return #1 in 2002 ;return number of  #2,"[""SELECT['faculty']"", ""FILTER['#1', 'in 2002']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_2373,"How many faculty, in total, are there in the year 2002?",return faculties ;return #1 in the  year 2002 ;return number of  #2,"[""SELECT['faculties']"", ""FILTER['#1', 'in the year 2002']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_2374,"What is the number of faculty lines in campus ""Long Beach State University"" in 2002?",return Long Beach State University ;return #1 in 2002 ;return faculty lines of #2 ;return number of #3,"[""SELECT['Long Beach State University']"", ""FILTER['#1', 'in 2002']"", ""PROJECT['faculty lines of #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_2375,What is the number of faculty at Long Beach State University in 2002?,return faculties ;return #1 at Long Beach State University ;return #2 in 2002 ;return number of  #3,"[""SELECT['faculties']"", ""FILTER['#1', 'at Long Beach State University']"", ""FILTER['#2', 'in 2002']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'filter', 'aggregate']",train
SPIDER_train_2376,"How many faculty lines are there in ""San Francisco State University"" in year 2004?",return faculty lines ;return #1 in San Francisco State University ;return #2 in 2004 ;return number of #3,"[""SELECT['faculty lines']"", ""FILTER['#1', 'in San Francisco State University']"", ""FILTER['#2', 'in 2004']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'filter', 'aggregate']",train
SPIDER_train_2377,How many faculty lines are there at San Francisco State University in 2004?,return faculty lines ;return #1 at San Francisco State University ;return #2 in 2004 ;return number of  #3,"[""SELECT['faculty lines']"", ""FILTER['#1', 'at San Francisco State University']"", ""FILTER['#2', 'in 2004']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'filter', 'aggregate']",train
SPIDER_train_2378,List the campus that have between 600 and 1000 faculty lines in year 2004.,return campuses ;return faculty lines of #1 ;return #2 in year 2004 ;return number of  #3 for each #1 ;return #1 where #4 is  between 600 and 1000,"[""SELECT['campuses']"", ""PROJECT['faculty lines of #REF', '#1']"", ""FILTER['#2', 'in year 2004']"", ""GROUP['count', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is  betweenleftside 600']"", ""COMPARATIVE['#5', '#4', 'is  betweenrightside 1000']""]","['select', 'project', 'filter', 'group', 'comparative', 'comparative']",train
SPIDER_train_2379,What are the campuses that had between 600 and 1000 faculty members in 2004?,return campuses in 2004 ;return faculty of #1 ;return the number of #2 for each #1 ;return #1 where #3 larger than 600 ;return #4 where #3 smaller than 1000,"[""SELECT['campuses in 2004']"", ""PROJECT['faculty of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'larger than 600']"", ""COMPARATIVE['#4', '#3', 'smaller than 1000']""]","['select', 'project', 'group', 'comparative', 'comparative']",train
SPIDER_train_238,What are the characters and duration of actors?,"return actors ;return characters of  #1 ;return durations of  #1 ;return #2 ,  #3","[""SELECT['actors']"", ""PROJECT['characters of #REF', '#1']"", ""PROJECT['durations of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_2380,How many faculty lines are there in the university that conferred the most number of degrees in year 2002?,return universities ;return #1 in 2002 ;return degrees conferred of #2 ;return number of  #3 for each #2 ;return #2 where #4 is  highest ;return faculty lines of #5 ;return number of  #6,"[""SELECT['universities']"", ""FILTER['#1', 'in 2002']"", ""PROJECT['degrees conferred of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""SUPERLATIVE['max', '#2', '#4']"", ""PROJECT['faculty lines of #REF', '#5']"", ""AGGREGATE['count', '#6']""]","['select', 'filter', 'project', 'group', 'superlative', 'project', 'aggregate']",train
SPIDER_train_2381,How many faculty members did the university that conferred the most degrees in 2002 have?,return universities ;return degrees conferred of  #1 ;return #2 in 2002 ;return number of #3 ;return #1 where  #4 is  highest ;return faculty members of  #5 ;return number of #6,"[""SELECT['universities']"", ""PROJECT['degrees conferred of #REF', '#1']"", ""FILTER['#2', 'in 2002']"", ""AGGREGATE['count', '#3']"", ""SUPERLATIVE['max', '#1', '#4']"", ""PROJECT['faculty members of #REF', '#5']"", ""AGGREGATE['count', '#6']""]","['select', 'project', 'filter', 'aggregate', 'superlative', 'project', 'aggregate']",train
SPIDER_train_2382,How many faculty lines are there in the university that conferred the least number of degrees in year 2001?,return universities ;return degrees conferred of  #1 ;return #2 in 2001 ;return number of #3 for each #1 ;return #1 where  #4 is  lowest ;return faculty lines of  #5 ;return number of #6,"[""SELECT['universities']"", ""PROJECT['degrees conferred of #REF', '#1']"", ""FILTER['#2', 'in 2001']"", ""GROUP['count', '#3', '#1']"", ""SUPERLATIVE['min', '#1', '#4']"", ""PROJECT['faculty lines of #REF', '#5']"", ""AGGREGATE['count', '#6']""]","['select', 'project', 'filter', 'group', 'superlative', 'project', 'aggregate']",train
SPIDER_train_2383,How many faculty members are at the university that gave the least number of degrees in 2001?,return universities ;return degrees that  #1 gave ;return #2 in 2001 ;return number of #3 for each #1 ;return #1 where #4 is  the lowest ;return faculty members of #5 ;return number of #6,"[""SELECT['universities']"", ""PROJECT['degrees that #REF gave', '#1']"", ""FILTER['#2', 'in 2001']"", ""GROUP['count', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is the lowest']"", ""PROJECT['faculty members of #REF', '#5']"", ""AGGREGATE['count', '#6']""]","['select', 'project', 'filter', 'group', 'comparative', 'project', 'aggregate']",train
SPIDER_train_2384,"How many undergraduates are there in ""San Jose State University"" in year 2004?",return San Jose State University ;return undergraduates of  #1 ;return #2 in 2004 ;return number of  #3,"[""SELECT['San Jose State University']"", ""PROJECT['undergraduates of #REF', '#1']"", ""FILTER['#2', 'in 2004']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'filter', 'aggregate']",train
SPIDER_train_2385,How many undergraduates are there at San Jose State,return San Jose State ;return undergraduates at #1 ;return number of  #2,"[""SELECT['San Jose State']"", ""PROJECT['undergraduates at #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_2386,"What is the number of graduates in ""San Francisco State University"" in year 2004?",return graduates ;return #1 in year 2004 ;return #2 of  San Francisco State University ;return number of  #3,"[""SELECT['graduates']"", ""FILTER['#1', 'in year 2004']"", ""FILTER['#2', 'of San Francisco State University']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'filter', 'aggregate']",train
SPIDER_train_2387,How many people graduated from San Francisco State University in 2004?,return people ;return #1 that  graduated from San Francisco State University ;return #2 in 2004 ;return number of  #3,"[""SELECT['people']"", ""FILTER['#1', 'that graduated from San Francisco State University']"", ""FILTER['#2', 'in 2004']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'filter', 'aggregate']",train
SPIDER_train_2388,"What is the campus fee of ""San Francisco State University"" in year 2000?",return San Francisco State University ;return campus fee of  #1 ;return #2 in 2000,"[""SELECT['San Francisco State University']"", ""PROJECT['campus fee of #REF', '#1']"", ""FILTER['#2', 'in 2000']""]","['select', 'project', 'filter']",train
SPIDER_train_2389,"In the year 2000, what is the campus fee for San Francisco State University?",return San Francisco State University ;return campus fees of  #1 ;return #2 in 2000,"[""SELECT['San Francisco State University']"", ""PROJECT['campus fees of #REF', '#1']"", ""FILTER['#2', 'in 2000']""]","['select', 'project', 'filter']",train
SPIDER_train_239,Return the characters and durations for each actor.,"return actors ;return characters of  #1 ;return durations of  #1 ;return #2 ,  #3","[""SELECT['actors']"", ""PROJECT['characters of #REF', '#1']"", ""PROJECT['durations of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_2390,"Find the campus fee of ""San Jose State University"" in year 2000.",return San Jose State University ;return campus fees of  #1 ;return years of  #2 ;return #2 where #3 is  2000,"[""SELECT['San Jose State University']"", ""PROJECT['campus fees of #REF', '#1']"", ""PROJECT['years of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is 2000']""]","['select', 'project', 'project', 'comparative']",train
SPIDER_train_2391,What is the campus fee in the year 2000 for San Jose State University?,return University ;return #1 that  are  San Jose State ;return campus fees of  #2 ;return #3 that  are  in year 2000,"[""SELECT['University']"", ""FILTER['#1', 'that are San Jose State']"", ""PROJECT['campus fees of #REF', '#2']"", ""FILTER['#3', 'that are in year 2000']""]","['select', 'filter', 'project', 'filter']",train
SPIDER_train_2392,How many CSU campuses are there?,return CSU campuses ;return number of #1,"[""SELECT['CSU campuses']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_2393,What is the total number of campuses?,return campuses ;return number of  #1,"[""SELECT['campuses']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_2394,How many candidates are there?,return candidates ;return number of #1,"[""SELECT['candidates']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_2395,Count the number of candidates.,return candidates ;return number of #1,"[""SELECT['candidates']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_2396,Which poll resource provided the most number of candidate information?,return poll resources ;return candidate information #1 provided ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['poll resources']"", ""PROJECT['candidate information #REF provided', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_2397,Return the poll resource associated with the most candidates.,return poll resources ;return candidates of #1 ;return number of  #2 for each #1 ;return #1 where #3 is highest,"[""SELECT['poll resources']"", ""PROJECT['candidates of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_2398,what are the top 3 highest support rates?,return support rates ;return the top 3 highest #1,"[""SELECT['support rates']"", ""AGGREGATE['max', '#1']""]","['select', 'aggregate']",train
SPIDER_train_2399,Return the top 3 greatest support rates.,return support rates ;return top 3 highest #1,"[""SELECT['support rates']"", ""AGGREGATE['max', '#1']""]","['select', 'aggregate']",train
SPIDER_train_24,What is the average number of working horses of farms with more than 5000 total number of horses?,return farms ;return horses on  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than 5000 ;return horses on  #4 ;return #5 that  are  working ;return number of  #6 ;return average of  #7,"[""SELECT['farms']"", ""PROJECT['horses on #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 5000']"", ""PROJECT['horses on #REF', '#4']"", ""FILTER['#5', 'that are working']"", ""AGGREGATE['count', '#6']"", ""AGGREGATE['avg', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'filter', 'aggregate', 'aggregate']",train
SPIDER_train_240,List the name of actors whose age is not 20.,return actors ;return ages of  #1 ;return #1 where  #2 is not  20 ;return names of  #3,"[""SELECT['actors']"", ""PROJECT['ages of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not 20']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_2400,Find the id of the candidate who got the lowest oppose rate.,return candidates ;return oppose rate of  #1 ;return #1 where  #2 is  lowest ;return id of  #3,"[""SELECT['candidates']"", ""PROJECT['oppose rate of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""PROJECT['id of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_2401,What is the id of the candidate with the lowest oppose rate?,return candidates ;return oppose rates of  #1 ;return #1 where #2 is  lowest ;return id of  #3,"[""SELECT['candidates']"", ""PROJECT['oppose rates of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""PROJECT['id of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_2402,"Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.","return candidates ;return support rates of #1 ;return consider rates of #1 ;return oppose rates of #1 ;return unsure rates of #1 ;return #2 ,  #3 ,   #4 ;return #6 sorted by #5 in  ascending order","[""SELECT['candidates']"", ""PROJECT['support rates of #REF', '#1']"", ""PROJECT['consider rates of #REF', '#1']"", ""PROJECT['oppose rates of #REF', '#1']"", ""PROJECT['unsure rates of #REF', '#1']"", ""UNION['#2', '#3', '#4']"", ""SORT['#6', '#5', 'in ascending order']""]","['select', 'project', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_2403,"What are the support, consider, and oppose rates of each candidate, ordered ascending by their unsure rate?","return candidates ;return support rates of  #1 ;return consider rates of  #1 ;return oppose rates of  #1 ;return unsure rates of  #1 ;return #2 ,  #3 ,   #4 ;return #6 sorted by #5 in ascending order","[""SELECT['candidates']"", ""PROJECT['support rates of #REF', '#1']"", ""PROJECT['consider rates of #REF', '#1']"", ""PROJECT['oppose rates of #REF', '#1']"", ""PROJECT['unsure rates of #REF', '#1']"", ""UNION['#2', '#3', '#4']"", ""SORT['#6', '#5', 'in ascending order']""]","['select', 'project', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_2404,which poll source does the highest oppose rate come from?,return oppose rates ;return highest #1 ;return poll source of  #2,"[""SELECT['oppose rates']"", ""AGGREGATE['max', '#1']"", ""PROJECT['poll source of #REF', '#2']""]","['select', 'aggregate', 'project']",train
SPIDER_train_2405,Return the poll source corresponding to the candidate who has the oppose rate.,return candidates ;return #1 with  oppose rate ;return poll source corresponding to  #2,"[""SELECT['candidates']"", ""FILTER['#1', 'with oppose rate']"", ""PROJECT['poll source corresponding to #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2406,List all people names in the order of their date of birth from old to young.,return people ;return names of #1 ;return dates of birth of  #1 ;return #2 sorted by #3 from old to  young,"[""SELECT['people']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['dates of birth of #REF', '#1']"", ""SORT['#2', '#3', 'from old to young']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_2407,"What are the names of all people, ordered by their date of birth?",return people ;return names of  #1 ;return date of  birth of #1 ;return #2 sorted by #3,"[""SELECT['people']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['date of birth of #REF', '#1']"", ""SORT['#2', '#3']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_2408,Find the average height and weight for all males (sex is M).,"return males ;return height of  #1 ;return weight of  #1 ;return average of  #2 ;return average of  #3 ;return #4 ,   #5","[""SELECT['males']"", ""PROJECT['height of #REF', '#1']"", ""PROJECT['weight of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""AGGREGATE['avg', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_2409,What are the average height and weight across males (sex is M)?,"return males ;return heights of  #1 ;return average of  #2 ;return weights of  #1 ;return average of  #4 ;return #3 ,  #5","[""SELECT['males']"", ""PROJECT['heights of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""PROJECT['weights of #REF', '#1']"", ""AGGREGATE['avg', '#4']"", ""UNION['#3', '#5']""]","['select', 'project', 'aggregate', 'project', 'aggregate', 'union']",train
SPIDER_train_241,What are the names of actors who are not 20 years old?,return actors ;return #1 who  are  not  20 years old ;return names of  #2,"[""SELECT['actors']"", ""FILTER['#1', 'who are not 20 years old']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2410,find the names of people who are taller than 200 or lower than 190.,return people ;return #1 taller than 200 ;return #1 lower than 190 ;return #2 or  #3 ;return names of  #4,"[""SELECT['people']"", ""FILTER['#1', 'taller than 200']"", ""FILTER['#1', 'lower than 190']"", ""UNION['#2', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_2411,What are the names of people who have a height greater than 200 or less than 190?,"return people ;return heights of  #1 ;return #1 where #2 is  greater than 200 ;return #1 where #2 is  less than 190 ;return #3 ,  #4 ;return names of  #5","[""SELECT['people']"", ""PROJECT['heights of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is greater than 200']"", ""COMPARATIVE['#1', '#2', 'is less than 190']"", ""UNION['#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_2412,Find the average and minimum weight for each gender.,"return weights of  each gender ;return average of  #1 for each gender ;return minimum of  #1 for each gender ;return #2 ,   #3","[""SELECT['weights of each gender']"", ""PROJECT['gender', '#1']"", ""GROUP['avg', '#1', '#2']"", ""PROJECT['gender', '#1']"", ""GROUP['min', '#1', '#4']"", ""UNION['#3', '#5']""]","['select', 'project', 'group', 'project', 'group', 'union']",train
SPIDER_train_2413,What are the average and minimum weights for people of each sex?,"return people ;return sex of #1 ;return weight of #1 ;return average of #3 for each #2 ;return minimum of #3 for each #2 ;return #4, #5","[""SELECT['people']"", ""PROJECT['sex of #REF', '#1']"", ""PROJECT['weight of #REF', '#1']"", ""GROUP['avg', '#3', '#2']"", ""GROUP['min', '#3', '#2']"", ""UNION['#4', '#5']""]","['select', 'project', 'project', 'group', 'group', 'union']",train
SPIDER_train_2414,Find the name and gender of the candidate who got the highest support rate.,"return candidates ;return support rates of #1 ;return #1 where #2 is highest ;return name of #3 ;return gender of #3 ;return #4 ,  #5","[""SELECT['candidates']"", ""PROJECT['support rates of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['name of #REF', '#3']"", ""PROJECT['gender of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_2415,What is the name and sex of the candidate with the highest support rate?,"return candidates ;return support rates of #1 ;return #1 where #2 is  the   highest ;return the   name of #3 ;return the   sex of #3 ;return #4 ,  #5","[""SELECT['candidates']"", ""PROJECT['support rates of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the highest']"", ""PROJECT['the name of #REF', '#3']"", ""PROJECT['the sex of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_2416,Find the name of the candidates whose oppose percentage is the lowest for each sex.,return candidates ;return sexes of #1 ;return oppose percentages of #1 ;return the  lowest of #3 for each #2 ;return #1 where #3 is equal to #4 ;return names of #5,"[""SELECT['candidates']"", ""PROJECT['sexes of #REF', '#1']"", ""PROJECT['oppose percentages of #REF', '#1']"", ""GROUP['min', '#3', '#2']"", ""COMPARATIVE['#1', '#3', 'is equal to #4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_2418,which gender got the highest average uncertain ratio.,return genders ;return uncertain ratios of  #1 ;return average of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['genders']"", ""PROJECT['uncertain ratios of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_2419,What is the sex of the candidate who had the highest unsure rate?,return candidates ;return unsure rates of #1 ;return #1 where #2 is  the   highest ;return the   sex of #3,"[""SELECT['candidates']"", ""PROJECT['unsure rates of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the highest']"", ""PROJECT['the sex of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_242,What are the characters of actors in descending order of age?,return actors ;return characters of  #1 ;return ages of  #1 ;return #2 sorted by #3 in descending order,"[""SELECT['actors']"", ""PROJECT['characters of #REF', '#1']"", ""PROJECT['ages of #REF', '#1']"", ""SORT['#2', '#3', 'in descending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_2420,what are the names of people who did not participate in the candidate election.,return people ;return #1 who  participate in the candidate election ;return #1 besides #2 ;return names of #3,"[""SELECT['people']"", ""FILTER['#1', 'who participate in the candidate election']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_2421,Give the names of people who did not participate in the candidate election.,return the  candidate election ;return people who participate in #1 ;return people besides #2 ;return the  names of #3,"[""SELECT['the candidate election']"", ""PROJECT['people who participate in #REF', '#1']"", ""SELECT['people']"", ""DISCARD['#3', '#2']"", ""PROJECT['the names of #REF', '#4']""]","['select', 'project', 'select', 'discard', 'project']",train
SPIDER_train_2422,Find the names of the candidates whose support percentage is lower than their oppose rate.,return candidates ;return support percentage of  #1 ;return oppose rate of  #1 ;return #1 where  #2 is  lower than #3 ;return names of  #4,"[""SELECT['candidates']"", ""PROJECT['support percentage of #REF', '#1']"", ""PROJECT['oppose rate of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is lower than #3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_2423,What are the names of candidates who have a lower support rate than oppose rate?,return candidates ;return support rates of  #1 ;return oppose rates of  #1 ;return #1 where #2 is  lower than #3 ;return names of  #4,"[""SELECT['candidates']"", ""PROJECT['support rates of #REF', '#1']"", ""PROJECT['oppose rates of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is lower than #3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_2424,how many people are there whose weight is higher than 85 for each gender?,return people ;return genders of #1 ;return weights of #1 ;return #1 where #3 is  higher than 85 ;return the  number of  #4 for each #2,"[""SELECT['people']"", ""PROJECT['genders of #REF', '#1']"", ""PROJECT['weights of #REF', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 85']"", ""GROUP['count', '#4', '#2']"", ""UNION['#2', '#5']""]","['select', 'project', 'project', 'comparative', 'group', 'union']",train
SPIDER_train_2425,Count the number of people of each sex who have a weight higher than 85.,return people ;return #1 where  weight is  higher than 85 ;return number of #2 of  each sex,"[""SELECT['people']"", ""FILTER['#1', 'where weight is higher than 85']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_2426,"find the highest support percentage, lowest consider rate and oppose rate of all candidates.","return candidates ;return support percentages of  #1 ;return consider rates of  #1 ;return oppose rates of  #1 ;return the  highest #2 ;return the  lowest #3 ;return the  lowest #4 ;return #5 ,  #6 ,   #7","[""SELECT['candidates']"", ""PROJECT['support percentages of #REF', '#1']"", ""PROJECT['consider rates of #REF', '#1']"", ""PROJECT['oppose rates of #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""AGGREGATE['min', '#3']"", ""AGGREGATE['min', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'project', 'project', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_2427,"Return the maximum support rate, minimum consider rate, and minimum oppose rate across all candidates?","return candidates ;return support rates of #1 ;return consider rates of #1 ;return oppose rates of #1 ;return maximum of #2 ;return minimum of #3 ;return minimum of #4 ;return #5 ,  #6 ,   #7","[""SELECT['candidates']"", ""PROJECT['support rates of #REF', '#1']"", ""PROJECT['consider rates of #REF', '#1']"", ""PROJECT['oppose rates of #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""AGGREGATE['min', '#3']"", ""AGGREGATE['min', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'project', 'project', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_2428,list all female (sex is F) candidate names in the alphabetical order.,return candidates ;return sex of #1 ;return #1 where #2 is F ;return names of #3 ;return #4 sorted by alphabetical order,"[""SELECT['candidates']"", ""PROJECT['sex of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is F']"", ""PROJECT['names of #REF', '#3']"", ""SORT['#4', '#4', 'alphabetical order']""]","['select', 'project', 'comparative', 'project', 'sort']",train
SPIDER_train_2429,What are the names of all female candidates in alphabetical order (sex is F)?,return candidates ;return sex of #1 ;return #1 where #2 is  F ;return names of #3 ;return #4 sorted by alphabetical order,"[""SELECT['candidates']"", ""PROJECT['sex of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is F']"", ""PROJECT['names of #REF', '#3']"", ""SORT['#4', '#4', 'alphabetical order']""]","['select', 'project', 'comparative', 'project', 'sort']",train
SPIDER_train_243,"Return the characters for actors, ordered by age descending.",return actors ;return characters for #1 ;return ages of  #1 ;return #2 sorted by #3 descending,"[""SELECT['actors']"", ""PROJECT['characters for #REF', '#1']"", ""PROJECT['ages of #REF', '#1']"", ""SORT['#2', '#3', 'descending']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_2430,find the name of people whose height is lower than the average.,return people ;return heights of  #1 ;return average of  #2 ;return #1 where #2 is  lower than #3 ;return names of  #4,"[""SELECT['people']"", ""PROJECT['heights of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is lower than #3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_2431,What are the names of people who are shorter than average?,return people ;return height of  #1 ;return average of  #2 ;return #1 where #2 is  less than #3 ;return names of  #4,"[""SELECT['people']"", ""PROJECT['height of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is less than #3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_2432,List all info about all people.,return people ;return all info of  #1,"[""SELECT['people']"", ""PROJECT['all info of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_2433,What is all the information about all people?,return all  people ;return all  information of  #1,"[""SELECT['all people']"", ""PROJECT['all information of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_2434,Find the titles of all movies directed by steven spielberg.,return movies ;return #1 directed by steven spielberg ;return titles of  #2,"[""SELECT['movies']"", ""FILTER['#1', 'directed by steven spielberg']"", ""PROJECT['titles of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2435,What are the names of all movies directed by Steven Spielberg?,return movies ;return #1 directed by Steven Spielberg ;return names of  #2,"[""SELECT['movies']"", ""FILTER['#1', 'directed by Steven Spielberg']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2436,What is the name of the movie produced after 2000 and directed by James Cameron?,return movies ;return #1 produced after 2000 ;return #1 directed by James Cameron ;return #1 of  both #2 and  #3 ;return name of  #4,"[""SELECT['movies']"", ""FILTER['#1', 'produced after 2000']"", ""FILTER['#1', 'directed by James Cameron']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'filter', 'filter', 'intersection', 'project']",train
SPIDER_train_2437,What are the titles of all movies that James Cameron directed after 2000?,return James Cameron ;return movies #1 directed ;return #2 after 2000 ;return titles of  #3,"[""SELECT['James Cameron']"", ""PROJECT['movies #REF directed', '#1']"", ""FILTER['#2', 'after 2000']"", ""PROJECT['titles of #REF', '#3']""]","['select', 'project', 'filter', 'project']",train
SPIDER_train_2439,How many movies were made before 2000?,return movies ;return #1 made before 2000 ;return number of #2,"[""SELECT['movies']"", ""FILTER['#1', 'made before 2000']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_244,What is the duration of the oldest actor?,return actors ;return durations of  #1 ;return #2 where #1 is  oldest,"[""SELECT['actors']"", ""PROJECT['durations of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is oldest']""]","['select', 'project', 'comparative']",train
SPIDER_train_2440,Who is the director of movie Avatar?,return movie Avatar ;return the  director of  #1,"[""SELECT['movie Avatar']"", ""PROJECT['the director of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_2441,Who directed Avatar?,return Avatar ;return who  directed #1,"[""SELECT['Avatar']"", ""PROJECT['who directed #REF', '#1']""]","['select', 'project']",train
SPIDER_train_2442,How many reviewers listed?,return reviewers ;return number of  #1,"[""SELECT['reviewers']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_2443,How many reviewers are there?,return reviewers ;return number of  #1,"[""SELECT['reviewers']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_2444,What is the id of the reviewer whose name has substring “Mike”?,return reviewers ;return #1 with substring Mike ;return id of  #2,"[""SELECT['reviewers']"", ""FILTER['#1', 'with substring Mike']"", ""PROJECT['id of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2445,"What is the id of the reviewer whose name includes the word ""Mike""?",return reviewers ;return #1 whose name includes the  word Mike ;return the  id of  #2,"[""SELECT['reviewers']"", ""FILTER['#1', 'whose name includes the word Mike']"", ""PROJECT['the id of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2446,What is the reviewer id of Daniel Lewis?,return Daniel Lewis ;return the  reviewer id of #1,"[""SELECT['Daniel Lewis']"", ""PROJECT['the reviewer id of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_2447,What is the id of the reviewer named Daniel Lewis?,return reviewers ;return ids of  #1 ;return #2 where #1 is  Daniel Lewis,"[""SELECT['reviewers']"", ""PROJECT['ids of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Daniel Lewis']""]","['select', 'project', 'comparative']",train
SPIDER_train_2448,What is the total number of ratings that has more than 3 stars?,return ratings ;return stars of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  higher than 3 ;return number of  #4,"[""SELECT['ratings']"", ""PROJECT['stars of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'group', 'comparative', 'aggregate']",train
SPIDER_train_2449,How many movie ratings have more than 3 stars?,return movies ;return ratings of  #1 ;return #2 more than  3 stars ;return number of  #3,"[""SELECT['movies']"", ""PROJECT['ratings of #REF', '#1']"", ""FILTER['#2', 'more than 3 stars']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'filter', 'aggregate']",train
SPIDER_train_245,Return the duration of the actor with the greatest age.,return actors ;return ages of  #1 ;return #1 where  #2 is highest ;return duration of  #3,"[""SELECT['actors']"", ""PROJECT['ages of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['duration of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_2450,What is the lowest and highest rating star?,"return rating stars ;return #1 that  is  highest ;return #1 that  is  lowest ;return #2 ,  #3","[""SELECT['rating stars']"", ""FILTER['#1', 'that is highest']"", ""FILTER['#1', 'that is lowest']"", ""UNION['#2', '#3']""]","['select', 'filter', 'filter', 'union']",train
SPIDER_train_2451,What is the maximum and mininum number of stars a rating can receive?,"return ratings ;return stars #1 can receive ;return number of  #2 for each  #1 ;return maximum of  #3 ;return mininum of  #3 ;return #4 ,  #5","[""SELECT['ratings']"", ""PROJECT['stars #REF can receive', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['max', '#3']"", ""PROJECT['mininum of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'group', 'aggregate', 'project', 'union']",train
SPIDER_train_2452,"Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order of year.",return movies ;return ratings of  #1 ;return #1 where #2 is  4 ;return #1 where #2 is  5 ;return #3 or  #4 ;return years of  #5 ;return #5 sorted by #6 in increasing order,"[""SELECT['movies']"", ""PROJECT['ratings of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 4']"", ""COMPARATIVE['#1', '#2', 'is 5']"", ""UNION['#3', '#4']"", ""PROJECT['years of #REF', '#5']"", ""SORT['#5', '#6', 'in increasing order']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project', 'sort']",train
SPIDER_train_2453,"In what years did a movie receive a 4 or 5 star rating, and list the years from oldest to most recently?",return movies ;return ratings of  #1 ;return years of  #2 ;return #3 where  #2 is 4 ;return #3 where  #2 is 5 ;return #4 or #5 ;return #6 sorted by #3 from oldest to  most recently,"[""SELECT['movies']"", ""PROJECT['ratings of #REF', '#1']"", ""PROJECT['years of #REF', '#2']"", ""COMPARATIVE['#3', '#2', 'is 4']"", ""COMPARATIVE['#3', '#2', 'is 5']"", ""UNION['#4', '#5']"", ""SORT['#6', '#3', 'from oldest to most recently']""]","['select', 'project', 'project', 'comparative', 'comparative', 'union', 'sort']",train
SPIDER_train_2454,What are the names of directors who directed movies with 5 star rating? Also return the title of these movies.,"return movies ;return #1 with 5 star rating ;return titles of  #2 ;return directors who  directed #2 ;return names of  #4 ;return #5 ,  #3","[""SELECT['movies']"", ""FILTER['#1', 'with 5 star rating']"", ""PROJECT['titles of #REF', '#2']"", ""PROJECT['directors who directed #REF', '#2']"", ""PROJECT['names of #REF', '#4']"", ""UNION['#5', '#3']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_2455,"What are the names of the directors who created a movie with a 5 star rating, and what was the name of those movies?","return movies ;return ratings of #1 ;return #1 where #2 is  5 stars ;return directors of #3 ;return names of #4 ;return names of #3 ;return #5 ,  #6","[""SELECT['movies']"", ""PROJECT['ratings of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 5 stars']"", ""PROJECT['directors of #REF', '#3']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['names of #REF', '#3']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_2456,What is the average rating star for each reviewer?,return reviewer ;return rating star of #1 ;return average #2 for each  #1,"[""SELECT['reviewer']"", ""PROJECT['rating star of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_2457,What is the average number of stars that each reviewer awards for a movie?,return reviewers ;return stars awarded of #1 ;return the  average of #2 for each #1,"[""SELECT['reviewers']"", ""PROJECT['stars awarded of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_2458,Find the titles of all movies that have no ratings.,return movies ;return ratings of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  at least one ;return #1 besides #4 ;return the  titles of #5,"[""SELECT['movies']"", ""PROJECT['ratings of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least one']"", ""DISCARD['#1', '#4']"", ""PROJECT['the titles of #REF', '#5']""]","['select', 'project', 'group', 'comparative', 'discard', 'project']",train
SPIDER_train_2459,What are the titles of all movies that have not been rated?,return movies ;return #1 that  have  not  been rated ;return titles of  #2,"[""SELECT['movies']"", ""FILTER['#1', 'that have not been rated']"", ""PROJECT['titles of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_246,"What are the names of musicals with nominee ""Bob Fosse""?",return musicals ;return #1 with nominee Bob Fosse ;return names of  #2,"[""SELECT['musicals']"", ""FILTER['#1', 'with nominee Bob Fosse']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2460,Find the names of all reviewers who have ratings with a NULL value for the date.,return reviewers ;return ratings of  #1 ;return date of  #2 ;return #1 where  #3 is  NULL ;return names of  #4,"[""SELECT['reviewers']"", ""PROJECT['ratings of #REF', '#1']"", ""PROJECT['date of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is NULL']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_2461,What are the different names of all reviewers whose ratings do not have a date field?,return reviewers ;return #1 who  have  a date field ;return #1 besides  #2 ;return different names of  #3,"[""SELECT['reviewers']"", ""FILTER['#1', 'who have a date field']"", ""DISCARD['#1', '#2']"", ""PROJECT['different names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_2462,What is the average rating stars and title for the oldest movie?,"return movies ;return oldest #1 ;return rating stars of  #2 ;return average of  #3 ;return title of  #2 ;return #4 ,  #5","[""SELECT['movies']"", ""PROJECT['oldest #REF', '#1']"", ""PROJECT['rating stars of #REF', '#2']"", ""AGGREGATE['avg', '#3']"", ""PROJECT['title of #REF', '#2']"", ""UNION['#4', '#5']""]","['select', 'project', 'project', 'aggregate', 'project', 'union']",train
SPIDER_train_2463,"For the oldest movie listed, what is its average rating and title?","return movies ;return oldest #1 ;return ratings of  #2 ;return average of  #3 ;return title of  #2 ;return #4 ,  #5","[""SELECT['movies']"", ""PROJECT['oldest #REF', '#1']"", ""PROJECT['ratings of #REF', '#2']"", ""AGGREGATE['avg', '#3']"", ""PROJECT['title of #REF', '#2']"", ""UNION['#4', '#5']""]","['select', 'project', 'project', 'aggregate', 'project', 'union']",train
SPIDER_train_2464,What is the name of the most recent movie?,return movie ;return most recent #1 ;return name of  #2,"[""SELECT['movie']"", ""PROJECT['most recent #REF', '#1']"", ""PROJECT['name of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_2465,What is the title of the newest movie?,return movies ;return the  newest of  #1 ;return the  title of  #2,"[""SELECT['movies']"", ""PROJECT['the newest of #REF', '#1']"", ""PROJECT['the title of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_2466,What is the maximum stars and year for the most recent movie?,return movie ;return #1 that is most recent ;return number of  stars for #2 ;return maximum #3 ;return year of  #2 ;return #4 and  #5,"[""SELECT['movie']"", ""FILTER['#1', 'that is most recent']"", ""PROJECT['stars for #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""AGGREGATE['max', '#4']"", ""PROJECT['year of #REF', '#2']"", ""UNION['#5', '#6']""]","['select', 'filter', 'project', 'group', 'aggregate', 'project', 'union']",train
SPIDER_train_2467,What is highest rating for the most recent movie and when was it released?,return movie ;return most recent #1 ;return highest rating of  #2 ;return #2 released ;return #3 and  when  released,"[""SELECT['movie']"", ""PROJECT['most recent #REF', '#1']"", ""PROJECT['highest rating of #REF', '#2']"", ""FILTER['#2', 'released']"", ""FILTER['#3', 'and when released']""]","['select', 'project', 'project', 'filter', 'filter']",train
SPIDER_train_2468,What is the names of movies whose created year is after all movies directed by Steven Spielberg?,return movies ;return #1 directed by Steven Spielberg ;return created years of #2 ;return created years of #1 ;return #1 where #4 is  after all #3 ;return the  names of #5,"[""SELECT['movies']"", ""FILTER['#1', 'directed by Steven Spielberg']"", ""PROJECT['created years of #REF', '#2']"", ""PROJECT['created years of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is after all #3']"", ""PROJECT['the names of #REF', '#5']""]","['select', 'filter', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_2469,What are the names of all movies that were created after the most recent Steven Spielberg film?,return Steven Spielberg films ;return when  was  #1 created ;return highest of #2 ;return movies that were created after #3,"[""SELECT['Steven Spielberg films']"", ""PROJECT['when was #REF created', '#1']"", ""AGGREGATE['max', '#2']"", ""PROJECT['movies that were created after #REF', '#3']""]","['select', 'project', 'aggregate', 'project']",train
SPIDER_train_247,Return the names of musicals who have the nominee Bob Fosse.,return musicals ;return #1 who  have  the nominee Bob Fosse,"[""SELECT['musicals']"", ""FILTER['#1', 'who have the nominee Bob Fosse']""]","['select', 'filter']",train
SPIDER_train_2470,What are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron?,return movies ;return #1 directed by James Cameron ;return the  stars of  #2 ;return the  average of  #3 ;return the  stars of  #1 ;return #1 where #5 is  greater than #4,"[""SELECT['movies']"", ""FILTER['#1', 'directed by James Cameron']"", ""PROJECT['the stars of #REF', '#2']"", ""AGGREGATE['avg', '#3']"", ""PROJECT['the stars of #REF', '#1']"", ""COMPARATIVE['#1', '#5', 'is greater than #4']""]","['select', 'filter', 'project', 'aggregate', 'project', 'comparative']",train
SPIDER_train_2471,What are the titles and directors of all movies that have a rating higher than the average James Cameron film rating?,"return movies ;return ratings of #1 ;return #1 of James Cameron ;return ratings of #3 ;return average of #4 ;return #1 where #2 is  higher than #5 ;return titles of #6 ;return directors of #6 ;return #7 ,  #8","[""SELECT['movies']"", ""PROJECT['ratings of #REF', '#1']"", ""FILTER['#1', 'of James Cameron']"", ""PROJECT['ratings of #REF', '#3']"", ""AGGREGATE['avg', '#4']"", ""COMPARATIVE['#1', '#2', 'is higher than #5']"", ""PROJECT['titles of #REF', '#6']"", ""PROJECT['directors of #REF', '#6']"", ""UNION['#7', '#8']""]","['select', 'project', 'filter', 'project', 'aggregate', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_2472,"Return reviewer name, movie title, stars, and ratingDate. And sort the data first by reviewer name, then by movie title, and lastly by number of stars.","return reviewer  name  ;return movie  title  ;return stars ;return ratingDate ;return #1 ,    #2 ,  #3 ,   #4 ;return #1 ,    #2 ,  #3 ;return #5 sorted by #6","[""SELECT['reviewer name']"", ""SELECT['movie title']"", ""SELECT['stars']"", ""SELECT['ratingDate']"", ""UNION['#1', '#2', '#3', '#4']"", ""UNION['#1', '#2', '#3']"", ""SORT['#5', '#6']""]","['select', 'select', 'select', 'select', 'union', 'union', 'sort']",train
SPIDER_train_2473,"What is the reviewer name, film title, movie rating, and rating date  for every movie ordered by reviewer name, movie title, then finally rating?","return movies ;return the  reviewer  names of  #1 ;return the  film titles of  #1 ;return the  movie ratings of  #1 ;return the  rating   dates of  #1 ;return #2 ,  #3 ,     #4 ,    #5 ;return #2 ,  #3 ,     #4 ;return #6 ordered by #7","[""SELECT['movies']"", ""PROJECT['the reviewer names of #REF', '#1']"", ""PROJECT['the film titles of #REF', '#1']"", ""PROJECT['the movie ratings of #REF', '#1']"", ""PROJECT['the rating dates of #REF', '#1']"", ""UNION['#2', '#3', '#4', '#5']"", ""UNION['#2', '#3', '#4']"", ""SORT['#6', '#7']""]","['select', 'project', 'project', 'project', 'project', 'union', 'union', 'sort']",train
SPIDER_train_2474,Find the names of all reviewers who have contributed three or more ratings.,return reviewers ;return #1 that  have  contributed three or more ratings ;return names of  #2,"[""SELECT['reviewers']"", ""FILTER['#1', 'that have contributed three or more ratings']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2475,What are the names of all reviewers that have rated 3 or more movies?,return reviewers ;return movies #1 rated ;return number of  #2 for each  #1 ;return #1 where #3 is  3 or  more ;return names of  #4,"[""SELECT['reviewers']"", ""PROJECT['movies #REF rated', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is 3 or more']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_2476,Find the names of all reviewers who rated Gone with the Wind.,return reviewers ;return #1 who  rated Gone with  the Wind ;return the names of  #2,"[""SELECT['reviewers']"", ""FILTER['#1', 'who rated Gone with the Wind']"", ""PROJECT['the names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2477,What are the names of all the different reviewers who rates Gone with the Wind?,return reviewers ;return #1 who  rate Gone with the  Wind ;return names of  #2,"[""SELECT['reviewers']"", ""FILTER['#1', 'who rate Gone with the Wind']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2478,Find the names of all directors whose movies are rated by Sarah Martinez.,return movies ;return #1 rated by Sarah Martinez ;return directors of #2 ;return names of #3,"[""SELECT['movies']"", ""FILTER['#1', 'rated by Sarah Martinez']"", ""PROJECT['directors of #REF', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_2479,What are the names of all directors whose movies have been reviewed by Sarah Martinez?,return movies ;return #1 reviewed by Sarah Martinez ;return directors of  #2 ;return names of  #3,"[""SELECT['movies']"", ""FILTER['#1', 'reviewed by Sarah Martinez']"", ""PROJECT['directors of #REF', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_248,"What are the distinct nominees of the musicals with the award that is not ""Tony Award""?",return musicals ;return awards ;return #2 is  Tony Award ;return #2 besides  #3 ;return musicals with #4 ;return distinct nominees of  #5,"[""SELECT['musicals']"", ""SELECT['awards']"", ""FILTER['#2', 'is Tony Award']"", ""DISCARD['#2', '#3']"", ""PROJECT['musicals with #REF', '#4']"", ""PROJECT['distinct nominees of #REF', '#5']""]","['select', 'select', 'filter', 'discard', 'project', 'project']",train
SPIDER_train_2480,"For any rating where the name of reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars.","return ratings ;return reviewers of   #1 ;return names of   #2 ;return movies of   #1 ;return directors of   #4 ;return names of   #5 ;return #1 where #3 is  the   same as #6 ;return reviewers of   #7 ;return names of   #8 ;return movies of   #7 ;return titles of   #10 ;return stars of   #7 ;return number of  #12 ;return #9 ,  #11 ,   #13","[""SELECT['ratings']"", ""PROJECT['reviewers of #REF', '#1']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['movies of #REF', '#1']"", ""PROJECT['directors of #REF', '#4']"", ""PROJECT['names of #REF', '#5']"", ""COMPARATIVE['#1', '#3', 'is the same as #6']"", ""PROJECT['reviewers of #REF', '#7']"", ""PROJECT['names of #REF', '#8']"", ""PROJECT['movies of #REF', '#7']"", ""PROJECT['titles of #REF', '#10']"", ""PROJECT['stars of #REF', '#7']"", ""AGGREGATE['count', '#12']"", ""UNION['#9', '#11', '#13']""]","['select', 'project', 'project', 'project', 'project', 'project', 'comparative', 'project', 'project', 'project', 'project', 'project', 'aggregate', 'union']",train
SPIDER_train_2481,"What are the different reviewer names, movie titles, and stars for every rating where the reviewer had the same name as the director?","return ratings ;return reviewers of #1 ;return names of #2 ;return movies of #1 ;return directors of #4 ;return names of #5 ;return #1 where #3 is  the    same as #6 ;return reviewers of #7 ;return different names of #8 ;return movies of #7 ;return titles of #10 ;return stars of #7 ;return #8 , #11 ,  #12","[""SELECT['ratings']"", ""PROJECT['reviewers of #REF', '#1']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['movies of #REF', '#1']"", ""PROJECT['directors of #REF', '#4']"", ""PROJECT['names of #REF', '#5']"", ""COMPARATIVE['#1', '#3', 'is the same as #6']"", ""PROJECT['reviewers of #REF', '#7']"", ""PROJECT['different names of #REF', '#8']"", ""PROJECT['movies of #REF', '#7']"", ""PROJECT['titles of #REF', '#10']"", ""PROJECT['stars of #REF', '#7']"", ""UNION['#8', '#11', '#12']""]","['select', 'project', 'project', 'project', 'project', 'project', 'comparative', 'project', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_2482,Return all reviewer names and movie names together in a single list.,"return reviewer ;return names  of #1 ;return movies ;return names  of #3 ;return #2 ,  #4","[""SELECT['reviewer']"", ""PROJECT['names of #REF', '#1']"", ""SELECT['movies']"", ""PROJECT['names of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'select', 'project', 'union']",train
SPIDER_train_2483,What are the names of all the reviewers and movie names?,"return movies ;return reviewers of  #1 ;return names of  #2 ;return names of  #1 ;return #3 ,  #4","[""SELECT['movies']"", ""PROJECT['reviewers of #REF', '#1']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['names of #REF', '#1']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_2484,Find the titles of all movies not reviewed by Chris Jackson.,return movies ;return #1 not  reviewed by Chris Jackson ;return titles of  #2,"[""SELECT['movies']"", ""FILTER['#1', 'not reviewed by Chris Jackson']"", ""PROJECT['titles of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2485,What are the titles of all movies that were not reviewed by Chris Jackson?,return movies ;return #1 reviewed by Chris Jackson ;return #1 besides  #2 ;return titles of  #3,"[""SELECT['movies']"", ""FILTER['#1', 'reviewed by Chris Jackson']"", ""DISCARD['#1', '#2']"", ""PROJECT['titles of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_2486,"For all directors who directed more than one movie, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title.","return directors ;return movies of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  higher than one ;return movies of #4 ;return titles of #5 ;return names of #4 ;return #6 ,  #7 ;return #7 ,  #6 ;return #8 sorted by #9","[""SELECT['directors']"", ""PROJECT['movies of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than one']"", ""PROJECT['movies of #REF', '#4']"", ""PROJECT['titles of #REF', '#5']"", ""PROJECT['names of #REF', '#4']"", ""UNION['#6', '#7']"", ""UNION['#7', '#6']"", ""SORT['#8', '#9']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'project', 'union', 'union', 'sort']",train
SPIDER_train_2487,"For all directors who have directed more than one movie, what movies have they directed and what are their names?","return directors ;return movies of  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  more than  one ;return movies of  #4 ;return names of  #4 ;return #5 ,   #6","[""SELECT['directors']"", ""PROJECT['movies of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than one']"", ""PROJECT['movies of #REF', '#4']"", ""PROJECT['names of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_2488,"For directors who had more than one movie, return the titles and produced years of all movies directed by them.","return directors ;return movies directed by #1 ;return number of  #2 for each #1 ;return #1 where #3 is  more than  one ;return movies directed by #4 ;return the  titles of #5 ;return the  produced years of #5 ;return #6 ,  #7","[""SELECT['directors']"", ""PROJECT['movies directed by #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than one']"", ""PROJECT['movies directed by #REF', '#4']"", ""PROJECT['the titles of #REF', '#5']"", ""PROJECT['the produced years of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_2489,"For each director who directed more than one movie, what are the titles and dates of release for all those movies?","return directors ;return movies of  #1 ;return number of #2 for each #1 ;return #2 where  #3 is  more than  one ;return titles of  #4 ;return dates of  release of #4 ;return #5 ,   #6","[""SELECT['directors']"", ""PROJECT['movies of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#2', '#3', 'is more than one']"", ""PROJECT['titles of #REF', '#4']"", ""PROJECT['dates of release of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_249,Return the different nominees of musicals that have an award that is not the Tony Award.,return musicals ;return #1 that  have  Tony Award ;return #1 besides  #2 ;return nominees of  #3,"[""SELECT['musicals']"", ""FILTER['#1', 'that have Tony Award']"", ""DISCARD['#1', '#2']"", ""PROJECT['nominees of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_2490,What are the names of the directors who made exactly one movie?,return directors ;return movies #1 made ;return number of  #2 for each  #1 ;return #1 where #3 is  one ;return names of  #4,"[""SELECT['directors']"", ""PROJECT['movies #REF made', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is one']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_2491,What are the names of all directors who made one movie?,return directors ;return movies of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  one ;return names of  #4,"[""SELECT['directors']"", ""PROJECT['movies of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is one']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_2492,What are the names of the directors who made exactly one movie excluding director NULL?,return directors ;return director NULL ;return #1 besides #2 ;return movies that  #3 made ;return the  number of  #4 for each #3 ;return #3 where #5 is  one ;return the  names of #6,"[""SELECT['directors']"", ""SELECT['director NULL']"", ""DISCARD['#1', '#2']"", ""PROJECT['movies that #REF made', '#3']"", ""GROUP['count', '#4', '#3']"", ""COMPARATIVE['#3', '#5', 'is one']"", ""PROJECT['the names of #REF', '#6']""]","['select', 'select', 'discard', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_2493,What are the names of all directors who have made one movie except for the director named NULL?,return directors ;return movies #1 made ;return number of  #2 for each  #1 ;return #1 where #3 is  one ;return #4 besides  #1 named NULL,"[""SELECT['directors']"", ""PROJECT['movies #REF made', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is one']"", ""FILTER['#4', '#1 named NULL']"", ""DISCARD['#4', '#5']""]","['select', 'project', 'group', 'comparative', 'filter', 'discard']",train
SPIDER_train_2494,How many movie reviews does each director get?,return directors ;return movies of  #1 ;return reviews of  #2 ;return number of  #3 for each  #1,"[""SELECT['directors']"", ""PROJECT['movies of #REF', '#1']"", ""PROJECT['reviews of #REF', '#2']"", ""GROUP['count', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_2495,"For each director, how many reviews have they received?",return directors ;return reviews received of  #1 ;return number of #2 for each #1,"[""SELECT['directors']"", ""PROJECT['reviews received of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_2496,Find the movies with the highest average rating. Return the movie titles and average rating.,"return movies ;return ratings of  #1 ;return average #2 for each #1 ;return #1 where  #3 is  highest ;return titles of  #4 ;return ratings of  #4 ;return average of  #6 ;return #5 ,   #7","[""SELECT['movies']"", ""PROJECT['ratings of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['titles of #REF', '#4']"", ""PROJECT['ratings of #REF', '#4']"", ""AGGREGATE['avg', '#6']"", ""UNION['#5', '#7']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'aggregate', 'union']",train
SPIDER_train_2497,What are the movie titles with the highest average rating and what are those ratings?,"return movies ;return ratings of  #1 ;return average of  #2 for each  #1 ;return #1 where #3 is  highest ;return titles of  #4 ;return ratings of  #4 ;return #5 ,  #6","[""SELECT['movies']"", ""PROJECT['ratings of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['titles of #REF', '#4']"", ""PROJECT['ratings of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_2498,What are the movie titles and average rating of the movies with the lowest average rating?,"return movies ;return ratings of  #1 ;return average  of  #2 for each  #1 ;return #1 where #3 is  lowest ;return titles of  #4 ;return ratings of  #4 ;return average  of  #6 ;return #5 ,  #7","[""SELECT['movies']"", ""PROJECT['ratings of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['titles of #REF', '#4']"", ""PROJECT['ratings of #REF', '#4']"", ""AGGREGATE['avg', '#6']"", ""UNION['#5', '#7']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'aggregate', 'union']",train
SPIDER_train_2499,What are the titles and average ratings for all movies that have the lowest average rating?,"return movies ;return ratings of  #1 ;return average  of  #2 for each  #1 ;return #1 where #3 is  lowest ;return titles of  #4 ;return ratings of  #4 ;return average  of  #6 for each  #4 ;return #5 ,  #7","[""SELECT['movies']"", ""PROJECT['ratings of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['titles of #REF', '#4']"", ""PROJECT['ratings of #REF', '#4']"", ""GROUP['avg', '#6', '#4']"", ""UNION['#5', '#7']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'group', 'union']",train
SPIDER_train_25,Give the average number of working horses on farms with more than 5000 total horses.,return farms ;return working horses  on  #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is higher than 5000 ;return working horses  on  #4 ;return number of  #5 for each  #1 ;return average of  #6,"[""SELECT['farms']"", ""PROJECT['working horses on #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 5000']"", ""PROJECT['working horses on #REF', '#4']"", ""GROUP['count', '#5', '#1']"", ""AGGREGATE['avg', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'group', 'aggregate']",train
SPIDER_train_250,Show names of actors and names of musicals they are in.,return actors ;return musicals of #1 ;return names of  #1 ;return names of  #2 ;return #3 or #4,"[""SELECT['actors']"", ""PROJECT['musicals of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['names of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_2500,What are the names and years of the movies that has the top 3 highest rating star?,"return movies ;return rating stars of #1 ;return #1 where #2 is highest ;return #1 besides  #3 ;return #4 where #2 is highest ;return #4 besides  #5 ;return #6 where #2 is highest ;return #3 ,  #5 ,   #7 ;return name of #8 ;return year of #8 ;return #9 ,  #10","[""SELECT['movies']"", ""PROJECT['rating stars of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""DISCARD['#1', '#3']"", ""SUPERLATIVE['max', '#4', '#2']"", ""DISCARD['#4', '#5']"", ""SUPERLATIVE['max', '#6', '#2']"", ""UNION['#3', '#5', '#7']"", ""PROJECT['name of #REF', '#8']"", ""PROJECT['year of #REF', '#8']"", ""UNION['#9', '#10']""]","['select', 'project', 'superlative', 'discard', 'superlative', 'discard', 'superlative', 'union', 'project', 'project', 'union']",train
SPIDER_train_2501,What are the names and years released for the movies with the top 3 highest ratings?,"return movies ;return ratings of  #1 ;return #1 where #2 is  top 3 highest ;return names of  #3 ;return years released of  #3 ;return #4 ,  #5","[""SELECT['movies']"", ""PROJECT['ratings of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is top 3 highest']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['years released of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_2502,"For each director, return the director's name together with the title of the movie they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL.","return directors ;return #1 besides  NULL ;return movies of   #2 ;return ratings of   #3 ;return the  highest of   #4 for each #1 ;return #3 where #4 is equal to #5 ;return names of   #1 ;return titles of   #6 ;return #7 ,  #8 ,   #5","[""SELECT['directors']"", ""FILTER['#1', 'NULL']"", ""DISCARD['#1', '#2']"", ""PROJECT['movies of #REF', '#3']"", ""PROJECT['ratings of #REF', '#4']"", ""GROUP['max', '#5', '#1']"", ""COMPARATIVE['#4', '#5', 'is equal to #6']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['titles of #REF', '#7']"", ""UNION['#8', '#9', '#6']""]","['select', 'filter', 'discard', 'project', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_2503,"For each director, what are the titles and ratings for all the movies they reviewed?","return directors ;return movies that  #1 reviewed ;return titles of #2 ;return ratings of #2 ;return #3 ,  #4","[""SELECT['directors']"", ""PROJECT['movies that #REF reviewed', '#1']"", ""PROJECT['titles of #REF', '#2']"", ""PROJECT['ratings of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_2504,Find the title and star rating of the movie that got the least rating star for each reviewer.,"return reviewers ;return movies of #1 ;return star ratings of #2 ;return #2 where #3 is lowest ;return title of #4 ;return star rating  of #4 ;return #5 ,  #6","[""SELECT['reviewers']"", ""PROJECT['movies of #REF', '#1']"", ""PROJECT['star ratings of #REF', '#2']"", ""SUPERLATIVE['min', '#2', '#3']"", ""PROJECT['title of #REF', '#4']"", ""PROJECT['star rating of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'project', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_2505,"For each reviewer id, what is the title and rating for the movie with the smallest rating?","return reviewers ;return id of #1 ;return ratings of #2 ;return lowest #3 for each #2 ;return title of #4 ;return rating  of #4 ;return #5 ,  #6","[""SELECT['reviewers']"", ""PROJECT['id of #REF', '#1']"", ""PROJECT['ratings of #REF', '#2']"", ""GROUP['min', '#3', '#2']"", ""PROJECT['title of #REF', '#4']"", ""PROJECT['rating of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'project', 'group', 'project', 'project', 'union']",train
SPIDER_train_2506,Find the title and score of the movie with the lowest rating among all movies directed by each director.,"return directors ;return the   movies directed by #1 ;return the   ratings of #2 ;return the   lowest of #3 for each #1 ;return #2 where #3 is  #4 ;return the   titles of #5 ;return the   scores of #5 ;return #6 ,  #7","[""SELECT['directors']"", ""PROJECT['the movies directed by #REF', '#1']"", ""PROJECT['the ratings of #REF', '#2']"", ""GROUP['min', '#3', '#1']"", ""COMPARATIVE['#2', '#3', 'is #4']"", ""PROJECT['the titles of #REF', '#5']"", ""PROJECT['the scores of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_2507,"For each director, what is the title and score of their most poorly rated movie?","return directors ;return movies of #1 ;return scores of #2 ;return the  lowest of #3 for each #1 ;return #2 where #3 is equal to #4 ;return titles of #5 ;return #6 ,  #4","[""SELECT['directors']"", ""PROJECT['movies of #REF', '#1']"", ""PROJECT['scores of #REF', '#2']"", ""GROUP['min', '#3', '#1']"", ""COMPARATIVE['#2', '#3', 'is equal to #4']"", ""PROJECT['titles of #REF', '#5']"", ""UNION['#6', '#4']""]","['select', 'project', 'project', 'group', 'comparative', 'project', 'union']",train
SPIDER_train_2508,What is the name of the movie that is rated by most of times?,return movies ;return times rated of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest ;return name of #4,"[""SELECT['movies']"", ""PROJECT['times rated of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_2509,What is the name of the movie that has been reviewed the most?,return movies ;return #1 that  has been reviewed the   most ;return name of #2,"[""SELECT['movies']"", ""FILTER['#1', 'that has been reviewed the most']"", ""PROJECT['name of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_251,What are the names of actors and the musicals that they are in?,"return actors ;return names of  #1 ;return musicals #1 are  in ;return #2 ,  #3","[""SELECT['actors']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['musicals #REF are in', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_2510,What are the titles of all movies that have rating star is between 3 and 5?,return movies ;return star ratings of  #1 ;return #1 where #2 is  at least 3 ;return #1 where #2 is  at most 5 ;return #1 of  both #3 and  #4 ;return titles of  #5,"[""SELECT['movies']"", ""PROJECT['star ratings of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least 3']"", ""COMPARATIVE['#1', '#2', 'is at most 5']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['titles of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_2511,What are the titles of all movies that have between 3 and 5 stars?,return movies ;return stars of  #1 ;return #1 where #2 is  at least 3 ;return #1 where #2 is  at most 5 ;return #1 of  both #3 and  #4 ;return titles of  #5,"[""SELECT['movies']"", ""PROJECT['stars of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least 3']"", ""COMPARATIVE['#1', '#2', 'is at most 5']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['titles of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_2512,Find the names of reviewers who had given higher than 3 star ratings.,return ratings ;return #1 higher than 3 star ;return reviewers who  had given #2 ;return names of  #3,"[""SELECT['ratings']"", ""FILTER['#1', 'higher than 3 star']"", ""PROJECT['reviewers who had given #REF', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_2513,What are the names of the reviewers who have rated a movie more than 3 stars before?,return reviewers ;return #1 who  have  rated a movie more than 3 stars before ;return names of  #2,"[""SELECT['reviewers']"", ""FILTER['#1', 'who have rated a movie more than 3 stars before']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2514,Find the average rating star for each movie that are not reviewed by Brittany Harris.,return movies ;return #1 reviewed by Brittany Harris ;return #1 besides  #2 ;return star ratings of #3 ;return average of #4 for each  #3,"[""SELECT['movies']"", ""FILTER['#1', 'reviewed by Brittany Harris']"", ""DISCARD['#1', '#2']"", ""PROJECT['star ratings of #REF', '#3']"", ""GROUP['avg', '#4', '#3']"", ""UNION['#3', '#5']""]","['select', 'filter', 'discard', 'project', 'group', 'union']",train
SPIDER_train_2515,What is the average rating for each movie that has never been reviewed by Brittany Harris?,return movies ;return #1 not  reviewed by Brittany Harris ;return ratings of  #2 ;return average of  #3,"[""SELECT['movies']"", ""FILTER['#1', 'not reviewed by Brittany Harris']"", ""PROJECT['ratings of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_2516,What are the ids of the movies that are not reviewed by Brittany Harris.,return movies ;return #1 not  reviewed by Brittany Harris ;return ids of  #2,"[""SELECT['movies']"", ""FILTER['#1', 'not reviewed by Brittany Harris']"", ""PROJECT['ids of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2517,What are the ids of all moviest hat have not been reviewed by Britanny Harris?,return moviest ;return #1 not  reviewed by Britanny Harris ;return ids of  #2,"[""SELECT['moviest']"", ""FILTER['#1', 'not reviewed by Britanny Harris']"", ""PROJECT['ids of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2518,Find the average rating star for each movie that received at least 2 ratings.,return movies ;return ratings of #1 ;return number of  #2 for each #1 ;return #1 where #3 is at least 2 ;return rating stars of #4 ;return average of #5 for each #4,"[""SELECT['movies']"", ""PROJECT['ratings of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 2']"", ""PROJECT['rating stars of #REF', '#4']"", ""GROUP['avg', '#5', '#4']"", ""UNION['#4', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'group', 'union']",train
SPIDER_train_2519,"For each movie that received more than 3 reviews, what is the average rating?",return movies ;return reviews of  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  higher than 3 ;return ratings of  #4 ;return average #5 for each #4,"[""SELECT['movies']"", ""PROJECT['reviews of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 3']"", ""PROJECT['ratings of #REF', '#4']"", ""GROUP['avg', '#5', '#4']"", ""UNION['#4', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'group', 'union']",train
SPIDER_train_252,"Show names of actors that have appeared in musical with name ""The Phantom of the Opera"".",return musical ;return #1 that is The Phantom of the  Opera ;return actors of #2 ;return names of #3,"[""SELECT['musical']"", ""FILTER['#1', 'that is The Phantom of the Opera']"", ""PROJECT['actors of #REF', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_2520,find the ids of reviewers who did not give 4 star.,return reviewers ;return #1 that give 4 stars ;return #1 besides  #2 ;return ids of #3,"[""SELECT['reviewers']"", ""FILTER['#1', 'that give 4 stars']"", ""DISCARD['#1', '#2']"", ""PROJECT['ids of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_2521,What are the ids of all reviewers who did not give 4 stars?,return reviewers ;return #1 who  give 4 stars ;return #1 besides  #2 ;return ids of  #3,"[""SELECT['reviewers']"", ""FILTER['#1', 'who give 4 stars']"", ""DISCARD['#1', '#2']"", ""PROJECT['ids of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_2522,Find the ids of reviewers who didn't only give 4 star.,return reviewers ;return #1 that  give only 4 star ;return #1 besides #2 ;return ids of #3,"[""SELECT['reviewers']"", ""FILTER['#1', 'that give only 4 star']"", ""DISCARD['#1', '#2']"", ""PROJECT['ids of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_2523,What are the ids of all reviewers who have not given 4 stars at least once?,return reviewers ;return 4 stars that  #1 have given ;return number of  #2 for each #1 ;return #1 where #3 is  at least one ;return #1 besides #4 ;return the  ids of #5,"[""SELECT['reviewers']"", ""PROJECT['4 stars that #REF have given', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least one']"", ""DISCARD['#1', '#4']"", ""PROJECT['the ids of #REF', '#5']""]","['select', 'project', 'group', 'comparative', 'discard', 'project']",train
SPIDER_train_2524,What are names of the movies that are either made after 2000 or reviewed by Brittany Harris?,return movies ;return #1 made after 2000 ;return #1 reviewed by Brittany Harris ;return #2 or  #3 ;return names of  #4,"[""SELECT['movies']"", ""FILTER['#1', 'made after 2000']"", ""FILTER['#1', 'reviewed by Brittany Harris']"", ""UNION['#2', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_2525,What are the names of all movies that were made after 2000 or reviewed by Brittany Harris?,return movies ;return #1 made after 2000 ;return #1 reviewed by Brittany Harris ;return #2 or  #3 ;return names of #4,"[""SELECT['movies']"", ""FILTER['#1', 'made after 2000']"", ""FILTER['#1', 'reviewed by Brittany Harris']"", ""UNION['#2', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_2526,What are names of the movies that are either made before 1980 or directed by James Cameron?,return movies ;return #1 made before 1980 ;return #1 directed by James Cameron ;return #2 or  #3 ;return names of  #4,"[""SELECT['movies']"", ""FILTER['#1', 'made before 1980']"", ""FILTER['#1', 'directed by James Cameron']"", ""UNION['#2', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_2527,What are the names of all movies made before 1980 or had James Cameron as the director?,return movies ;return #1 made before 1980 ;return directors of  #1 ;return #1 where #3 is  James Cameron ;return #2 or  #4 ;return names of  #5,"[""SELECT['movies']"", ""FILTER['#1', 'made before 1980']"", ""PROJECT['directors of #REF', '#1']"", ""COMPARATIVE['#1', '#3', 'is James Cameron']"", ""UNION['#2', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'filter', 'project', 'comparative', 'union', 'project']",train
SPIDER_train_2528,What are the names of reviewers who had rated 3 star and 4 star?,return reviewers ;return #1 with 3 star ;return #1 with 4 star ;return #1 of  both #2 and  #3,"[""SELECT['reviewers']"", ""FILTER['#1', 'with 3 star']"", ""FILTER['#1', 'with 4 star']"", ""INTERSECTION['#1', '#2', '#3']""]","['select', 'filter', 'filter', 'intersection']",train
SPIDER_train_2529,What are the names of all reviewers that have given 3 or 4 stars for reviews?,return reviewers ;return reviews of #1 ;return stars of #2 ;return number of  #3 for each  #2 ;return #1 where #4 is 3 ;return #1 where #4 is 4 ;return #1 in  both #5 and  #6 ;return names of #7,"[""SELECT['reviewers']"", ""PROJECT['reviews of #REF', '#1']"", ""PROJECT['stars of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""COMPARATIVE['#1', '#4', 'is 3']"", ""COMPARATIVE['#1', '#4', 'is 4']"", ""INTERSECTION['#1', '#5', '#6']"", ""PROJECT['names of #REF', '#7']""]","['select', 'project', 'project', 'group', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_253,What are the names of actors who have been in the musical titled The Phantom of the Opera?,return actors ;return musical of #1 ;return #1 where #2 is  Phantom of the   Opera ;return names of #3,"[""SELECT['actors']"", ""PROJECT['musical of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Phantom of the Opera']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_2530,What are the names of movies that get 3 star and 4 star?,"return movies ;return stars of #1 ;return number of  #2 for each #1 ;return #1 where #3 is 3 ;return #1 where #3 is 4 ;return #4 ,  #5 ;return names of #6","[""SELECT['movies']"", ""PROJECT['stars of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is 3']"", ""COMPARATIVE['#1', '#3', 'is 4']"", ""UNION['#4', '#5']"", ""PROJECT['names of #REF', '#6']""]","['select', 'project', 'group', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_2531,What are the names of all movies that received 3 or 4 stars?,"return movies ;return #1 that  received 3 stars ;return #1 that  received 4 stars ;return #2 ,  #3 ;return names of  #4","[""SELECT['movies']"", ""FILTER['#1', 'that received 3 stars']"", ""FILTER['#1', 'that received 4 stars']"", ""UNION['#2', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_2532,How many counties are there?,return counties ;return number of #1,"[""SELECT['counties']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_2534,List the names of counties in descending order of population.,return counties ;return names of  #1 ;return populations of  #1 ;return #2 sorted by #3 in descending order,"[""SELECT['counties']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['populations of #REF', '#1']"", ""SORT['#2', '#3', 'in descending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_2535,"What are the names of the counties of public safety, ordered by population descending?",return names of  counties of public safety ;return populations of  counties ;return #1 ordered by #2 descending,"[""SELECT['names of counties of public safety']"", ""SELECT['populations of counties']"", ""SORT['#1', '#2', 'descending']""]","['select', 'select', 'sort']",train
SPIDER_train_2536,List the distinct police forces of counties whose location is not on east side.,return counties ;return locations of #1 ;return #1 where #2 is  not the  east side ;return police forces of #3 ;return distinct #4,"[""SELECT['counties']"", ""PROJECT['locations of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not the east side']"", ""PROJECT['police forces of #REF', '#3']"", ""PROJECT['distinct #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_2537,What are the different police forces of counties that are not located in the East?,return counties ;return #1 located in East ;return #1 besides  #2 ;return different police forces of #3,"[""SELECT['counties']"", ""FILTER['#1', 'located in East']"", ""DISCARD['#1', '#2']"", ""PROJECT['different police forces of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_2538,What are the minimum and maximum crime rate of counties?,"return counties ;return crime rates of  #1 ;return minimum of  #2 ;return maximum of  #2 ;return #3 ,  #4","[""SELECT['counties']"", ""PROJECT['crime rates of #REF', '#1']"", ""AGGREGATE['min', '#2']"", ""AGGREGATE['max', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_2539,Return the minimum and maximum crime rates across all counties.,"return counties ;return crime rates of  #1 ;return minimum #2 for each  #1 ;return maximum #2 for each  #1 ;return #3 ,  #4","[""SELECT['counties']"", ""PROJECT['crime rates of #REF', '#1']"", ""GROUP['min', '#2', '#1']"", ""GROUP['max', '#2', '#1']"", ""UNION['#3', '#4']""]","['select', 'project', 'group', 'group', 'union']",train
SPIDER_train_254,Show names of actors in descending order of the year their musical is awarded.,return actors ;return names of #1 ;return musical of #1 ;return year awarded of #3 ;return #2 sorted by #4 in descending order,"[""SELECT['actors']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['musical of #REF', '#1']"", ""PROJECT['year awarded of #REF', '#3']"", ""SORT['#2', '#4', 'in descending order']""]","['select', 'project', 'project', 'project', 'sort']",train
SPIDER_train_2540,Show the crime rates of counties in ascending order of number of police officers.,return counties ;return crime rates of  #1 ;return police officers of  #1 ;return number of  #3 for each  #1 ;return #2 sorted by #4 in ascending order,"[""SELECT['counties']"", ""PROJECT['crime rates of #REF', '#1']"", ""PROJECT['police officers of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""SORT['#2', '#4', 'in ascending order']""]","['select', 'project', 'project', 'group', 'sort']",train
SPIDER_train_2541,What are the crime rates of counties sorted by number of offices ascending?,return counties ;return crime rates of  #1 ;return offices of  #1 ;return number of  #3 for each  #1 ;return #2 sorted by #4 ascending,"[""SELECT['counties']"", ""PROJECT['crime rates of #REF', '#1']"", ""PROJECT['offices of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""SORT['#2', '#4', 'ascending']""]","['select', 'project', 'project', 'group', 'sort']",train
SPIDER_train_2542,What are the names of cities in ascending alphabetical order?,return cities ;return names of  #1 ;return #2 sorted by alphabetical order,"[""SELECT['cities']"", ""PROJECT['names of #REF', '#1']"", ""SORT['#2', '#2', 'alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_2543,"Return the names of cities, ordered alphabetically.",return cities ;return names of  #1 ;return #2 ordered alphabetically,"[""SELECT['cities']"", ""PROJECT['names of #REF', '#1']"", ""FILTER['#2', 'ordered alphabetically']""]","['select', 'project', 'filter']",train
SPIDER_train_2544,What are the percentage of hispanics in cities with the black percentage higher than 10?,return cities ;return black percentages of  #1 ;return #1 where #2 is  higher than 10 ;return hispanic percentage of  #3,"[""SELECT['cities']"", ""PROJECT['black percentages of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 10']"", ""PROJECT['hispanic percentage of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_2545,Return the hispanic percentage for cities in which the black percentage is greater than 10.,return cities ;return black percentages of  #1 ;return #1 where #2 is  higher than 10 ;return hispanic percentages of  #3,"[""SELECT['cities']"", ""PROJECT['black percentages of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 10']"", ""PROJECT['hispanic percentages of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_2546,List the name of the county with the largest population.,return counties ;return population of #1 ;return #1 where #2 is highest ;return name of #3,"[""SELECT['counties']"", ""PROJECT['population of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_2547,What is the name of the county with the greatest population?,return counties ;return populations of #1 ;return #1 where #2 is  the   greatest ;return the   name of #3,"[""SELECT['counties']"", ""PROJECT['populations of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the greatest']"", ""PROJECT['the name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_2548,List the names of the city with the top 5 white percentages.,return cities ;return white percentages of #1 ;return the   top 5 highest #2 ;return #1 where #2 is  in #3 ;return names of #4,"[""SELECT['cities']"", ""PROJECT['white percentages of #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""COMPARATIVE['#1', '#2', 'is in #3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_2549,What are the names of the five cities with the greatest proportion of white people?,return cities ;return proportions of white people of  #1 ;return the  five highest of #2 ;return #1 where #2 is equal to any of #3 ;return names of #4,"[""SELECT['cities']"", ""PROJECT['proportions of white people of #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""COMPARATIVE['#1', '#2', 'is equal to any of #3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_255,What are the names of actors ordered descending by the year in which their musical was awarded?,return actors ;return names of #1 ;return musicals of #1 ;return years awarded of #3 ;return #2 sorted by #4 in  descending order,"[""SELECT['actors']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['musicals of #REF', '#1']"", ""PROJECT['years awarded of #REF', '#3']"", ""SORT['#2', '#4', 'in descending order']""]","['select', 'project', 'project', 'project', 'sort']",train
SPIDER_train_2550,Show names of cities and names of counties they are in.,"return cities ;return counties of #1 ;return names of #1 ;return names of #2 ;return #3 ,  #4","[""SELECT['cities']"", ""PROJECT['counties of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['names of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_2551,"What are the names of cities, as well as the names of the counties they correspond to?","return cities ;return names of  #1 ;return counties of  #1 ;return names of  #3 ;return #2 ,  #4","[""SELECT['cities']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['counties of #REF', '#1']"", ""PROJECT['names of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_2552,Show white percentages of cities and the crime rates of counties they are in.,"return cities ;return white percentages of #1 ;return counties that  #1 are in ;return the  crime rates of #3 ;return #2 ,  #4","[""SELECT['cities']"", ""PROJECT['white percentages of #REF', '#1']"", ""PROJECT['counties that #REF are in', '#1']"", ""PROJECT['the crime rates of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_2553,"What are the white percentages of cities, and the corresponding crime rates of the counties they correspond to?","return cities ;return white percentages of  #1 ;return counties of  #1 ;return crime rates of  #3 ;return #2 ,  #4","[""SELECT['cities']"", ""PROJECT['white percentages of #REF', '#1']"", ""PROJECT['counties of #REF', '#1']"", ""PROJECT['crime rates of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_2554,Show the name of cities in the county that has the largest number of police officers.,return counties ;return police officers of  #1 ;return the   number of  #2 for each #1 ;return #1 where #3 is  the   largest ;return cities in #4 ;return the   names of #5,"[""SELECT['counties']"", ""PROJECT['police officers of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the largest']"", ""PROJECT['cities in #REF', '#4']"", ""PROJECT['the names of #REF', '#5']""]","['select', 'project', 'group', 'comparative', 'project', 'project']",train
SPIDER_train_2555,What are the names of cities that are in the county with the most police officers?,return counties ;return police officers of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  the   highest ;return the   cities in #4 ;return the   names of #5,"[""SELECT['counties']"", ""PROJECT['police officers of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']"", ""PROJECT['the cities in #REF', '#4']"", ""PROJECT['the names of #REF', '#5']""]","['select', 'project', 'group', 'comparative', 'project', 'project']",train
SPIDER_train_2556,Show the number of cities in counties that have a population more than 20000.,return counties ;return populations of #1 ;return #1 where #2 is  higher than 20000 ;return cities in #3 ;return number of  #4,"[""SELECT['counties']"", ""PROJECT['populations of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 20000']"", ""PROJECT['cities in #REF', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_2557,How many cities are in counties that have populations of over 20000?,return counties ;return populations of  #1 ;return #1 where  #2 is higher than 20000 ;return cities in #3 ;return number of  #4,"[""SELECT['counties']"", ""PROJECT['populations of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 20000']"", ""PROJECT['cities in #REF', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_2558,Show the crime rate of counties with a city having white percentage more than 90.,return counties ;return cities of #1 ;return white percentages of #2 ;return #1 where #3 is  higher than 90 ;return crime rates of #4,"[""SELECT['counties']"", ""PROJECT['cities of #REF', '#1']"", ""PROJECT['white percentages of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is higher than 90']"", ""PROJECT['crime rates of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_2559,What are the crime rates of counties that contain cities that have white percentages of over 90?,return cities ;return white percentages of  #1 ;return #1 where #2 is  higher than 90 ;return crime rates of  #3,"[""SELECT['cities']"", ""PROJECT['white percentages of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 90']"", ""PROJECT['crime rates of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_256,Show names of musicals and the number of actors who have appeared in the musicals.,"return musicals  ;return actors that  appeared in #1 ;return the  number of  #2 for each #1 ;return the  names of #1 ;return #4 ,  #3","[""SELECT['musicals']"", ""PROJECT['actors that appeared in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['the names of #REF', '#1']"", ""UNION['#4', '#3']""]","['select', 'project', 'group', 'project', 'union']",train
SPIDER_train_2560,Please show the police forces and the number of counties with each police force.,"return police forces ;return counties with #1 ;return number of  #2 for each  #1 ;return #1 ,  #3","[""SELECT['police forces']"", ""PROJECT['counties with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_2561,How many counties correspond to each police force?,return police forces ;return counties of  #1 ;return number of #2 for each #1,"[""SELECT['police forces']"", ""PROJECT['counties of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_2562,What is the location shared by most counties?,return locations ;return counties of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['locations']"", ""PROJECT['counties of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_2563,Which location has the most corresponding counties?,return locations ;return corresponding counties of  #1 ;return number of  #2 for each  #1,"[""SELECT['locations']"", ""PROJECT['corresponding counties of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_2564,List the names of counties that do not have any cities.,return counties ;return #1 that  have  cities ;return #1 besides #2 ;return names of  #3,"[""SELECT['counties']"", ""FILTER['#1', 'that have cities']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_2565,What are the names of counties that do not contain any cities?,return counties ;return #1 that  do not  contain cities ;return names of  #2,"[""SELECT['counties']"", ""FILTER['#1', 'that do not contain cities']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2566,Show the police force shared by counties with location on the east and west.,return counties ;return locations of #1 ;return #1 where #2 is  on the  east ;return #1 where #2 is  on the  west ;return police forces of #3 ;return police forces of #4 ;return police forces of #1 ;return #7 of both #5 and #6,"[""SELECT['counties']"", ""PROJECT['locations of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is on the east']"", ""COMPARATIVE['#1', '#2', 'is on the west']"", ""PROJECT['police forces of #REF', '#3']"", ""PROJECT['police forces of #REF', '#4']"", ""PROJECT['police forces of #REF', '#1']"", ""INTERSECTION['#7', '#5', '#6']""]","['select', 'project', 'comparative', 'comparative', 'project', 'project', 'project', 'intersection']",train
SPIDER_train_2567,Which police forces operate in both counties that are located in the East and in the West?,return counties ;return #1 that are located in   East ;return #1 that are located in   West ;return police forces ;return #4 that operate in   #2 ;return #4 that operate in   #3 ;return #4 of both #5 and  #6,"[""SELECT['counties']"", ""FILTER['#1', 'that are located in East']"", ""FILTER['#1', 'that are located in West']"", ""SELECT['police forces']"", ""FILTER['#4', 'that operate in #2']"", ""FILTER['#4', 'that operate in #3']"", ""INTERSECTION['#4', '#5', '#6']""]","['select', 'filter', 'filter', 'select', 'filter', 'filter', 'intersection']",train
SPIDER_train_2568,Show the names of cities in counties that have a crime rate less than 100.,return counties ;return crime rates of #1 ;return #1 where #2 is  less than  100 ;return the  cities in #3 ;return the  names of #4,"[""SELECT['counties']"", ""PROJECT['crime rates of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is less than 100']"", ""PROJECT['the cities in #REF', '#3']"", ""PROJECT['the names of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_2569,What are the names of cities that are in counties that have a crime rate below 100?,return counties ;return crime rates of  #1 ;return #1 where #2 is  lower than 100 ;return cities in #3 ;return names of  #4,"[""SELECT['counties']"", ""PROJECT['crime rates of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is lower than 100']"", ""PROJECT['cities in #REF', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_257,How many actors have appeared in each musical?,return musicals ;return actors that  have  appeared in #1 ;return number of #2 for each #1,"[""SELECT['musicals']"", ""PROJECT['actors that have appeared in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_2570,Show the case burden of counties in descending order of population.,return counties ;return case burdens of  #1 ;return populations of  #1 ;return #2 sorted by #3 in descending order,"[""SELECT['counties']"", ""PROJECT['case burdens of #REF', '#1']"", ""PROJECT['populations of #REF', '#1']"", ""SORT['#2', '#3', 'in descending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_2571,"What are the case burdens of counties, ordered descending by population?",return counties ;return case burdens of  #1 ;return populations of  #1 ;return #2 sorted by #3 in descending order,"[""SELECT['counties']"", ""PROJECT['case burdens of #REF', '#1']"", ""PROJECT['populations of #REF', '#1']"", ""SORT['#2', '#3', 'in descending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_2572,Find the names of all modern rooms with a base price below $160 and two beds.,return rooms ;return #1 which  are  modern ;return #2 with  base price below $ 160 ;return #3 with  two beds ;return name of  #4,"[""SELECT['rooms']"", ""FILTER['#1', 'which are modern']"", ""FILTER['#2', 'with base price below $ 160']"", ""FILTER['#3', 'with two beds']"", ""PROJECT['name of #REF', '#4']""]","['select', 'filter', 'filter', 'filter', 'project']",train
SPIDER_train_2573,What are the names of modern rooms that have a base price lower than $160 and two beds.,return modern rooms ;return base prices of  #1 ;return #1 where #2 is  lower than $ 160 ;return beds in #1 ;return number of  #4 for each  #1 ;return #1 where #5 is  two ;return #1 of  both #3 and  #6 ;return names of  #7,"[""SELECT['modern rooms']"", ""PROJECT['base prices of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is lower than $ 160']"", ""PROJECT['beds in #REF', '#1']"", ""GROUP['count', '#4', '#1']"", ""COMPARATIVE['#1', '#5', 'is two']"", ""INTERSECTION['#1', '#3', '#6']"", ""PROJECT['names of #REF', '#7']""]","['select', 'project', 'comparative', 'project', 'group', 'comparative', 'intersection', 'project']",train
SPIDER_train_2574,Find all the rooms that have a price higher than 160 and can accommodate more than 2 people. Report room names and ids.,"return rooms ;return #1 with  price higher than 160 ;return #2 and can accommodate more than  2 people ;return room names of  #3 ;return ids of  #3 ;return #4 ,   #5","[""SELECT['rooms']"", ""FILTER['#1', 'with price higher than 160']"", ""FILTER['#2', 'and can accommodate more than 2 people']"", ""PROJECT['room names of #REF', '#3']"", ""PROJECT['ids of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'filter', 'project', 'project', 'union']",train
SPIDER_train_2575,What are the room names and ids of all the rooms that cost more than 160 and can accommodate more than two people.,"return rooms ;return cost of  #1 ;return #1 where #2 is  higher than 160 ;return people #1 can accommodate ;return #1 where #4 is  higher than two ;return #1 of  both #3 and  #5 ;return room names of  #6 ;return ids of  #6 ;return #7 ,  #8","[""SELECT['rooms']"", ""PROJECT['cost of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 160']"", ""PROJECT['people #REF can accommodate', '#1']"", ""COMPARATIVE['#1', '#4', 'is higher than two']"", ""INTERSECTION['#1', '#3', '#5']"", ""PROJECT['room names of #REF', '#6']"", ""PROJECT['ids of #REF', '#6']"", ""UNION['#7', '#8']""]","['select', 'project', 'comparative', 'project', 'comparative', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_2576,Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations.,return rooms ;return #1 in hotel ;return number of reservations for each #2 ;return #2 where  #3 is  largest,"[""SELECT['rooms']"", ""FILTER['#1', 'in hotel']"", ""PROJECT['reservations', '#2']"", ""GROUP['count', '#3', '#2']"", ""SUPERLATIVE['max', '#2', '#4']""]","['select', 'filter', 'project', 'group', 'superlative']",train
SPIDER_train_2577,Which room has the largest number of reservations?,return rooms ;return reservations of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['rooms']"", ""PROJECT['reservations of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_2578,How many kids stay in the rooms reserved by ROY SWEAZY?,return ROY SWEAZY ;return rooms reserved by #1 ;return kids of #2 ;return number of  #3 for each #2 ;return sum of #4,"[""SELECT['ROY SWEAZY']"", ""PROJECT['rooms reserved by #REF', '#1']"", ""PROJECT['kids of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""AGGREGATE['sum', '#4']""]","['select', 'project', 'project', 'group', 'aggregate']",train
SPIDER_train_2579,Find the number of kids staying in the rooms reserved by a person called ROY SWEAZ.,return rooms ;return #1 reserved by ROY SWEAZ ;return kids staying in #2 ;return number of #3,"[""SELECT['rooms']"", ""FILTER['#1', 'reserved by ROY SWEAZ']"", ""PROJECT['kids staying in #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_258,Show names of musicals which have at least three actors.,return musical ;return actors in #1 ;return number of  #2 for each #1 ;return #1 where #3 is  at least three ;return names of #4,"[""SELECT['musical']"", ""PROJECT['actors in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least three']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_2580,How many times does ROY SWEAZY has reserved a room.,return rooms ;return #1 that  ROY SWEAZY reserved ;return number of  #2,"[""SELECT['rooms']"", ""FILTER['#1', 'that ROY SWEAZY reserved']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_2581,Find the number of times ROY SWEAZY has reserved a room.,return ROY SWEAZY ;return reserved rooms of #1 ;return number of  #2,"[""SELECT['ROY SWEAZY']"", ""PROJECT['reserved rooms of #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_2582,"Which room has the highest rate? List the room's full name, rate, check in and check out date.","return rooms ;return rates of  #1 ;return #1 where #2 is  highest ;return full name of  #3 ;return rate  of  #3 ;return check  in date of  #3 ;return check  out date of  #3 ;return #4 ,  #5 ,   #6 , #7","[""SELECT['rooms']"", ""PROJECT['rates of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['full name of #REF', '#3']"", ""PROJECT['rate of #REF', '#3']"", ""PROJECT['check in date of #REF', '#3']"", ""PROJECT['check out date of #REF', '#3']"", ""UNION['#4', '#5', '#6', '#7']""]","['select', 'project', 'superlative', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_2583,"Return the name, rate, check in and check out date for the room with the highest rate.","return rooms ;return rates of  #1 ;return #1 where #2 is  highest ;return name of  #3 ;return rate  of  #3 ;return check  in date of  #3 ;return check  out date of  #3 ;return #4 ,  #5 ,   #6 , #7","[""SELECT['rooms']"", ""PROJECT['rates of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['name of #REF', '#3']"", ""PROJECT['rate of #REF', '#3']"", ""PROJECT['check in date of #REF', '#3']"", ""PROJECT['check out date of #REF', '#3']"", ""UNION['#4', '#5', '#6', '#7']""]","['select', 'project', 'superlative', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_2584,"How many adults stay in the room CONRAD SELBIG checked in on Oct 23, 2010?",return adults ;return #1 that  stay in CONRAD SELBIG ;return #2 that  checked in on  Oct 23 2010 ;return number of  #3,"[""SELECT['adults']"", ""FILTER['#1', 'that stay in CONRAD SELBIG']"", ""FILTER['#2', 'that checked in on Oct 23 2010']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'filter', 'aggregate']",train
SPIDER_train_2585,"Find the number of adults for the room reserved and checked in by CONRAD SELBIG on Oct 23, 2010.","return CONRAD SELBIG ;return rooms reserved by #1 ;return rooms checked in  by #1 ;return #2 on Oct 23 ,  2010 ;return #3 on Oct 23 ,  2010 ;return #2 in  both #4 and  #5 ;return adults of #6 ;return number of  #7","[""SELECT['CONRAD SELBIG']"", ""PROJECT['rooms reserved by #REF', '#1']"", ""PROJECT['rooms checked in by #REF', '#1']"", ""FILTER['#2', 'on Oct 23 , 2010']"", ""FILTER['#3', 'on Oct 23 , 2010']"", ""INTERSECTION['#2', '#4', '#5']"", ""PROJECT['adults of #REF', '#6']"", ""AGGREGATE['count', '#7']""]","['select', 'project', 'project', 'filter', 'filter', 'intersection', 'project', 'aggregate']",train
SPIDER_train_2586,"How many kids stay in the room DAMIEN TRACHSEL checked in on Sep 21, 2010?",return rooms ;return #1 that  DAMIEN TRACHSEL checked in ;return #2 on Sep 21 2010 ;return kids that  stay in #3 ;return number of  #4,"[""SELECT['rooms']"", ""FILTER['#1', 'that DAMIEN TRACHSEL checked in']"", ""FILTER['#2', 'on Sep 21 2010']"", ""PROJECT['kids that stay in #REF', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'filter', 'filter', 'project', 'aggregate']",train
SPIDER_train_2587,"Return the number of kids for the room reserved and checked in by DAMIEN TRACHSEL on  Sep 21, 2010.","return rooms ;return #1 reserved by DAMIEN TRACHSEL ;return #2 on Sep 21 ,  2010 ;return #1 checked in by DAMIEN TRACHSEL ;return #4 on Sep 21 ,  2010 ;return #1 in both #3 and #5 ;return kids in #6 ;return number of  #7","[""SELECT['rooms']"", ""FILTER['#1', 'reserved by DAMIEN TRACHSEL']"", ""FILTER['#2', 'on Sep 21 , 2010']"", ""FILTER['#1', 'checked in by DAMIEN TRACHSEL']"", ""FILTER['#4', 'on Sep 21 , 2010']"", ""INTERSECTION['#1', '#3', '#5']"", ""PROJECT['kids in #REF', '#6']"", ""AGGREGATE['count', '#7']""]","['select', 'filter', 'filter', 'filter', 'filter', 'intersection', 'project', 'aggregate']",train
SPIDER_train_2588,How many king beds are there?,return king beds ;return number of  #1,"[""SELECT['king beds']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_2589,Find the total number of king beds available.,return king beds ;return #1 that  are  available ;return number of  #2,"[""SELECT['king beds']"", ""FILTER['#1', 'that are available']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_259,What are the names of musicals who have at 3 or more actors?,return musicals ;return actors in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  3 or  more ;return names of  #4,"[""SELECT['musicals']"", ""PROJECT['actors in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is 3 or more']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_2590,List the names and decor of rooms that have a king bed. Sort the list by their price.,"return rooms ;return #1 that have a king bed ;return names of #2 ;return decor of #2 ;return prices of #2 ;return #3 ,  #4 ;return #6 sorted by #5","[""SELECT['rooms']"", ""FILTER['#1', 'that have a king bed']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['decor of #REF', '#2']"", ""PROJECT['prices of #REF', '#2']"", ""UNION['#3', '#4']"", ""SORT['#6', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_2591,What are the names and decor of rooms with a king bed? Sort them by their price,"return rooms ;return beds in #1 ;return #1 where #2 is  king ;return names of  #3 ;return decor of  #3 ;return prices of  #3 ;return #4 ,  #5 ;return #7 sorted by #6","[""SELECT['rooms']"", ""PROJECT['beds in #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is king']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['decor of #REF', '#3']"", ""PROJECT['prices of #REF', '#3']"", ""UNION['#4', '#5']"", ""SORT['#7', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_2592,Which room has cheapest base price? List the room's name and the base price.,"return rooms ;return base prices of  #1 ;return #1 where #2 is  lowest ;return name of  #3 ;return base price  of  #3 ;return #4 ,  #5","[""SELECT['rooms']"", ""PROJECT['base prices of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""PROJECT['name of #REF', '#3']"", ""PROJECT['base price of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_2593,What are the room name and base price of the room with the lowest base price?,"return rooms ;return base prices of #1 ;return #1 where #2 is  lowest ;return room name of #3 ;return base price  of #3 ;return #4 , #5","[""SELECT['rooms']"", ""PROJECT['base prices of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""PROJECT['room name of #REF', '#3']"", ""PROJECT['base price of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_2594,What is the decor of room Recluse and defiance?,return rooms ;return #1 that  is  the  same as Recluse and  defiance ;return decor of  #2,"[""SELECT['rooms']"", ""FILTER['#1', 'that is the same as Recluse and defiance']"", ""PROJECT['decor of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2595,"Return the decor of the room named ""Recluse and defiance"".",return rooms ;return #1 named Recluse and defiance ;return the  decor of #2,"[""SELECT['rooms']"", ""FILTER['#1', 'named Recluse and defiance']"", ""PROJECT['the decor of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2596,What is the average base price of different bed type? List bed type and average base price.,"return bed types ;return base prices of #1 ;return average  of #2 for each #1 ;return #1 ,  #3","[""SELECT['bed types']"", ""PROJECT['base prices of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_2597,"For each bed type, find the average base price of different bed type.",return bed types ;return different #1 ;return base prices of  #2 ;return average #3 for each #2,"[""SELECT['bed types']"", ""PROJECT['different #REF', '#1']"", ""PROJECT['base prices of #REF', '#2']"", ""GROUP['avg', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_2598,What is the total number of people who could stay in the modern rooms in this inn?,return this inn ;return the  modern rooms of #1 ;return people who could stay in #2 ;return the  number of  #3 for each of #2 ;return the  sum of #4,"[""SELECT['this inn']"", ""PROJECT['the modern rooms of #REF', '#1']"", ""PROJECT['people who could stay in #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""AGGREGATE['sum', '#4']""]","['select', 'project', 'project', 'group', 'aggregate']",train
SPIDER_train_2599,How many people in total can stay in the modern rooms of this inn?,return this inn ;return the  rooms of #1 ;return #2 that  are modern ;return people that  can stay in #3 ;return number of  #4 for each #3 ;return sum of #5,"[""SELECT['this inn']"", ""PROJECT['the rooms of #REF', '#1']"", ""FILTER['#2', 'that are modern']"", ""PROJECT['people that can stay in #REF', '#3']"", ""GROUP['count', '#4', '#3']"", ""AGGREGATE['sum', '#5']""]","['select', 'project', 'filter', 'project', 'group', 'aggregate']",train
SPIDER_train_26,What are the maximum and minimum number of cows across all farms.,"return farms ;return cows on  #1 ;return number of  #2 ;return maximum of  #3 ;return minimum of  #3 ;return #4 ,  #5","[""SELECT['farms']"", ""PROJECT['cows on #REF', '#1']"", ""AGGREGATE['count', '#2']"", ""AGGREGATE['max', '#3']"", ""AGGREGATE['min', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_260,Show different nominees and the number of musicals they have been nominated.,return musicals ;return nominees of  #1 ;return number of  #1 for each  #2,"[""SELECT['musicals']"", ""PROJECT['nominees of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""UNION['#2', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_2600,What kind of decor has the least number of reservations?,return decor ;return reservations of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  lowest,"[""SELECT['decor']"", ""PROJECT['reservations of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_2601,What is the least popular kind of decor?,return decors ;return kinds of #1 ;return how popular #2 are ;return #2 where #3 is  the  least popular,"[""SELECT['decors']"", ""PROJECT['kinds of #REF', '#1']"", ""PROJECT['how popular #REF are', '#2']"", ""COMPARATIVE['#2', '#3', 'is the least popular']""]","['select', 'project', 'project', 'comparative']",train
SPIDER_train_2604,Find the first and last names of people who payed more than the rooms' base prices.,"return the  rooms ;return base prices of #1 ;return people who  payed higher than #2 ;return first name of #3 ;return last name of #3 ;return #4 ,  #5","[""SELECT['the rooms']"", ""PROJECT['base prices of #REF', '#1']"", ""PROJECT['people who payed higher than #REF', '#2']"", ""PROJECT['first name of #REF', '#3']"", ""PROJECT['last name of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_2605,What are the first and last names of people who payed more than the rooms' base prices?,"return the  rooms base prices ;return people who  payed more than #1 ;return first name of #2 ;return last name of #2 ;return #3 ,  #4","[""SELECT['the rooms base prices']"", ""PROJECT['people who payed more than #REF', '#1']"", ""PROJECT['first name of #REF', '#2']"", ""PROJECT['last name of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_2606,How many rooms are there?,return rooms ;return number of  #1,"[""SELECT['rooms']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_2607,What is the total number of rooms available in this inn?,return inn ;return rooms available in #1 ;return number of  #2,"[""SELECT['inn']"", ""PROJECT['rooms available in #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_2608,Find the number of rooms with a king bed.,return rooms ;return #1 with  king beds ;return number of #2,"[""SELECT['rooms']"", ""FILTER['#1', 'with king beds']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_2609,How many rooms have a king bed?,return rooms ;return #1 that  have  a king bed ;return number of  #2,"[""SELECT['rooms']"", ""FILTER['#1', 'that have a king bed']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_261,How many musicals has each nominee been nominated for?,return the  nominee ;return musicals that  #1 was nominated for ;return number of  #2 for each of #1,"[""SELECT['the nominee']"", ""PROJECT['musicals that #REF was nominated for', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_2610,Find the number of rooms for each bed type.,return bed types ;return rooms with  #1 ;return number of #2 for each #1,"[""SELECT['bed types']"", ""PROJECT['rooms with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_2611,What are the number of rooms for each bed type?,return bed types ;return rooms of #1 ;return number of  #2 for each #1,"[""SELECT['bed types']"", ""PROJECT['rooms of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_2612,Find the name of the room with the maximum occupancy.,return rooms ;return occupancy of  #1 ;return #1 where  #2 is  highest ;return name of  #3,"[""SELECT['rooms']"", ""PROJECT['occupancy of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_2613,What is the name of the room that can accommodate the most people?,return rooms ;return #1 that  can accommodate the  most people ;return the  name of  #2,"[""SELECT['rooms']"", ""FILTER['#1', 'that can accommodate the most people']"", ""PROJECT['the name of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2614,Find the id and name of the most expensive base price room.,"return rooms ;return base prices of  #1 ;return #1 where  #2 is  highest ;return id of  #3 ;return name of  #3 ;return #4 ,   #5","[""SELECT['rooms']"", ""PROJECT['base prices of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['id of #REF', '#3']"", ""PROJECT['name of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_2615,Which room has the highest base price?,return room ;return base price of  #1 ;return #1 where #2 is  highest,"[""SELECT['room']"", ""PROJECT['base price of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']""]","['select', 'project', 'superlative']",train
SPIDER_train_2616,List the type of bed and name of all traditional rooms.,"return traditional rooms ;return types of  beds in #1 ;return names of  #1 ;return #2 ,  #3","[""SELECT['traditional rooms']"", ""PROJECT['types of beds in #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_2617,What are the bed type and name of all the rooms with traditional decor?,"return rooms ;return decor of #1 ;return #1 where #2 is  traditional ;return bed types of #3 ;return names of #3 ;return #4 ,  #5","[""SELECT['rooms']"", ""PROJECT['decor of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is traditional']"", ""PROJECT['bed types of #REF', '#3']"", ""PROJECT['names of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_2618,Find the number of rooms with king bed for each decor type.,return decor types ;return rooms of  #1 ;return #2 with king beds ;return number of  #3 for each  #1,"[""SELECT['decor types']"", ""PROJECT['rooms of #REF', '#1']"", ""FILTER['#2', 'with king beds']"", ""GROUP['count', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'filter', 'group', 'union']",train
SPIDER_train_2619,How many rooms have king beds? Report the number for each decor type.,return rooms ;return #1 that have king beds ;return decor types of #2 ;return number of  #2 for each #3,"[""SELECT['rooms']"", ""FILTER['#1', 'that have king beds']"", ""PROJECT['decor types of #REF', '#2']"", ""GROUP['count', '#2', '#3']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'group', 'union']",train
SPIDER_train_262,Please show the nominee who has been nominated the greatest number of times.,return nominees ;return number of  times nominated of #1 ;return #1 where  #2 is highest,"[""SELECT['nominees']"", ""PROJECT['times nominated of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_2620,Find the average and minimum price of the rooms in different decor.,"return rooms ;return #1 in different decor ;return prices of  #2 ;return average of  #3 ;return minimum of  #3 ;return #4 ,  #5","[""SELECT['rooms']"", ""FILTER['#1', 'in different decor']"", ""PROJECT['prices of #REF', '#2']"", ""AGGREGATE['avg', '#3']"", ""AGGREGATE['min', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_2621,What is the average minimum and price of the rooms for each different decor.,"return different decor ;return rooms with  #1 ;return prices of #2 ;return average of #3 for each #1 ;return minimum of #3 for each #1 ;return #4 , #5 ,  #3","[""SELECT['different decor']"", ""PROJECT['rooms with #REF', '#1']"", ""PROJECT['prices of #REF', '#2']"", ""GROUP['avg', '#3', '#1']"", ""GROUP['min', '#3', '#1']"", ""UNION['#4', '#5', '#3']""]","['select', 'project', 'project', 'group', 'group', 'union']",train
SPIDER_train_2622,List the name of all rooms sorted by their prices.,return rooms ;return prices of  #1 ;return names of  #1 ;return #3 sorted by #2,"[""SELECT['rooms']"", ""PROJECT['prices of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""SORT['#3', '#2']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_2623,Sort all the rooms according to the price. Just report the room names.,return rooms ;return names of  #1 ;return prices of  #1 ;return #2 sorted by #3,"[""SELECT['rooms']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['prices of #REF', '#1']"", ""SORT['#2', '#3']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_2624,Find the number of rooms with price higher than 120 for different decor.,return rooms ;return different decor of #1 ;return #1 with  price higher than 120 ;return number of  #3 for each #2,"[""SELECT['rooms']"", ""PROJECT['different decor of #REF', '#1']"", ""FILTER['#1', 'with price higher than 120']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'project', 'filter', 'group', 'union']",train
SPIDER_train_2625,"How many rooms cost more than 120, for each different decor?",return rooms ;return different decors ;return #1 that  cost more than  120 ;return number of  #3 for each  #2,"[""SELECT['rooms']"", ""SELECT['different decors']"", ""FILTER['#1', 'that cost more than 120']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'select', 'filter', 'group', 'union']",train
SPIDER_train_2626,"For each bed type, find the average room price.",return bed types ;return room prices of  #1 ;return average of  #2 for each #1,"[""SELECT['bed types']"", ""PROJECT['room prices of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_2627,"What is the average base price of rooms, for each bed type?",return bed types ;return rooms with #1 ;return base prices of  #2 ;return average of  #3 for each  #1,"[""SELECT['bed types']"", ""PROJECT['rooms with #REF', '#1']"", ""PROJECT['base prices of #REF', '#2']"", ""GROUP['avg', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_2628,List the name of rooms with king or queen bed.,return rooms ;return beds in #1 ;return #1 where  #2 is king ;return #1 where  #2 is queen ;return #3 or #4 ;return names of  #5,"[""SELECT['rooms']"", ""PROJECT['beds in #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is king']"", ""COMPARATIVE['#1', '#2', 'is queen']"", ""UNION['#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_2629,What are the names of rooms that have either king or queen bed?,return rooms ;return bed of #1 ;return #1 where #2 is  king ;return #1 where #2 is  queen ;return #3 or  #4 ;return names of #5,"[""SELECT['rooms']"", ""PROJECT['bed of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is king']"", ""COMPARATIVE['#1', '#2', 'is queen']"", ""UNION['#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_263,Who is the nominee who has been nominated for the most musicals?,return nominees ;return musicals that  #1 has  been nominated for ;return number of #2 for each #1 ;return #1 where #3 is  the highest,"[""SELECT['nominees']"", ""PROJECT['musicals that #REF has been nominated for', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_2630,How many different types of beds are there?,return beds ;return types of  #1 ;return different #2 ;return number of  #3,"[""SELECT['beds']"", ""PROJECT['types of #REF', '#1']"", ""PROJECT['different #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_2631,Find the number of distinct bed types available in this inn.,return inn ;return bed types available in #1 ;return distinct #2 ;return number of  #3,"[""SELECT['inn']"", ""PROJECT['bed types available in #REF', '#1']"", ""PROJECT['distinct #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_2632,Find the name and id of the top 3 expensive rooms.,"return rooms ;return the  top 3 expensive #1 ;return the  names of #2 ;return the  ids of #2 ;return #3 ,  #4","[""SELECT['rooms']"", ""PROJECT['the top 3 expensive #REF', '#1']"", ""PROJECT['the names of #REF', '#2']"", ""PROJECT['the ids of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_2633,What are the name and id of the three highest priced rooms?,"return rooms ;return three highest priced #1 ;return name of  #2 ;return id of  #2 ;return #3 ,  #4","[""SELECT['rooms']"", ""PROJECT['three highest priced #REF', '#1']"", ""PROJECT['name of #REF', '#2']"", ""PROJECT['id of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_2634,Find the name of rooms whose price is higher than the average price.,return rooms ;return prices of #1 ;return average of #2 ;return #1 where #2 is higher than #3 ;return names of #4,"[""SELECT['rooms']"", ""PROJECT['prices of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_2635,What are the name of rooms that cost more than the average.,return rooms ;return cost of  #1 ;return average of  #2 ;return #1 where #2 is  higher than #3 ;return names of  #4,"[""SELECT['rooms']"", ""PROJECT['cost of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_2636,Find the number of rooms that do not have any reservation.,return rooms ;return #1 with  reservations ;return #1 besides #2 ;return number of #3,"[""SELECT['rooms']"", ""FILTER['#1', 'with reservations']"", ""DISCARD['#1', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'discard', 'aggregate']",train
SPIDER_train_2637,How many rooms have not had any reservation yet?,return rooms ;return #1 that  have  had reservations ;return #1 besides #2 ;return number of #3,"[""SELECT['rooms']"", ""FILTER['#1', 'that have had reservations']"", ""DISCARD['#1', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'discard', 'aggregate']",train
SPIDER_train_2638,Return the name and number of reservations made for each of the rooms.,"return rooms ;return names of  #1 ;return reservations made for #1 ;return number of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['rooms']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['reservations made for #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_2639,"For each room, find its name and the number of times reservations were made for it.","return rooms ;return names of #1 ;return times reservations were made for #1 ;return number of  #3 for each #1 ;return #2 ,  #4","[""SELECT['rooms']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['times reservations were made for #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_264,List the most common result of the musicals.,return results ;return musicals of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['results']"", ""PROJECT['musicals of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_2640,Find the names of rooms that have been reserved for more than 60 times.,return rooms ;return number of times #1 have  been reserved ;return #1 where  #2 is  more than  60 ;return names of  #3,"[""SELECT['rooms']"", ""PROJECT['times #REF have been reserved', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than 60']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_2641,What are the names of rooms whose reservation frequency exceeds 60 times?,return rooms ;return reservation frequencies of #1 ;return #1 where #2 higher than 60 ;return names of #3,"[""SELECT['rooms']"", ""PROJECT['reservation frequencies of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'higher than 60']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_2642,Find the name of rooms whose base price is between 120 and 150.,return rooms ;return base price of  #1 ;return #1 where  #2 is  between 120 and 150 ;return names of  #3,"[""SELECT['rooms']"", ""PROJECT['base price of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is  betweenleftside 120']"", ""COMPARATIVE['#3', '#2', 'is  betweenrightside 150']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'comparative', 'comparative', 'project']",train
SPIDER_train_2643,Which rooms cost between 120 and 150? Give me the room names.,return rooms ;return #1 that  cost between 120 and  150 ;return the  names of  #2,"[""SELECT['rooms']"", ""FILTER['#1', 'that cost betweenleftside 120']"", ""FILTER['#2', 'that cost betweenrightside 150']"", ""PROJECT['the names of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_2644,Find the name of rooms booked by some customers whose first name contains ROY.,return customers ;return rooms booked by #1 ;return first names of  #1 ;return #2 where  #3 contains ROY ;return names of  #4,"[""SELECT['customers']"", ""PROJECT['rooms booked by #REF', '#1']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#2', '#3', 'contains ROY']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_2645,"What are the name of rooms booked by customers whose first name has ""ROY"" in part?",return customers ;return first names of  #1 ;return #1 where #2 has  ROY in part ;return rooms booked by #3 ;return names of  #4,"[""SELECT['customers']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'has ROY in part']"", ""PROJECT['rooms booked by #REF', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_2646,what are the details of the cmi masters that have the cross reference code 'Tax'?,return cmi masters ;return cross reference codes of  #1 ;return #1 where #2 is  'Tax ;return details of  #3,"[""SELECT['cmi masters']"", ""PROJECT['cross reference codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Tax']"", ""PROJECT['details of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_2647,What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.,"return cmis cross reference  id ;return council tax entries that #1 related to ;return number of  #2 for each #1 ;return #1 where #3 is at least one ;return source system codes of #4 ;return #4 ,  #5","[""SELECT['cmis cross reference id']"", ""PROJECT['council tax entries that #REF related to', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least one']"", ""PROJECT['source system codes of #REF', '#4']"", ""UNION['#4', '#5']""]","['select', 'project', 'group', 'comparative', 'project', 'union']",train
SPIDER_train_2648,"How many business rates are related to each cmi cross reference? List cross reference id, master customer id and the n","return business rates ;return number of  #1 for each cmi cross reference ;return cross references ;return ids of #3 ;return master customer id  of #3 ;return #4 ,  #5 ,   #2","[""SELECT['business rates']"", ""PROJECT['reference', '#1']"", ""GROUP['count', '#1', '#2']"", ""SELECT['cross references']"", ""PROJECT['ids of #REF', '#4']"", ""PROJECT['master customer id of #REF', '#4']"", ""UNION['#5', '#6', '#3']""]","['select', 'project', 'group', 'select', 'project', 'project', 'union']",train
SPIDER_train_2649,"What is the tax source system code related to the benefits and overpayments? List the code and the benifit id, order by benifit id.","return tax source system codes ;return #1 which are  related to the  benefits and  overpayments ;return the  code  of  #2 ;return the  benifit  id of  #2 ;return #2 ,  #3 ,   #4 ;return #5 sorted by #4","[""SELECT['tax source system codes']"", ""FILTER['#1', 'which are related to the benefits and overpayments']"", ""PROJECT['the code of #REF', '#2']"", ""PROJECT['the benifit id of #REF', '#2']"", ""UNION['#2', '#3', '#4']"", ""SORT['#5', '#4']""]","['select', 'filter', 'project', 'project', 'union', 'sort']",train
SPIDER_train_265,Return the most frequent result across all musicals.,return results ;return musicals with  #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['results']"", ""PROJECT['musicals with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_2650,Wat is the tax source system code and master customer id of the taxes related to each parking fine id?,"return parking fine ids ;return taxes of #1 ;return tax source system code of #2 ;return master customer ids of #2 ;return #1 ,  #3 ,   #4","[""SELECT['parking fine ids']"", ""PROJECT['taxes of #REF', '#1']"", ""PROJECT['tax source system code of #REF', '#2']"", ""PROJECT['master customer ids of #REF', '#2']"", ""UNION['#1', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_2651,"What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?","return customer master index ;return #1 whose detail is  'Schmidt ,  Kertzmann and  Lubowitz ;return #1 besides  #2 ;return the  renting arrears tax ids related to #3","[""SELECT['customer master index']"", ""FILTER['#1', 'whose detail is Schmidt , Kertzmann and Lubowitz']"", ""DISCARD['#1', '#2']"", ""PROJECT['the renting arrears tax ids related to #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_2652,What are the register ids of electoral registries that have the cross reference source system code 'Electoral' or 'Tax'?,"return electoral registries ;return #1 that  have  cross reference source system code 'Electoral ;return #1 that  have  cross reference source system code 'Tax ;return #2 ,  #3 ;return register ids of  #4","[""SELECT['electoral registries']"", ""FILTER['#1', 'that have cross reference source system code Electoral']"", ""FILTER['#1', 'that have cross reference source system code Tax']"", ""UNION['#2', '#3']"", ""PROJECT['register ids of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_2653,How many different source system code for the cmi cross references are there?,return cmi cross references ;return source system codes for #1 ;return different #2 ;return number of #3,"[""SELECT['cmi cross references']"", ""PROJECT['source system codes for #REF', '#1']"", ""PROJECT['different #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_2654,"List all information about customer master index, and sort them by details in descending order.",return customer master index ;return information about #1 ;return details of #2 ;return #2 sorted by #3 in descending order,"[""SELECT['customer master index']"", ""PROJECT['information about #REF', '#1']"", ""PROJECT['details of #REF', '#2']"", ""SORT['#2', '#3', 'in descending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_2655,List the council tax ids and their related cmi cross references of all the parking fines.,"return parking fines ;return council tax ids of  #1 ;return cmi cross references of  #2 ;return #2 ,  #3","[""SELECT['parking fines']"", ""PROJECT['council tax ids of #REF', '#1']"", ""PROJECT['cmi cross references of #REF', '#2']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_2656,How many council taxes are collected for renting arrears ?,return renting arrears ;return council taxes collected for #1 ;return number of  #2,"[""SELECT['renting arrears']"", ""PROJECT['council taxes collected for #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_2657,"What are the distinct cross reference source system codes which are related to the master customer details 'Gottlieb, Becker and Wyman'?","return the  master customer details 'Gottlieb ,  Becker and  Wyman ;return the  distinct cross reference source system codes of #1","[""SELECT['the master customer details Gottlieb , Becker and Wyman']"", ""PROJECT['the distinct cross reference source system codes of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_2658,Which cmi cross reference id is not related to any parking taxes?,return cmi cross reference ids ;return #1 not  related to parking taxes,"[""SELECT['cmi cross reference ids']"", ""FILTER['#1', 'not related to parking taxes']""]","['select', 'filter']",train
SPIDER_train_2659,Which distinct source system code includes the substring 'en'?,return source system codes ;return the  distinct #1 ;return substring of #2 ;return #2 where #3 includes 'en,"[""SELECT['source system codes']"", ""PROJECT['the distinct #REF', '#1']"", ""PROJECT['substring of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'includes en']""]","['select', 'project', 'project', 'comparative']",train
SPIDER_train_266,List the nominees that have been nominated more than two musicals.,return nominees ;return musicals #1 have  been nominated of  ;return number of  #2 for each  #1 ;return #1 where  #3 is higher than two,"[""SELECT['nominees']"", ""PROJECT['musicals #REF have been nominated of', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than two']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_2660,How many parties are there?,return parties ;return the  number of  #1,"[""SELECT['parties']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_2661,Count the number of parties.,return parties ;return number of #1,"[""SELECT['parties']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_2662,List the themes of parties in ascending order of number of hosts.,return parties ;return themes of  #1 ;return hosts of  #1 ;return number of  #3 for each  #1 ;return #2 sorted by #4 in ascending order,"[""SELECT['parties']"", ""PROJECT['themes of #REF', '#1']"", ""PROJECT['hosts of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""SORT['#2', '#4', 'in ascending order']""]","['select', 'project', 'project', 'group', 'sort']",train
SPIDER_train_2663,What are the themes of parties ordered by the number of hosts in ascending manner?,return parties ;return themes of  #1 ;return number of  hosts of  #1 ;return #2 ordered by #3 in ascending manner,"[""SELECT['parties']"", ""PROJECT['themes of #REF', '#1']"", ""PROJECT['hosts of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""SORT['#2', '#4', 'in ascending manner']""]","['select', 'project', 'project', 'group', 'sort']",train
SPIDER_train_2664,What are the themes and locations of parties?,"return parties ;return themes of  #1 ;return locations of  #1 ;return #2 ,  #3","[""SELECT['parties']"", ""PROJECT['themes of #REF', '#1']"", ""PROJECT['locations of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_2665,Give me the theme and location of each party.,"return parties ;return themes of  #1 ;return locations of  #1 ;return #2 ,   #3","[""SELECT['parties']"", ""PROJECT['themes of #REF', '#1']"", ""PROJECT['locations of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_2666,"Show the first year and last year of parties with theme ""Spring"" or ""Teqnology"".","return parties ;return themes of  #1 ;return #1 where #2 is  Spring ;return #1 where #2 is  Teqnology ;return #3 or  #4 ;return first year  of  #5 ;return last year  of  #5 ;return #6 ,  #7","[""SELECT['parties']"", ""PROJECT['themes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Spring']"", ""COMPARATIVE['#1', '#2', 'is Teqnology']"", ""UNION['#3', '#4']"", ""PROJECT['first year of #REF', '#5']"", ""PROJECT['last year of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project', 'project', 'union']",train
SPIDER_train_2667,"What are the first year and last year of the parties whose theme is ""Spring"" or ""Teqnology""?","return parties ;return themes of  #1 ;return #1 where #2 is  Spring ;return #1 where #2 is  Teqnology ;return #3 or  #4 ;return first year  of  #5 ;return last year  of  #5 ;return #6 ,  #7","[""SELECT['parties']"", ""PROJECT['themes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Spring']"", ""COMPARATIVE['#1', '#2', 'is Teqnology']"", ""UNION['#3', '#4']"", ""PROJECT['first year of #REF', '#5']"", ""PROJECT['last year of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project', 'project', 'union']",train
SPIDER_train_2668,What is the average number of hosts for parties?,return parties ;return number of  hosts for #1 ;return average #2,"[""SELECT['parties']"", ""PROJECT['hosts for #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['avg', '#3']""]","['select', 'project', 'group', 'aggregate']",train
SPIDER_train_2669,Compute the average number of hosts for parties.,return parties ;return hosts for #1 ;return number of #2 ;return average of  #3,"[""SELECT['parties']"", ""PROJECT['hosts for #REF', '#1']"", ""AGGREGATE['count', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'project', 'aggregate', 'aggregate']",train
SPIDER_train_267,Who are the nominees who have been nominated more than two times?,return nominees ;return times nominated ;return number of  #2 for each  #1 ;return #1 where #3 is  more than two,"[""SELECT['nominees']"", ""SELECT['times nominated']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than two']""]","['select', 'select', 'group', 'comparative']",train
SPIDER_train_2670,What is the location of the party with the most hosts?,return parties ;return #1 with the  most hosts ;return location of  #2,"[""SELECT['parties']"", ""FILTER['#1', 'with the most hosts']"", ""PROJECT['location of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2671,Which party had the most hosts? Give me the party location.,return parties ;return hosts of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return location of  #4,"[""SELECT['parties']"", ""PROJECT['hosts of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['location of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_2672,Show different nationalities along with the number of hosts of each nationality.,"return hosts ;return different nationalities of #1 ;return number of  #1 for each #2 ;return #2 ,  #3","[""SELECT['hosts']"", ""PROJECT['different nationalities of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""UNION['#2', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_2673,How many hosts does each nationality have? List the nationality and the count.,"return nationalities ;return hosts of  #1 ;return number of #2 for each #1 ;return #1 ,   #3","[""SELECT['nationalities']"", ""PROJECT['hosts of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_2674,Show the most common nationality of hosts.,return hosts ;return nationalities of #1 ;return number of  #1 for each #2 ;return #2 where #3 is  the  highest,"[""SELECT['hosts']"", ""PROJECT['nationalities of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""COMPARATIVE['#2', '#3', 'is the highest']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_2675,Which nationality has the most hosts?,return nationalities ;return hosts of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['nationalities']"", ""PROJECT['hosts of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_2676,Show the nations that have both hosts older than 45 and hosts younger than 35.,return hosts  ;return #1 that  are older than  45 ;return #1 that  are younger than  35 ;return the  nations of #2 ;return the  nations of #3 ;return the  nations of #1 ;return #6 of both #4 and #5,"[""SELECT['hosts']"", ""FILTER['#1', 'that are older than 45']"", ""FILTER['#1', 'that are younger than 35']"", ""PROJECT['the nations of #REF', '#2']"", ""PROJECT['the nations of #REF', '#3']"", ""PROJECT['the nations of #REF', '#1']"", ""INTERSECTION['#6', '#4', '#5']""]","['select', 'filter', 'filter', 'project', 'project', 'project', 'intersection']",train
SPIDER_train_2677,Which nations have both hosts of age above 45 and hosts of age below 35?,return nations ;return hosts  of #1 ;return ages of #2 ;return #1 where at least one #3 is  above 45 ;return #1 where at least one #3 is  below 35 ;return #1 in both #4 and #5,"[""SELECT['nations']"", ""PROJECT['hosts of #REF', '#1']"", ""PROJECT['ages of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is above 45']"", ""COMPARATIVE['#1', '#3', 'is below 35']"", ""INTERSECTION['#1', '#4', '#5']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection']",train
SPIDER_train_2678,Show the themes of parties and the names of the party hosts.,"return parties ;return themes of  #1 ;return hosts of  #1 ;return names of  #3 ;return #2 ,  #4","[""SELECT['parties']"", ""PROJECT['themes of #REF', '#1']"", ""PROJECT['hosts of #REF', '#1']"", ""PROJECT['names of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_2679,"For each party, return its theme and the name of its host.","return parties ;return themes of  #1 ;return hosts of  #1 ;return names of  #3 ;return #2 ,   #4","[""SELECT['parties']"", ""PROJECT['themes of #REF', '#1']"", ""PROJECT['hosts of #REF', '#1']"", ""PROJECT['names of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_268,List the name of musicals that do not have actors.,return musicals ;return #1 with  actors ;return #1 besides #2 ;return names of  #3,"[""SELECT['musicals']"", ""FILTER['#1', 'with actors']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_2680,Show the locations of parties and the names of the party hosts in ascending order of the age of the host.,"return parties ;return locations of   #1 ;return hosts of   #1 ;return names of   #3 ;return ages of   #3 ;return #2 ,  #4 ;return #6 sorted by #5","[""SELECT['parties']"", ""PROJECT['locations of #REF', '#1']"", ""PROJECT['hosts of #REF', '#1']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['ages of #REF', '#3']"", ""UNION['#2', '#4']"", ""SORT['#6', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_2681,"For each party, find its location and the name of its host. Sort the result in ascending order of the age of the host.","return parties ;return locations of  #1 ;return hosts of  #1 ;return names of  #3 ;return ages of  #3 ;return #2 ,   #4 ;return #6 sorted by #5","[""SELECT['parties']"", ""PROJECT['locations of #REF', '#1']"", ""PROJECT['hosts of #REF', '#1']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['ages of #REF', '#3']"", ""UNION['#2', '#4']"", ""SORT['#6', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_2682,Show the locations of parties with hosts older than 50.,return parties ;return hosts of #1 ;return oldness of #2 ;return #1 where #3 is  higher than 50 ;return the  locations of #4,"[""SELECT['parties']"", ""PROJECT['hosts of #REF', '#1']"", ""PROJECT['oldness of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is higher than 50']"", ""PROJECT['the locations of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_2683,Which parties have hosts of age above 50? Give me the party locations.,return parties ;return hosts of  #1 ;return ages of  #2 ;return #1 where #3 is  above 50 ;return locations of  #4,"[""SELECT['parties']"", ""PROJECT['hosts of #REF', '#1']"", ""PROJECT['ages of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is above 50']"", ""PROJECT['locations of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_2684,Show the host names for parties with number of hosts greater than 20.,return parties ;return hosts of #1 ;return number of  #2 for each  #1 ;return #1 where #3 is higher than 20 ;return hosts of #4 ;return names of #5,"[""SELECT['parties']"", ""PROJECT['hosts of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 20']"", ""PROJECT['hosts of #REF', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'group', 'comparative', 'project', 'project']",train
SPIDER_train_2685,Which parties have more than 20 hosts? Give me the host names for these parties.,return parties ;return hosts of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  more than  20 ;return hosts of #4 ;return names of #5,"[""SELECT['parties']"", ""PROJECT['hosts of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than 20']"", ""PROJECT['hosts of #REF', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'group', 'comparative', 'project', 'project']",train
SPIDER_train_2686,Show the name and the nationality of the oldest host.,"return hosts ;return #1 that  is  the  oldest ;return name of  #2 ;return nationality of  #2 ;return #3 ,  #4","[""SELECT['hosts']"", ""FILTER['#1', 'that is the oldest']"", ""PROJECT['name of #REF', '#2']"", ""PROJECT['nationality of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_2687,What are the name and the nationality of the host of the highest age?,"return hosts ;return ages of  #1 ;return #1 where #2 is  highest ;return name of  #3 ;return nationality of  #3 ;return #4 ,  #5","[""SELECT['hosts']"", ""PROJECT['ages of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['name of #REF', '#3']"", ""PROJECT['nationality of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_2688,List the names of hosts who did not serve as a host of any party in our record.,return parties ;return #1 in our record ;return hosts of #2 ;return hosts besides #3 ;return the  names of #4,"[""SELECT['parties']"", ""FILTER['#1', 'in our record']"", ""PROJECT['hosts of #REF', '#2']"", ""SELECT['hosts']"", ""DISCARD['#4', '#3']"", ""PROJECT['the names of #REF', '#5']""]","['select', 'filter', 'project', 'select', 'discard', 'project']",train
SPIDER_train_2689,What are the names of hosts who did not host any party in our record?,return hosts ;return #1 who  did not  host any party in our record ;return names of  #2,"[""SELECT['hosts']"", ""FILTER['#1', 'who did not host any party in our record']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_269,What are the names of musicals who have no actors?,return musicals ;return #1 with no actors ;return names of  #2,"[""SELECT['musicals']"", ""FILTER['#1', 'with no actors']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2692,Show all region code and region name sorted by the codes.,"return regions ;return region codes of #1 ;return region names of #1 ;return #2 ,  #3 ;return #4 sorted by #2","[""SELECT['regions']"", ""PROJECT['region codes of #REF', '#1']"", ""PROJECT['region names of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#4', '#2']""]","['select', 'project', 'project', 'union', 'sort']",train
SPIDER_train_2693,"What are the codes and names for all regions, sorted by codes?","return regions ;return codes of  #1 ;return names of  #1 ;return #2 ,  #3 ;return #4 sorted by #2","[""SELECT['regions']"", ""PROJECT['codes of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#4', '#2']""]","['select', 'project', 'project', 'union', 'sort']",train
SPIDER_train_2694,List all region names in alphabetical order.,return regions ;return names of  #1 ;return #2 sorted in alphabetical order,"[""SELECT['regions']"", ""PROJECT['names of #REF', '#1']"", ""FILTER['#2', 'sorted in alphabetical order']""]","['select', 'project', 'filter']",train
SPIDER_train_2695,What are the names of the regions in alphabetical order?,return regions ;return names of  #1 ;return #2 sorted by alphabetical order,"[""SELECT['regions']"", ""PROJECT['names of #REF', '#1']"", ""SORT['#2', '#2', 'alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_2696,Show names for all regions except for Denmark.,return regions ;return #1 besides  Denmark ;return names of  #2,"[""SELECT['regions']"", ""FILTER['#1', 'Denmark']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_2697,Return the names of all regions other than Denmark.,return regions ;return #1 that  are  Denmark ;return #1 besides #2 ;return names of  #3,"[""SELECT['regions']"", ""FILTER['#1', 'that are Denmark']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_2698,How many storms had death records?,return storms ;return records of  #1 ;return #1 where  #2 is  death ;return number of #3,"[""SELECT['storms']"", ""PROJECT['records of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is death']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_2699,Count the number of storms in which at least 1 person died.,return storms ;return people who  died in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least 1 ;return number of  #4,"[""SELECT['storms']"", ""PROJECT['people who died in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 1']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'group', 'comparative', 'aggregate']",train
SPIDER_train_27,Return the maximum and minimum number of cows across all farms.,"return farms ;return cows on #1 ;return number of  #2 for each #1 ;return the  highest #3 ;return the  lowest #3 ;return #4 ,  #5","[""SELECT['farms']"", ""PROJECT['cows on #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['max', '#3']"", ""AGGREGATE['min', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'group', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_270,"Show the nominees that have nominated musicals for both ""Tony Award"" and ""Drama Desk Award"".",return musicals ;return #1 nominated for the  Tony Award  ;return #1 nominated for the  Drama Desk Award  ;return nominees of #2 ;return nominees of #3 ;return nominees of #1 ;return #6 of both #4 and #5,"[""SELECT['musicals']"", ""FILTER['#1', 'nominated for the Tony Award']"", ""FILTER['#1', 'nominated for the Drama Desk Award']"", ""PROJECT['nominees of #REF', '#2']"", ""PROJECT['nominees of #REF', '#3']"", ""PROJECT['nominees of #REF', '#1']"", ""INTERSECTION['#6', '#4', '#5']""]","['select', 'filter', 'filter', 'project', 'project', 'project', 'intersection']",train
SPIDER_train_2700,"List name, dates active, and number of deaths for all storms with at least 1 death.","return storms ;return deaths of  #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is at least 1 ;return names of  #4 ;return dates active of  #4 ;return deaths of  #4 ;return number of  #7 for each  #1 ;return #5 ,  #6 , #8","[""SELECT['storms']"", ""PROJECT['deaths of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 1']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['dates active of #REF', '#4']"", ""PROJECT['deaths of #REF', '#4']"", ""GROUP['count', '#7', '#1']"", ""UNION['#5', '#6', '#8']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_2701,"What are the names, dates active, and number of deaths for storms that had 1 or more death?","return storms ;return deaths of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least 1 ;return names of  #4 ;return dates active of  #4 ;return deaths of  #4 ;return number of  #7 ;return #5 ,  #6 ,   #8","[""SELECT['storms']"", ""PROJECT['deaths of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 1']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['dates active of #REF', '#4']"", ""PROJECT['deaths of #REF', '#4']"", ""AGGREGATE['count', '#7']"", ""UNION['#5', '#6', '#8']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'project', 'aggregate', 'union']",train
SPIDER_train_2702,Show the average and maximum damage for all storms with max speed higher than 1000.,"return storms ;return max speeds of #1 ;return #1 where #2 is  higher than 1000 ;return damages of #3 ;return average of #4 ;return maximum of #4 ;return #5 ,  #6","[""SELECT['storms']"", ""PROJECT['max speeds of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 1000']"", ""PROJECT['damages of #REF', '#3']"", ""AGGREGATE['avg', '#4']"", ""AGGREGATE['max', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_2703,What is the average and maximum damage in millions for storms that had a max speed over 1000?,"return storms ;return speeds of  #1 ;return maximum of  #2 ;return #1 where #3 is  higher than 1000 ;return damage in millions of  #4 ;return average of  #5 ;return maximum of  #5 ;return #6 ,  #7","[""SELECT['storms']"", ""PROJECT['speeds of #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""COMPARATIVE['#1', '#3', 'is higher than 1000']"", ""PROJECT['damage in millions of #REF', '#4']"", ""AGGREGATE['avg', '#5']"", ""AGGREGATE['max', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_2704,What is the total number of deaths and damage for all storms with a max speed greater than the average?,"return storms ;return max speeds of #1 ;return average of #2 ;return #1 where #2 is  higher than #3 ;return deaths of #4 ;return number of  #5 ;return damages of #4 ;return #6 ,  #7","[""SELECT['storms']"", ""PROJECT['max speeds of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['deaths of #REF', '#4']"", ""AGGREGATE['count', '#5']"", ""PROJECT['damages of #REF', '#4']"", ""UNION['#6', '#7']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'aggregate', 'project', 'union']",train
SPIDER_train_2705,Return the total number of deaths and total damange in millions for storms that had a max speed greater than the average.,"return storms ;return max speeds of #1 ;return the  average of #2 ;return #1 where #2 is  greater than  #3 ;return deaths of #4 ;return number of  #5 for each #4 ;return damanges in millions of #4 ;return sum of #6 ;return sum of #7 ;return #8 ,  #9","[""SELECT['storms']"", ""PROJECT['max speeds of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is greater than #3']"", ""PROJECT['deaths of #REF', '#4']"", ""GROUP['count', '#5', '#4']"", ""PROJECT['damanges in millions of #REF', '#4']"", ""AGGREGATE['sum', '#6']"", ""AGGREGATE['sum', '#7']"", ""UNION['#8', '#9']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'group', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_2706,List name and damage for all storms in a descending order of max speed.,"return storms ;return names of  #1 ;return damage of  #1 ;return max speed of  #1 ;return #2 ,  #3 ;return #5 sorted by #4 in descending order","[""SELECT['storms']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['damage of #REF', '#1']"", ""PROJECT['max speed of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#5', '#4', 'in descending order']""]","['select', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_2707,"What are the names and damage in millions for storms, ordered by their max speeds descending?","return storms ;return names of  #1 ;return damage in millions of  #1 ;return max speeds of  #1 ;return #2 ,  #3 ;return #5 sorted by #4 descending","[""SELECT['storms']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['damage in millions of #REF', '#1']"", ""PROJECT['max speeds of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#5', '#4', 'descending']""]","['select', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_2708,How many regions are affected?,return regions ;return #1 that  are  affected ;return number of  #2,"[""SELECT['regions']"", ""FILTER['#1', 'that are affected']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_2709,Count the number of different affected regions.,return affected regions ;return #1 that  are  different ;return Count of  #2,"[""SELECT['affected regions']"", ""FILTER['#1', 'that are different']"", ""PROJECT['Count of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_271,Who are the nominees who have been nominated for both a Tony Award and a Drama Desk Award?,return nominees ;return #1 nominated for a  Tony Award ;return #1 nominated for and  Drama Desk Award ;return #1 in both #2 and  #3,"[""SELECT['nominees']"", ""FILTER['#1', 'nominated for a Tony Award']"", ""FILTER['#1', 'nominated for and Drama Desk Award']"", ""INTERSECTION['#1', '#2', '#3']""]","['select', 'filter', 'filter', 'intersection']",train
SPIDER_train_2710,Show the name for regions not affected.,return regions ;return #1 that  are affected ;return #1 besides #2 ;return the  names of #3,"[""SELECT['regions']"", ""FILTER['#1', 'that are affected']"", ""DISCARD['#1', '#2']"", ""PROJECT['the names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_2711,What are the names of regions that were not affected?,return regions ;return #1 that  were not  affected ;return names of  #2,"[""SELECT['regions']"", ""FILTER['#1', 'that were not affected']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2712,Show the name for regions and the number of storms for each region.,"return regions ;return names of  #1 ;return storms in #1 ;return number of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['regions']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['storms in #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_2713,How many storms occured in each region?,return regions ;return storms in #1 ;return number of  #2 for each  #1,"[""SELECT['regions']"", ""PROJECT['storms in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_2714,List the name for storms and the number of affected regions for each storm.,"return storms ;return names of  #1 ;return affected regions of  #1 ;return number of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['storms']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['affected regions of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_2715,How many regions were affected by each storm?,return storms ;return regions affected by #1 ;return number of  #2 for each  #1,"[""SELECT['storms']"", ""PROJECT['regions affected by #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_2716,What is the storm name and max speed which affected the greatest number of regions?,"return storms ;return regions #1 affected ;return number of  #2 for each #1 ;return #1 where #3 is  highest ;return name of #4 ;return max speed of #4 ;return #5 ,  #6","[""SELECT['storms']"", ""PROJECT['regions #REF affected', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['max speed of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_2717,Return the name and max speed of the storm that affected the most regions.,"return storms ;return regions #1 affected ;return number of #2 for each #1 ;return #1 where #3 is  highest ;return name of #4 ;return max speed of #4 ;return #5 , #6","[""SELECT['storms']"", ""PROJECT['regions #REF affected', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['max speed of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_2718,Show the name of storms which don't have affected region in record.,return storms ;return #1 that  do not have affected regions ;return names of #2,"[""SELECT['storms']"", ""FILTER['#1', 'that do not have affected regions']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2719,What are the names of storms that did not affect any regions?,return storms ;return #1 that  did  not affect any  regions ;return names of #2,"[""SELECT['storms']"", ""FILTER['#1', 'that did not affect any regions']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_272,"Show the musical nominee with award ""Bob Fosse"" or ""Cleavant Derricks"".",return musical nominees ;return #1 with  Bob Fosse ;return #1 with  Cleavant Derricks ;return #2 or #3,"[""SELECT['musical nominees']"", ""FILTER['#1', 'with Bob Fosse']"", ""FILTER['#1', 'with Cleavant Derricks']"", ""UNION['#2', '#3']""]","['select', 'filter', 'filter', 'union']",train
SPIDER_train_2720,Show storm name with at least two regions and 10 cities affected.,return storms ;return regions that  #1 affected ;return cities that  #1 affected ;return number of #2 ;return number of #3 ;return #1 where #4 is  at least two ;return #1 where #5 is  at least 10 ;return #1 in both #6 and  #7 ;return names of #8,"[""SELECT['storms']"", ""PROJECT['regions that #REF affected', '#1']"", ""PROJECT['cities that #REF affected', '#1']"", ""AGGREGATE['count', '#2']"", ""AGGREGATE['count', '#3']"", ""COMPARATIVE['#1', '#4', 'is at least two']"", ""COMPARATIVE['#1', '#5', 'is at least 10']"", ""INTERSECTION['#1', '#6', '#7']"", ""PROJECT['names of #REF', '#8']""]","['select', 'project', 'project', 'aggregate', 'aggregate', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_2721,What are the names of storms that both affected two or more regions and affected a total of 10 or more cities?,return storms ;return regions #1 affected ;return number of  #2 for each  #1 ;return #1 where #3 is  at least two ;return cities #1 affected ;return number of  #5 for each  #1 ;return #1 where #6 is  at least 10 ;return #1 of  both #4 and  #7 ;return names of  #8,"[""SELECT['storms']"", ""PROJECT['regions #REF affected', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""PROJECT['cities #REF affected', '#1']"", ""GROUP['count', '#5', '#1']"", ""COMPARATIVE['#1', '#6', 'is at least 10']"", ""INTERSECTION['#1', '#4', '#7']"", ""PROJECT['names of #REF', '#8']""]","['select', 'project', 'group', 'comparative', 'project', 'group', 'comparative', 'intersection', 'project']",train
SPIDER_train_2722,Show all storm names except for those with at least two affected regions.,return storms ;return affected regions of #1 ;return number of  #2 for each  #1 ;return #1 where #3 is at least two ;return names of  #4,"[""SELECT['storms']"", ""PROJECT['affected regions of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_2723,What are the names of storms that did not affect two or more regions?,return storms ;return regions of #1 ;return number of  #2 for each #1 ;return #1 where #3 is at least two ;return #1 besides  #4 ;return names of #5,"[""SELECT['storms']"", ""PROJECT['regions of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""DISCARD['#1', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'group', 'comparative', 'discard', 'project']",train
SPIDER_train_2724,What are the region names affected by the storm with a number of deaths of least 10?,return regions ;return #1 affected by the  storm ;return #2 with deaths of  at least 10 ;return names of  #3,"[""SELECT['regions']"", ""FILTER['#1', 'affected by the storm']"", ""FILTER['#2', 'with deaths of at least 10']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_2725,Return the names of the regions affected by storms that had a death count of at least 10.,return regions ;return storms of  #1 ;return death counts of  #2 ;return #1 where #3 is  at least 10 ;return names of  #4,"[""SELECT['regions']"", ""PROJECT['storms of #REF', '#1']"", ""PROJECT['death counts of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is at least 10']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_2726,"Show all storm names affecting region ""Denmark"".",return storms ;return #1 affecting region Denmark ;return names of #2,"[""SELECT['storms']"", ""FILTER['#1', 'affecting region Denmark']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2727,What are the names of the storms that affected Denmark?,return storms ;return #1 that  affected Denmark ;return names of  #2,"[""SELECT['storms']"", ""FILTER['#1', 'that affected Denmark']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2728,Show the region name with at least two storms.,return regions ;return storms in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least two ;return name of  #4,"[""SELECT['regions']"", ""PROJECT['storms in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_2729,What are the names of regions with two or more storms?,return regions ;return storms in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least two ;return names of  #4,"[""SELECT['regions']"", ""PROJECT['storms in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_273,Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards?,return nominees ;return awards #1 were nominated for ;return #1 where #2 is  Bob Fosse ;return #1 where #2 is  Cleavant Derricks ;return #3 or  #4,"[""SELECT['nominees']"", ""PROJECT['awards #REF were nominated for', '#1']"", ""COMPARATIVE['#1', '#2', 'is Bob Fosse']"", ""COMPARATIVE['#1', '#2', 'is Cleavant Derricks']"", ""UNION['#3', '#4']""]","['select', 'project', 'comparative', 'comparative', 'union']",train
SPIDER_train_2730,Find the names of the regions which were affected by the storm that killed the greatest number of people.,return storms ;return people killed by #1 ;return number of #2 for each #1 ;return #1 where  #3 is  highest ;return regions affected by #4 ;return names of  #5,"[""SELECT['storms']"", ""PROJECT['people killed by #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['regions affected by #REF', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'group', 'superlative', 'project', 'project']",train
SPIDER_train_2731,What are the names of regions that were affected by the storm in which the most people died?,return regions ;return #1 that were affected by the  storm ;return people who  died in  #2 ;return the  number of  #3 ;return the  #1 where #4 is the   highest ;return the  names of #5,"[""SELECT['regions']"", ""FILTER['#1', 'that were affected by the storm']"", ""PROJECT['people who died in #REF', '#2']"", ""AGGREGATE['count', '#3']"", ""COMPARATIVE['#1', '#4', 'is the highest']"", ""PROJECT['the names of #REF', '#5']""]","['select', 'filter', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_2732,Find the name of the storm that affected both Afghanistan and Albania regions.,return storms ;return regions affected of #1 ;return #1 where #2 is Afghanistan ;return #1 where #2 is Albania ;return #1 in  both #3 and  #4 ;return name of #5,"[""SELECT['storms']"", ""PROJECT['regions affected of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Afghanistan']"", ""COMPARATIVE['#1', '#2', 'is Albania']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['name of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_2733,What are the names of the storms that affected both the regions of Afghanistan and Albania?,return storms ;return regions #1 affected ;return #1 where #2 is  Afghanistan ;return #1 where #2 is  Albania ;return #1 of  both #3 and  #4 ;return names of  #5,"[""SELECT['storms']"", ""PROJECT['regions #REF affected', '#1']"", ""COMPARATIVE['#1', '#2', 'is Afghanistan']"", ""COMPARATIVE['#1', '#2', 'is Albania']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_2734,How many counties are there in total?,return counties ;return number of  #1,"[""SELECT['counties']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_2735,Count the total number of counties.,return counties ;return total number of  #1 ;return Count #2,"[""SELECT['counties']"", ""AGGREGATE['count', '#1']"", ""PROJECT['Count #REF', '#2']""]","['select', 'aggregate', 'project']",train
SPIDER_train_2736,Show the county name and population of all counties.,"return counties ;return county names of #1 ;return populations of #1 ;return #2 , #3","[""SELECT['counties']"", ""PROJECT['county names of #REF', '#1']"", ""PROJECT['populations of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_2737,What are the name and population of each county?,"return counties ;return names of  #1 ;return populations of  #1 ;return #2 ,  #3","[""SELECT['counties']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['populations of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_2738,Show the average population of all counties.,return counties ;return populations of  #1 ;return average of  #2,"[""SELECT['counties']"", ""PROJECT['populations of #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_2739,On average how large is the population of the counties?,return counties ;return populations of  #1 ;return average of  #2,"[""SELECT['counties']"", ""PROJECT['populations of #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_274,"Find the emails of the user named ""Mary"".",return users ;return #1 named Mary ;return emails of  #2,"[""SELECT['users']"", ""FILTER['#1', 'named Mary']"", ""PROJECT['emails of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2740,Return the maximum and minimum population among all counties.,return counties ;return populations of  #1 ;return maximum of  #2 ;return minimum of  #2 ;return #3 or #4,"[""SELECT['counties']"", ""PROJECT['populations of #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""AGGREGATE['min', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_2741,What are the maximum and minimum population of the counties?,"return counties ;return populations of #1 ;return maximum of #2 ;return minimum of #2 ;return #3 ,  #4","[""SELECT['counties']"", ""PROJECT['populations of #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""AGGREGATE['min', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_2742,Show all the distinct districts for elections.,return elections ;return district districts of #1,"[""SELECT['elections']"", ""PROJECT['district districts of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_2743,What are the distinct districts for elections?,return elections ;return distinct districts for #1,"[""SELECT['elections']"", ""PROJECT['distinct districts for #REF', '#1']""]","['select', 'project']",train
SPIDER_train_2744,"Show the zip code of the county with name ""Howard"".",return counties ;return names of #1 ;return #1 where #2 are Howard ;return the  zip code of #3,"[""SELECT['counties']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'are Howard']"", ""PROJECT['the zip code of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_2745,"What is the zip code the county named ""Howard"" is located in?",return the  county named Howard ;return the  zip code of  #1,"[""SELECT['the county named Howard']"", ""PROJECT['the zip code of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_2746,Show the delegate from district 1 in election.,return election ;return delegates of #1 ;return districts of #2 ;return #2 where #3 is  1,"[""SELECT['election']"", ""PROJECT['delegates of #REF', '#1']"", ""PROJECT['districts of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is 1']""]","['select', 'project', 'project', 'comparative']",train
SPIDER_train_2747,Who is the delegate of district 1 in the elections?,return delegates ;return #1 of district 1 ;return #2 in the  elections,"[""SELECT['delegates']"", ""FILTER['#1', 'of district 1']"", ""FILTER['#2', 'in the elections']""]","['select', 'filter', 'filter']",train
SPIDER_train_2748,Show the delegate and committee information of elections.,"return elections ;return delegate information of  #1 ;return committee information of  #1 ;return #2 ,  #3","[""SELECT['elections']"", ""PROJECT['delegate information of #REF', '#1']"", ""PROJECT['committee information of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_2749,What are the delegate and committee information for each election record?,"return elections ;return records of  #1 ;return delegate information of  #2 ;return committee information of  #2 ;return #3 ,  #4","[""SELECT['elections']"", ""PROJECT['records of #REF', '#1']"", ""PROJECT['delegate information of #REF', '#2']"", ""PROJECT['committee information of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_275,"What is the partition id of the user named ""Iron Man"".",return users ;return #1 named Iron Man ;return partition id of  #2,"[""SELECT['users']"", ""FILTER['#1', 'named Iron Man']"", ""PROJECT['partition id of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2750,How many distinct governors are there?,return governors ;return distinct #1 ;return number of #2,"[""SELECT['governors']"", ""PROJECT['distinct #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_2751,Count the number of distinct governors.,return governors ;return #1 that  are  distinct ;return number of #2,"[""SELECT['governors']"", ""FILTER['#1', 'that are distinct']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_2752,Show the lieutenant governor and comptroller from the democratic party.,"return parties ;return lieutenant governors of  #1 ;return comptrollers of  #1 ;return #2 ,  #3 ;return #4 where #1 is  democratic party","[""SELECT['parties']"", ""PROJECT['lieutenant governors of #REF', '#1']"", ""PROJECT['comptrollers of #REF', '#1']"", ""UNION['#2', '#3']"", ""COMPARATIVE['#4', '#1', 'is democratic party']""]","['select', 'project', 'project', 'union', 'comparative']",train
SPIDER_train_2753,Who are the lieutenant governor and comptroller from the democratic party?,"return democratic party ;return lieutenant governor from #1 ;return comptroller from #1 ;return #2 ,  #3","[""SELECT['democratic party']"", ""PROJECT['lieutenant governor from #REF', '#1']"", ""PROJECT['comptroller from #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_2754,"In which distinct years was the governor ""Eliot Spitzer""?",return Eliot Spitzer ;return distinct years that  #1 was the  governor,"[""SELECT['Eliot Spitzer']"", ""PROJECT['distinct years that #REF was the governor', '#1']""]","['select', 'project']",train
SPIDER_train_2755,"Find the distinct years when the governor was named ""Eliot Spitzer"".",return governors ;return when  #1 was named Eliot Spitzer ;return distinct years of #2,"[""SELECT['governors']"", ""PROJECT['when #REF was named Eliot Spitzer', '#1']"", ""PROJECT['distinct years of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_2756,Show all the information about election.,return election ;return information about #1,"[""SELECT['election']"", ""PROJECT['information about #REF', '#1']""]","['select', 'project']",train
SPIDER_train_2757,Return all the information for each election record.,return election records ;return all information of  #1,"[""SELECT['election records']"", ""PROJECT['all information of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_2758,Show the delegates and the names of county they belong to.,"return delegates ;return county #1 belong to  ;return #1 , #2","[""SELECT['delegates']"", ""PROJECT['county #REF belong to', '#1']"", ""UNION['#1', '#2']""]","['select', 'project', 'union']",train
SPIDER_train_2759,"What are the delegate and name of the county they belong to, for each county?","return counties ;return names of #1 ;return delegates of #1 ;return #2 ,  #3","[""SELECT['counties']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['delegates of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_276,How many users are there?,return users ;return number of  #1,"[""SELECT['users']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_2760,Which delegates are from counties with population smaller than 100000?,return counties ;return populations of #1 ;return #1 where #2 is  lower than 100000 ;return delegates from #3,"[""SELECT['counties']"", ""PROJECT['populations of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is lower than 100000']"", ""PROJECT['delegates from #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_2761,Find the delegates who are from counties with population below 100000.,return delegates ;return counties of  #1 ;return population of  #2 ;return #1 where #3 is  lower than 100000,"[""SELECT['delegates']"", ""PROJECT['counties of #REF', '#1']"", ""PROJECT['population of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is lower than 100000']""]","['select', 'project', 'project', 'comparative']",train
SPIDER_train_2762,How many distinct delegates are from counties with population larger than 50000?,return counties ;return populations of  #1 ;return #1 where  #2 is  higher than 50000 ;return delegates from  #3 ;return distinct #4 ;return number of #5,"[""SELECT['counties']"", ""PROJECT['populations of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 50000']"", ""PROJECT['delegates from #REF', '#3']"", ""PROJECT['distinct #REF', '#4']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'aggregate']",train
SPIDER_train_2763,Count the number of distinct delegates who are from counties with population above 50000.,return counties ;return population of  #1 ;return #1 where  #2 is  above 50000 ;return distinct delegates from  #3 ;return the number of #4,"[""SELECT['counties']"", ""PROJECT['population of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is above 50000']"", ""PROJECT['distinct delegates from #REF', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_2764,"What are the names of the county that the delegates on ""Appropriations"" committee belong to?",return delegates ;return #1 that  belong to Appropriations committee ;return county of  #2 ;return names of  #3,"[""SELECT['delegates']"", ""FILTER['#1', 'that belong to Appropriations committee']"", ""PROJECT['county of #REF', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_2765,"Which county do the delegates on ""Appropriations"" committee belong to? Give me the county names.",return delegates ;return #1 on the  Appropriations committee ;return the  counties that  #2 belong to  ;return the  names of #3,"[""SELECT['delegates']"", ""FILTER['#1', 'on the Appropriations committee']"", ""PROJECT['the counties that #REF belong to', '#2']"", ""PROJECT['the names of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_2766,Show the delegates and the names of the party they belong to.,"return delegates ;return parties of  #1 ;return names of  #2 ;return #1 ,  #3","[""SELECT['delegates']"", ""PROJECT['parties of #REF', '#1']"", ""PROJECT['names of #REF', '#2']"", ""UNION['#1', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_2767,"For each delegate, find the names of the party they are part of.",return delegates ;return parties of  #1 ;return names of  #2,"[""SELECT['delegates']"", ""PROJECT['parties of #REF', '#1']"", ""PROJECT['names of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_2768,Who were the governors of the parties associated with delegates from district 1?,return delegates ;return #1 from district 1 ;return the  parties associated with  #2 ;return the  governors of #3,"[""SELECT['delegates']"", ""FILTER['#1', 'from district 1']"", ""PROJECT['the parties associated with #REF', '#2']"", ""PROJECT['the governors of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_2769,Find the parties associated with the delegates from district 1. Who served as governors of the parties?,return delegates ;return #1 from district 1. ;return parties of #2 ;return governors that  served the   #3 ;return #3 or #4,"[""SELECT['delegates']"", ""FILTER['#1', 'from district 1.']"", ""PROJECT['parties of #REF', '#2']"", ""PROJECT['governors that served the #REF', '#3']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_277,How many followers does each user have?,return users ;return followers of  #1 ;return number of #2 for each #1,"[""SELECT['users']"", ""PROJECT['followers of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_2770,Who were the comptrollers of the parties associated with the delegates from district 1 or district 2?,return parties ;return delegates of #1 ;return districts of #2 ;return #1 where #3 is district 1 ;return #1 where #3 is district 2 ;return #4 or  #5 ;return comptrollers of #6,"[""SELECT['parties']"", ""PROJECT['delegates of #REF', '#1']"", ""PROJECT['districts of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is district 1']"", ""COMPARATIVE['#1', '#3', 'is district 2']"", ""UNION['#4', '#5']"", ""PROJECT['comptrollers of #REF', '#6']""]","['select', 'project', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_2771,Find the parties associated with the delegates from district 1 or 2. Who served as comptrollers of the parties?,return delegates ;return #1 from  district 1 ;return #1 from  district 2. ;return #2 or  #3 ;return parties  of  #4 ;return comptrollers of  #5,"[""SELECT['delegates']"", ""FILTER['#1', 'from district 1']"", ""FILTER['#1', 'from district 2.']"", ""UNION['#2', '#3']"", ""PROJECT['parties of #REF', '#4']"", ""PROJECT['comptrollers of #REF', '#5']""]","['select', 'filter', 'filter', 'union', 'project', 'project']",train
SPIDER_train_2772,Return all the committees that have delegates from Democratic party.,return committees ;return delegates of  #1 ;return parties of  #2 ;return #1 where  #3 is Democratic party,"[""SELECT['committees']"", ""PROJECT['delegates of #REF', '#1']"", ""PROJECT['parties of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Democratic party']""]","['select', 'project', 'project', 'comparative']",train
SPIDER_train_2773,Which committees have delegates from the Democratic party?,return delegates ;return parties of  #1 ;return #1 where #2 is  Democratic party ;return committees that  have  #3,"[""SELECT['delegates']"", ""PROJECT['parties of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Democratic party']"", ""PROJECT['committees that have #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_2774,Show the name of each county along with the corresponding number of delegates from that county.,"return counties ;return number of  delegates from each #1 ;return names of  #1 ;return #3, #2","[""SELECT['counties']"", ""PROJECT['delegates from each #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['names of #REF', '#1']"", ""UNION['#4', '#3']""]","['select', 'project', 'group', 'project', 'union']",train
SPIDER_train_2775,"For each county, find the name of the county and the number of delegates from that county.","return counties ;return names of  #1 ;return delegates of  #1 ;return number of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['counties']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['delegates of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_2776,Show the name of each party and the corresponding number of delegates from that party.,"return parties ;return names of #1 ;return delegates of #1 ;return number of  #3 for each #1 ;return #2 ,  #4","[""SELECT['parties']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['delegates of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_2777,"For each party, return the name of the party and the number of delegates from that party.","return parties ;return names of #1 ;return delegates from #1 ;return number of  #3 for each #1 ;return #2 ,  #4","[""SELECT['parties']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['delegates from #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_2778,Return the names of all counties sorted by population in ascending order.,return counties ;return names of  #1 ;return populations of  #1 ;return #2 sorted by #3 in ascending order,"[""SELECT['counties']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['populations of #REF', '#1']"", ""SORT['#2', '#3', 'in ascending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_2779,Sort the names of all counties in ascending order of population.,return counties ;return populations of  #1 ;return #1 sorted by #2 ;return names of  #3,"[""SELECT['counties']"", ""PROJECT['populations of #REF', '#1']"", ""SORT['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'sort', 'project']",train
SPIDER_train_278,Find the number of followers for each user.,return users ;return followers of  #1 ;return number of #2 for each #1,"[""SELECT['users']"", ""PROJECT['followers of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_2780,Return the names of all counties sorted by county name in descending alphabetical order.,return names of  all counties ;return #1 sorted by descending alphabetical order,"[""SELECT['names of all counties']"", ""SORT['#1', '#1', 'descending alphabetical order']""]","['select', 'sort']",train
SPIDER_train_2781,Sort the names of all counties in descending alphabetical order.,return counties ;return names of  #1 ;return #2 sorted by descending alphabetical order,"[""SELECT['counties']"", ""PROJECT['names of #REF', '#1']"", ""SORT['#2', '#2', 'descending alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_2782,Show the name of the county with the biggest population.,return counties ;return populations of #1 ;return #1 where #2 is  highest,"[""SELECT['counties']"", ""PROJECT['populations of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']""]","['select', 'project', 'superlative']",train
SPIDER_train_2783,Which county has the largest population? Give me the name of the county.,return counties ;return populations of #1 ;return #1 where #2 is highest ;return name of #3,"[""SELECT['counties']"", ""PROJECT['populations of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_2784,Show the 3 counties with the smallest population.,"return counties ;return population of #1 ;return #1 where #2 is lowest ;return #1 besides  #3 ;return #4 where #2 is lowest ;return #4 besides  #5 ;return #6 where #2 is lowest ;return #3 ,  #5 ,   #7","[""SELECT['counties']"", ""PROJECT['population of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""DISCARD['#1', '#3']"", ""SUPERLATIVE['min', '#4', '#2']"", ""DISCARD['#4', '#5']"", ""SUPERLATIVE['min', '#6', '#2']"", ""UNION['#3', '#5', '#7']""]","['select', 'project', 'superlative', 'discard', 'superlative', 'discard', 'superlative', 'union']",train
SPIDER_train_2785,What are the 3 counties that have the smallest population? Give me the county names.,"return counties ;return population of #1 ;return #1 where #2 is lowest ;return #1 besides  #3 ;return #4 where #2 is lowest ;return #4 besides  #5 ;return #6 where #2 is lowest ;return #3 ,  #5 ,   #7 ;return names of #8","[""SELECT['counties']"", ""PROJECT['population of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""DISCARD['#1', '#3']"", ""SUPERLATIVE['min', '#4', '#2']"", ""DISCARD['#4', '#5']"", ""SUPERLATIVE['min', '#6', '#2']"", ""UNION['#3', '#5', '#7']"", ""PROJECT['names of #REF', '#8']""]","['select', 'project', 'superlative', 'discard', 'superlative', 'discard', 'superlative', 'union', 'project']",train
SPIDER_train_2786,Show the names of counties that have at least two delegates.,return counties ;return delegates of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  at least two ;return names of #4,"[""SELECT['counties']"", ""PROJECT['delegates of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_2787,Which counties have two or more delegates? Give me the county names.,return counties ;return delegates of #1 ;return the  number of  #2 for each #1 ;return #1 where #3 is  at least two ;return the  names of #4,"[""SELECT['counties']"", ""PROJECT['delegates of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""PROJECT['the names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_2788,Show the name of the party that has at least two records.,return parties ;return records of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least two ;return name of  #4,"[""SELECT['parties']"", ""PROJECT['records of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_2789,Which party has two or more records?,return parties ;return records of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  at least two,"[""SELECT['parties']"", ""PROJECT['records of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_279,Find the number of tweets in record.,return tweets ;return number of #1,"[""SELECT['tweets']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_2790,Show the name of the party that has the most delegates.,return parties ;return delegates of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest ;return name of #4,"[""SELECT['parties']"", ""PROJECT['delegates of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_2791,Which party has the largest number of delegates?,return parties ;return delegates of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['parties']"", ""PROJECT['delegates of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_2792,Show the people that have been governor the most times.,return people ;return times that  #1 have been governor ;return the  number of  #2 for each #1 ;return #1 where #3 is  the  highest,"[""SELECT['people']"", ""PROJECT['times that #REF have been governor', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_2793,Which people severed as governor most frequently?,return people ;return #1 who  severed as governor ;return #1 where #2 most frequently,"[""SELECT['people']"", ""FILTER['#1', 'who severed as governor']"", ""FILTER['#1', 'where #2 most frequently']""]","['select', 'filter', 'filter']",train
SPIDER_train_2794,Show the people that have been comptroller the most times and the corresponding number of times.,"return people ;return the   times  #1 have been comptroller ;return the   number of  #2 for each #1 ;return the   highest of #3 ;return #1 where #3 is  #4 ;return #5 ,  #4","[""SELECT['people']"", ""PROJECT['the times #REF have been comptroller', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['max', '#3']"", ""COMPARATIVE['#1', '#3', 'is #4']"", ""UNION['#5', '#4']""]","['select', 'project', 'group', 'aggregate', 'comparative', 'union']",train
SPIDER_train_2795,Which people severed as comptroller most frequently? Give me the name of the person and the frequency count.,"return people ;return #1 that  severed as comptroller ;return frequency of #2 ;return #1 where #3 is  highest ;return name of #4 ;return highest #3 ;return #5 ,  #6","[""SELECT['people']"", ""FILTER['#1', 'that severed as comptroller']"", ""PROJECT['frequency of #REF', '#2']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']"", ""AGGREGATE['max', '#3']"", ""UNION['#5', '#6']""]","['select', 'filter', 'project', 'superlative', 'project', 'aggregate', 'union']",train
SPIDER_train_2796,What are the names of parties that do not have delegates in election?,return parties ;return #1 who  do not  have  delegates in election ;return names of  #2,"[""SELECT['parties']"", ""FILTER['#1', 'who do not have delegates in election']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2797,Which parties did not have any delegates in elections?,return parties ;return #1 with delegates ;return #2 in elections ;return #1 besides  #3,"[""SELECT['parties']"", ""FILTER['#1', 'with delegates']"", ""FILTER['#2', 'in elections']"", ""DISCARD['#1', '#3']""]","['select', 'filter', 'filter', 'discard']",train
SPIDER_train_2798,"What are the names of parties that have both delegates on ""Appropriations"" committee and",return parties ;return delegates of  #1 ;return #2 on  Appropriations committee ;return parties of #3 ;return names of  #4,"[""SELECT['parties']"", ""PROJECT['delegates of #REF', '#1']"", ""FILTER['#2', 'on Appropriations committee']"", ""PROJECT['parties of #REF', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'filter', 'project', 'project']",train
SPIDER_train_2799,"Which parties have delegates in both the ""Appropriations"" committee and the ""Economic Matters"" committee?",return parties ;return delegates of #1 ;return #2 in the Appropriations committee ;return #2 in the Economic Matters committee ;return #1 of both #3 and  #4,"[""SELECT['parties']"", ""PROJECT['delegates of #REF', '#1']"", ""FILTER['#2', 'in the Appropriations committee']"", ""FILTER['#2', 'in the Economic Matters committee']"", ""INTERSECTION['#1', '#3', '#4']""]","['select', 'project', 'filter', 'filter', 'intersection']",train
SPIDER_train_28,How many different statuses do cities have?,return cities ;return statuses of  #1 ;return different #2 ;return number of #3,"[""SELECT['cities']"", ""PROJECT['statuses of #REF', '#1']"", ""PROJECT['different #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_280,Find the number of users who posted some tweets.,return tweets ;return users who  posted #1 ;return number of #2,"[""SELECT['tweets']"", ""PROJECT['users who posted #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_2800,Which committees have delegates from both democratic party and liberal party?,return committees ;return delegates of  #1 ;return parties of  #2 ;return #1 where #3 is  democratic party ;return #1 where #3 is  liberal party ;return #1 of  both #4 and  #5,"[""SELECT['committees']"", ""PROJECT['delegates of #REF', '#1']"", ""PROJECT['parties of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is democratic party']"", ""COMPARATIVE['#1', '#3', 'is liberal party']"", ""INTERSECTION['#1', '#4', '#5']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection']",train
SPIDER_train_2801,Find the committees that have delegates both from from the democratic party and the liberal party.,return the  democratic party ;return the  liberal party ;return delegates of #1 ;return delegates of #2 ;return the committees ; return #5 of both #3 and  #4,"[""SELECT['the democratic party']"", ""SELECT['the liberal party']"", ""PROJECT['delegates of #REF', '#1']"", ""PROJECT['delegates of #REF', '#2']"", ""SELECT['the committees']"", ""INTERSECTION['#5', '#3', '#4']""]","['select', 'select', 'project', 'project', 'select', 'intersection']",train
SPIDER_train_2802,How many journalists are there?,return journalists ;return number of  #1,"[""SELECT['journalists']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_2803,List the names of journalists in ascending order of years working.,return journalists ;return names of  #1 ;return years working of  #1 ;return #2 sorted by #3 in ascending order,"[""SELECT['journalists']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['years working of #REF', '#1']"", ""SORT['#2', '#3', 'in ascending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_2804,What are the nationalities and ages of journalists?,"return journalists ;return nationalities of  #1 ;return ages of  #1 ;return #2 ,  #3","[""SELECT['journalists']"", ""PROJECT['nationalities of #REF', '#1']"", ""PROJECT['ages of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_2805,"Show the names of journalists from ""England"" or ""Wales"".",return journalists ;return #1 from  England ;return #1 from  Wales ;return #2 or  #3 ;return names of #4,"[""SELECT['journalists']"", ""FILTER['#1', 'from England']"", ""FILTER['#1', 'from Wales']"", ""UNION['#2', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_2806,What is the average number of years spent working as a journalist?,return journalists ;return years spent working of #1 ;return number of  #2 for each #1 ;return average of #3,"[""SELECT['journalists']"", ""PROJECT['years spent working of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['avg', '#3']""]","['select', 'project', 'group', 'aggregate']",train
SPIDER_train_2807,What is the nationality of the journalist with the largest number of years working?,return journalists ;return years working of #1 ;return number of #2 ;return #1 where #3 is  highest ;return nationality of #4,"[""SELECT['journalists']"", ""PROJECT['years working of #REF', '#1']"", ""AGGREGATE['count', '#2']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['nationality of #REF', '#4']""]","['select', 'project', 'aggregate', 'superlative', 'project']",train
SPIDER_train_2808,Show the different nationalities and the number of journalists of each nationality.,"return different nationalities ;return journalists of  #1 ;return number of  #2 for each  #1 ;return #1 ,  #3","[""SELECT['different nationalities']"", ""PROJECT['journalists of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_2809,Show the most common nationality for journalists.,return journalists ;return nationality of  #1 ;return most common #2,"[""SELECT['journalists']"", ""PROJECT['nationality of #REF', '#1']"", ""PROJECT['most common #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_281,Find the name and email of the user whose name contains the word ‘Swift’.,"return users ;return names of  #1 ;return #1 where  #2 contains Swift ;return name  of  #3 ;return email of  #3 ;return #4 ,   #5","[""SELECT['users']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'contains Swift']"", ""PROJECT['name of #REF', '#3']"", ""PROJECT['email of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_2810,Show the nations that have both journalists with more than 10 years of working and journalists with less than 3 years of working.,return journalists ;return years  of  working  of #1 ;return #1 where #2 is  higher than 10 ;return #1 where #2 is  lower than 3 ;return #1 of  both #3 and  #4 ;return nations of  #5,"[""SELECT['journalists']"", ""PROJECT['years of working of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 10']"", ""COMPARATIVE['#1', '#2', 'is lower than 3']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['nations of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_2811,"Show the dates, places, and names of events in descending order of the attendance.","return events ;return dates of  #1 ;return places of  #1 ;return names of  #1 ;return #2 , #3 , #4 ;return attendance of #1 ;return #5 sorted by descending order of  #6","[""SELECT['events']"", ""PROJECT['dates of #REF', '#1']"", ""PROJECT['places of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""UNION['#2', '#3', '#4']"", ""PROJECT['attendance of #REF', '#1']"", ""SORT['#5', '#6', 'descending order of']""]","['select', 'project', 'project', 'project', 'union', 'project', 'sort']",train
SPIDER_train_2812,Show the names of journalists and the dates of the events they reported.,"return journalists ;return names of #1 ;return events reported of #1 ;return dates of #3 ;return #2 ,  #4","[""SELECT['journalists']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['events reported of #REF', '#1']"", ""PROJECT['dates of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_2813,Show the names of journalists and the names of the events they reported in ascending order,"return journalists ;return names  of #1 ;return events #1 reported ;return names  of #3 ;return #2 ,  #4 ;return #5 sorted by ascending order","[""SELECT['journalists']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['events #REF reported', '#1']"", ""PROJECT['names of #REF', '#3']"", ""UNION['#2', '#4']"", ""SORT['#5', '#5', 'ascending order']""]","['select', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_2814,Show the names of journalists and the number of events they reported.,"return journalists ;return names of  #1 ;return events #1 reported ;return #2 ,  #3","[""SELECT['journalists']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['events #REF reported', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_2815,Show the names of journalists that have reported more than one event.,return journalists ;return events reported of #1 ;return number of  #2 ;return #1 where #3 is  higher than one ;return names of #4,"[""SELECT['journalists']"", ""PROJECT['events reported of #REF', '#1']"", ""AGGREGATE['count', '#2']"", ""COMPARATIVE['#1', '#3', 'is higher than one']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_2816,List the names of journalists who have not reported any event.,return journalists ;return events that  #1 reported ;return number of  #2 for each #1 ;return #1 where #3 is  at least one ;return #1 besides #4 ;return names of #5,"[""SELECT['journalists']"", ""PROJECT['events that #REF reported', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least one']"", ""DISCARD['#1', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'group', 'comparative', 'discard', 'project']",train
SPIDER_train_2817,what are the average and maximum attendances of all events?,"return events ;return attendances of  #1 ;return average of  #2 ;return maximum of  #2 ;return #3 ,  #4","[""SELECT['events']"", ""PROJECT['attendances of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""AGGREGATE['max', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_2818,Find the average age and experience working length of journalists working on different role type.,"return journalists ;return role types of #1 ;return ages of #1 ;return experience working lengths of #1 ;return the  average of #3 for each #2 ;return the  average of #4 for each #2 ;return #5 ,  #6","[""SELECT['journalists']"", ""PROJECT['role types of #REF', '#1']"", ""PROJECT['ages of #REF', '#1']"", ""PROJECT['experience working lengths of #REF', '#1']"", ""GROUP['avg', '#3', '#2']"", ""GROUP['avg', '#4', '#2']"", ""UNION['#5', '#6']""]","['select', 'project', 'project', 'project', 'group', 'group', 'union']",train
SPIDER_train_2819,List the event venues and names that have the top 2 most number of people attended.,"return events ;return people that  attended #1 ;return number of  #2 for each #1 ;return the  top 2 highest #3 ;return #1 where #3 is  in #4 ;return names of #5 ;return venues of #5 ;return #6 ,  #7","[""SELECT['events']"", ""PROJECT['people that attended #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['max', '#3']"", ""COMPARATIVE['#1', '#3', 'is in #4']"", ""PROJECT['names of #REF', '#5']"", ""PROJECT['venues of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'group', 'aggregate', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_282,Find the names of users whose emails contain ‘superstar’ or ‘edu’.,return users ;return emails of  #1 ;return #1 where  #2 contain superstar ;return #1 where  #2 contain edu ;return #3 or  #4 ;return names of  #5,"[""SELECT['users']"", ""PROJECT['emails of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'contain superstar']"", ""COMPARATIVE['#1', '#2', 'contain edu']"", ""UNION['#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_2820,Show me all the restaurants.,return restaurants,"[""SELECT['restaurants']""]",['select'],train
SPIDER_train_2821,What is the address of the restaurant Subway?,return restaurants ;return #1 that  is  Subway ;return address of  #2,"[""SELECT['restaurants']"", ""FILTER['#1', 'that is Subway']"", ""PROJECT['address of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2822,What is the rating of the restaurant Subway?,return restaurant ;return #1 that  is  Subway ;return rating of  #2,"[""SELECT['restaurant']"", ""FILTER['#1', 'that is Subway']"", ""PROJECT['rating of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2823,List all restaurant types.,return restaurants ;return types of  #1,"[""SELECT['restaurants']"", ""PROJECT['types of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_2824,What is the description of the restaurant type Sandwich?,return restaurants ;return types of  #1 ;return #1 where #2 is  Sandwich ;return description of  #3,"[""SELECT['restaurants']"", ""PROJECT['types of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Sandwich']"", ""PROJECT['description of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_2825,Which restaurants have highest rating? List the restaurant name and its rating.,"return restaurants ;return ratings of #1 ;return #1 where #2 is highest ;return name of #3 ;return ratings of #3 ;return #4 ,  #5","[""SELECT['restaurants']"", ""PROJECT['ratings of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['name of #REF', '#3']"", ""PROJECT['ratings of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_2826,What is the age of student Linda Smith?,return student ;return #1 that  is  Linda Smith ;return age of  #2,"[""SELECT['student']"", ""FILTER['#1', 'that is Linda Smith']"", ""PROJECT['age of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2827,What is the gender of the student Linda Smith?,return students ;return genders of  #1 ;return #2 where #1 is  Linda Smith,"[""SELECT['students']"", ""PROJECT['genders of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Linda Smith']""]","['select', 'project', 'comparative']",train
SPIDER_train_2828,List all students' first names and last names who majored in 600.,"return students ;return #1 who  majored in 600 ;return first names of  #2 ;return last names of  #3 ;return #3 ,  #4","[""SELECT['students']"", ""FILTER['#1', 'who majored in 600']"", ""PROJECT['first names of #REF', '#2']"", ""PROJECT['last names of #REF', '#3']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_2829,Which city does student Linda Smith live in?,return Linda Smith ;return city of #1,"[""SELECT['Linda Smith']"", ""PROJECT['city of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_283,Return the text of tweets about the topic 'intern'.,return tweets ;return #1 about the  topic 'intern ;return the  texts of #2,"[""SELECT['tweets']"", ""FILTER['#1', 'about the topic intern']"", ""PROJECT['the texts of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2830,Advisor 1121 has how many students?,return Advisor 1121 ;return students of #1 ;return number of  #2,"[""SELECT['Advisor 1121']"", ""PROJECT['students of #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_2831,Which Advisor has most of students? List advisor and the number of students.,"return advisors ;return students  of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return students  of  #4 ;return number of  #5 ;return #4 ,  #6","[""SELECT['advisors']"", ""PROJECT['students of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['students of #REF', '#4']"", ""AGGREGATE['count', '#5']"", ""UNION['#4', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'aggregate', 'union']",train
SPIDER_train_2832,Which major has least number of students? List the major and the number of students.,"return major  ;return the  number of  students  for each  #1 ;return #1 where #2 is  the  least ;return the  number of  students  of  #3 ;return #3 ,  #4","[""SELECT['major']"", ""PROJECT['students', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the least']"", ""PROJECT['students of #REF', '#4']"", ""GROUP['count', '#5', '#4']"", ""UNION['#4', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'group', 'union']",train
SPIDER_train_2833,Which major has between 2 and 30 number of students? List major and the number of students.,"return major  ;return students of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  at least 2 ;return #1 where #3 is  at most 30 ;return #1 of both #4 and #5 ;return students of #6 ;return number of  #7 ;return #7 ,  #8","[""SELECT['major']"", ""PROJECT['students of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 2']"", ""COMPARATIVE['#1', '#3', 'is at most 30']"", ""INTERSECTION['#1', '#4', '#5']"", ""PROJECT['students of #REF', '#6']"", ""AGGREGATE['count', '#7']"", ""UNION['#7', '#8']""]","['select', 'project', 'group', 'comparative', 'comparative', 'intersection', 'project', 'aggregate', 'union']",train
SPIDER_train_2834,Which student's age is older than 18 and is majoring in 600? List each student's first and last name.,"return students ;return major of #1 ;return #1 where #2 is equal to 600 ;return ages of #3 ;return #3 where #4 is higher than 18 ;return first names of #5 ;return last names of #5 ;return #6 ,  #7","[""SELECT['students']"", ""PROJECT['major of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is equal to 600']"", ""PROJECT['ages of #REF', '#3']"", ""COMPARATIVE['#3', '#4', 'is higher than 18']"", ""PROJECT['first names of #REF', '#5']"", ""PROJECT['last names of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'comparative', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_2835,List all female students age is older than 18 who is not majoring in 600. List students' first name and last name.,"return female students  ;return ages of  #1 ;return #1 where #2 is  higher than 18 ;return major of  #1 ;return #1 where #4 is  not  600 ;return #1 of  both #3 and  #5 ;return first name  of  #6 ;return last name  of  #6 ;return #7 ,  #8","[""SELECT['female students']"", ""PROJECT['ages of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 18']"", ""PROJECT['major of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is not 600']"", ""INTERSECTION['#1', '#3', '#5']"", ""PROJECT['first name of #REF', '#6']"", ""PROJECT['last name of #REF', '#6']"", ""UNION['#7', '#8']""]","['select', 'project', 'comparative', 'project', 'comparative', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_2836,How many restaurant is the Sandwich type restaurant?,return restaurants ;return types of  #1 ;return #1 where  #2 is  Sandwich ;return number of #3,"[""SELECT['restaurants']"", ""PROJECT['types of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Sandwich']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_2837,How long does student Linda Smith spend on the restaurant in total?,return student Linda Smith ;return how long #1 spend on  the  restaurant,"[""SELECT['student Linda Smith']"", ""PROJECT['how long #REF spend on the restaurant', '#1']""]","['select', 'project']",train
SPIDER_train_2838,How many times has the student Linda Smith visited Subway?,return the  student Linda Smith ;return Subway visits of #1 ;return number of  #2,"[""SELECT['the student Linda Smith']"", ""PROJECT['Subway visits of #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_2839,When did Linda Smith visit Subway?,return Subway ;return #1 visit with  Linda Smith ;return When #2,"[""SELECT['Subway']"", ""FILTER['#1', 'visit with Linda Smith']"", ""PROJECT['When #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_284,Find the name and email of the users who have more than 1000 followers.,"return users ;return #1 who  have  more than  1000 followers ;return names of  #2 ;return emails of  #2 ;return #3 ,   #4","[""SELECT['users']"", ""FILTER['#1', 'who have more than 1000 followers']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['emails of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_2840,At which restaurant did the students spend the least amount of time? List restaurant and the time students spent on in total.,"return restaurants ;return time students  spent in #1 ;return sum of  #2 for each  #1 ;return #1 where #3 is  highest ;return time students  spent in #4 ;return sum of  #5 ;return #4 ,  #6","[""SELECT['restaurants']"", ""PROJECT['time students spent in #REF', '#1']"", ""GROUP['sum', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['time students spent in #REF', '#4']"", ""AGGREGATE['sum', '#5']"", ""UNION['#4', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'aggregate', 'union']",train
SPIDER_train_2841,Which student visited restaurant most often? List student's first name and last name.,"return students ;return how often #1 visited restaurant ;return #1 where #2 is highest ;return first name  of #3 ;return last name  of #3 ;return #4 ,  #5","[""SELECT['students']"", ""PROJECT['how often #REF visited restaurant', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['first name of #REF', '#3']"", ""PROJECT['last name of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_2842,Find the ids of orders whose status is 'Success'.,return orders ;return statuses of #1 ;return #1 where #2 is 'Success ;return ids of #3,"[""SELECT['orders']"", ""PROJECT['statuses of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Success']"", ""PROJECT['ids of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_2843,Find the name and price of the product that has been ordered the greatest number of times.,"return products ;return number of times ordered of  #1 ;return #1 where  #2 is  greatest ;return name of  #3 ;return price of  #3 ;return #4 ,   #5","[""SELECT['products']"", ""PROJECT['times ordered of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is greatest']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['price of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_2844,Find the number of customers in total.,return customers ;return number of #1,"[""SELECT['customers']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_2845,How many different payment methods are there?,return payment methods ;return different #1 ;return number of #2,"[""SELECT['payment methods']"", ""PROJECT['different #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_2846,Show the details of all trucks in the order of their license number.,return all trucks ;return details of  #1 ;return license number of #1 ;return #2 sorted by #3,"[""SELECT['all trucks']"", ""PROJECT['details of #REF', '#1']"", ""PROJECT['license number of #REF', '#1']"", ""SORT['#2', '#3']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_2847,Find the name of the most expensive product.,return products ;return most expensive #1 ;return name of  #2,"[""SELECT['products']"", ""PROJECT['most expensive #REF', '#1']"", ""PROJECT['name of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_2848,Find the names of customers who are not living in the state of California.,return customers ;return states of  #1 ;return #1 where  #2 is  not  California ;return names of  #3,"[""SELECT['customers']"", ""PROJECT['states of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not California']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_2849,List the names and emails of customers who payed by Visa card.,"return customers ;return #1 who  payed by Visa card ;return names of  #2 ;return emails of  #2 ;return #3 ,  #4","[""SELECT['customers']"", ""FILTER['#1', 'who payed by Visa card']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['emails of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_285,"Find the names of the users whose number of followers is greater than that of the user named ""Tyler Swift"".",return users ;return number of  followers of   #1 ;return #2 where  #1 is  Tyler Swift ;return #1 where  #2 is  greater than  #3 ;return names of  #4,"[""SELECT['users']"", ""PROJECT['followers of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#3', '#1', 'is Tyler Swift']"", ""COMPARATIVE['#1', '#3', 'is greater than #4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'group', 'comparative', 'comparative', 'project']",train
SPIDER_train_2850,Find the names and phone numbers of customers living in California state.,"return customers ;return #1 living in California state ;return names of  #2 ;return phone numbers of  #2 ;return #3 ,   #4","[""SELECT['customers']"", ""FILTER['#1', 'living in California state']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['phone numbers of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_2851,Find the states which do not have any employee in their record.,return states ;return #1 that  do not have employees on record,"[""SELECT['states']"", ""FILTER['#1', 'that do not have employees on record']""]","['select', 'filter']",train
SPIDER_train_2852,"List the names, phone numbers, and emails of all customers sorted by their dates of becoming customers.","return customers ;return names of  #1 ;return phone numbers of  #1 ;return emails of  #1 ;return dates of  becoming customers of #1 ;return #2 ,  #3 , #4 ;return #6 sorted by #5","[""SELECT['customers']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['phone numbers of #REF', '#1']"", ""PROJECT['emails of #REF', '#1']"", ""PROJECT['dates of becoming customers of #REF', '#1']"", ""UNION['#2', '#3', '#4']"", ""SORT['#6', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_2853,Find the name of the first 5 customers.,return customers ;return first 5 #1 ;return names of  #2,"[""SELECT['customers']"", ""PROJECT['first 5 #REF', '#1']"", ""PROJECT['names of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_2854,Find the payment method that is used most frequently.,return payment methods ;return #1 that  are  used most frequently,"[""SELECT['payment methods']"", ""FILTER['#1', 'that are used most frequently']""]","['select', 'filter']",train
SPIDER_train_2855,List the names of all routes in alphabetic order.,return routes ;return names of  #1 ;return #2 sorted by alphabetic order,"[""SELECT['routes']"", ""PROJECT['names of #REF', '#1']"", ""SORT['#2', '#2', 'alphabetic order']""]","['select', 'project', 'sort']",train
SPIDER_train_2856,Find the name of route that has the highest number of deliveries.,return routes ;return number of deliveries for each #1 ;return #1 where  #2 is  highest ;return name of  #3,"[""SELECT['routes']"", ""PROJECT['deliveries', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_2857,List the state names and the number of customers living in each state.,"return states ;return names of  #1 ;return customers living in #1 ;return number of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['states']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['customers living in #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_2858,How many authors are there?,return authors ;return number of #1,"[""SELECT['authors']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_2859,Count the number of authors.,return authors ;return number of #1,"[""SELECT['authors']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_286,Find the name and email for the users who have more than one follower.,"return users ;return followers of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than one ;return names of  #4 ;return emails of  #4 ;return #5 ,  #6","[""SELECT['users']"", ""PROJECT['followers of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than one']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['emails of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_2860,How many institutions are there?,return institutions ;return number of #1,"[""SELECT['institutions']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_2861,Count the number of institutions.,return institutions ;return Count of  #1,"[""SELECT['institutions']"", ""PROJECT['Count of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_2862,How many papers are published in total?,return papers published ;return number of  #1,"[""SELECT['papers published']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_2863,Count the number of total papers.,return papers ;return the number of #1,"[""SELECT['papers']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_2864,"What are the titles of papers published by ""Jeremy Gibbons""?",return papers ;return #1 published by Jeremy Gibbons ;return titles of  #2,"[""SELECT['papers']"", ""FILTER['#1', 'published by Jeremy Gibbons']"", ""PROJECT['titles of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2865,"Find the titles of all the papers written by ""Jeremy Gibbons""",return papers ;return #1 written by Jeremy Gibbons ;return titles of  #2,"[""SELECT['papers']"", ""FILTER['#1', 'written by Jeremy Gibbons']"", ""PROJECT['titles of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2866,"Find all the papers published by ""Aaron Turon"".",return papers ;return #1 published by Aaron Turon,"[""SELECT['papers']"", ""FILTER['#1', 'published by Aaron Turon']""]","['select', 'filter']",train
SPIDER_train_2867,"Find the titles of all the papers written by ""Aaron Turon"".",return papers ;return titles of  #1 ;return #2 where  #1 are  written by Aaron Turon,"[""SELECT['papers']"", ""PROJECT['titles of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'are written by Aaron Turon']""]","['select', 'project', 'comparative']",train
SPIDER_train_2868,"How many papers have ""Atsushi Ohori"" published?",return papers ;return #1 that  Atsushi Ohori published ;return number of #2,"[""SELECT['papers']"", ""FILTER['#1', 'that Atsushi Ohori published']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_2869,"How many papers are ""Atsushi Ohori"" the author of?",return papers ;return authors of  #1 ;return #1 where  #2 is  Atsushi Ohori ;return number of #3,"[""SELECT['papers']"", ""PROJECT['authors of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Atsushi Ohori']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_287,Find the names of users who have more than one tweet.,return users ;return tweets of  #1 ;return number of #2 ;return #1 where  #3 is  more than  one ;return names of  #4,"[""SELECT['users']"", ""PROJECT['tweets of #REF', '#1']"", ""AGGREGATE['count', '#2']"", ""COMPARATIVE['#1', '#3', 'is more than one']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_2870,"What is the name of the institution that ""Matthias Blume"" belongs to?",return Matthias Blume ;return institution of #1 ;return name of #2,"[""SELECT['Matthias Blume']"", ""PROJECT['institution of #REF', '#1']"", ""PROJECT['name of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_2871,"Which institution is the author ""Matthias Blume"" belong to? Give me the name of the institution.",return institutions ;return authors that  belong to #1 ;return #1 where #2 is  Matthias Blume ;return name of  #3,"[""SELECT['institutions']"", ""PROJECT['authors that belong to #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Matthias Blume']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_2872,"Which institution does ""Katsuhiro Ueno"" belong to?",return Katsuhiro Ueno ;return the  institution of  #1,"[""SELECT['Katsuhiro Ueno']"", ""PROJECT['the institution of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_2873,"What is the name of the institution the author ""Katsuhiro Ueno"" belongs to?",return institutions ;return authors that  belong to #1 ;return #1 where #2 is  Katsuhiro Ueno ;return name of  #3,"[""SELECT['institutions']"", ""PROJECT['authors that belong to #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Katsuhiro Ueno']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_2874,"Who belong to the institution ""University of Oxford""? Show the first names and last names.","return institution ;return #1 that  is  University of  Oxford ;return who  belong to #2 ;return first names of  #3 ;return last names of  #3 ;return #4 ,  #5","[""SELECT['institution']"", ""FILTER['#1', 'that is University of Oxford']"", ""PROJECT['who belong to #REF', '#2']"", ""PROJECT['first names of #REF', '#3']"", ""PROJECT['last names of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_2875,"Find the first names and last names of the authors whose institution affiliation is ""University of Oxford"".","return authors ;return institution affiliations of  #1 ;return #1 where  #2 is  University of  Oxford ;return first names  of  #3 ;return last names  of  #3 ;return #4 ,   #5","[""SELECT['authors']"", ""PROJECT['institution affiliations of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is University of Oxford']"", ""PROJECT['first names of #REF', '#3']"", ""PROJECT['last names of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_2876,"Which authors belong to the institution ""Google""? Show the first names and last names.","return authors ;return institutions #1 belong to ;return #1 where #2 is  Google ;return first names of  #3 ;return last names of  #3 ;return #4 ,  #5","[""SELECT['authors']"", ""PROJECT['institutions #REF belong to', '#1']"", ""COMPARATIVE['#1', '#2', 'is Google']"", ""PROJECT['first names of #REF', '#3']"", ""PROJECT['last names of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_2877,"Find the first names and last names of the authors whose institution affiliation is ""Google"".","return authors ;return institution affiliations of  #1 ;return #1 where  #2 is  Google ;return first names  of  #3 ;return last names  of  #3 ;return #4 ,   #5","[""SELECT['authors']"", ""PROJECT['institution affiliations of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Google']"", ""PROJECT['first names of #REF', '#3']"", ""PROJECT['last names of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_2878,"What are the last names of the author of the paper titled ""Binders Unbound""?",return papers ;return #1 titled Binders Unbound ;return authors of  #2 ;return last names of  #3,"[""SELECT['papers']"", ""FILTER['#1', 'titled Binders Unbound']"", ""PROJECT['authors of #REF', '#2']"", ""PROJECT['last names of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_2879,"Who is the author of the paper titled ""Binders Unbound""? Give me the last name.",return authors ;return papers of  #1 ;return #1 where #2 is  titled Binders Unbound ;return last name of  #3,"[""SELECT['authors']"", ""PROJECT['papers of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is titled Binders Unbound']"", ""PROJECT['last name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_288,Find the id of users who are followed by Mary and Susan.,return users ;return #1 followed by Mary and Susan ;return id of  #2,"[""SELECT['users']"", ""FILTER['#1', 'followed by Mary and Susan']"", ""PROJECT['id of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2880,"Find the first and last name of the author(s) who wrote the paper ""Nameless, Painless"".","return papers ;return #1 Nameless Painless ;return authors of  #2 ;return first name of  #3 ;return last name of  #3 ;return #4 ,   #5","[""SELECT['papers']"", ""FILTER['#1', 'Nameless Painless']"", ""PROJECT['authors of #REF', '#2']"", ""PROJECT['first name of #REF', '#3']"", ""PROJECT['last name of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_2881,"What are the first and last name of the author who published the paper titled ""Nameless, Painless""?","return papers ;return #1 titled Nameless Painless ;return author of #2 ;return first name of #3 ;return last name of #3 ;return #4 ,  #5","[""SELECT['papers']"", ""FILTER['#1', 'titled Nameless Painless']"", ""PROJECT['author of #REF', '#2']"", ""PROJECT['first name of #REF', '#3']"", ""PROJECT['last name of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_2882,"What are the papers published under the institution ""Indiana University""?",return papers ;return #1 published under the  institution Indiana University,"[""SELECT['papers']"", ""FILTER['#1', 'published under the institution Indiana University']""]","['select', 'filter']",train
SPIDER_train_2883,"List the titles of the papers whose authors are from the institution ""Indiana University"".",return papers ;return authors of  #1 ;return institutions of  #2 ;return #1 where #3 is  Indiana University ;return titles of  #4,"[""SELECT['papers']"", ""PROJECT['authors of #REF', '#1']"", ""PROJECT['institutions of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Indiana University']"", ""PROJECT['titles of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_2884,"Find all the papers published by the institution ""Google"".",return all papers ;return #1 published by the institution Google,"[""SELECT['all papers']"", ""FILTER['#1', 'published by the institution Google']""]","['select', 'filter']",train
SPIDER_train_2885,"Which papers were written by authors from the institution ""Google""?",return authors ;return institutions of  #1 ;return #1 where #2 is  Google ;return papers written by #3,"[""SELECT['authors']"", ""PROJECT['institutions of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Google']"", ""PROJECT['papers written by #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_2886,"How many papers are published by the institution ""Tokohu University""?",return papers ;return institutions #1 are  published by ;return #1 where #2 is  Tokohu University ;return number of  #3,"[""SELECT['papers']"", ""PROJECT['institutions #REF are published by', '#1']"", ""COMPARATIVE['#1', '#2', 'is Tokohu University']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_2887,"Find the number of papers published by authors from the institution ""Tokohu University"".",return authors ;return institutions of #1 ;return #1 where #2 is Tokohu University ;return papers published by #3 ;return number of  #4 for each #3 ;return sum of #5,"[""SELECT['authors']"", ""PROJECT['institutions of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Tokohu University']"", ""PROJECT['papers published by #REF', '#3']"", ""GROUP['count', '#4', '#3']"", ""AGGREGATE['sum', '#5']""]","['select', 'project', 'comparative', 'project', 'group', 'aggregate']",train
SPIDER_train_2888,"Find the number of papers published by the institution ""University of Pennsylvania"".",return papers ;return #1 published by the institution University of  Pennsylvania ;return number of #2,"[""SELECT['papers']"", ""FILTER['#1', 'published by the institution University of Pennsylvania']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_2889,"How many papers are written by authors from the institution ""University of Pennsylvania""?",return papers ;return authors of  #1 ;return institutions of  #2 ;return #1 where  #3 is  University of  Pennsylvania ;return number of #4,"[""SELECT['papers']"", ""PROJECT['authors of #REF', '#1']"", ""PROJECT['institutions of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is University of Pennsylvania']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'project', 'comparative', 'aggregate']",train
SPIDER_train_289,Find the id of users who are followed by Mary or Susan.,return users ;return #1 followed by Mary ;return #1 followed by Susan ;return #2 or  #3 ;return ids of  #4,"[""SELECT['users']"", ""FILTER['#1', 'followed by Mary']"", ""FILTER['#1', 'followed by Susan']"", ""UNION['#2', '#3']"", ""PROJECT['ids of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_2890,"Find the papers which have ""Olin Shivers"" as an author.",return papers ;return authors of  #1 ;return #1 where  #2 is  Olin Shivers,"[""SELECT['papers']"", ""PROJECT['authors of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Olin Shivers']""]","['select', 'project', 'comparative']",train
SPIDER_train_2891,"Which papers did the author ""Olin Shivers"" write? Give me the paper titles.",return the  author Olin Shivers ;return the  papers that  #1 writes ;return the  titles of #2,"[""SELECT['the author Olin Shivers']"", ""PROJECT['the papers that #REF writes', '#1']"", ""PROJECT['the titles of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_2892,"Which papers have ""Stephanie Weirich"" as an author?",return papers ;return authors of  #1 ;return #1 where #2 is  Stephanie Weirich,"[""SELECT['papers']"", ""PROJECT['authors of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Stephanie Weirich']""]","['select', 'project', 'comparative']",train
SPIDER_train_2893,"Find the titles of the papers the author ""Stephanie Weirich"" wrote.",return the   author Stephanie Weirich ;return the   papers that  #1 wrote ;return the   titles of #2,"[""SELECT['the author Stephanie Weirich']"", ""PROJECT['the papers that #REF wrote', '#1']"", ""PROJECT['the titles of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_2894,"Which paper is published in an institution in ""USA"" and have ""Turon"" as its second author?",return papers ;return second authors of #1 ;return #1 where #2 is  Turon ;return institutions that  #1 are published in ;return #4 that  are in the  USA ;return #1 where #4 is  any  #5 ;return #1 in both #3 and #6,"[""SELECT['papers']"", ""PROJECT['second authors of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Turon']"", ""PROJECT['institutions that #REF are published in', '#1']"", ""FILTER['#4', 'that are in the USA']"", ""COMPARATIVE['#1', '#4', 'is any #5']"", ""INTERSECTION['#1', '#3', '#6']""]","['select', 'project', 'comparative', 'project', 'filter', 'comparative', 'intersection']",train
SPIDER_train_2895,"Find papers whose second author has last name ""Turon"" and is affiliated with an institution in the country ""USA"".",return papers ;return second authors of  #1 ;return last names of  #2 ;return #1 where #3 is  Turon ;return institutions #2 are  affiliated with ;return countries of  #5 ;return #1 where #6 is  USA ;return #1 of  both #4 and  #7,"[""SELECT['papers']"", ""PROJECT['second authors of #REF', '#1']"", ""PROJECT['last names of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Turon']"", ""PROJECT['institutions #REF are affiliated with', '#2']"", ""PROJECT['countries of #REF', '#5']"", ""COMPARATIVE['#1', '#6', 'is USA']"", ""INTERSECTION['#1', '#4', '#7']""]","['select', 'project', 'project', 'comparative', 'project', 'project', 'comparative', 'intersection']",train
SPIDER_train_2896,"Find the titles of papers whose first author is affiliated with an institution in the country ""Japan"" and has last name ""Ohori""?",return papers ;return first authors of #1 ;return affiliated institutions of #2 ;return countries of #3 ;return #1 where #4 is Japan ;return last names of #2 ;return #1 where #6 is Ohori ;return #1 in  both #5 and  #7 ;return titles of #8,"[""SELECT['papers']"", ""PROJECT['first authors of #REF', '#1']"", ""PROJECT['affiliated institutions of #REF', '#2']"", ""PROJECT['countries of #REF', '#3']"", ""COMPARATIVE['#1', '#4', 'is Japan']"", ""PROJECT['last names of #REF', '#2']"", ""COMPARATIVE['#1', '#6', 'is Ohori']"", ""INTERSECTION['#1', '#5', '#7']"", ""PROJECT['titles of #REF', '#8']""]","['select', 'project', 'project', 'project', 'comparative', 'project', 'comparative', 'intersection', 'project']",train
SPIDER_train_2897,"Which papers' first author is affiliated with an institution in the country ""Japan"" and has last name ""Ohori""? Give me the titles of the papers.",return papers ;return first authors of #1 ;return last names of #2 ;return #1 where #3 is  Ohori ;return institutions that  #2 are affiliated with  ;return countries of #5 ;return #1 where #6 is  Japan ;return #1 in both #4 and #7 ;return the   titles of #8,"[""SELECT['papers']"", ""PROJECT['first authors of #REF', '#1']"", ""PROJECT['last names of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Ohori']"", ""PROJECT['institutions that #REF are affiliated with', '#2']"", ""PROJECT['countries of #REF', '#5']"", ""COMPARATIVE['#1', '#6', 'is Japan']"", ""INTERSECTION['#1', '#4', '#7']"", ""PROJECT['the titles of #REF', '#8']""]","['select', 'project', 'project', 'comparative', 'project', 'project', 'comparative', 'intersection', 'project']",train
SPIDER_train_2898,What is the last name of the author that has published the most papers?,return authors ;return papers #1 published ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return last name of  #4,"[""SELECT['authors']"", ""PROJECT['papers #REF published', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['last name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_2899,Which author has written the most papers? Find his or her last name.,return authors ;return papers of #1 ;return number of #2 for each #1 ;return #1 where #3 is  highest ;return last name of #4,"[""SELECT['authors']"", ""PROJECT['papers of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['last name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_29,Count the number of different statuses.,return different statuses ;return number of  #1,"[""SELECT['different statuses']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_290,Find the name of the user who has the largest number of followers.,return users ;return followers of #1 ;return number of  #2 for each #1 ;return #1 where #3 is highest ;return name of #4,"[""SELECT['users']"", ""PROJECT['followers of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_2900,Retrieve the country that has published the most papers.,return countries ;return papers #1 published ;return number of  #2 for each  #1 ;return #1 where  #3 is highest,"[""SELECT['countries']"", ""PROJECT['papers #REF published', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_2901,Find the country that the most papers are affiliated with.,return countries ;return papers affiliated with #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['countries']"", ""PROJECT['papers affiliated with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_2902,Find the name of the organization that has published the largest number of papers.,return organizations ;return papers #1 published ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return name of  #4,"[""SELECT['organizations']"", ""PROJECT['papers #REF published', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_2903,Which institution has the most papers? Find the name of the institution.,return institutions ;return papers of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return name of  #4,"[""SELECT['institutions']"", ""PROJECT['papers of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_2904,"Find the titles of the papers that contain the word ""ML"".",return papers ;return #1 that  contain the word ML ;return titles of  #2,"[""SELECT['papers']"", ""FILTER['#1', 'that contain the word ML']"", ""PROJECT['titles of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2905,"Which papers have the substring ""ML"" in their titles? Return the titles of the papers.",return papers ;return titles of  #1 ;return #1 where #2 have  substring ML ;return titles of  #3,"[""SELECT['papers']"", ""PROJECT['titles of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'have substring ML']"", ""PROJECT['titles of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_2906,"Which paper's title contains the word ""Database""?",return papers ;return titles of #1 ;return #1 where #2 contains the  word Database,"[""SELECT['papers']"", ""PROJECT['titles of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'contains the word Database']""]","['select', 'project', 'comparative']",train
SPIDER_train_2907,"Which papers have the substring ""Database"" in their titles? Show the titles of the papers.",return papers ;return titles of  #1 ;return #1 where #2 have  substring Database ;return titles of  #3,"[""SELECT['papers']"", ""PROJECT['titles of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'have substring Database']"", ""PROJECT['titles of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_2908,"Find the first names of all the authors who have written a paper with title containing the word ""Functional"".",return papers ;return titles of #1 ;return #1 where #2 contain the  word Functional ;return authors of #3 ;return first names of #4,"[""SELECT['papers']"", ""PROJECT['titles of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'contain the word Functional']"", ""PROJECT['authors of #REF', '#3']"", ""PROJECT['first names of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_2909,"Who has written a paper that has the word ""Functional"" in its title? Return the first names of the authors.",return authors ;return papers of  #1 ;return titles of  #2 ;return #1 where #3 has  Functional ;return first names of  #4,"[""SELECT['authors']"", ""PROJECT['papers of #REF', '#1']"", ""PROJECT['titles of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'has Functional']"", ""PROJECT['first names of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_291,Find the name and email of the user followed by the least number of people.,"return users ;return people #1 is  followed by ;return number of  #2 for each  #1 ;return #1 where #3 is  lowest ;return name of  #4 ;return email of  #4 ;return #5 ,  #6","[""SELECT['users']"", ""PROJECT['people #REF is followed by', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['email of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_2910,"Find the last names of all the authors that have written a paper with title containing the word ""Monadic"".",return authors ;return papers of  #1 ;return titles of  #2 ;return #1 where  #3 contain Monadic ;return last names of  #4,"[""SELECT['authors']"", ""PROJECT['papers of #REF', '#1']"", ""PROJECT['titles of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'contain Monadic']"", ""PROJECT['last names of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_2911,"Which authors have written a paper with title containing the word ""Monadic""? Return their last names.",return papers ;return titles of  #1 ;return #1 where #2 contain the  word Monadic ;return authors of  #3 ;return last names of  #4,"[""SELECT['papers']"", ""PROJECT['titles of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'contain the word Monadic']"", ""PROJECT['authors of #REF', '#3']"", ""PROJECT['last names of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_2912,Retrieve the title of the paper that has the largest number of authors.,return papers ;return authors of  #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is highest ;return title of  #4,"[""SELECT['papers']"", ""PROJECT['authors of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['title of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_2913,Which paper has the most authors? Give me the paper title.,return paper ;return author ;return number of  #2 for each #1 ;return #1 where #3 is  highest ;return title of #4,"[""SELECT['paper']"", ""SELECT['author']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['title of #REF', '#4']""]","['select', 'select', 'group', 'superlative', 'project']",train
SPIDER_train_2914,"What is the first name of the author with last name ""Ueno""?",return authors ;return last names of  #1 ;return #1 where #2 is  Ueno ;return first name  of  #3,"[""SELECT['authors']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Ueno']"", ""PROJECT['first name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_2915,"Which authors have last name ""Ueno""? List their first names.",return authors ;return #1 with  last name Ueno ;return the  first names of #2,"[""SELECT['authors']"", ""FILTER['#1', 'with last name Ueno']"", ""PROJECT['the first names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2916,"Find the last name of the author with first name ""Amal"".",return author ;return #1 with  first name  Amal ;return last name  of  #2,"[""SELECT['author']"", ""FILTER['#1', 'with first name Amal']"", ""PROJECT['last name of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2917,"Which authors have first name ""Amal""? List their last names.",return authors ;return #1 with  first name Amal ;return the  last names of #2,"[""SELECT['authors']"", ""FILTER['#1', 'with first name Amal']"", ""PROJECT['the last names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2918,Find the first names of all the authors ordered in alphabetical order.,return authors ;return first names of  #1 ;return #2 sorted by alphabetical order,"[""SELECT['authors']"", ""PROJECT['first names of #REF', '#1']"", ""SORT['#2', '#2', 'alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_2919,Sort the first names of all the authors in alphabetical order.,return authors ;return first names of  #1 ;return #2 sorted by alphabetical order,"[""SELECT['authors']"", ""PROJECT['first names of #REF', '#1']"", ""SORT['#2', '#2', 'alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_292,"List the name and number of followers for each user, and sort the results by the number of followers in descending order.","return users ;return names of  #1 ;return followers  of  #1 ;return number of  #3 for each  #1 ;return #2 ,  #4 ;return #5 sorted by #4 in descending order","[""SELECT['users']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['followers of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']"", ""SORT['#5', '#4', 'in descending order']""]","['select', 'project', 'project', 'group', 'union', 'sort']",train
SPIDER_train_2920,Retrieve all the last names of authors in alphabetical order.,return authors ;return last names of  #1 ;return #2 sorted by alphabetical order,"[""SELECT['authors']"", ""PROJECT['last names of #REF', '#1']"", ""SORT['#2', '#2', 'alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_2921,Give me a list of all the last names of authors sorted in alphabetical order,return authors ;return last names of  #1 ;return #2 sorted by alphabetical order,"[""SELECT['authors']"", ""PROJECT['last names of #REF', '#1']"", ""SORT['#2', '#2', 'alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_2922,Retrieve all the first and last names of authors in the alphabetical order of last names.,"return authors ;return first names of  #1 ;return last  names of  #1 ;return #2 ,  #3 ;return #4 sorted by #3 in alphabetical order","[""SELECT['authors']"", ""PROJECT['first names of #REF', '#1']"", ""PROJECT['last names of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#4', '#3', 'in alphabetical order']""]","['select', 'project', 'project', 'union', 'sort']",train
SPIDER_train_2923,Sort the list of all the first and last names of authors in alphabetical order of the last names.,"return authors ;return first names of  #1 ;return last  names of  #1 ;return #2 ,  #3 ;return #4 sorted by #3 in alphabetical order","[""SELECT['authors']"", ""PROJECT['first names of #REF', '#1']"", ""PROJECT['last names of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#4', '#3', 'in alphabetical order']""]","['select', 'project', 'project', 'union', 'sort']",train
SPIDER_train_2924,How many different last names do the actors and actresses have?,return actors ;return actresses ;return different last names of  #1 ;return different last names of  #2 ;return sum of  #3 and #4,"[""SELECT['actors']"", ""SELECT['actresses']"", ""PROJECT['different last names of #REF', '#1']"", ""PROJECT['different last names of #REF', '#2']"", ""ARITHMETIC['sum', '#3', '#4']""]","['select', 'select', 'project', 'project', 'arithmetic']",train
SPIDER_train_2925,Count the number of different last names actors have.,return actors ;return different last names of  #1 ;return number of  #2,"[""SELECT['actors']"", ""PROJECT['different last names of #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_2926,What is the most popular first name of the actors?,return actors ;return first names of #1 ;return number of  #1 for each #2 ;return #2 where #3 is highest,"[""SELECT['actors']"", ""PROJECT['first names of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""SUPERLATIVE['max', '#2', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_2927,Return the most common first name among all actors.,return first names ;return actors with  #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['first names']"", ""PROJECT['actors with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_2928,What is the most popular full name of the actors?,return actors ;return full names of  #1 ;return number of  #1 for each  #2 ;return #2 where #3 is  highest,"[""SELECT['actors']"", ""PROJECT['full names of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""SUPERLATIVE['max', '#2', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_2929,Return the most common full name among all actors.,return full names ;return actors with  #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['full names']"", ""PROJECT['actors with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_293,List the names of 5 users followed by the largest number of other users.,return users ;return other users followed by of #1 ;return number of  #2 for each #1 ;return the  5 highest of #3 ;return #1 where #3 is equal to any of #4 ;return names of #5,"[""SELECT['users']"", ""PROJECT['other users followed by of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['max', '#3']"", ""COMPARATIVE['#1', '#3', 'is equal to any of #4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'group', 'aggregate', 'comparative', 'project']",train
SPIDER_train_2930,Which districts have at least two addresses?,return districts ;return addresses of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  at least two,"[""SELECT['districts']"", ""PROJECT['addresses of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_2931,Give the districts which have two or more addresses.,return districts ;return addresses of  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  two or  more,"[""SELECT['districts']"", ""PROJECT['addresses of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is two or more']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_2932,What is the phone number and postal code of the address 1031 Daugavpils Parkway?,"return postal code of  1031 Daugavpils Parkway ;return phone number of  1031 Daugavpils Parkway ;return #2 ,  #1","[""SELECT['postal code of 1031 Daugavpils Parkway']"", ""SELECT['phone number of 1031 Daugavpils Parkway']"", ""UNION['#2', '#1']""]","['select', 'select', 'union']",train
SPIDER_train_2933,Give the phone and postal code corresponding to the address '1031 Daugavpils Parkway'.,"return addresses ;return phones of  #1 ;return postal codes of  #1 ;return #2 ,   #3 ;return #4 where  #1 is  '1031 Daugavpils Parkway","[""SELECT['addresses']"", ""PROJECT['phones of #REF', '#1']"", ""PROJECT['postal codes of #REF', '#1']"", ""UNION['#2', '#3']"", ""COMPARATIVE['#4', '#1', 'is 1031 Daugavpils Parkway']""]","['select', 'project', 'project', 'union', 'comparative']",train
SPIDER_train_2934,"Which city has the most addresses? List the city name, number of addresses, and city id.","return cities ;return addresses of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  the  highest ;return the  name of #4 ;return the  city  id of #4 ;return the  highest #3 ;return #5 ,  #7 ,   #6","[""SELECT['cities']"", ""PROJECT['addresses of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']"", ""PROJECT['the name of #REF', '#4']"", ""PROJECT['the city id of #REF', '#4']"", ""AGGREGATE['max', '#3']"", ""UNION['#5', '#7', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'aggregate', 'union']",train
SPIDER_train_2935,"What are the city name, id, and number of addresses corresponding to the city with the most addressed?","return cities ;return number of  addressed for each  #1 ;return #1 where #2 is  highest ;return name of  #3 ;return id of  #3 ;return number of  addresses for each  #3 ;return #4 ,  #5 ,   #6","[""SELECT['cities']"", ""PROJECT['addressed', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['id of #REF', '#4']"", ""PROJECT['addresses', '#4']"", ""GROUP['count', '#7', '#4']"", ""UNION['#5', '#6', '#8']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_2936,How many addresses are in the district of California?,return districts ;return addresses of  #1 ;return #2 where  #1 is  California ;return number of #3,"[""SELECT['districts']"", ""PROJECT['addresses of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is California']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_2937,Count the number of addressed in the California district.,return districts ;return #1 in California ;return addressed in #2 ;return number of #3,"[""SELECT['districts']"", ""FILTER['#1', 'in California']"", ""PROJECT['addressed in #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_2938,Which film is rented at a fee of 0.99 and has less than 3 in the inventory? List the film title and id.,"return film ;return #1 rented at a fee of  0.99 ;return #2 with less than 3 in inventory ;return title of  #3 ;return id of  #3 ;return #4 ,  #5","[""SELECT['film']"", ""FILTER['#1', 'rented at a fee of 0.99']"", ""FILTER['#2', 'with less than 3 in inventory']"", ""PROJECT['title of #REF', '#3']"", ""PROJECT['id of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'filter', 'project', 'project', 'union']",train
SPIDER_train_2939,What are the title and id of the film which has a rental rate of 0.99 and an inventory of below 3?,"return films ;return rental rates of  #1 ;return #1 where #2 is  0.99 ;return inventory of  #1 ;return #1 where #4 is  lower than 3 ;return #1 of  both #3 and  #5 ;return title of  #6 ;return id of  #6 ;return #7 ,  #8","[""SELECT['films']"", ""PROJECT['rental rates of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 0.99']"", ""PROJECT['inventory of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is lower than 3']"", ""INTERSECTION['#1', '#3', '#5']"", ""PROJECT['title of #REF', '#6']"", ""PROJECT['id of #REF', '#6']"", ""UNION['#7', '#8']""]","['select', 'project', 'comparative', 'project', 'comparative', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_294,List the text of all tweets in the order of date.,return tweets ;return text of  #1 ;return dates of  #1 ;return #2 sorted by #3,"[""SELECT['tweets']"", ""PROJECT['text of #REF', '#1']"", ""PROJECT['dates of #REF', '#1']"", ""SORT['#2', '#3']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_2940,How many cities are in Australia?,return Australia ;return cities in #1 ;return number of #2,"[""SELECT['Australia']"", ""PROJECT['cities in #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_2941,Count the number of cities in Australia.,return cities ;return #1 in Australia ;return number of  #2,"[""SELECT['cities']"", ""FILTER['#1', 'in Australia']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_2942,Which countries have at least 3 cities?,return countries ;return cities of #1 ;return number of  #2 for each #1 ;return #1 where #3 is at least 3,"[""SELECT['countries']"", ""PROJECT['cities of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 3']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_2943,What are the countries that contain 3 or more cities?,return countries ;return cities in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least 3,"[""SELECT['countries']"", ""PROJECT['cities in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 3']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_2944,Find all the payment dates for the payments with an amount larger than 10 and the payments handled by a staff person with the first name Elsa.,"return payments  ;return amounts of #1 ;return staff person who  handled #1 ;return first name of #3 ;return #1 where #4 is  Elsa ;return #1 where #2 is  larger than 10 ;return #5 , #6 ;return payment dates of #7","[""SELECT['payments']"", ""PROJECT['amounts of #REF', '#1']"", ""PROJECT['staff person who handled #REF', '#1']"", ""PROJECT['first name of #REF', '#3']"", ""COMPARATIVE['#1', '#4', 'is Elsa']"", ""COMPARATIVE['#1', '#2', 'is larger than 10']"", ""UNION['#5', '#6']"", ""PROJECT['payment dates of #REF', '#7']""]","['select', 'project', 'project', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_2945,What are the payment dates for any payments that have an amount greater than 10 or were handled by a staff member with the first name Elsa?,"return payments ;return amounts of #1 ;return #1 where #2 is higher than 10 ;return staff that handled #1 ;return first name of #4 ;return #4 where #5 is Elsa ;return #3 ,  #6 ;return dates of #7","[""SELECT['payments']"", ""PROJECT['amounts of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 10']"", ""PROJECT['staff that handled #REF', '#1']"", ""PROJECT['first name of #REF', '#4']"", ""COMPARATIVE['#4', '#5', 'is Elsa']"", ""UNION['#3', '#6']"", ""PROJECT['dates of #REF', '#7']""]","['select', 'project', 'comparative', 'project', 'project', 'comparative', 'union', 'project']",train
SPIDER_train_2946,How many customers have an active value of 1?,return customers ;return active values of  #1 ;return #1 where  #2 is  1 ;return number of #3,"[""SELECT['customers']"", ""PROJECT['active values of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 1']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_2947,Count the number of customers who are active.,return customers ;return #1 who  are  active ;return Count #2,"[""SELECT['customers']"", ""FILTER['#1', 'who are active']"", ""PROJECT['Count #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2948,Which film has the highest rental rate? And what is the rate?,"return film ;return rental rate  of #1 ;return #1 where #2 is  highest ;return highest #2 ;return #3 ,  #4","[""SELECT['film']"", ""PROJECT['rental rate of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""AGGREGATE['max', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'superlative', 'aggregate', 'union']",train
SPIDER_train_2949,What are the title and rental rate of the film with the highest rental rate?,"return films ;return rental rates of  #1 ;return #1 where #2 is  highest ;return title of  #3 ;return rental rate  of  #3 ;return #4 ,  #5","[""SELECT['films']"", ""PROJECT['rental rates of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['title of #REF', '#3']"", ""PROJECT['rental rate of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_295,Find the name of each user and number of tweets tweeted by each of them.,"return users ;return names of   #1 ;return tweets tweeted by #1 ;return number of  #3 for each #1 ;return #2 ,  #4","[""SELECT['users']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['tweets tweeted by #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_2951,"What are the title, id, and description of the movie with the greatest number of actors?","return movies ;return actors in #1 ;return number of #2 for each #1 ;return #1 where #3 is  highest ;return title of #4 ;return id of #4 ;return description of #4 ;return #5 , #6 ,  #7","[""SELECT['movies']"", ""PROJECT['actors in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['title of #REF', '#4']"", ""PROJECT['id of #REF', '#4']"", ""PROJECT['description of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'project', 'union']",train
SPIDER_train_2952,"Which film actor (actress) starred the most films? List his or her first name, last name and actor id.","return actors ( actresses ) ;return films of  #1 ;return number of  #2 for each  #1 ;return #1 with most #3 ;return first name  of  #4 ;return last name  of  #4 ;return actor id of  #4 ;return #5 ,  #6 ,   #7","[""SELECT['actors ( actresses )']"", ""PROJECT['films of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""FILTER['#1', 'with most #3']"", ""PROJECT['first name of #REF', '#4']"", ""PROJECT['last name of #REF', '#4']"", ""PROJECT['actor id of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'group', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_2953,Return the full name and id of the actor or actress who starred in the greatest number of films.,"return actors ;return actresses ;return #1 ,  #2 ;return films that #3 starred ;return number of  #4 for each #3 ;return #3 where #5 is highest ;return full name of #6 ;return id of #6 ;return #7 ,  #8","[""SELECT['actors']"", ""SELECT['actresses']"", ""UNION['#1', '#2']"", ""PROJECT['films that #REF starred', '#3']"", ""GROUP['count', '#4', '#3']"", ""SUPERLATIVE['max', '#3', '#5']"", ""PROJECT['full name of #REF', '#6']"", ""PROJECT['id of #REF', '#6']"", ""UNION['#7', '#8']""]","['select', 'select', 'union', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_2954,Which film actors (actresses) played a role in more than 30 films? List his or her first name and last name.,"return film actors ;return film actresses ;return films #1 played a role in ;return films #2 played a role in ;return number of  #3 for each #1 ;return number of  #4 for each #2 ;return #1 where #5 is  more than  30 ;return #2 where #6 is  more than  30 ;return first names of #7 ;return last names of #7 ;return first names of #8 ;return last names of #8 ;return #9 ,  #10 ;return #11 ,  #12 ;return #13 ,  #14","[""SELECT['film actors']"", ""SELECT['film actresses']"", ""PROJECT['films #REF played a role in', '#1']"", ""PROJECT['films #REF played a role in', '#2']"", ""GROUP['count', '#3', '#1']"", ""GROUP['count', '#4', '#2']"", ""COMPARATIVE['#1', '#5', 'is more than 30']"", ""COMPARATIVE['#2', '#6', 'is more than 30']"", ""PROJECT['first names of #REF', '#7']"", ""PROJECT['last names of #REF', '#7']"", ""PROJECT['first names of #REF', '#8']"", ""PROJECT['last names of #REF', '#8']"", ""UNION['#9', '#10']"", ""UNION['#11', '#12']"", ""UNION['#13', '#14']""]","['select', 'select', 'project', 'project', 'group', 'group', 'comparative', 'comparative', 'project', 'project', 'project', 'project', 'union', 'union', 'union']",train
SPIDER_train_2955,What are the full names of actors who had roles in more than 30 films?,return actors ;return films #1 had roles in ;return the  number of  #2 for each #1 ;return #1 where #3 is  more than  30 ;return the  full names of #4,"[""SELECT['actors']"", ""PROJECT['films #REF had roles in', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than 30']"", ""PROJECT['the full names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_2956,Which store owns most items?,return store ;return items #1 owns ;return number of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['store']"", ""PROJECT['items #REF owns', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_2957,What is the id of the store that has the most items in inventory?,return stores ;return items in inventory of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return id of  #4,"[""SELECT['stores']"", ""PROJECT['items in inventory of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['id of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_2958,What is the total amount of all payments?,return payments ;return amounts of #1 ;return sum of #2,"[""SELECT['payments']"", ""PROJECT['amounts of #REF', '#1']"", ""AGGREGATE['sum', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_2959,Return the sum of all payment amounts.,return payments ;return amounts of  #1 ;return sum of  #2,"[""SELECT['payments']"", ""PROJECT['amounts of #REF', '#1']"", ""AGGREGATE['sum', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_296,Find the name and partition id for users who tweeted less than twice.,"return users ;return #1 who tweeted less than  twice ;return names of #2 ;return partition ids of #2 ;return #3 ,  #4","[""SELECT['users']"", ""FILTER['#1', 'who tweeted less than twice']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['partition ids of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_2960,"Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id.","return customers ;return #1 who  has  made at least one payment ;return #2 who  has  spent the least money ;return the first name  of #3 ;return the last name  of #3 ;return the id of #3 ;return #4 , #5 ,  #6","[""SELECT['customers']"", ""FILTER['#1', 'who has made at least one payment']"", ""FILTER['#2', 'who has spent the least money']"", ""PROJECT['the first name of #REF', '#3']"", ""PROJECT['the last name of #REF', '#3']"", ""PROJECT['the id of #REF', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'filter', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_2961,What is the full name and id of the customer who has the lowest total amount of payment?,"return customers ;return payments of #1 ;return sum of #2 for each #1 ;return #1 where #3 is lowest ;return full name of #4 ;return id of #4 ;return #5 ,  #6","[""SELECT['customers']"", ""PROJECT['payments of #REF', '#1']"", ""GROUP['sum', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['full name of #REF', '#4']"", ""PROJECT['id of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_2962,What is the genre name of the film HUNGER ROOF?,return films ;return genre of  #1 ;return #2 where #1 is  HUNGER ROOF ;return name of  #3,"[""SELECT['films']"", ""PROJECT['genre of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is HUNGER ROOF']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_2963,Return the name of the category to which the film 'HUNGER ROOF' belongs.,return film 'HUNGER ROOF ;return category of  #1 ;return name of  #2,"[""SELECT['film HUNGER ROOF']"", ""PROJECT['category of #REF', '#1']"", ""PROJECT['name of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_2964,"How many films are there in each category? List the genre name, genre id and the count.","return categories ;return films of  #1 ;return genre names of  #1 ;return genre ids of  #1 ;return number of #2 for each #1 ;return #3 ,   #4 , #5","[""SELECT['categories']"", ""PROJECT['films of #REF', '#1']"", ""PROJECT['genre names of #REF', '#1']"", ""PROJECT['genre ids of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#3', '#4', '#5']""]","['select', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_2965,"What are the names and ids of the different categories, and how many films are in each?","return different categories ;return names of  #1 ;return ids of  #1 ;return films in #1 ;return number of  #4 for each  #1 ;return #2 ,  #3 ,   #5","[""SELECT['different categories']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['films in #REF', '#1']"", ""GROUP['count', '#4', '#1']"", ""UNION['#2', '#3', '#5']""]","['select', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_2966,Which film has the most copies in the inventory? List both title and id.,"return films ;return copies of #1 in the  inventory ;return number of  #2 for each #1 ;return #1 where #3 is  highest ;return title of #4 ;return id of #4 ;return #5 ,  #6","[""SELECT['films']"", ""PROJECT['copies of #REF in the inventory', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['title of #REF', '#4']"", ""PROJECT['id of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_2968,What is the film title and inventory id of the item in the inventory which was rented most frequently?,"return inventory  ;return items in #1 ;return #2 which was rented most frequently ;return the  film title of  #3 ;return the  inventory  id of  #3 ;return #4 ,  #5","[""SELECT['inventory']"", ""PROJECT['items in #REF', '#1']"", ""FILTER['#2', 'which was rented most frequently']"", ""PROJECT['the film title of #REF', '#3']"", ""PROJECT['the inventory id of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'filter', 'project', 'project', 'union']",train
SPIDER_train_2969,Return the title and inventory id of the film that is rented most often.,"return films ;return most often rented of  #1 ;return title of  #2 ;return inventory id of  #2 ;return #3 ,  #4","[""SELECT['films']"", ""PROJECT['most often rented of #REF', '#1']"", ""PROJECT['title of #REF', '#2']"", ""PROJECT['inventory id of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_297,"Find the name of the user who tweeted more than once, and number of tweets tweeted by them.","return users ;return tweets of #1 ;return number of #2 for each #1 ;return #1 where #3 is  more than  once ;return names of #4 ;return tweets of #4 ;return number of #6 for each #4 ;return #5 , #7","[""SELECT['users']"", ""PROJECT['tweets of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than once']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['tweets of #REF', '#4']"", ""GROUP['count', '#6', '#4']"", ""UNION['#5', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'group', 'union']",train
SPIDER_train_2970,How many languages are in these films?,return films ;return languages in #1 ;return number of  #2,"[""SELECT['films']"", ""PROJECT['languages in #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_2971,Count the number of different languages in these films.,return films ;return different languages in #1 ;return number of  #2,"[""SELECT['films']"", ""PROJECT['different languages in #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_2972,What are all the movies rated as R? List the titles.,return movies ;return #1 that  are  rated R ;return the  titles of  #2,"[""SELECT['movies']"", ""FILTER['#1', 'that are rated R']"", ""PROJECT['the titles of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2973,Return the titles of any movies with an R rating.,return movies ;return #1 with  rating R ;return titles of  #2,"[""SELECT['movies']"", ""FILTER['#1', 'with rating R']"", ""PROJECT['titles of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_2974,Where is store 1 located?,return store 1 ;return where #1 is  located,"[""SELECT['store 1']"", ""PROJECT['where #REF is located', '#1']""]","['select', 'project']",train
SPIDER_train_2975,Return the address of store 1.,return store 1 ;return address of  #1,"[""SELECT['store 1']"", ""PROJECT['address of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_2976,Which staff handled least number of payments? List the full name and the id.,"return staff ;return payments handled of #1 ;return number of  #2 for each  #1 ;return name where  #3 is  lowest ;return id where #3 is  lowest ;return #4 ,  #5","[""SELECT['staff']"", ""PROJECT['payments handled of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['name where #REF is lowest', '#3']"", ""PROJECT['id where #REF is lowest', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'group', 'project', 'project', 'union']",train
SPIDER_train_2977,Give the full name and staff id of the staff who has handled the fewest payments.,"return staff  ;return payments handled of  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  lowest ;return full name of  #4 ;return staff  id of  #5 ;return #5 ,   #6","[""SELECT['staff']"", ""PROJECT['payments handled of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['full name of #REF', '#4']"", ""PROJECT['staff id of #REF', '#5']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_2978,Which language does the film AIRPORT POLLOCK use? List the language name.,return AIRPORT POLLOCK ;return language  of  #1 ;return names of  #2,"[""SELECT['AIRPORT POLLOCK']"", ""PROJECT['language of #REF', '#1']"", ""PROJECT['names of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_2979,What is the name of the language that the film 'AIRPORT POLLOCK' is in?,return films ;return languages #1 are  in ;return #2 where #1 is  'AIRPORT POLLOCK ;return name of  #3,"[""SELECT['films']"", ""PROJECT['languages #REF are in', '#1']"", ""COMPARATIVE['#2', '#1', 'is AIRPORT POLLOCK']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_298,Find the average number of followers for the users who do not have any tweet.,return users ;return tweets of #1 ;return number of  #2 for each  #1 ;return #1 where #3 is zero ;return followers of #4 ;return number of  #5 for each  #4 ;return average of #6,"[""SELECT['users']"", ""PROJECT['tweets of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is zero']"", ""PROJECT['followers of #REF', '#4']"", ""GROUP['count', '#5', '#4']"", ""AGGREGATE['avg', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'group', 'aggregate']",train
SPIDER_train_2980,How many stores are there?,return stores ;return number of  #1,"[""SELECT['stores']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_2981,Count the number of stores.,return stores ;return number of  #1,"[""SELECT['stores']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_2982,How many kinds of different ratings are listed?,return ratings ;return different #1 ;return number of  #2,"[""SELECT['ratings']"", ""PROJECT['different #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_2983,Count the number of different film ratings.,return films ;return ratings of  #1 ;return #2 that  are  different ;return number of  #3,"[""SELECT['films']"", ""PROJECT['ratings of #REF', '#1']"", ""FILTER['#2', 'that are different']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'filter', 'aggregate']",train
SPIDER_train_2984,Which movies have 'Deleted Scenes' as a substring in the special feature?,return movies ;return special features of #1 ;return substrings of #2 ;return #1 where #3 has 'Deleted Scenes,"[""SELECT['movies']"", ""PROJECT['special features of #REF', '#1']"", ""PROJECT['substrings of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'has Deleted Scenes']""]","['select', 'project', 'project', 'comparative']",train
SPIDER_train_2985,Return the titles of films that include 'Deleted Scenes' in their special feature section.,return films ;return special features of #1 ;return #1 where #2 include 'Deleted Scenes ;return titles of #3,"[""SELECT['films']"", ""PROJECT['special features of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'include Deleted Scenes']"", ""PROJECT['titles of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_2986,How many items in inventory does store 1 have?,return store 1 ;return inventory of  #1 ;return items in #2 ;return number of #3,"[""SELECT['store 1']"", ""PROJECT['inventory of #REF', '#1']"", ""PROJECT['items in #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_2987,Count the number of items store 1 has in stock.,return store 1 ;return items of  #1 ;return #2 that  are  in stock ;return number of  #3,"[""SELECT['store 1']"", ""PROJECT['items of #REF', '#1']"", ""FILTER['#2', 'that are in stock']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'filter', 'aggregate']",train
SPIDER_train_2988,When did the first payment happen?,return payment ;return When #1 happen,"[""SELECT['payment']"", ""PROJECT['When #REF happen', '#1']""]","['select', 'project']",train
SPIDER_train_2989,What was the date of the earliest payment?,return payments ;return earliest #1 ;return date of  #2,"[""SELECT['payments']"", ""PROJECT['earliest #REF', '#1']"", ""PROJECT['date of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_299,Find the average number of followers for the users who had some tweets.,return users ;return #1 who  had some tweets ;return followers of #2 ;return number of #3 for each #2 ;return average of #4,"[""SELECT['users']"", ""FILTER['#1', 'who had some tweets']"", ""PROJECT['followers of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""AGGREGATE['avg', '#4']""]","['select', 'filter', 'project', 'group', 'aggregate']",train
SPIDER_train_2990,Where does the customer with the first name Linda live? And what is her email?,"return customer ;return first name of  #1 ;return #1 Where #2 is  Linda ;return Where #3 lives ;return email of  #3 ;return #4 ,  #5","[""SELECT['customer']"", ""PROJECT['first name of #REF', '#1']"", ""FILTER['#1', 'Where #2 is Linda']"", ""PROJECT['Where #REF lives', '#3']"", ""PROJECT['email of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'filter', 'project', 'project', 'union']",train
SPIDER_train_2991,Return the address and email of the customer with the first name Linda.,"return customers ;return first names of  #1 ;return #1 where #2 is  Linda ;return address of  #3 ;return email of  #3 ;return #4 ,  #5","[""SELECT['customers']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Linda']"", ""PROJECT['address of #REF', '#3']"", ""PROJECT['email of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_2992,"Find all the films longer than 100 minutes, or rated PG, except those who cost more than 200 for replacement. List the titles.","return films ;return #1 that are longer than 100 minutes ;return #1 that are rated PG ;return #2 ,  #3 ;return cost of replacement of  #4 ;return #4 where #5 is higher than 200 ;return #4 besides  #6 ;return titles of #7","[""SELECT['films']"", ""FILTER['#1', 'that are longer than 100 minutes']"", ""FILTER['#1', 'that are rated PG']"", ""UNION['#2', '#3']"", ""PROJECT['cost of replacement of #REF', '#4']"", ""COMPARATIVE['#4', '#5', 'is higher than 200']"", ""DISCARD['#4', '#6']"", ""PROJECT['titles of #REF', '#7']""]","['select', 'filter', 'filter', 'union', 'project', 'comparative', 'discard', 'project']",train
SPIDER_train_2993,What are the titles of films that are either longer than 100 minutes or rated PG other than those that cost more than 200 to replace?,"return films ;return #1 that are longer than 100 minutes ;return #1 that are rated PG ;return #2 ,  #3 ;return #4 that cost higher than 200 to replace ;return #4 besides  #5 ;return titles of #6","[""SELECT['films']"", ""FILTER['#1', 'that are longer than 100 minutes']"", ""FILTER['#1', 'that are rated PG']"", ""UNION['#2', '#3']"", ""FILTER['#4', 'that cost higher than 200 to replace']"", ""DISCARD['#4', '#5']"", ""PROJECT['titles of #REF', '#6']""]","['select', 'filter', 'filter', 'union', 'filter', 'discard', 'project']",train
SPIDER_train_2994,What is the first name and the last name of the customer who made the earliest rental?,"return customers ;return rentals made of #1 ;return #1 where #2 is  earliest ;return first name of #3 ;return last name of #3 ;return #4 ,  #5","[""SELECT['customers']"", ""PROJECT['rentals made of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is earliest']"", ""PROJECT['first name of #REF', '#3']"", ""PROJECT['last name of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_2995,Return the full name of the customer who made the first rental.,return rentals ;return first of #1 ;return customer of #2 ;return full name of #3,"[""SELECT['rentals']"", ""AGGREGATE['min', '#1']"", ""PROJECT['customer of #REF', '#2']"", ""PROJECT['full name of #REF', '#3']""]","['select', 'aggregate', 'project', 'project']",train
SPIDER_train_2996,What is the full name of the staff member who has rented a film to a customer with the first name April and the last name Burns?,return customers ;return first names of #1 ;return #1 where #2 is April ;return last names of #3 ;return #3 where #4 is Burns ;return staff members who  rented a film to #5 ;return full name  of #6,"[""SELECT['customers']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is April']"", ""PROJECT['last names of #REF', '#3']"", ""COMPARATIVE['#3', '#4', 'is Burns']"", ""PROJECT['staff members who rented a film to #REF', '#5']"", ""PROJECT['full name of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_2997,Return the full name of the staff who provided a customer with the first name April and the last name Burns with a film rental.,"return customers ;return first names of #1 ;return last names of #1 ;return #1 where #2 is  April ;return #1 where #3 is  Burns ;return #1 in both #4 and #5 ;return film rentals of #6 ;return staff who provided #7 ;return the   first name of #8 ;return the   last name of #8 ;return #9 ,  #10","[""SELECT['customers']"", ""PROJECT['first names of #REF', '#1']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is April']"", ""COMPARATIVE['#1', '#3', 'is Burns']"", ""INTERSECTION['#1', '#4', '#5']"", ""PROJECT['film rentals of #REF', '#6']"", ""PROJECT['staff who provided #REF', '#7']"", ""PROJECT['the first name of #REF', '#8']"", ""PROJECT['the last name of #REF', '#8']"", ""UNION['#9', '#10']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_2998,Which store has most the customers?,return stores ;return customers of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['stores']"", ""PROJECT['customers of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_2999,Return the id of the store with the most customers.,return stores ;return customers of  #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is highest ;return id of  #4,"[""SELECT['stores']"", ""PROJECT['customers of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['id of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_3,What are the maximum and minimum budget of the departments?,"return departments ;return budgets of #1 ;return maximum of #2 ;return minimum of #2 ;return #3 , #4","[""SELECT['departments']"", ""PROJECT['budgets of #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""AGGREGATE['min', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_30,List official names of cities in descending order of population.,return cities ;return official names of  #1 ;return populations of  #1 ;return #2 sorted by #3 in descending order,"[""SELECT['cities']"", ""PROJECT['official names of #REF', '#1']"", ""PROJECT['populations of #REF', '#1']"", ""SORT['#2', '#3', 'in descending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_300,Find the maximum and total number of followers of all users.,"return users ;return the number of  followers for each #1 ;return maximum of  #2 ;return sum of  #2 ;return #3 ,   #4","[""SELECT['users']"", ""PROJECT['followers', '#1']"", ""GROUP['min', '#2', '#1']"", ""AGGREGATE['max', '#3']"", ""AGGREGATE['sum', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'group', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_3000,What is the largest payment amount?,return payments ;return amounts of #1 ;return the  largest #2,"[""SELECT['payments']"", ""PROJECT['amounts of #REF', '#1']"", ""AGGREGATE['max', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_3001,Return the amount of the largest payment.,return payments ;return amounts of  #1 ;return #1 where  #2 is highest ;return amount of  #3,"[""SELECT['payments']"", ""PROJECT['amounts of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['amount of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_3002,Where does the staff member with the first name Elsa live?,return staff member ;return first name of  #1 ;return #1 Where #2 is  Elsa ;return Where #3 lives,"[""SELECT['staff member']"", ""PROJECT['first name of #REF', '#1']"", ""FILTER['#1', 'Where #2 is Elsa']"", ""PROJECT['Where #REF lives', '#3']""]","['select', 'project', 'filter', 'project']",train
SPIDER_train_3003,Give the address of the staff member who has the first name Elsa.,return staff members ;return first names of  #1 ;return #1 where  #2 is  Elsa ;return address of  #3,"[""SELECT['staff members']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Elsa']"", ""PROJECT['address of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3004,What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'?,return customers ;return #1 who have not rented films after '2005-08-23 02:06:01 ;return first names of #2,"[""SELECT['customers']"", ""FILTER['#1', 'who have not rented films after 2005-08-23 02:06:01']"", ""PROJECT['first names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3005,Return the first names of customers who did not rented a film after the date '2005-08-23 02:06:01'.,return customers ;return dates #1 rented films ;return #1 where #2 is  not after '2005-08-23 02:06:01 ;return first names of #3,"[""SELECT['customers']"", ""PROJECT['dates #REF rented films', '#1']"", ""COMPARATIVE['#1', '#2', 'is not after 2005-08-23 02:06:01']"", ""PROJECT['first names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3006,How many bank branches are there?,return bank branches ;return number of  #1,"[""SELECT['bank branches']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_3007,Count the number of bank branches.,return banks ;return branches of  #1 ;return the number of #2,"[""SELECT['banks']"", ""PROJECT['branches of #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_3008,How many customers are there?,return customers ;return number of  #1,"[""SELECT['customers']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_3009,What is the total number of customers across banks?,return banks ;return customers of  #1 ;return number of  #2,"[""SELECT['banks']"", ""PROJECT['customers of #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_301,Find the names of all the catalog entries.,return catalog entries ;return names of  #1,"[""SELECT['catalog entries']"", ""PROJECT['names of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_3010,Find the number of customers in the banks at New York City.,return banks ;return #1 at New York City ;return customers in #2 ;return number of #3,"[""SELECT['banks']"", ""FILTER['#1', 'at New York City']"", ""PROJECT['customers in #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_3011,What is the total number of customers who use banks in New York City?,return banks ;return #1 in New York City ;return customers of  #2 ;return number of  #3,"[""SELECT['banks']"", ""FILTER['#1', 'in New York City']"", ""PROJECT['customers of #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_3012,Find the average number of customers in all banks of Utah state.,return states ;return #1 that is Utah ;return banks of #2 ;return customers of #3 ;return number of  #4 for each #3 ;return average of #5,"[""SELECT['states']"", ""FILTER['#1', 'that is Utah']"", ""PROJECT['banks of #REF', '#2']"", ""PROJECT['customers of #REF', '#3']"", ""GROUP['count', '#4', '#3']"", ""AGGREGATE['avg', '#5']""]","['select', 'filter', 'project', 'project', 'group', 'aggregate']",train
SPIDER_train_3013,What is the average number of customers across banks in the state of Utah?,return banks ;return states of  #1 ;return #1 where #2 is  Utah ;return customers of  #3 ;return number of  #4 ;return average of  #5,"[""SELECT['banks']"", ""PROJECT['states of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Utah']"", ""PROJECT['customers of #REF', '#3']"", ""AGGREGATE['count', '#4']"", ""AGGREGATE['avg', '#5']""]","['select', 'project', 'comparative', 'project', 'aggregate', 'aggregate']",train
SPIDER_train_3014,Find the average number of customers cross all banks.,return banks ;return customers of  #1 ;return number of #2 ;return the average of  #3,"[""SELECT['banks']"", ""PROJECT['customers of #REF', '#1']"", ""AGGREGATE['count', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'project', 'aggregate', 'aggregate']",train
SPIDER_train_3015,What is the average number of bank customers?,return banks ;return customers of  #1 ;return number of  #2 ;return average of  #3,"[""SELECT['banks']"", ""PROJECT['customers of #REF', '#1']"", ""AGGREGATE['count', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'project', 'aggregate', 'aggregate']",train
SPIDER_train_3016,Find the city and state of the bank branch named morningside.,"return bank branches ;return #1 named morningside ;return city of  #2 ;return states of  #2 ;return #3 ,   #4","[""SELECT['bank branches']"", ""FILTER['#1', 'named morningside']"", ""PROJECT['city of #REF', '#2']"", ""PROJECT['states of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_3017,What city and state is the bank with the name morningside in?,"return bank with  the  name morningside ;return city of  #1 ;return state of  #1 ;return #2 ,  #3","[""SELECT['bank with the name morningside']"", ""PROJECT['city of #REF', '#1']"", ""PROJECT['state of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_3018,Find the branch names of banks in the New York state.,return banks ;return #1 in New York state ;return branch names of  #2,"[""SELECT['banks']"", ""FILTER['#1', 'in New York state']"", ""PROJECT['branch names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3019,What are the names of banks in the state of New York?,return banks ;return states of  #1 ;return #1 where #2 is  New York ;return names of  #3,"[""SELECT['banks']"", ""PROJECT['states of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is New York']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_302,What are all the catalog entry names?,return catalog ;return entry names in #1,"[""SELECT['catalog']"", ""PROJECT['entry names in #REF', '#1']""]","['select', 'project']",train
SPIDER_train_3020,List the name of all customers sorted by their account balance in ascending order.,return customers ;return names of  #1 ;return account balances of  #1 ;return #2 sorted by #3 in ascending order,"[""SELECT['customers']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['account balances of #REF', '#1']"", ""SORT['#2', '#3', 'in ascending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_3021,"What are the names of all customers, ordered by account balance?",return customers ;return names of  #1 ;return account balances of  #1 ;return #2 sorted by #3,"[""SELECT['customers']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['account balances of #REF', '#1']"", ""SORT['#2', '#3']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_3022,List the name of all different customers who have some loan sorted by their total loan amount.,return customers ;return different #1 ;return names of  #2 ;return loans of  #2 ;return loan  amounts of  #4 ;return sum of  #5 for each  #2 ;return #3 sorted by #6,"[""SELECT['customers']"", ""PROJECT['different #REF', '#1']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['loans of #REF', '#2']"", ""PROJECT['loan amounts of #REF', '#4']"", ""GROUP['sum', '#5', '#2']"", ""SORT['#3', '#6']""]","['select', 'project', 'project', 'project', 'project', 'group', 'sort']",train
SPIDER_train_3023,"What are the names of the different customers who have taken out a loan, ordered by the total amount that they have taken?",return customers ;return loans taken  out by #1 ;return number of  #2 for each #1 ;return #1 where #3 is  at least one ;return loans taken  out by #4 ;return amounts of #5 ;return the   sum of #6 for each #4 ;return the   names of #4 ;return #8 sorted by #7,"[""SELECT['customers']"", ""PROJECT['loans taken out by #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least one']"", ""PROJECT['loans taken out by #REF', '#4']"", ""PROJECT['amounts of #REF', '#5']"", ""GROUP['sum', '#6', '#4']"", ""PROJECT['the names of #REF', '#4']"", ""SORT['#8', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'group', 'project', 'sort']",train
SPIDER_train_3024,"Find the state, account type, and credit score of the customer whose number of loan is 0.","return customers ;return loans of #1 ;return number of  #2 for each #1 ;return #1 where #3 is 0 ;return state of #4 ;return account type of #4 ;return credit score of #4 ;return #5 ,  #6 ,   #7","[""SELECT['customers']"", ""PROJECT['loans of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is 0']"", ""PROJECT['state of #REF', '#4']"", ""PROJECT['account type of #REF', '#4']"", ""PROJECT['credit score of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_3025,"What are the states, account types, and credit scores for customers who have 0 loans?","return customers ;return loans of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  0 ;return states of  #4 ;return account types of  #4 ;return credit scores of  #4 ;return #5 ,  #6 ,   #7","[""SELECT['customers']"", ""PROJECT['loans of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is 0']"", ""PROJECT['states of #REF', '#4']"", ""PROJECT['account types of #REF', '#4']"", ""PROJECT['credit scores of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_3026,Find the number of different cities which banks are located at.,return banks ;return cities #1 are located at ;return different #2 ;return number of  #3,"[""SELECT['banks']"", ""PROJECT['cities #REF are located at', '#1']"", ""PROJECT['different #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_3027,In how many different cities are banks located?,return banks ;return cities #1 are located ;return different #2 ;return number of  #3,"[""SELECT['banks']"", ""PROJECT['cities #REF are located', '#1']"", ""PROJECT['different #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_3028,Find the number of different states which banks are located at.,return banks ;return states where  #1 are  located ;return number of different #2,"[""SELECT['banks']"", ""PROJECT['states where #REF are located', '#1']"", ""PROJECT['different #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_3029,In how many different states are banks located?,return banks ;return states of  #1 ;return different #2 ;return number of  #3,"[""SELECT['banks']"", ""PROJECT['states of #REF', '#1']"", ""PROJECT['different #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_303,Find the list of attribute data types possessed by more than 3 attribute definitions.,return attribute data types ;return attribute definitions of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  higher than 3,"[""SELECT['attribute data types']"", ""PROJECT['attribute definitions of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 3']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_3030,How many distinct types of accounts are there?,return accounts ;return types of  #1 ;return distinct #2 ;return number of  #3,"[""SELECT['accounts']"", ""PROJECT['types of #REF', '#1']"", ""PROJECT['distinct #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_3031,Count the number of different account types.,return account ;return #1 types ;return the number of #2,"[""SELECT['account']"", ""FILTER['#1', 'types']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_3032,Find the name and account balance of the customer whose name includes the letter ‘a’.,"return customers ;return names of  #1 ;return #1 where  #2 includes the letter a ;return name  of  #3 ;return account balance of  #3 ;return #4 ,   #5","[""SELECT['customers']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'includes the letter a']"", ""PROJECT['name of #REF', '#3']"", ""PROJECT['account balance of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3033,What are the names and account balances of customers with the letter a in their names?,"return customers ;return names of #1 ;return #1 where #2 has the  letter a ;return names of #3 ;return account balances of #3 ;return #4 ,  #5","[""SELECT['customers']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'has the letter a']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['account balances of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3034,Find the total account balance of each customer from Utah or Texas.,return customers ;return #1 from  Utah ;return #1 from  Texas ;return #2 or  #3 ;return total account balance for each #4,"[""SELECT['customers']"", ""FILTER['#1', 'from Utah']"", ""FILTER['#1', 'from Texas']"", ""UNION['#2', '#3']"", ""PROJECT['balance', '#4']"", ""GROUP['sum', '#5', '#4']"", ""UNION['#4', '#6']""]","['select', 'filter', 'filter', 'union', 'project', 'group', 'union']",train
SPIDER_train_3035,What are the total account balances for each customer from Utah or Texas?,return customers ;return #1 from  Utah ;return #1 from  Texas ;return #2 or  #3 ;return account balances of  #4 ;return sum of  #5 for each  #4,"[""SELECT['customers']"", ""FILTER['#1', 'from Utah']"", ""FILTER['#1', 'from Texas']"", ""UNION['#2', '#3']"", ""PROJECT['account balances of #REF', '#4']"", ""GROUP['sum', '#5', '#4']"", ""UNION['#4', '#6']""]","['select', 'filter', 'filter', 'union', 'project', 'group', 'union']",train
SPIDER_train_3036,Find the name of customers who have both saving and checking account types.,return customers ;return account types of #1 ;return #1 where #2 is saving ;return #1 where #2 is checking ;return #1 in  both #3 and  #4 ;return names of #5,"[""SELECT['customers']"", ""PROJECT['account types of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is saving']"", ""COMPARATIVE['#1', '#2', 'is checking']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_3037,What are the names of customers who have both savings and checking accounts?,return customers ;return accounts #1 have  ;return #1 where #2 is  savings ;return #1 where #2 is  checking ;return #1 of  both #3 and  #4 ;return names of  #5,"[""SELECT['customers']"", ""PROJECT['accounts #REF have', '#1']"", ""COMPARATIVE['#1', '#2', 'is savings']"", ""COMPARATIVE['#1', '#2', 'is checking']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_3038,Find the name of customers who do not have an saving account.,return customers ;return #1 who  have  savings account ;return #1 besides #2 ;return names of  #3,"[""SELECT['customers']"", ""FILTER['#1', 'who have savings account']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_3039,What are the names of customers who do not have saving accounts?,return customers ;return accounts of  #1 ;return #1 where #2 is  not  saving ;return names of  #3,"[""SELECT['customers']"", ""PROJECT['accounts of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not saving']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_304,What are the attribute data types with more than 3 attribute definitions?,return attribute  data types ;return attribute  definitions of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than 3,"[""SELECT['attribute data types']"", ""PROJECT['attribute definitions of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 3']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_3040,Find the name of customers who do not have a loan with a type of Mortgages.,return customers ;return loans of  #1 ;return #1 where  type of  #2 is  Mortgages ;return #1 besides #3 ;return names of  #4,"[""SELECT['customers']"", ""PROJECT['loans of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Mortgages']"", ""DISCARD['#1', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'comparative', 'discard', 'project']",train
SPIDER_train_3041,What are the names of customers who have not taken a Mortage loan?,return customers ;return #1 who have not taken a Mortage loan ;return names of #2,"[""SELECT['customers']"", ""FILTER['#1', 'who have not taken a Mortage loan']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3042,Find the name of customers who have loans of both Mortgages and Auto.,return customers ;return loans of #1 ;return #1 where #2 is  Mortgages ;return #1 where #2 is  Auto ;return #1 of both #3 and #4 ;return names of #5,"[""SELECT['customers']"", ""PROJECT['loans of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Mortgages']"", ""COMPARATIVE['#1', '#2', 'is Auto']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_3043,What are the names of customers who have taken both Mortgage and Auto loans?,return customers ;return loans #1 have  taken ;return #1 where #2 is  Mortgage ;return #1 where #2 is  Auto ;return #1 of  both #3 and  #4 ;return names of  #5,"[""SELECT['customers']"", ""PROJECT['loans #REF have taken', '#1']"", ""COMPARATIVE['#1', '#2', 'is Mortgage']"", ""COMPARATIVE['#1', '#2', 'is Auto']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_3044,Find the name of customers whose credit score is below the average credit scores of all customers.,return customers ;return credit scores of  #1 ;return average of  #2 ;return #1 where  #2 is lower than #3 ;return names of  #4,"[""SELECT['customers']"", ""PROJECT['credit scores of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is lower than #3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_3045,What are the names of customers with credit score less than the average credit score across customers?,return customers  ;return credit  scores of #1 ;return average of #2 ;return #1 where #2 is lower than #3 ;return names of #4,"[""SELECT['customers']"", ""PROJECT['credit scores of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is lower than #3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_3046,Find the branch name of the bank that has the most number of customers.,return bank ;return #1 that  has  most number of customers ;return branch name of  #2,"[""SELECT['bank']"", ""FILTER['#1', 'that has most number of customers']"", ""PROJECT['branch name of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3047,What is the name of the bank branch with the greatest number of customers?,return banks ;return branches of #1 ;return customers of #2 ;return number of  #3 for each #2 ;return #2 where #4 is  the   greatest ;return the   name of #5,"[""SELECT['banks']"", ""PROJECT['branches of #REF', '#1']"", ""PROJECT['customers of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""COMPARATIVE['#2', '#4', 'is the greatest']"", ""PROJECT['the name of #REF', '#5']""]","['select', 'project', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_3048,Find the name of customer who has the lowest credit score.,return customers ;return credit scores of  #1 ;return #1 where  #2 is  lowest ;return name of  #3,"[""SELECT['customers']"", ""PROJECT['credit scores of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_3049,What is the name of the customer with the worst credit score?,return customers ;return credit scores of  #1 ;return #1 where #2 is  lowest ;return name of  #3,"[""SELECT['customers']"", ""PROJECT['credit scores of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_305,"What is the attribute data type of the attribute with name ""Green""?",return attributes ;return #1 with  the  name Green ;return the  attribute data type of #2,"[""SELECT['attributes']"", ""FILTER['#1', 'with the name Green']"", ""PROJECT['the attribute data type of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3050,"Find the name, account type, and account balance of the customer who has the highest credit score.","return customers ;return credit scores of  #1 ;return #1 where  #2 is  highest ;return name of  #3 ;return account  type of  #3 ;return account  balance of  #3 ;return #4 ,   #5 , #6","[""SELECT['customers']"", ""PROJECT['credit scores of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['name of #REF', '#3']"", ""PROJECT['account type of #REF', '#3']"", ""PROJECT['account balance of #REF', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'project', 'superlative', 'project', 'project', 'project', 'union']",train
SPIDER_train_3051,"What is the name, account type, and account balance corresponding to the customer with the highest credit score?","return customers ;return credit scores of  #1 ;return #1 where #2 is  highest ;return name of  #3 ;return account  type of  #3 ;return account  balance of  #3 ;return #4 ,  #5 ,   #6","[""SELECT['customers']"", ""PROJECT['credit scores of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['name of #REF', '#3']"", ""PROJECT['account type of #REF', '#3']"", ""PROJECT['account balance of #REF', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'project', 'superlative', 'project', 'project', 'project', 'union']",train
SPIDER_train_3052,Find the name of customer who has the highest amount of loans.,return customers ;return loans of #1 ;return amounts of #2 ;return sum of #3 for each #1 ;return #1 where #4 is highest ;return name of #5,"[""SELECT['customers']"", ""PROJECT['loans of #REF', '#1']"", ""PROJECT['amounts of #REF', '#2']"", ""GROUP['sum', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']"", ""PROJECT['name of #REF', '#5']""]","['select', 'project', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_3053,What is the name of the customer who has greatest total loan amount?,return customers ;return loans of  #1 ;return amounts of  #2 ;return sum of  #3 for each  #1 ;return #1 where #4 is  highest ;return name of  #5,"[""SELECT['customers']"", ""PROJECT['loans of #REF', '#1']"", ""PROJECT['amounts of #REF', '#2']"", ""GROUP['sum', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']"", ""PROJECT['name of #REF', '#5']""]","['select', 'project', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_3054,Find the state which has the most number of customers.,return states ;return customers of  #1 ;return number of #2 ;return #1 where  #3 is  highest,"[""SELECT['states']"", ""PROJECT['customers of #REF', '#1']"", ""AGGREGATE['count', '#2']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'aggregate', 'superlative']",train
SPIDER_train_3055,Which state has the greatest total number of bank customers?,return states ;return bank customers of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['states']"", ""PROJECT['bank customers of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_3056,"For each account type, find the average account balance of customers with credit score lower than 50.",return account  types ;return customers of  #1 ;return credit scores of  #2 ;return #2 where  #3 is  lower than 50 ;return average account  balance of  #4 for each #1,"[""SELECT['account types']"", ""PROJECT['customers of #REF', '#1']"", ""PROJECT['credit scores of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is lower than 50']"", ""GROUP['avg', '#4', '#1']"", ""UNION['#1', '#5']""]","['select', 'project', 'project', 'comparative', 'group', 'union']",train
SPIDER_train_3057,What is the average account balance of customers with credit score below 50 for the different account types?,return account types ;return customers that  have  #1 ;return credits scores of #2 ;return #2 where #3 is  lower than 50 ;return account balances of #4 ;return average of #5 for each #1,"[""SELECT['account types']"", ""PROJECT['customers that have #REF', '#1']"", ""PROJECT['credits scores of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is lower than 50']"", ""PROJECT['account balances of #REF', '#4']"", ""GROUP['avg', '#5', '#1']"", ""UNION['#1', '#6']""]","['select', 'project', 'project', 'comparative', 'project', 'group', 'union']",train
SPIDER_train_3058,"For each state, find the total account balance of customers whose credit score is above 100.",return states ;return customers of #1 ;return credit scores of #2 ;return #2 where #3 is  above 100 ;return account balances of #4 ;return the  sum of #5 for each #1,"[""SELECT['states']"", ""PROJECT['customers of #REF', '#1']"", ""PROJECT['credit scores of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is above 100']"", ""PROJECT['account balances of #REF', '#4']"", ""GROUP['sum', '#5', '#1']"", ""UNION['#1', '#6']""]","['select', 'project', 'project', 'comparative', 'project', 'group', 'union']",train
SPIDER_train_3059,What is the total account balance for customers with a credit score of above 100 for the different states?,return different states ;return customers of #1 ;return credit scores of #2 ;return #2 where #3 is  higher than 100 ;return account balances of #4 ;return sum of #5 for each #1,"[""SELECT['different states']"", ""PROJECT['customers of #REF', '#1']"", ""PROJECT['credit scores of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is higher than 100']"", ""PROJECT['account balances of #REF', '#4']"", ""GROUP['sum', '#5', '#1']"", ""UNION['#1', '#6']""]","['select', 'project', 'project', 'comparative', 'project', 'group', 'union']",train
SPIDER_train_306,"Find the attribute data type for the attribute named ""Green"".",return attributes ;return #1 named Green ;return attribute  data type of  #2,"[""SELECT['attributes']"", ""FILTER['#1', 'named Green']"", ""PROJECT['attribute data type of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3060,Find the total amount of loans offered by each bank branch.,return bank branches ;return loans offered by #1 ;return amounts of  #2 ;return sum of  #3 for each #1,"[""SELECT['bank branches']"", ""PROJECT['loans offered by #REF', '#1']"", ""PROJECT['amounts of #REF', '#2']"", ""GROUP['sum', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_3061,"What are the names of the different bank branches, and what are their total loan amounts?","return bank branches ;return the  names of  #1 ;return loans ;return amounts of  #3 ;return the  sum #4 for each  #1 ;return #2 ,  #5","[""SELECT['bank branches']"", ""PROJECT['the names of #REF', '#1']"", ""SELECT['loans']"", ""PROJECT['amounts of #REF', '#3']"", ""GROUP['sum', '#4', '#1']"", ""UNION['#2', '#5']""]","['select', 'project', 'select', 'project', 'group', 'union']",train
SPIDER_train_3062,Find the name of customers who have more than one loan.,return customers ;return loans of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than one ;return name of  #4,"[""SELECT['customers']"", ""PROJECT['loans of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than one']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_3063,What are the names of customers who have taken out more than one loan?,return customers ;return loans #1 have  taken out ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than one ;return names of  #4,"[""SELECT['customers']"", ""PROJECT['loans #REF have taken out', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than one']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_3064,Find the name and account balance of the customers who have loans with a total amount of more than 5000.,"return customers ;return loans of  #1 ;return sum of  #2 for each #1 ;return #1 where  #3 is  higher than 5000 ;return names of  #4 ;return account balances of  #4 ;return #5 ,   #6","[""SELECT['customers']"", ""PROJECT['loans of #REF', '#1']"", ""GROUP['sum', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 5000']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['account balances of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3065,What are the names and account balances for customers who have taken a total amount of more than 5000 in loans?,"return customers ;return loans #1 have  taken ;return amounts of  #2 ;return sum of  #3 for each  #1 ;return #1 where #4 is  higher than 5000 ;return names of  #5 ;return account balances of  #5 ;return #6 ,  #7","[""SELECT['customers']"", ""PROJECT['loans #REF have taken', '#1']"", ""PROJECT['amounts of #REF', '#2']"", ""GROUP['sum', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is higher than 5000']"", ""PROJECT['names of #REF', '#5']"", ""PROJECT['account balances of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3066,Find the name of bank branch that provided the greatest total amount of loans.,return bank branches ;return loans #1 provided ;return amounts of  #2 ;return sum of  #3 for each  #1 ;return #1 where #4 is  highest ;return names of  #5,"[""SELECT['bank branches']"", ""PROJECT['loans #REF provided', '#1']"", ""PROJECT['amounts of #REF', '#2']"", ""GROUP['sum', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_3067,What is the name of the bank branch that has lent the greatest amount?,return bank branches ;return amount #1 lent ;return #1 where #2 is  highest ;return name of  #3,"[""SELECT['bank branches']"", ""PROJECT['amount #REF lent', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_3068,Find the name of bank branch that provided the greatest total amount of loans to customers with credit score is less than 100.,return customers ;return credit scores of #1 ;return #1 where #2 is  less than  100 ;return loans to  #3 ;return amounts of #4 ;return sum of #5 for each bank branch ;return bank branch where #6 is  highest,"[""SELECT['customers']"", ""PROJECT['credit scores of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is less than 100']"", ""PROJECT['loans to #REF', '#3']"", ""PROJECT['amounts of #REF', '#4']"", ""PROJECT['branch', '#5']"", ""GROUP['sum', '#5', '#6']"", ""PROJECT['bank branch where #REF is highest', '#7']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'group', 'project']",train
SPIDER_train_3069,"What is the name of the bank branch that has lended the largest total amount in loans, specifically to customers with credit scores below 100?",return bank branches ;return loans of #1 ;return customers of #2 ;return credit scores of #3 ;return #2 where #4 is  lower than 100 ;return amounts of #5 ;return sum of #6 for each #1 ;return #1 where #7 is  highest,"[""SELECT['bank branches']"", ""PROJECT['loans of #REF', '#1']"", ""PROJECT['customers of #REF', '#2']"", ""PROJECT['credit scores of #REF', '#3']"", ""COMPARATIVE['#2', '#4', 'is lower than 100']"", ""PROJECT['amounts of #REF', '#5']"", ""GROUP['sum', '#6', '#1']"", ""SUPERLATIVE['max', '#1', '#7']""]","['select', 'project', 'project', 'project', 'comparative', 'project', 'group', 'superlative']",train
SPIDER_train_307,Find the name and level of catalog structure with level between 5 and 10.,"return catalogs ;return structures of #1 ;return levels of #2 ;return #2 where #3 is  between 5 and 10 ;return names of #4 ;return levels of #4 ;return #5 ,  #6","[""SELECT['catalogs']"", ""PROJECT['structures of #REF', '#1']"", ""PROJECT['levels of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is  betweenleftside 5']"", ""COMPARATIVE['#4', '#3', 'is  betweenrightside 10']"", ""PROJECT['names of #REF', '#5']"", ""PROJECT['levels of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'project', 'comparative', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3070,Find the name of bank branches that provided some loans.,return banks ;return branches of  #1 ;return #2 that  provided some loans ;return names of  #3,"[""SELECT['banks']"", ""PROJECT['branches of #REF', '#1']"", ""FILTER['#2', 'that provided some loans']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'filter', 'project']",train
SPIDER_train_3071,What are the names of the different banks that have provided loans?,return different banks ;return #1 that  have  provided loans ;return names of  #2,"[""SELECT['different banks']"", ""FILTER['#1', 'that have provided loans']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3072,Find the name and credit score of the customers who have some loans.,"return customers ;return #1 with  loans ;return names of  #2 ;return credit scores of  #2 ;return #3 ,   #4","[""SELECT['customers']"", ""FILTER['#1', 'with loans']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['credit scores of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_3073,What are the different names and credit scores of customers who have taken a loan?,"return customers ;return #1 who  have  taken a loan ;return different names of  #2 ;return credit scores of  #2 ;return #3 ,  #4","[""SELECT['customers']"", ""FILTER['#1', 'who have taken a loan']"", ""PROJECT['different names of #REF', '#2']"", ""PROJECT['credit scores of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_3074,Find the the name of the customers who have a loan with amount more than 3000.,return customers ;return loans of  #1 ;return amounts of  #2 ;return #1 where  #3 is  more than  3000 ;return names of  #4,"[""SELECT['customers']"", ""PROJECT['loans of #REF', '#1']"", ""PROJECT['amounts of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is more than 3000']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_3075,What are the names of customers who have a loan of more than 3000 in amount?,return customers ;return loans of  #1 ;return amounts of  #2 ;return #1 where #3 is  higher than 3000 ;return names of  #4,"[""SELECT['customers']"", ""PROJECT['loans of #REF', '#1']"", ""PROJECT['amounts of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is higher than 3000']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_3076,Find the city and name of bank branches that provide business loans.,"return banks ;return branches of  #1 ;return #2 that  provide business loans ;return name of  #3 ;return city of  #3 ;return #4 ,   #5","[""SELECT['banks']"", ""PROJECT['branches of #REF', '#1']"", ""FILTER['#2', 'that provide business loans']"", ""PROJECT['name of #REF', '#3']"", ""PROJECT['city of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'filter', 'project', 'project', 'union']",train
SPIDER_train_3077,What are the names and cities of bank branches that offer loans for business?,"return bank branches ;return #1 that  offer loans for business ;return cities of  #2 ;return names of  #2 ;return #4 ,  #3","[""SELECT['bank branches']"", ""FILTER['#1', 'that offer loans for business']"", ""PROJECT['cities of #REF', '#2']"", ""PROJECT['names of #REF', '#2']"", ""UNION['#4', '#3']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_3078,Find the names of bank branches that have provided a loan to any customer whose credit score is below 100.,return bank branches ;return customers #1 provided a loan to  ;return credit scores of #2 ;return #1 where #3 is  lower than 100 ;return names of #4,"[""SELECT['bank branches']"", ""PROJECT['customers #REF provided a loan to', '#1']"", ""PROJECT['credit scores of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is lower than 100']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_3079,What are the names of banks that have loaned money to customers with credit scores below 100?,return banks ;return customers that  #1 loaned money to  ;return credit scores of #2 ;return #2 where #3 is  below 100 ;return number of  #4 for each #1 ;return #1 where #5 is  at least one ;return the  names of #6,"[""SELECT['banks']"", ""PROJECT['customers that #REF loaned money to', '#1']"", ""PROJECT['credit scores of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is below 100']"", ""GROUP['count', '#4', '#1']"", ""COMPARATIVE['#1', '#5', 'is at least one']"", ""PROJECT['the names of #REF', '#6']""]","['select', 'project', 'project', 'comparative', 'group', 'comparative', 'project']",train
SPIDER_train_308,What are the name and level of catalog structure with level number between 5 and 10,"return catalog structures ;return levels of  #1 ;return #1 where #2 is  at least 5 ;return #1 where #2 is  at most 10 ;return #1 of  both #3 and  #4 ;return names of  #5 ;return levels of  #5 ;return #6 ,  #7","[""SELECT['catalog structures']"", ""PROJECT['levels of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least 5']"", ""COMPARATIVE['#1', '#2', 'is at most 10']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['names of #REF', '#5']"", ""PROJECT['levels of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_3080,Find the total amount of loans provided by bank branches in the state of New York.,return bank branches ;return #1 in New York ;return loans provided by #2 ;return amounts of  #3 ;return sum of  #4,"[""SELECT['bank branches']"", ""FILTER['#1', 'in New York']"", ""PROJECT['loans provided by #REF', '#2']"", ""PROJECT['amounts of #REF', '#3']"", ""AGGREGATE['sum', '#4']""]","['select', 'filter', 'project', 'project', 'aggregate']",train
SPIDER_train_3081,What is the total amount of money loaned by banks in New York state?,return banks ;return #1 in New York state ;return money loaned of #2 ;return sum of  #3,"[""SELECT['banks']"", ""FILTER['#1', 'in New York state']"", ""PROJECT['money loaned of #REF', '#2']"", ""AGGREGATE['sum', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_3082,Find the average credit score of the customers who have some loan.,return customers ;return #1 who  have  loans ;return credit scores of  #2 ;return the average of  #3,"[""SELECT['customers']"", ""FILTER['#1', 'who have loans']"", ""PROJECT['credit scores of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_3083,What is the average credit score for customers who have taken a loan?,return customers ;return #1 who  have  taken a loan ;return credit scores of  #2 ;return average of  #3,"[""SELECT['customers']"", ""FILTER['#1', 'who have taken a loan']"", ""PROJECT['credit scores of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_3084,Find the average credit score of the customers who do not have any loan.,return customers ;return #1 who  do not  have  any loans ;return credit scores of  #2 ;return the average of  #3,"[""SELECT['customers']"", ""FILTER['#1', 'who do not have any loans']"", ""PROJECT['credit scores of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_3085,What is the average credit score for customers who have never taken a loan?,return customers ;return #1 who  have  taken a loan ;return #1 besides  #2 ;return credit score for #3 ;return average of  #4,"[""SELECT['customers']"", ""FILTER['#1', 'who have taken a loan']"", ""DISCARD['#1', '#2']"", ""PROJECT['credit score for #REF', '#3']"", ""AGGREGATE['avg', '#4']""]","['select', 'filter', 'discard', 'project', 'aggregate']",train
SPIDER_train_3086,How many assessment notes are there in total?,return assessment notes ;return number of #1,"[""SELECT['assessment notes']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_3087,What are the dates of the assessment notes?,return assessment notes ;return dates of #1,"[""SELECT['assessment notes']"", ""PROJECT['dates of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_3088,How many addresses have zip code 197?,return addresses ;return zip codes of  #1 ;return #1 where  #2 is  197 ;return number of #3,"[""SELECT['addresses']"", ""PROJECT['zip codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 197']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_3089,How many distinct incident type codes are there?,return incident type codes ;return distinct #1 ;return number of #2,"[""SELECT['incident type codes']"", ""PROJECT['distinct #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_309,"Find all the catalog publishers whose name contains ""Murray""",return catalog publishers ;return names of  #1 ;return #2 which  contain Murray,"[""SELECT['catalog publishers']"", ""PROJECT['names of #REF', '#1']"", ""FILTER['#2', 'which contain Murray']""]","['select', 'project', 'filter']",train
SPIDER_train_3090,Return all distinct detention type codes.,return detention type codes ;return distinct #1,"[""SELECT['detention type codes']"", ""PROJECT['distinct #REF', '#1']""]","['select', 'project']",train
SPIDER_train_3091,"What are the start and end dates for incidents with incident type code ""NOISE""?","return incidents ;return incident type codes of  #1 ;return #1 where #2 is  NOISE ;return start dates of  #3 ;return end dates of  #3 ;return #4 ,  #5","[""SELECT['incidents']"", ""PROJECT['incident type codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is NOISE']"", ""PROJECT['start dates of #REF', '#3']"", ""PROJECT['end dates of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3092,Return all detention summaries.,return detention summaries,"[""SELECT['detention summaries']""]",['select'],train
SPIDER_train_3093,Return the cell phone number and email address for all students.,"return students ;return cell phone numbers of  #1 ;return email addresses of  #1 ;return #2 ,  #3","[""SELECT['students']"", ""PROJECT['cell phone numbers of #REF', '#1']"", ""PROJECT['email addresses of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_3094,"What is the email of the student with first name ""Emma"" and last name ""Rohan""?",return students ;return first names of  #1 ;return #1 where #2 is  Emma ;return last names of  #1 ;return #1 where #2 is  Rohan ;return #1 of  both #3 and  #5 ;return email of  #6,"[""SELECT['students']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Emma']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Rohan']"", ""INTERSECTION['#1', '#3', '#5']"", ""PROJECT['email of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'comparative', 'intersection', 'project']",train
SPIDER_train_3095,How many distinct students have been in detention?,return students ;return #1 that  have been in detention ;return number of  distinct #2,"[""SELECT['students']"", ""FILTER['#1', 'that have been in detention']"", ""PROJECT['distinct #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'filter', 'project', 'group', 'union']",train
SPIDER_train_3096,"What is the gender of the teacher with last name ""Medhurst""?",return teachers ;return last names of #1 ;return #1 where #2 is  Medhurst ;return the  gender of #3,"[""SELECT['teachers']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Medhurst']"", ""PROJECT['the gender of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3097,"What is the incident type description for the incident type with code ""VIOLENCE""?",return incident types ;return codes of #1 ;return #1 where #2 is  VIOLENCE ;return incident type  description of #3,"[""SELECT['incident types']"", ""PROJECT['codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is VIOLENCE']"", ""PROJECT['incident type description of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3098,Find the maximum and minimum monthly rental for all student addresses.,"return student addresses ;return monthly rentals of  #1 ;return maximum #2 ;return minimum #2 ;return #3 ,   #4","[""SELECT['student addresses']"", ""PROJECT['monthly rentals of #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""AGGREGATE['min', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_3099,"Find the first names of teachers whose email address contains the word ""man"".",return teachers ;return email addresses of  #1 ;return #1 where  #2 contains the word man ;return first names of  #3,"[""SELECT['teachers']"", ""PROJECT['email addresses of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'contains the word man']"", ""PROJECT['first names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_31,"What are the official names of cities, ordered descending by population?",return cities ;return population of  #1 ;return official names of  #1 ;return #3 sorted by #2 in descending order,"[""SELECT['cities']"", ""PROJECT['population of #REF', '#1']"", ""PROJECT['official names of #REF', '#1']"", ""SORT['#3', '#2', 'in descending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_310,"Which catalog publishers have substring ""Murray"" in their names?",return catalogs ;return publishers of  #1 ;return names of  #2 ;return #2 where #3 have  substring Murray,"[""SELECT['catalogs']"", ""PROJECT['publishers of #REF', '#1']"", ""PROJECT['names of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'have substring Murray']""]","['select', 'project', 'project', 'comparative']",train
SPIDER_train_3100,List all information about the assessment notes sorted by date in ascending order.,return assessment notes ;return dates of  #1 ;return all information about #1 ;return #3 sorted by #2 in ascending order,"[""SELECT['assessment notes']"", ""PROJECT['dates of #REF', '#1']"", ""PROJECT['all information about #REF', '#1']"", ""SORT['#3', '#2', 'in ascending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_3101,List all cities of addresses in alphabetical order.,return addresses ;return cities of  #1 ;return #2 sorted by alphabetical order,"[""SELECT['addresses']"", ""PROJECT['cities of #REF', '#1']"", ""SORT['#2', '#2', 'alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_3102,Find the first names and last names of teachers in alphabetical order of last name.,"return teachers ;return first names of #1 ;return last  names of #1 ;return #2 ,  #3 ;return #4 sorted by #3 in  alphabetical order","[""SELECT['teachers']"", ""PROJECT['first names of #REF', '#1']"", ""PROJECT['last names of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#4', '#3', 'in alphabetical order']""]","['select', 'project', 'project', 'union', 'sort']",train
SPIDER_train_3103,"Find all information about student addresses, and sort by monthly rental in descending order.",return addresses ;return #1 of  students ;return monthly rental of  #2 ;return #3 sorted by descending order,"[""SELECT['addresses']"", ""FILTER['#1', 'of students']"", ""PROJECT['monthly rental of #REF', '#2']"", ""SORT['#3', '#3', 'descending order']""]","['select', 'filter', 'project', 'sort']",train
SPIDER_train_3104,Find the id and first name of the student that has the most number of assessment notes?,"return students ;return assessment notes of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return id of  #4 ;return first name of  #4 ;return #5 ,  #6","[""SELECT['students']"", ""PROJECT['assessment notes of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['id of #REF', '#4']"", ""PROJECT['first name of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_3105,Find the ids and first names of the 3 teachers that have the most number of assessment notes?,"return teachers ;return assessment notes of #1 ;return number of #2 for each #1 ;return #1 where #3 is  the highest ;return ids of #4 ;return first names of #4 ;return #5 , #6","[""SELECT['teachers']"", ""PROJECT['assessment notes of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']"", ""PROJECT['ids of #REF', '#4']"", ""PROJECT['first names of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3106,Find the id and last name of the student that has the most behavior incidents?,"return students ;return behavior incidents of  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  highest ;return id of  #4 ;return last name of  #4 ;return #5 ,   #6","[""SELECT['students']"", ""PROJECT['behavior incidents of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['id of #REF', '#4']"", ""PROJECT['last name of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_3107,"Find the id and last name of the teacher that has the most detentions with detention type code ""AFTER""?","return teachers ;return detentions of  #1 ;return detention type codes of  #2 ;return #2 where  #3 is  AFTER ;return number of  #4 for each #1 ;return #1 where  #5 is  highest ;return id of  #6 ;return last name of  #6 ;return #7 ,   #8","[""SELECT['teachers']"", ""PROJECT['detentions of #REF', '#1']"", ""PROJECT['detention type codes of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is AFTER']"", ""GROUP['count', '#4', '#1']"", ""SUPERLATIVE['max', '#1', '#5']"", ""PROJECT['id of #REF', '#6']"", ""PROJECT['last name of #REF', '#6']"", ""UNION['#7', '#8']""]","['select', 'project', 'project', 'comparative', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_3108,What are the id and first name of the student whose addresses have the highest average monthly rental?,"return students ;return addresses of #1 ;return monthly rentals of #2 ;return the   average of #3 for each #2 ;return #2 where #4 is  the   highest ;return #1 where #2 is  #5 ;return the   id of #6 ;return the   first name of #6 ;return #7 ,  #8","[""SELECT['students']"", ""PROJECT['addresses of #REF', '#1']"", ""PROJECT['monthly rentals of #REF', '#2']"", ""GROUP['avg', '#3', '#2']"", ""COMPARATIVE['#2', '#4', 'is the highest']"", ""COMPARATIVE['#1', '#2', 'is #5']"", ""PROJECT['the id of #REF', '#6']"", ""PROJECT['the first name of #REF', '#6']"", ""UNION['#7', '#8']""]","['select', 'project', 'project', 'group', 'comparative', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3109,Find the id and city of the student address with the highest average monthly rental.,"return student addresses ;return monthly rentals of  #1 ;return average of  #2 for each #1 ;return #1 where  #3 is  highest ;return id of  #4 ;return city of  #4 ;return #5 ,   #6","[""SELECT['student addresses']"", ""PROJECT['monthly rentals of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['id of #REF', '#4']"", ""PROJECT['city of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_311,Which catalog publisher has published the most catalogs?,return catalog publishers ;return catalogs that  #1 published ;return number of  #2 for each #1 ;return #1 where #3 is  the  highest,"[""SELECT['catalog publishers']"", ""PROJECT['catalogs that #REF published', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_3110,What are the code and description of the most frequent behavior incident type?,"return behavior incidents ;return types ;return number of  #1 for each  #2 ;return the  #2 where #3 is  highest ;return the  code of  #4 ;return the  description of  #4 ;return #5 ,  #6","[""SELECT['behavior incidents']"", ""SELECT['types']"", ""GROUP['count', '#1', '#2']"", ""COMPARATIVE['#2', '#3', 'is highest']"", ""PROJECT['the code of #REF', '#4']"", ""PROJECT['the description of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'select', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3111,What are the code and description of the least frequent detention type ?,"return detention types ;return #1 that  is  least frequent ;return code of #2 ;return description of #2 ;return #3 , #4","[""SELECT['detention types']"", ""FILTER['#1', 'that is least frequent']"", ""PROJECT['code of #REF', '#2']"", ""PROJECT['description of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_3112,"Find the dates of assessment notes for students with first name ""Fanny"".",return students ;return first names of #1 ;return #1 where #2 is Fanny ;return assessment notes of #3 ;return dates of #4,"[""SELECT['students']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Fanny']"", ""PROJECT['assessment notes of #REF', '#3']"", ""PROJECT['dates of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_3113,"Find the texts of assessment notes for teachers with last name ""Schuster"".",return teachers ;return last names of  #1 ;return #1 where  #2 is  Schuster ;return assessment notes of  #3 ;return texts of  #4,"[""SELECT['teachers']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Schuster']"", ""PROJECT['assessment notes of #REF', '#3']"", ""PROJECT['texts of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_3114,"Find the start and end dates of behavior incidents of students with last name ""Fahey"".","return students ;return last names of  #1 ;return #1 where  #2 is  Fahey ;return behavior incidents of  #3 ;return start dates of  #4 ;return end dates of  #4 ;return #5 ,   #6","[""SELECT['students']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Fahey']"", ""PROJECT['behavior incidents of #REF', '#3']"", ""PROJECT['start dates of #REF', '#4']"", ""PROJECT['end dates of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_3115,"Find the start and end dates of detentions of teachers with last name ""Schultz"".","return teachers ;return last names of  #1 ;return #1 where  #2 is  Schultz ;return detentions of  #3 ;return start dates of  #4 ;return end dates of  #4 ;return #5 ,   #6","[""SELECT['teachers']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Schultz']"", ""PROJECT['detentions of #REF', '#3']"", ""PROJECT['start dates of #REF', '#4']"", ""PROJECT['end dates of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_3116,What are the id and zip code of the address with the highest monthly rental?,"return addresses ;return monthly rentals of  #1 ;return #1 where #2 is  highest ;return id of  #3 ;return zip code of  #3 ;return #4 ,  #5","[""SELECT['addresses']"", ""PROJECT['monthly rentals of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['id of #REF', '#3']"", ""PROJECT['zip code of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_3117,What is the cell phone number of the student whose address has the lowest monthly rental?,return students ;return addresses of  #1 ;return monthly rentals of  #2 ;return #1 where #3 is  lowest ;return cell phone number of  #4,"[""SELECT['students']"", ""PROJECT['addresses of #REF', '#1']"", ""PROJECT['monthly rentals of #REF', '#2']"", ""SUPERLATIVE['min', '#1', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'project', 'superlative', 'aggregate']",train
SPIDER_train_3118,What are the monthly rentals of student addresses in Texas state?,return students ;return addresses of  #1 ;return states of  #2 ;return #1 where #3 is  Texas ;return addresses of  #4 ;return monthly rentals of  #5,"[""SELECT['students']"", ""PROJECT['addresses of #REF', '#1']"", ""PROJECT['states of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Texas']"", ""PROJECT['addresses of #REF', '#4']"", ""PROJECT['monthly rentals of #REF', '#5']""]","['select', 'project', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_3119,What are the first names and last names of students with address in Wisconsin state?,"return students ;return #1 with address in Wisconsin states ;return first names of  #2 ;return last names of  #2 ;return #3 ,  #4","[""SELECT['students']"", ""FILTER['#1', 'with address in Wisconsin states']"", ""PROJECT['first names of #REF', '#2']"", ""PROJECT['last names of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_312,Find the catalog publisher that has the most catalogs.,return catalog publishers ;return catalogs of #1 ;return number of  #2 for each #1 ;return #1 where #3 is highest,"[""SELECT['catalog publishers']"", ""PROJECT['catalogs of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_3120,What are the line 1 and average monthly rentals of all student addresses?,"return student addresses ;return monthly rentals of  #1 ;return average of  #2 ;return line 1 of  #1 ;return #4 ,  #3","[""SELECT['student addresses']"", ""PROJECT['monthly rentals of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""PROJECT['line 1 of #REF', '#1']"", ""UNION['#4', '#3']""]","['select', 'project', 'aggregate', 'project', 'union']",train
SPIDER_train_3121,"What is the zip code of the address where the teacher with first name ""Lyla"" lives?",return teachers ;return first names of #1 ;return #1 where #2 is  Lyla ;return address of #3 ;return zip code of #4,"[""SELECT['teachers']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Lyla']"", ""PROJECT['address of #REF', '#3']"", ""PROJECT['zip code of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_3122,"What are the email addresses of teachers whose address has zip code ""918""?",return teachers ;return addresses of  #1 ;return zip codes of  #2 ;return #1 where #3 is  918 ;return email addresses of  #4,"[""SELECT['teachers']"", ""PROJECT['addresses of #REF', '#1']"", ""PROJECT['zip codes of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is 918']"", ""PROJECT['email addresses of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_3123,How many students are not involved in any behavior incident?,return students ;return incidents of  #1 ;return #1 where  #2 is behavior ;return #1 besides #3 ;return number of  #4,"[""SELECT['students']"", ""PROJECT['incidents of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is behavior']"", ""DISCARD['#1', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'comparative', 'discard', 'aggregate']",train
SPIDER_train_3124,Find the last names of teachers who are not involved in any detention.,return teachers ;return #1 involved in any detention ;return #1 besides #2 ;return last names of  #3,"[""SELECT['teachers']"", ""FILTER['#1', 'involved in any detention']"", ""DISCARD['#1', '#2']"", ""PROJECT['last names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_3125,What are the line 1 of addresses shared by some students and some teachers?,return students ;return teachers ;return addresses ; return #3 of both #1 and  #2 ;return the  line 1 of #4,"[""SELECT['students']"", ""SELECT['teachers']"", ""SELECT['addresses']"", ""INTERSECTION['#3', '#1', '#2']"", ""PROJECT['the line 1 of #REF', '#4']""]","['select', 'select', 'select', 'intersection', 'project']",train
SPIDER_train_3126,Which assets have 2 parts and have less than 2 fault logs? List the asset id and detail.,"return assets ;return parts of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  2 ;return fault logs of  #1 ;return number of  #5 for each  #1 ;return #1 where #6 is  lower than 2 ;return #1 of  both #4 and  #7 ;return asset ids of  #8 ;return details of  #8 ;return #9 ,  #10","[""SELECT['assets']"", ""PROJECT['parts of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is 2']"", ""PROJECT['fault logs of #REF', '#1']"", ""GROUP['count', '#5', '#1']"", ""COMPARATIVE['#1', '#6', 'is lower than 2']"", ""INTERSECTION['#1', '#4', '#7']"", ""PROJECT['asset ids of #REF', '#8']"", ""PROJECT['details of #REF', '#8']"", ""UNION['#9', '#10']""]","['select', 'project', 'group', 'comparative', 'project', 'group', 'comparative', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_3127,How many assets does each maintenance contract contain? List the number and the contract id.,"return maintenance contracts ;return assets that  #1 contain ;return the  number of  #2 for each #1 ;return the  contract ids of #1 ;return #3 ,  #4","[""SELECT['maintenance contracts']"", ""PROJECT['assets that #REF contain', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['the contract ids of #REF', '#1']"", ""UNION['#3', '#4']""]","['select', 'project', 'group', 'project', 'union']",train
SPIDER_train_3128,How many assets does each third party company supply? List the count and the company id.,"return third party companies ;return assets of  #1 ;return number of #2 for each #1 ;return company  ids of  #1 ;return #3 ,   #4","[""SELECT['third party companies']"", ""PROJECT['assets of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['company ids of #REF', '#1']"", ""UNION['#3', '#4']""]","['select', 'project', 'group', 'project', 'union']",train
SPIDER_train_3129,Which third party companies have at least 2 maintenance engineers or have at least 2 maintenance contracts? List the company id and name.,"return third party companies ;return maintenance  engineers of #1 ;return maintenance  contracts of #1 ;return number of  #2 for each #1 ;return number of  #3 for each #1 ;return #1 where #4 is  at least 2 ;return #1 where #5 is  at least 2 ;return #6 ,  #7 ;return the  company ids of #8 ;return the  names of #8 ;return #9 ,  #10","[""SELECT['third party companies']"", ""PROJECT['maintenance engineers of #REF', '#1']"", ""PROJECT['maintenance contracts of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""GROUP['count', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is at least 2']"", ""COMPARATIVE['#1', '#5', 'is at least 2']"", ""UNION['#6', '#7']"", ""PROJECT['the company ids of #REF', '#8']"", ""PROJECT['the names of #REF', '#8']"", ""UNION['#9', '#10']""]","['select', 'project', 'project', 'group', 'group', 'comparative', 'comparative', 'union', 'project', 'project', 'union']",train
SPIDER_train_313,Find the names and publication dates of all catalogs that have catalog level number greater than 5.,"return catalogs ;return catalog level number of  #1 ;return #2 that  are  greater than  5 ;return names of  #3 ;return publication dates of  #3 ;return #4 ,   #5","[""SELECT['catalogs']"", ""AGGREGATE['count', '#1']"", ""FILTER['#2', 'that are greater than 5']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['publication dates of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'aggregate', 'filter', 'project', 'project', 'union']",train
SPIDER_train_3130,What is the name and id of the staff who recorded the fault log but has not contacted any visiting engineers?,"return staff ;return #1 who has recorded the   fault log ;return #1 who has contacted visiting engineers ;return #1 besides #3 ;return #1 in both #2 and #4 ;return name of #5 ;return id of #5 ;return #6 ,  #7","[""SELECT['staff']"", ""FILTER['#1', 'who has recorded the fault log']"", ""FILTER['#1', 'who has contacted visiting engineers']"", ""DISCARD['#1', '#3']"", ""INTERSECTION['#1', '#2', '#4']"", ""PROJECT['name of #REF', '#5']"", ""PROJECT['id of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'filter', 'filter', 'discard', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_3131,"Which engineer has visited the most times? Show the engineer id, first name and last name.","return engineer  ;return times #1 visited ;return number of  #2 for each  #1 ;return #1 where #3 is  most ;return id of  #4 ;return first name  of  #4 ;return last name  of  #4 ;return #5 ,  #6 ,   #7","[""SELECT['engineer']"", ""PROJECT['times #REF visited', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['id of #REF', '#4']"", ""PROJECT['first name of #REF', '#4']"", ""PROJECT['last name of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'project', 'union']",train
SPIDER_train_3132,Which parts have more than 2 faults? Show the part name and id.,"return parts ;return faults of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  higher than 2 ;return part name of #4 ;return part id of #4 ;return #5 ,  #6","[""SELECT['parts']"", ""PROJECT['faults of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 2']"", ""PROJECT['part name of #REF', '#4']"", ""PROJECT['part id of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3133,"List all every engineer's first name, last name, details and coresponding skill description.","return engineers ;return first names of  #1 ;return last names of  #1 ;return details of  #1 ;return skill descriptions of  #1 ;return #2 ,  #3 , #4 ,   #5","[""SELECT['engineers']"", ""PROJECT['first names of #REF', '#1']"", ""PROJECT['last names of #REF', '#1']"", ""PROJECT['details of #REF', '#1']"", ""PROJECT['skill descriptions of #REF', '#1']"", ""UNION['#2', '#3', '#4', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_3134,"For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description.","return parts ;return faults of  #1 ;return names of  #2 ;return skills required to  fix #2 ;return descriptions of  #4 ;return #3 ,   #5","[""SELECT['parts']"", ""PROJECT['faults of #REF', '#1']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['skills required to fix #REF', '#2']"", ""PROJECT['descriptions of #REF', '#4']"", ""UNION['#3', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_3135,How many assets can each parts be used in? List the part name and the number.,"return parts ;return assets #1 can be used in ;return number of  #2 for each #1 ;return part names of #1 ;return #4 ,  #3","[""SELECT['parts']"", ""PROJECT['assets #REF can be used in', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['part names of #REF', '#1']"", ""UNION['#4', '#3']""]","['select', 'project', 'group', 'project', 'union']",train
SPIDER_train_3136,What are all the fault descriptions and the fault status of all the faults recoreded in the logs?,"return logs ;return faults in #1 ;return fault  descriptions of  #2 ;return fault  statuses of  #2 ;return #3 ,  #4","[""SELECT['logs']"", ""PROJECT['faults in #REF', '#1']"", ""PROJECT['fault descriptions of #REF', '#2']"", ""PROJECT['fault statuses of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_3137,How many engineer visits are required at most for a single fault log? List the number and the log entry id.,"return fault logs ;return engineer visits that  was required for #1 ;return the  number of  #2 for each #1 ;return the  highest of #3 ;return #1 where #3 was the  highest ;return the  log  entry id of #5 ;return #6 ,  #4","[""SELECT['fault logs']"", ""PROJECT['engineer visits that was required for #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['max', '#3']"", ""COMPARATIVE['#1', '#3', 'was the highest']"", ""PROJECT['the log entry id of #REF', '#5']"", ""UNION['#6', '#4']""]","['select', 'project', 'group', 'aggregate', 'comparative', 'project', 'union']",train
SPIDER_train_3138,What are all the distinct last names of all the engineers?,return engineers ;return last names of  #1 ;return distinct #2,"[""SELECT['engineers']"", ""PROJECT['last names of #REF', '#1']"", ""PROJECT['distinct #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_3139,How many fault status codes are recorded in the fault log parts table?,return fault  log parts table ;return fault  status codes recorded in #1 ;return number of #2,"[""SELECT['fault log parts table']"", ""PROJECT['fault status codes recorded in #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_314,What are the name and publication date of the catalogs with catalog level number above 5?,"return catalogs ;return level numbers of  #1 ;return #1 where #2 is  higher than 5 ;return names of  #3 ;return publication dates of  #3 ;return #4 ,  #5","[""SELECT['catalogs']"", ""PROJECT['level numbers of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 5']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['publication dates of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3140,Which engineers have never visited to maintain the assets? List the engineer first name and last name.,"return engineers ;return #1 who  have  visited to maintain assets ;return #1 besides  #2 ;return first name  of  #3 ;return last name  of  #3 ;return #4 ,  #5","[""SELECT['engineers']"", ""FILTER['#1', 'who have visited to maintain assets']"", ""DISCARD['#1', '#2']"", ""PROJECT['first name of #REF', '#3']"", ""PROJECT['last name of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'discard', 'project', 'project', 'union']",train
SPIDER_train_3141,"List the asset id, details, make and model for every asset.","return assets ;return asset  ids of  #1 ;return details of  #1 ;return makes of  #1 ;return models of  #1 ;return #2 ,  #3 , #4 ,   #5","[""SELECT['assets']"", ""PROJECT['asset ids of #REF', '#1']"", ""PROJECT['details of #REF', '#1']"", ""PROJECT['makes of #REF', '#1']"", ""PROJECT['models of #REF', '#1']"", ""UNION['#2', '#3', '#4', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_3142,When was the first asset acquired?,return assets ;return the  first #1 ;return when  #2 was acquired,"[""SELECT['assets']"", ""AGGREGATE['min', '#1']"", ""PROJECT['when #REF was acquired', '#2']""]","['select', 'aggregate', 'project']",train
SPIDER_train_3143,Which part fault requires the most number of skills to fix? List part id and name.,"return parts ;return faults of #1 ;return skills that #2 requires to fix ;return number of  #3 for each #1 ;return #1 where #4 is highest ;return name of #5 ;return id of #5 ;return #7 ,  #6","[""SELECT['parts']"", ""PROJECT['faults of #REF', '#1']"", ""PROJECT['skills that #REF requires to fix', '#2']"", ""GROUP['count', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']"", ""PROJECT['name of #REF', '#5']"", ""PROJECT['id of #REF', '#5']"", ""UNION['#7', '#6']""]","['select', 'project', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_3144,Which kind of part has the least number of faults? List the part name.,return parts ;return faults of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  least ;return name of  #4,"[""SELECT['parts']"", ""PROJECT['faults of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_3145,"Among those engineers who have visited, which engineer makes the least number of visits? List the engineer id, first name and last name.","return engineers ;return #1 who  have  visited ;return number of visits for each #2 ;return #2 where #3 is  the least ;return engineer  id of #4 ;return first name  of #4 ;return last name  of #4 ;return #5 , #6 ,  #7","[""SELECT['engineers']"", ""FILTER['#1', 'who have visited']"", ""PROJECT['visits', '#2']"", ""GROUP['count', '#3', '#2']"", ""COMPARATIVE['#2', '#4', 'is the least']"", ""PROJECT['engineer id of #REF', '#5']"", ""PROJECT['first name of #REF', '#5']"", ""PROJECT['last name of #REF', '#5']"", ""UNION['#6', '#7', '#8']""]","['select', 'filter', 'project', 'group', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_3146,Which staff have contacted which engineers? List the staff name and the engineer first name and last name.,"return staff  ;return #1 who contacted engineers ;return staff  name of #2 ;return engineer contacted of #2 ;return first name of #4 ;return last name of #4 ;return #3 ,  #5 ,   #6","[""SELECT['staff']"", ""FILTER['#1', 'who contacted engineers']"", ""PROJECT['staff name of #REF', '#2']"", ""PROJECT['engineer contacted of #REF', '#2']"", ""PROJECT['first name of #REF', '#4']"", ""PROJECT['last name of #REF', '#4']"", ""UNION['#3', '#5', '#6']""]","['select', 'filter', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_3147,"Which fault log included the most number of faulty parts? List the fault log id, description and record time.","return fault  logs ;return fault  parts in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return fault  log id of  #4 ;return description of  #4 ;return record time of  #4 ;return #5 ,  #6 ,   #7","[""SELECT['fault logs']"", ""PROJECT['fault parts in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['fault log id of #REF', '#4']"", ""PROJECT['description of #REF', '#4']"", ""PROJECT['record time of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'project', 'union']",train
SPIDER_train_3148,Which skill is used in fixing the most number of faults? List the skill id and description.,"return skills ;return #1 used in fixing the  most number of  faults ;return the  skill  id of  #2 ;return the  description of  #2 ;return #3 ,  #4","[""SELECT['skills']"", ""FILTER['#1', 'used in fixing the most number of faults']"", ""PROJECT['the skill id of #REF', '#2']"", ""PROJECT['the description of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_3149,What are all the distinct asset models?,return asset models ;return distinct #1,"[""SELECT['asset models']"", ""PROJECT['distinct #REF', '#1']""]","['select', 'project']",train
SPIDER_train_315,What are the entry names of catalog with the attribute possessed by most entries.,return entries ;return number of  #1 for each attribute ;return attribute where #2 is  highest ;return entry names of catalog with  #3,"[""SELECT['entries']"", ""PROJECT['attribute', '#1']"", ""GROUP['count', '#1', '#2']"", ""PROJECT['attribute where #REF is highest', '#3']"", ""PROJECT['entry names of catalog with #REF', '#4']""]","['select', 'project', 'group', 'project', 'project']",train
SPIDER_train_3150,"List the all the assets make, model, details by the disposed date ascendingly.","return assets ;return make of #1 ;return model of #1 ;return details of #1 ;return disposed dates of #1 ;return #2 ,  #3 ,   #4 ;return #6 sorted by #5 ascendingly","[""SELECT['assets']"", ""PROJECT['make of #REF', '#1']"", ""PROJECT['model of #REF', '#1']"", ""PROJECT['details of #REF', '#1']"", ""PROJECT['disposed dates of #REF', '#1']"", ""UNION['#2', '#3', '#4']"", ""SORT['#6', '#5', 'ascendingly']""]","['select', 'project', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_3151,Which part has the least chargeable amount? List the part id and amount.,"return parts ;return amounts chargeable of #1 ;return #1 where #2 is  lowest ;return part  id of #3 ;return amount  chargeable of #3 ;return #4 ,  #5","[""SELECT['parts']"", ""PROJECT['amounts chargeable of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""PROJECT['part id of #REF', '#3']"", ""PROJECT['amount chargeable of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_3152,Which company started the earliest the maintenance contract? Show the company name.,return companies ;return maintenance contract of #1 ;return when  was  #2 started ;return #1 where #3 is lowest,"[""SELECT['companies']"", ""PROJECT['maintenance contract of #REF', '#1']"", ""PROJECT['when was #REF started', '#2']"", ""SUPERLATIVE['min', '#1', '#3']""]","['select', 'project', 'project', 'superlative']",train
SPIDER_train_3153,What is the name of the company who concluded its contracts most recently?,return companies ;return #1 who  concluded contracts most recently ;return description of  #2,"[""SELECT['companies']"", ""FILTER['#1', 'who concluded contracts most recently']"", ""PROJECT['name of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3154,Which gender makes up the majority of the staff?,return staffs ;return genders of #1 ;return number of  #1 for each #2 ;return #2 where #3 is  the  highest,"[""SELECT['staffs']"", ""PROJECT['genders of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""COMPARATIVE['#2', '#3', 'is the highest']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_3155,How many engineers did each staff contact? List both the contact staff name and number of engineers contacted.,"return staff  ;return engineers  #1 contacted ;return number of  #2 for each #1 ;return names of #1 ;return #4 ,  #3","[""SELECT['staff']"", ""PROJECT['engineers #REF contacted', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['names of #REF', '#1']"", ""UNION['#4', '#3']""]","['select', 'project', 'group', 'project', 'union']",train
SPIDER_train_3156,Which assets did not incur any fault log? List the asset model.,return assets ;return fault logs of #1 ;return number of  #2 for each #1 ;return #1 where #3 is higher than zero ;return #1 besides  #4 ;return asset models of #5,"[""SELECT['assets']"", ""PROJECT['fault logs of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than zero']"", ""DISCARD['#1', '#4']"", ""PROJECT['asset models of #REF', '#5']""]","['select', 'project', 'group', 'comparative', 'discard', 'project']",train
SPIDER_train_3157,list the local authorities and services provided by all stations.,"return stations ;return local authorities of  #1 ;return services provided by #1 ;return #2 ,  #3","[""SELECT['stations']"", ""PROJECT['local authorities of #REF', '#1']"", ""PROJECT['services provided by #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_3158,show all train numbers and names ordered by their time from early to late.,"return train ;return numbers of  #1 ;return names of  #1 ;return times of  #1 ;return #2 ,  #3 ;return #5 sorted by #4 from  early to late","[""SELECT['train']"", ""PROJECT['numbers of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['times of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#5', '#4', 'from early to late']""]","['select', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_3159,"Give me the times and numbers of all trains that go to Chennai, ordered by time.","return trains ;return #1 that  go to  Chennai ;return times of #2 ;return numbers of #2 ;return #3 ,  #4 ;return #5 sorted by #3","[""SELECT['trains']"", ""FILTER['#1', 'that go to Chennai']"", ""PROJECT['times of #REF', '#2']"", ""PROJECT['numbers of #REF', '#2']"", ""UNION['#3', '#4']"", ""SORT['#5', '#3']""]","['select', 'filter', 'project', 'project', 'union', 'sort']",train
SPIDER_train_316,Find the entry names of the catalog with the attribute that have the most entries.,return catalog ;return attribute of #1 ;return entries of #2 ;return the  number of  #3 ;return the  #1 where #4 is the   highest ;return the  entry names of #5,"[""SELECT['catalog']"", ""PROJECT['attribute of #REF', '#1']"", ""PROJECT['entries of #REF', '#2']"", ""AGGREGATE['count', '#3']"", ""COMPARATIVE['#1', '#4', 'is the highest']"", ""PROJECT['the entry names of #REF', '#5']""]","['select', 'project', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_3160,How many trains have 'Express' in their names?,return trains ;return names of  #1 ;return #1 where  #2 have  'Express ;return number of  #3,"[""SELECT['trains']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'have Express']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_3161,Find the number and time of the train that goes from Chennai to Guruvayur.,"return trains ;return #1 from  Chennai ;return #2 to  Guruvayur ;return number of  #3 ;return time of  #3 ;return #4 ,   #5","[""SELECT['trains']"", ""FILTER['#1', 'from Chennai']"", ""FILTER['#2', 'to Guruvayur']"", ""AGGREGATE['count', '#3']"", ""PROJECT['time of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'filter', 'aggregate', 'project', 'union']",train
SPIDER_train_3162,Find the number of trains starting from each origin.,return origins ;return trains starting from #1 ;return number of  #2 for each #1,"[""SELECT['origins']"", ""PROJECT['trains starting from #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_3163,Find the name of the train whose route runs through greatest number of stations.,return trains ;return routes of #1 ;return stations of #2 ;return number of  #3 for each #1 ;return #1 where #4 is highest ;return name of #5,"[""SELECT['trains']"", ""PROJECT['routes of #REF', '#1']"", ""PROJECT['stations of #REF', '#2']"", ""GROUP['count', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']"", ""PROJECT['name of #REF', '#5']""]","['select', 'project', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_3164,"Find the number of trains for each station, as well as the station network name and services.","return stations ;return trains of  #1 ;return number of #2 for each #1 ;return station network names of  #1 ;return services of  #1 ;return #3 ,   #4 , #5","[""SELECT['stations']"", ""PROJECT['trains of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['station network names of #REF', '#1']"", ""PROJECT['services of #REF', '#1']"", ""UNION['#3', '#4', '#5']""]","['select', 'project', 'group', 'project', 'project', 'union']",train
SPIDER_train_3165,What is the average high temperature for each day of week?,return days ;return #1 of the  week ;return temperatures of #2 ;return average high #3 for each #2,"[""SELECT['days']"", ""FILTER['#1', 'of the week']"", ""PROJECT['temperatures of #REF', '#2']"", ""GROUP['avg', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'filter', 'project', 'group', 'union']",train
SPIDER_train_3166,Give me the maximum low temperature and average precipitation at the Amersham station.,"return Amersham station ;return low temperatures at #1 ;return maximum of #2 ;return precipitation at #1 ;return average of #4 ;return #3 ,  #5","[""SELECT['Amersham station']"", ""PROJECT['low temperatures at #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""PROJECT['precipitation at #REF', '#1']"", ""AGGREGATE['avg', '#4']"", ""UNION['#3', '#5']""]","['select', 'project', 'aggregate', 'project', 'aggregate', 'union']",train
SPIDER_train_3167,Find names and times of trains that run through stations for the local authority Chiltern.,"return stations ;return #1 for the  local authority Chiltern ;return trains that run through #2 ;return names of #3 ;return times of #3 ;return #4 ,  #5","[""SELECT['stations']"", ""FILTER['#1', 'for the local authority Chiltern']"", ""PROJECT['trains that run through #REF', '#2']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['times of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_3168,How many different services are provided by all stations?,return stations ;return services provided by #1 ;return different #2 ;return number of #3,"[""SELECT['stations']"", ""PROJECT['services provided by #REF', '#1']"", ""PROJECT['different #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_3169,Find the id and local authority of the station with has the highest average high temperature.,"return station ;return high temperatures of  #1 ;return average of  #2 for each #1 ;return #1 where  #3 is  highest ;return id of  #4 ;return local authority of  #4 ;return #5 ,   #6","[""SELECT['station']"", ""PROJECT['high temperatures of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['id of #REF', '#4']"", ""PROJECT['local authority of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_317,What is the entry name of the most expensive catalog (in USD)?,return catalogs ;return most expensive of  #1 in USD ;return entry name of  #2,"[""SELECT['catalogs']"", ""PROJECT['most expensive of #REF in USD', '#1']"", ""PROJECT['entry name of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_3170,Find the id and local authority of the station whose maximum precipitation is higher than 50.,"return stations ;return maximum precipitation for each #1 ;return #1 where  #2 is  larger than 50 ;return id of  #3 ;return local authority of  #3 ;return #4 ,   #5","[""SELECT['stations']"", ""PROJECT['precipitation', '#1']"", ""GROUP['max', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is larger than 50']"", ""PROJECT['id of #REF', '#4']"", ""PROJECT['local authority of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3171,show the lowest low temperature and highest wind speed in miles per hour.,"return low temperatures ;return the lowest #1 ;return wind speeds ;return #3 in miles per hour ;return the highest #4 ;return #2 , #5","[""SELECT['low temperatures']"", ""AGGREGATE['min', '#1']"", ""SELECT['wind speeds']"", ""FILTER['#3', 'in miles per hour']"", ""AGGREGATE['max', '#4']"", ""UNION['#2', '#5']""]","['select', 'aggregate', 'select', 'filter', 'aggregate', 'union']",train
SPIDER_train_3172,Find the origins from which more than 1 train starts.,return origins ;return trains that  start from  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  more than  1,"[""SELECT['origins']"", ""PROJECT['trains that start from #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than 1']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_3173,Find the number of professors in accounting department.,return professors ;return departments of  #1 ;return #1 where  #2 is  accounting ;return number of #3,"[""SELECT['professors']"", ""PROJECT['departments of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is accounting']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_3174,How many professors are in the accounting dept?,return professors ;return #1 in accounting dept ;return number of  #2,"[""SELECT['professors']"", ""FILTER['#1', 'in accounting dept']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_3175,How many professors are teaching class with code ACCT-211?,return classes ;return codes of  #1 ;return #1 where  #2 is  ACCT-211 ;return professors teaching #3 ;return number of #4,"[""SELECT['classes']"", ""PROJECT['codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is ACCT-211']"", ""PROJECT['professors teaching #REF', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_3176,How many professors teach a class with the code ACCT-211?,return professors ;return classes of  #1 ;return codes of  #2 ;return #1 where  #3 is  ACCT-211 ;return number of #4,"[""SELECT['professors']"", ""PROJECT['classes of #REF', '#1']"", ""PROJECT['codes of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is ACCT-211']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'project', 'comparative', 'aggregate']",train
SPIDER_train_3177,What is the first and last name of the professor in biology department?,"return professors ;return departments of #1 ;return #1 where #2 is  biology ;return first name of #3 ;return last name of #3 ;return #4 ,  #5","[""SELECT['professors']"", ""PROJECT['departments of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is biology']"", ""PROJECT['first name of #REF', '#3']"", ""PROJECT['last name of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3178,What are the first and last name of all biology professors?,"return biology professors ;return first names of  #1 ;return last names of  #1 ;return #2 ,  #3","[""SELECT['biology professors']"", ""PROJECT['first names of #REF', '#1']"", ""PROJECT['last names of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_3179,What are the first names and date of birth of professors teaching course ACCT-211?,"return professors ;return courses that  #1 teach ;return #1 where ACCT-211 is  in #2 ;return first names of #3 ;return dates of birth of  #3 ;return #4 ,  #5","[""SELECT['professors']"", ""PROJECT['courses that #REF teach', '#1']"", ""COMPARATIVE['#1', '#2', '']"", ""PROJECT['first names of #REF', '#3']"", ""PROJECT['dates of birth of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_318,Find the entry name of the catalog with the highest price (in USD).,return catalog ;return price of  #1 in USD ;return #1 where  #2 is  the highest ;return entry name of  #3,"[""SELECT['catalog']"", ""PROJECT['price of #REF in USD', '#1']"", ""COMPARATIVE['#1', '#2', 'is the highest']"", ""PROJECT['entry name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3180,What are the first names and birthdates of the professors in charge of ACCT-211?,"return professors ;return #1 in charge of  ACCT-211 ;return first names of  #2 ;return birthdates of  #2 ;return #3 ,  #4","[""SELECT['professors']"", ""FILTER['#1', 'in charge of ACCT-211']"", ""PROJECT['first names of #REF', '#2']"", ""PROJECT['birthdates of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_3181,How many classes are professor whose last name is Graztevski has?,return professor ;return last names of  #1 ;return #1 where  #2 is Graztevski ;return classes of  #3 ;return number of  #4,"[""SELECT['professor']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Graztevski']"", ""PROJECT['classes of #REF', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_3182,How many classes does the professor whose last name is Graztevski teach?,return professors ;return last names of  #1 ;return #1 where  #2 is  Graztevski ;return classes of  #3 ;return number of #4,"[""SELECT['professors']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Graztevski']"", ""PROJECT['classes of #REF', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_3183,What is the code of the school where the accounting department belongs to?,return schools ;return departments of  #1 ;return #1 where #2 is  accounting ;return code of  #3,"[""SELECT['schools']"", ""PROJECT['departments of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is accounting']"", ""PROJECT['code of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3184,What is the school code of the accounting department?,return school codes ;return departments with #1 ;return #1 where #2 is  accounting department,"[""SELECT['school codes']"", ""PROJECT['departments with #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is accounting department']""]","['select', 'project', 'comparative']",train
SPIDER_train_3185,"How many credits does course CIS-220 have, and what its description?","return course CIS-220 ;return credits of  #1 ;return descriptions of  #1 ;return #2 ,   #3","[""SELECT['course CIS-220']"", ""PROJECT['credits of #REF', '#1']"", ""PROJECT['descriptions of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_3186,What is the description for the CIS-220 and how many credits does it have?,"return CIS-220 ;return description for #1 ;return credits of #1 ;return number of #3 ;return #2 , #4","[""SELECT['CIS-220']"", ""PROJECT['description for #REF', '#1']"", ""PROJECT['credits of #REF', '#1']"", ""AGGREGATE['count', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'aggregate', 'union']",train
SPIDER_train_3187,what is the address of history department?,return history department ;return address of  #1,"[""SELECT['history department']"", ""PROJECT['address of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_3188,Where is the history department?,return departments ;return #1 which are  history ;return Where is  #2,"[""SELECT['departments']"", ""FILTER['#1', 'which are history']"", ""PROJECT['Where is #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3189,How many different locations does the school with code BUS has?,return schools ;return codes of  #1 ;return #1 where  #2 is BUS ;return locations of  #3 ;return different #4 ;return number of  #5,"[""SELECT['schools']"", ""PROJECT['codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is BUS']"", ""PROJECT['locations of #REF', '#3']"", ""PROJECT['different #REF', '#4']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'aggregate']",train
SPIDER_train_319,What is the level name of the cheapest catalog (in USD)?,return catalogs ;return price of #1 ;return #2 in USD ;return #1 where #3 is  the  lowest ;return the  level name of #4,"[""SELECT['catalogs']"", ""PROJECT['price of #REF', '#1']"", ""FILTER['#2', 'in USD']"", ""COMPARATIVE['#1', '#3', 'is the lowest']"", ""PROJECT['the level name of #REF', '#4']""]","['select', 'project', 'filter', 'comparative', 'project']",train
SPIDER_train_3190,What are the different locations of the school with the code BUS?,return school ;return code of #1 ;return #1 where #2 is BUS ;return the  locations of #3,"[""SELECT['school']"", ""PROJECT['code of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is BUS']"", ""PROJECT['the locations of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3191,How many different locations does each school have?,return schools ;return locations of  #1 ;return different #2 ;return number of #3 for each #1,"[""SELECT['schools']"", ""PROJECT['locations of #REF', '#1']"", ""PROJECT['different #REF', '#2']"", ""GROUP['count', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_3192,Count different addresses of each school.,return schools ;return different addresses of #1 ;return number of  #2 for each #1,"[""SELECT['schools']"", ""PROJECT['different addresses of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_3193,Find the description and credit for the course QM-261?,return course QM-261 ;return the description and credit for the  #1,"[""SELECT['course QM-261']"", ""PROJECT['the description and credit for the #REF', '#1']""]","['select', 'project']",train
SPIDER_train_3194,What is the course description and number of credits for QM-261?,"return the  course QM-261 ;return the  course description of #1 ;return the  number of credits of  #1 ;return #2 ,  #3","[""SELECT['the course QM-261']"", ""PROJECT['the course description of #REF', '#1']"", ""PROJECT['credits of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_3195,Find the number of departments in each school.,return schools ;return departments in #1 ;return number of #2 for each #1,"[""SELECT['schools']"", ""PROJECT['departments in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_3196,How many departments are in each school?,return schools ;return departments in #1 ;return number of  #2 for each  #1,"[""SELECT['schools']"", ""PROJECT['departments in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_3197,Find the number of different departments in each school whose number of different departments is less than 5.,return schools ;return different departments  of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  less than  5 ;return different departments  of #4 ;return number of  #5 for each #4,"[""SELECT['schools']"", ""PROJECT['different departments of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is less than 5']"", ""PROJECT['different departments of #REF', '#4']"", ""GROUP['count', '#5', '#4']"", ""UNION['#4', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'group', 'union']",train
SPIDER_train_3198,How many different departments are there in each school that has less than 5 apartments?,return schools ;return apartments of  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  lower than 5 ;return departments of  #4 ;return different #5 ;return number of #6,"[""SELECT['schools']"", ""PROJECT['apartments of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is lower than 5']"", ""PROJECT['departments of #REF', '#4']"", ""PROJECT['different #REF', '#5']"", ""AGGREGATE['count', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'aggregate']",train
SPIDER_train_3199,How many sections does each course has?,return courses ;return sections of  #1 ;return number of  #2 for each  #1,"[""SELECT['courses']"", ""PROJECT['sections of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_32,List the official name and status of the city with the largest population.,"return cities ;return populations of  #1 ;return #1 where  #2 is highest ;return official name of  #3 ;return status of  #3 ;return #4 ,  #5","[""SELECT['cities']"", ""PROJECT['populations of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['official name of #REF', '#3']"", ""PROJECT['status of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_320,Find the level name of the catalog with the lowest price (in USD).,return catalogs ;return prices of  #1 ;return #2 in USD ;return #1 where  #3 is  lowest ;return level of  #4 ;return name of  #5,"[""SELECT['catalogs']"", ""PROJECT['prices of #REF', '#1']"", ""FILTER['#2', 'in USD']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['level of #REF', '#4']"", ""PROJECT['name of #REF', '#5']""]","['select', 'project', 'filter', 'superlative', 'project', 'project']",train
SPIDER_train_3200,How many sections does each course have?,return courses ;return sections of  #1 ;return the number of #2 for each #1,"[""SELECT['courses']"", ""PROJECT['sections of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_3201,What is the total credit does each department offer?,return departments ;return credit #1 offer ;return sum of  #2 for each  #1,"[""SELECT['departments']"", ""PROJECT['credit #REF offer', '#1']"", ""GROUP['sum', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_3202,How many credits does the department offer?,return department ;return credits #1 offers ;return the number of #2,"[""SELECT['department']"", ""PROJECT['credits #REF offers', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_3203,Find the number of classes offered for all class rooms that held at least 2 classes.,return class rooms ;return number of classes that  #1 held ;return #1 where  #2 is  at least 2 ;return number of classes #3 offered,"[""SELECT['class rooms']"", ""PROJECT['classes that #REF held', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 2']"", ""PROJECT['classes #REF offered', '#4']"", ""GROUP['count', '#5', '#4']"", ""UNION['#4', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'group', 'union']",train
SPIDER_train_3204,"For each classroom with at least 2 classes, how many classes are offered?",return classrooms ;return classes offered in #1 ;return number of #2 for each #1 ;return #1 where  #3 is  at least 2 ;return classes offered in #4 ;return number of #5 for each #4,"[""SELECT['classrooms']"", ""PROJECT['classes offered in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 2']"", ""PROJECT['classes offered in #REF', '#4']"", ""GROUP['count', '#5', '#4']"", ""UNION['#4', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'group', 'union']",train
SPIDER_train_3205,Find the number of classes in each department.,return departments ;return classes in #1 ;return number of #2 for each #1,"[""SELECT['departments']"", ""PROJECT['classes in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_3206,How many classes are held in each department?,return departments ;return classes held in #1 ;return number of #2 for each #1,"[""SELECT['departments']"", ""PROJECT['classes held in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_3207,Find the number of classes in each school.,return schools ;return classes in #1 ;return number of #2 for each #1,"[""SELECT['schools']"", ""PROJECT['classes in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_3208,How many classes exist for each school?,return schools ;return classes of  #1 ;return number of #2 for each #1,"[""SELECT['schools']"", ""PROJECT['classes of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_3209,What is the number of professors for different school?,return schools ;return professors of #1 ;return number of  #2 for each #1,"[""SELECT['schools']"", ""PROJECT['professors of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_321,What are the average and minimum price (in Euro) of all products?,"return products ;return prices of  #1 in Euro ;return average of  #2 ;return minimum of  #2 ;return #3 ,  #4","[""SELECT['products']"", ""PROJECT['prices of #REF in Euro', '#1']"", ""AGGREGATE['avg', '#2']"", ""AGGREGATE['min', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_3210,How many different professors are there for the different schools?,return schools ;return professors of #1 ;return the  number of  different #2 for each #1,"[""SELECT['schools']"", ""PROJECT['professors of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_3211,Find the count and code of the job has most employees.,"return jobs ;return employees of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return employees of  #4 ;return number of  #5 ;return code of  #4 ;return #6 ,  #7","[""SELECT['jobs']"", ""PROJECT['employees of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['employees of #REF', '#4']"", ""AGGREGATE['count', '#5']"", ""PROJECT['code of #REF', '#4']"", ""UNION['#6', '#7']""]","['select', 'project', 'group', 'superlative', 'project', 'aggregate', 'project', 'union']",train
SPIDER_train_3212,What is the count and code of the job with the most employee?,"return employees ;return jobs of #1 ;return number of  #1 for each #2 ;return the   highest of #3 ;return #2 where #3 is  #4 ;return the   code of #5 ;return #4 ,  #6","[""SELECT['employees']"", ""PROJECT['jobs of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""AGGREGATE['max', '#3']"", ""COMPARATIVE['#2', '#3', 'is #4']"", ""PROJECT['the code of #REF', '#5']"", ""UNION['#4', '#6']""]","['select', 'project', 'group', 'aggregate', 'comparative', 'project', 'union']",train
SPIDER_train_3213,Which school has the smallest amount of professors?,return schools ;return professors of #1 ;return number of  #2 for each #1 ;return #1 where #3 is lowest,"[""SELECT['schools']"", ""PROJECT['professors of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_3214,Which school has the fewest professors?,return school ;return professor of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  fewest,"[""SELECT['school']"", ""PROJECT['professor of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is fewest']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_3215,Find the number of professors with a Ph.D. degree in each department.,return departments ;return professors of  #1 ;return degrees of  #2 ;return #2 where  #3 is  Ph.D. ;return number of #4 for each #1,"[""SELECT['departments']"", ""PROJECT['professors of #REF', '#1']"", ""PROJECT['degrees of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is Ph.D.']"", ""GROUP['count', '#4', '#1']"", ""UNION['#1', '#5']""]","['select', 'project', 'project', 'comparative', 'group', 'union']",train
SPIDER_train_3216,How many professors have a Ph.D. in each department?,return departments ;return professors of  #1 ;return #2 that  have  a Ph.D. ;return number of  #3 for each  #1,"[""SELECT['departments']"", ""PROJECT['professors of #REF', '#1']"", ""FILTER['#2', 'that have a Ph.D.']"", ""GROUP['count', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'filter', 'group', 'union']",train
SPIDER_train_3217,Find the number of students for each department.,return departments ;return students of #1 ;return number of  #2 for each  #1,"[""SELECT['departments']"", ""PROJECT['students of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_3219,Find the total number of hours have done for all students in each department.,return departments ;return students of #1 ;return hours that  #2 have done ;return number of  #3 for each #2 ;return sum of #4 for each #1,"[""SELECT['departments']"", ""PROJECT['students of #REF', '#1']"", ""PROJECT['hours that #REF have done', '#2']"", ""GROUP['count', '#3', '#2']"", ""GROUP['sum', '#4', '#1']"", ""UNION['#1', '#5']""]","['select', 'project', 'project', 'group', 'group', 'union']",train
SPIDER_train_322,Give me the average and minimum price (in Euro) of the products.,"return products ;return prices of  #1 ;return #2 in Euro ;return average of  #3 ;return minimum of  #3 ;return #4 ,   #5","[""SELECT['products']"", ""PROJECT['prices of #REF', '#1']"", ""FILTER['#2', 'in Euro']"", ""AGGREGATE['avg', '#3']"", ""AGGREGATE['min', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'filter', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_3220,How many hours do the students spend studying in each department?,return departments ;return students in #1 ;return hours studying of  #2 ;return sum of  #3 for each  department,"[""SELECT['departments']"", ""PROJECT['students in #REF', '#1']"", ""PROJECT['hours studying of #REF', '#2']"", ""PROJECT['department', '#3']"", ""GROUP['sum', '#3', '#4']"", ""UNION['#4', '#5']""]","['select', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_3221,"Find the max, average, and minimum gpa of all students in each department.","return departments ;return students of  #1 ;return gpas of  #2 ;return max of  #3 for each  #1 ;return average of  #3 for each  #1 ;return minimum of  #3 for each  #1 ;return #4 ,  #5 ,   #6","[""SELECT['departments']"", ""PROJECT['students of #REF', '#1']"", ""PROJECT['gpas of #REF', '#2']"", ""GROUP['max', '#3', '#1']"", ""GROUP['avg', '#3', '#1']"", ""GROUP['min', '#3', '#1']"", ""UNION['#4', '#5', '#6']""]","['select', 'project', 'project', 'group', 'group', 'group', 'union']",train
SPIDER_train_3222,"What is the highest, lowest, and average student GPA for every department?","return departments ;return students of #1 ;return GPA of #2 ;return highest of #3 for each #1 ;return lowest of #3 for each #1 ;return average of #3 for each #1 ;return #4 ,  #5 ,   #6","[""SELECT['departments']"", ""PROJECT['students of #REF', '#1']"", ""PROJECT['GPA of #REF', '#2']"", ""GROUP['max', '#3', '#1']"", ""GROUP['min', '#3', '#1']"", ""GROUP['avg', '#3', '#1']"", ""UNION['#4', '#5', '#6']""]","['select', 'project', 'project', 'group', 'group', 'group', 'union']",train
SPIDER_train_3223,What is the name and the average gpa of department whose students have the highest average gpa?,"return departments ;return students of  #1 ;return gpas of  #2 ;return average  of  #3 for each  #1 ;return #1 where #4 is  highest ;return name of  #5 ;return students of  #5 ;return gpas of  #7 ;return average  of  #8 ;return #6 ,  #9","[""SELECT['departments']"", ""PROJECT['students of #REF', '#1']"", ""PROJECT['gpas of #REF', '#2']"", ""GROUP['avg', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']"", ""PROJECT['name of #REF', '#5']"", ""PROJECT['students of #REF', '#5']"", ""PROJECT['gpas of #REF', '#7']"", ""AGGREGATE['avg', '#8']"", ""UNION['#6', '#9']""]","['select', 'project', 'project', 'group', 'superlative', 'project', 'project', 'project', 'aggregate', 'union']",train
SPIDER_train_3224,"Which department has the highest average student GPA, and what is the average gpa?","return student gpas ;return the  average  of  #1 ;return the  highest of  #2 ;return the department that  has  #3 ;return #4 ,  #2","[""SELECT['student gpas']"", ""AGGREGATE['avg', '#1']"", ""AGGREGATE['max', '#2']"", ""PROJECT['the department that has #REF', '#3']"", ""UNION['#4', '#2']""]","['select', 'aggregate', 'aggregate', 'project', 'union']",train
SPIDER_train_3225,how many schools exist in total?,return schools ;return number of  #1,"[""SELECT['schools']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_3226,How many schools are there in the department?,return schools ;return #1 that  are  in the  department ;return number of  #2,"[""SELECT['schools']"", ""FILTER['#1', 'that are in the department']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_3227,How many different classes are there?,return classes ;return different #1 ;return number of #2,"[""SELECT['classes']"", ""PROJECT['different #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_3228,How many unique classes are offered?,return classes offered ;return unique #1 ;return number of  #2,"[""SELECT['classes offered']"", ""PROJECT['unique #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_3229,How many courses are offered?,return courses offered ;return number of  #1,"[""SELECT['courses offered']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_323,What is the product with the highest height? Give me the catalog entry name.,return products ;return heights of  #1 ;return #1 where #2 is  highest ;return catalog entry name of  #3,"[""SELECT['products']"", ""PROJECT['heights of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['catalog entry name of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_3230,What are the number of different course codes?,return course codes ;return number of  #1,"[""SELECT['course codes']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_3231,How many departments does the college has?,return college ;return departments in #1 ;return number of #2,"[""SELECT['college']"", ""PROJECT['departments in #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_3232,How many different departments are there?,return departments ;return different #1 ;return number of #2,"[""SELECT['departments']"", ""PROJECT['different #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_3233,How many courses are offered by the Computer Info. Systems department?,return departments ;return courses of  #1 ;return #2 where  #1 is  Computer Info Systems ;return number of #3,"[""SELECT['departments']"", ""PROJECT['courses of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Computer Info Systems']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_3234,How many courses does the department of Computer Information Systmes offer?,return courses ;return departments of  #1 ;return #1 where  #2 is  Computer Information Systmes ;return number of #3,"[""SELECT['courses']"", ""PROJECT['departments of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Computer Information Systmes']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_3235,How many sections does course ACCT-211 has?,return courses ;return sections of  #1 ;return #2 where  #1 is  ACCT-211 ;return number of #3,"[""SELECT['courses']"", ""PROJECT['sections of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is ACCT-211']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_3236,What is the number of different class sections offered in the course ACCT-211?,return ACCT-211 ;return class sections of #1 ;return different #2 ;return number of  #3,"[""SELECT['ACCT-211']"", ""PROJECT['class sections of #REF', '#1']"", ""PROJECT['different #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_3237,Find the total credits of all classes offered by each department.,return department ;return classes offered by #1 ;return credits of  #2 ;return sum of #3 for each #1,"[""SELECT['department']"", ""PROJECT['classes offered by #REF', '#1']"", ""PROJECT['credits of #REF', '#2']"", ""GROUP['sum', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_3238,What are the total number of credits offered by each department?,return departments ;return credits offered by #1 ;return total number of  #2,"[""SELECT['departments']"", ""PROJECT['credits offered by #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_3239,Find the name of the department that offers the largest number of credits of all classes.,return departments ;return classes of  #1 ;return credits of  #2 ;return number of #3 for each #1 ;return #1 where  #4 is  highest ;return name of  #5,"[""SELECT['departments']"", ""PROJECT['classes of #REF', '#1']"", ""PROJECT['credits of #REF', '#2']"", ""GROUP['count', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']"", ""PROJECT['name of #REF', '#5']""]","['select', 'project', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_324,Which catalog content has the highest height? Give me the catalog entry name.,return catalog content ;return heights of #1 ;return #1 where #2 is  highest ;return catalog entry name of #3,"[""SELECT['catalog content']"", ""PROJECT['heights of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['catalog entry name of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_3240,Which department offers the most credits all together?,return departments ;return credits #1 offer ;return sum of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['departments']"", ""PROJECT['credits #REF offer', '#1']"", ""GROUP['sum', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_3241,How many students enrolled in class ACCT-211?,return classes ;return students enrolled in #1 ;return #2 where  #1 is ACCT-211 ;return number of  #3,"[""SELECT['classes']"", ""PROJECT['students enrolled in #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is ACCT-211']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_3242,What are the total number of students enrolled in ACCT-211?,return students ;return #1 enrolled in ACCT-211 ;return number of  #2,"[""SELECT['students']"", ""FILTER['#1', 'enrolled in ACCT-211']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_3243,What is the first name of each student enrolled in class ACCT-211?,return students ;return classes #1 are  enrolled in ;return #1 where #2 is  ACCT-211 ;return first names of  #3,"[""SELECT['students']"", ""PROJECT['classes #REF are enrolled in', '#1']"", ""COMPARATIVE['#1', '#2', 'is ACCT-211']"", ""PROJECT['first names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3244,What are the first names of all students in course ACCT-211?,return students ;return courses of  #1 ;return #1 where #2 is  ACCT-211 ;return first names of  #3,"[""SELECT['students']"", ""PROJECT['courses of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is ACCT-211']"", ""PROJECT['first names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3245,What is the first name of students enrolled in class ACCT-211 and got grade C?,return students ;return classes #1 are  enrolled in ;return #1 where #2 is  ACCT-211 ;return grade of  #3 ;return #1 where #4 is  C ;return first names of  #5,"[""SELECT['students']"", ""PROJECT['classes #REF are enrolled in', '#1']"", ""COMPARATIVE['#1', '#2', 'is ACCT-211']"", ""PROJECT['grade of #REF', '#3']"", ""COMPARATIVE['#1', '#4', 'is C']"", ""PROJECT['first names of #REF', '#5']""]","['select', 'project', 'comparative', 'project', 'comparative', 'project']",train
SPIDER_train_3246,What are the first names of all students who took ACCT-211 and received a C?,return students ;return the  #1 who  took ACCT-211 ;return #2 who  receive a C ;return the  first names of  #3,"[""SELECT['students']"", ""PROJECT['the #REF who took ACCT-211', '#1']"", ""FILTER['#2', 'who receive a C']"", ""PROJECT['the first names of #REF', '#3']""]","['select', 'project', 'filter', 'project']",train
SPIDER_train_3247,Find the total number of employees.,return employees ;return number of #1,"[""SELECT['employees']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_3248,How many employees are there all together?,return employees ;return number of #1,"[""SELECT['employees']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_3249,How many professors do have a Ph.D. degree?,return professors ;return degree of  #1 ;return #1 where  #2 is Ph.D. ;return the  number of  #3,"[""SELECT['professors']"", ""PROJECT['degree of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Ph.D.']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_325,Find the name of the product that has the smallest capacity.,return product ;return capacity of  #1 ;return #1 where  #2 is  smallest ;return name of  #3,"[""SELECT['product']"", ""PROJECT['capacity of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_3250,What is the total number of professors with a Ph.D. ?,return professors ;return #1 with a Ph.D. ;return the  total number of  #2,"[""SELECT['professors']"", ""FILTER['#1', 'with a Ph.D.']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_3251,How many students are enrolled in the class taught by some professor from the accounting department?,return departments ;return professors of  #1 ;return #2 where  #1 is  accounting ;return class of  #3 ;return students of  #4 ;return number of of  #5,"[""SELECT['departments']"", ""PROJECT['professors of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is accounting']"", ""PROJECT['class of #REF', '#3']"", ""PROJECT['students of #REF', '#4']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'aggregate']",train
SPIDER_train_3252,How many students are enrolled in some classes that are taught by an accounting professor?,return accounting professors ;return classes of  #1 ;return students enrolled in #2 ;return number of of  #3,"[""SELECT['accounting professors']"", ""PROJECT['classes of #REF', '#1']"", ""PROJECT['students enrolled in #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_3253,What is the name of the department that has the largest number of students enrolled?,return departments ;return students enrolled in #1 ;return the   number of  #2 for each #1 ;return #1 where #3 is  the   largest ;return the   name of #4,"[""SELECT['departments']"", ""PROJECT['students enrolled in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the largest']"", ""PROJECT['the name of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_3254,What is the name of the department with the most students enrolled?,return departments ;return students of #1 ;return number of  #2 enrolled for each #1 ;return #1 where #3 is highest,"[""SELECT['departments']"", ""PROJECT['students of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_3255,list names of all departments ordered by their names.,return departments ;return names of  #1 ;return #2 sorted by #2,"[""SELECT['departments']"", ""PROJECT['names of #REF', '#1']"", ""SORT['#2', '#2']""]","['select', 'project', 'sort']",train
SPIDER_train_3256,What are the names of all departments in alphabetical order?,return departments ;return names of  #1 ;return #2 sorted by alphabetical,"[""SELECT['departments']"", ""PROJECT['names of #REF', '#1']"", ""SORT['#2', '#2', 'alphabetical']""]","['select', 'project', 'sort']",train
SPIDER_train_3257,List the codes of all courses that take place in room KLR209.,return courses ;return rooms of  #1 ;return #1 where #2 is  KLR209 ;return codes of  #3,"[""SELECT['courses']"", ""PROJECT['rooms of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is KLR209']"", ""PROJECT['codes of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3258,What are the codes of all the courses that are located in room KLR209?,return courses ;return rooms of #1 ;return #1 where #2 is KLR209 ;return codes of #3,"[""SELECT['courses']"", ""PROJECT['rooms of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is KLR209']"", ""PROJECT['codes of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3259,List the first name of all employees with job code PROF ordered by their date of birth.,return employees ;return job codes of  #1 ;return #1 where  #2 is PROF ;return first names of  #3 ;return dates of  birth of #3 ;return #4 sorted by #5,"[""SELECT['employees']"", ""PROJECT['job codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is PROF']"", ""PROJECT['first names of #REF', '#3']"", ""PROJECT['dates of birth of #REF', '#3']"", ""SORT['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'sort']",train
SPIDER_train_326,Which catalog content has the smallest capacity? Return the catalog entry name.,return catalogs ;return contents of #1 ;return capacities of #2 ;return #2 where #3 is  the  smallest ;return the  catalog entry name of #4,"[""SELECT['catalogs']"", ""PROJECT['contents of #REF', '#1']"", ""PROJECT['capacities of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is the smallest']"", ""PROJECT['the catalog entry name of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_3260,What are the first names of all employees that are professors ordered by date of birth?,return employees ;return #1 that  are  professors ;return the  dates of  birth of #2 ;return #2 sorted by #3 ;return the  first names of  #4,"[""SELECT['employees']"", ""FILTER['#1', 'that are professors']"", ""PROJECT['the dates of birth of #REF', '#2']"", ""SORT['#2', '#3']"", ""PROJECT['the first names of #REF', '#4']""]","['select', 'filter', 'project', 'sort', 'project']",train
SPIDER_train_3261,Find the first names and offices of all professors sorted by alphabetical order of their first name.,"return professors ;return first names of #1 ;return offices of #1 ;return #2 ,  #3 ;return #4 sorted by #2 in  alphabetical order","[""SELECT['professors']"", ""PROJECT['first names of #REF', '#1']"", ""PROJECT['offices of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#4', '#2', 'in alphabetical order']""]","['select', 'project', 'project', 'union', 'sort']",train
SPIDER_train_3262,What are the first names and office locations for all professors sorted alphabetically by first name?,"return professors ;return first  names of  #1 ;return offices of  #2 ;return location of  #3 ;return #2 ,  #4 ;return #5 sorted by #2 alphabetically","[""SELECT['professors']"", ""PROJECT['first names of #REF', '#1']"", ""PROJECT['offices of #REF', '#2']"", ""PROJECT['location of #REF', '#3']"", ""UNION['#2', '#4']"", ""SORT['#5', '#2', 'alphabetically']""]","['select', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_3263,What is the first and last name of the oldest employee?,"return employees ;return #1 that  is  oldest ;return first name of #2 ;return last name of #2 ;return #3 ,  #4","[""SELECT['employees']"", ""FILTER['#1', 'that is oldest']"", ""PROJECT['first name of #REF', '#2']"", ""PROJECT['last name of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_3264,What are the first and last names of the employee with the earliest date of birth?,"return employees ;return dates of birth of  #1 ;return #1 where #2 is  the   earliest ;return first name of #3 ;return last name of #3 ;return #4 ,  #5","[""SELECT['employees']"", ""PROJECT['dates of birth of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the earliest']"", ""PROJECT['first name of #REF', '#3']"", ""PROJECT['last name of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3265,"What is the first, last name, gpa of the youngest one among students whose GPA is above 3?","return students ;return GPA of  #1 ;return #1 where #2 is  higher than 3 ;return youngest #3 ;return first names of  #4 ;return last names of  #4 ;return gpa of  #4 ;return #5 ,  #6 ,   #7","[""SELECT['students']"", ""PROJECT['GPA of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 3']"", ""PROJECT['youngest #REF', '#3']"", ""PROJECT['first names of #REF', '#4']"", ""PROJECT['last names of #REF', '#4']"", ""PROJECT['gpa of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_3266,"What is the first and last name of the youngest student with a GPA above 3, and what is their GPA?","return students ;return GPA  of #1 ;return #1 where #2 is  above 3 ;return the  youngest #3 ;return the  first name of #4 ;return the  last name of #4 ;return the  GPA  of #4 ;return #5 ,  #6 ,   #7","[""SELECT['students']"", ""PROJECT['GPA of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is above 3']"", ""PROJECT['the youngest #REF', '#3']"", ""PROJECT['the first name of #REF', '#4']"", ""PROJECT['the last name of #REF', '#4']"", ""PROJECT['the GPA of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_3267,What is the first name of students who got grade C in any class?,return students ;return #1 who  got grade C in any class ;return the  first name of  #2,"[""SELECT['students']"", ""FILTER['#1', 'who got grade C in any class']"", ""PROJECT['the first name of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3268,What are the first names of all students who got a grade C in a class?,return students ;return #1 who  got grade C in class ;return first names of  all #2,"[""SELECT['students']"", ""FILTER['#1', 'who got grade C in class']"", ""PROJECT['first names of all #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3269,What is the name of department where has the smallest number of professors?,return departments ;return professors of #1 ;return number of  #2 for each #1 ;return #1 where #3 is lowest ;return name of #4,"[""SELECT['departments']"", ""PROJECT['professors of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_327,"Find the names of all the products whose stock number starts with ""2"".",return products ;return stock number of  #1 ;return #1 where  #2 starts with  2 ;return names of  #3,"[""SELECT['products']"", ""AGGREGATE['count', '#1']"", ""COMPARATIVE['#1', '#2', 'starts with 2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'aggregate', 'comparative', 'project']",train
SPIDER_train_3270,What is the name of the department with the fewest professors?,return departments ;return professors in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  lowest ;return name of  #4,"[""SELECT['departments']"", ""PROJECT['professors in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_3271,What is the name of department where has the largest number of professors with a Ph.D. degree?,return departments ;return professors of #1 ;return #2 that  have a Ph.D. degree ;return number of  #3 for each #1 ;return #1 where #4 is  highest ;return name of #5,"[""SELECT['departments']"", ""PROJECT['professors of #REF', '#1']"", ""FILTER['#2', 'that have a Ph.D. degree']"", ""GROUP['count', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']"", ""PROJECT['name of #REF', '#5']""]","['select', 'project', 'filter', 'group', 'superlative', 'project']",train
SPIDER_train_3272,Which department has the most professors with a Ph.D.?,return departments ;return professors in #1 ;return #2 with Ph.D. ;return number of  #3 for each  #1 ;return #1 where #4 is  highest,"[""SELECT['departments']"", ""PROJECT['professors in #REF', '#1']"", ""FILTER['#2', 'with Ph.D.']"", ""GROUP['count', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']""]","['select', 'project', 'filter', 'group', 'superlative']",train
SPIDER_train_3273,What are the first names of the professors who do not teach a class.,return professors ;return #1 who  teach a class ;return #1 besides  #2 ;return first names of  #3,"[""SELECT['professors']"", ""FILTER['#1', 'who teach a class']"", ""DISCARD['#1', '#2']"", ""PROJECT['first names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_3274,What are the first names of all professors not teaching any classes?,return classes ;return professors of  #1 ;return professors besides  #2 ;return the  first names of  #3,"[""SELECT['classes']"", ""PROJECT['professors of #REF', '#1']"", ""SELECT['professors']"", ""DISCARD['#3', '#2']"", ""PROJECT['the first names of #REF', '#4']""]","['select', 'project', 'select', 'discard', 'project']",train
SPIDER_train_3275,What is the first names of the professors from the history department who do not teach a class.,return professors ;return departments of  #1 ;return #1 where #2 is  history ;return #3 who  do not  teach a class ;return first names of  #4,"[""SELECT['professors']"", ""PROJECT['departments of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is history']"", ""FILTER['#3', 'who do not teach a class']"", ""PROJECT['first names of #REF', '#4']""]","['select', 'project', 'comparative', 'filter', 'project']",train
SPIDER_train_3276,What are the first names of all history professors who do not teach?,return history professors ;return #1 that do teach ;return #1 besides  #2 ;return first names of #3,"[""SELECT['history professors']"", ""FILTER['#1', 'that do teach']"", ""DISCARD['#1', '#2']"", ""PROJECT['first names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_3277,What is the last name and office of the professor from the history department?,"return professors ;return departments of #1 ;return #1 where #2 is  history ;return last name of #3 ;return office of #3 ;return #4 , #5","[""SELECT['professors']"", ""PROJECT['departments of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is history']"", ""PROJECT['last name of #REF', '#3']"", ""PROJECT['office of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3278,What are the last name and office of all history professors?,"return history professors ;return last names of  #1 ;return offices of  #1 ;return #2 ,  #3","[""SELECT['history professors']"", ""PROJECT['last names of #REF', '#1']"", ""PROJECT['offices of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_3279,What is department name and office for the professor whose last name is Heffington?,"return professor ;return #1 whose last name  is  Heffington ;return department name  of #2 ;return office of #2 ;return #3 ,  #4","[""SELECT['professor']"", ""FILTER['#1', 'whose last name is Heffington']"", ""PROJECT['department name of #REF', '#2']"", ""PROJECT['office of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_328,"Which catalog contents have a product stock number that starts from ""2""? Show the catalog entry names.",return catalogs ;return contents of #1 ;return product stock numbers of #2 ;return #1 where #3 starts from  2 ;return entry names of #4,"[""SELECT['catalogs']"", ""PROJECT['contents of #REF', '#1']"", ""PROJECT['product stock numbers of #REF', '#2']"", ""FILTER['#1', 'where #3 starts from 2']"", ""PROJECT['entry names of #REF', '#4']""]","['select', 'project', 'project', 'filter', 'project']",train
SPIDER_train_3280,What is the name of the department and office location for the professor with the last name of Heffington?,"return professors ;return last names of #1 ;return #1 where #2 is  Heffington ;return department of #3 ;return name  of #4 ;return office location of #3 ;return #5 , #6","[""SELECT['professors']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Heffington']"", ""PROJECT['department of #REF', '#3']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['office location of #REF', '#3']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_3281,Find the last name and hire date of the professor who is in office DRE 102.,"return professors ;return #1 who  is  in office DRE 102 ;return last name of  #2 ;return hire date of  #2 ;return #3 ,   #4","[""SELECT['professors']"", ""FILTER['#1', 'who is in office DRE 102']"", ""PROJECT['last name of #REF', '#2']"", ""PROJECT['hire date of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_3282,"What is the last name of the professor whose office is located in DRE 102, and when were they hired?","return professors ;return offices of #1 ;return #1 where #2 is  located in DRE 102 ;return last name of #3 ;return when  #3 were hired ;return #4 , #5","[""SELECT['professors']"", ""PROJECT['offices of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is located in DRE 102']"", ""PROJECT['last name of #REF', '#3']"", ""PROJECT['when #REF were hired', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3283,What is the code of the course which the student whose last name is Smithson took?,return students ;return last names of  #1 ;return #1 where #2 is  Smithson ;return courses #3 took ;return codes of  #4,"[""SELECT['students']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Smithson']"", ""PROJECT['courses #REF took', '#3']"", ""PROJECT['codes of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_3284,What are the course codes for every class that the student with the last name Smithson took?,return students ;return last names of #1 ;return #1 where #2 is Smithson ;return classes of #3 ;return course codes of #4,"[""SELECT['students']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Smithson']"", ""PROJECT['classes of #REF', '#3']"", ""PROJECT['course codes of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_3285,What are the description and credit of the course which the student whose last name is Smithson took?,"return students ;return last names of #1 ;return #1 where #2 is  Smithson ;return course #3 took ;return description of #4 ;return credit of #4 ;return #5 ,  #6","[""SELECT['students']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Smithson']"", ""PROJECT['course #REF took', '#3']"", ""PROJECT['description of #REF', '#4']"", ""PROJECT['credit of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_3286,"How many credits is the course that the student with the last name Smithson took, and what is its description?","return students ;return last names of  #1 ;return #1 where  #2 is  Smithson ;return courses of  #3 ;return credits of  #4 ;return description of  #4 ;return #5 ,   #6","[""SELECT['students']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Smithson']"", ""PROJECT['courses of #REF', '#3']"", ""PROJECT['credits of #REF', '#4']"", ""PROJECT['description of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_3287,How many professors who has a either Ph.D. or MA degree?,return professors ;return degrees of  #1 ;return #1 where  #2 is  Ph.D. ;return #1 where  #2 is  MA ;return #3 or  #4 ;return number of #5,"[""SELECT['professors']"", ""PROJECT['degrees of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Ph.D.']"", ""COMPARATIVE['#1', '#2', 'is MA']"", ""UNION['#3', '#4']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'aggregate']",train
SPIDER_train_3288,How many professors attained either Ph.D. or Masters degrees?,return professors ;return degrees of  #1 ;return #1 where  #2 is  Ph.D. ;return #1 where  #2 is  Masters ;return #3 or  #4 ;return number of #5,"[""SELECT['professors']"", ""PROJECT['degrees of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Ph.D.']"", ""COMPARATIVE['#1', '#2', 'is Masters']"", ""UNION['#3', '#4']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'aggregate']",train
SPIDER_train_3289,How many professors who are from either Accounting or Biology department?,return professors ;return departments of  #1 ;return #1 where  #2 is Accounting ;return #1 where  #2 is Biology ;return #3 or #4 ;return number of  #5,"[""SELECT['professors']"", ""PROJECT['departments of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Accounting']"", ""COMPARATIVE['#1', '#2', 'is Biology']"", ""UNION['#3', '#4']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'aggregate']",train
SPIDER_train_329,Find the names of catalog entries with level number 8.,return catalog entries ;return #1 with  level number 8 ;return names of  #2,"[""SELECT['catalog entries']"", ""FILTER['#1', 'with level number 8']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3290,What is the number of professors who are in the Accounting or Biology departments?,return professors ;return #1 who are in Accounting department ;return number of  #2 ;return #1 who are in Biology department ;return number of  #4 ;return #3 or  #5,"[""SELECT['professors']"", ""FILTER['#1', 'who are in Accounting department']"", ""AGGREGATE['count', '#2']"", ""FILTER['#1', 'who are in Biology department']"", ""AGGREGATE['count', '#4']"", ""UNION['#3', '#5']""]","['select', 'filter', 'aggregate', 'filter', 'aggregate', 'union']",train
SPIDER_train_3291,Find the first name of the professor who is teaching two courses with code CIS-220 and QM-261.,return professors ;return courses of #1 ;return code of #2 ;return #1 where #3 is CIS-220 ;return #1 where #3 is QM-261 ;return #1 in  both #4 and  #5 ;return first name of #6,"[""SELECT['professors']"", ""PROJECT['courses of #REF', '#1']"", ""PROJECT['code of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is CIS-220']"", ""COMPARATIVE['#1', '#3', 'is QM-261']"", ""INTERSECTION['#1', '#4', '#5']"", ""PROJECT['first name of #REF', '#6']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_3292,What is the first name of the professor who is teaching CIS-220 and QM-261?,return CIS-220 ;return QM-261 ;return professor ; return #3 of both #1 and  #2 ;return the  first name of #3,"[""SELECT['CIS-220']"", ""SELECT['QM-261']"", ""SELECT['professor']"", ""INTERSECTION['#3', '#1', '#2']"", ""PROJECT['the first name of #REF', '#4']""]","['select', 'select', 'select', 'intersection', 'project']",train
SPIDER_train_3293,Find the first name of student who is taking classes from accounting and Computer Info. Systems departments,return students ;return classes #1 are  taking ;return departments of  #2 ;return #1 where #3 is  Computer Info Systems ;return #1 where #3 is  accounting ;return #1 of  both #4 and  #5 ;return first name of  #6,"[""SELECT['students']"", ""PROJECT['classes #REF are taking', '#1']"", ""PROJECT['departments of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Computer Info Systems']"", ""COMPARATIVE['#1', '#3', 'is accounting']"", ""INTERSECTION['#1', '#4', '#5']"", ""PROJECT['first name of #REF', '#6']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_3294,What are the first names of all students taking accoutning and Computer Information Systems classes?,return students ;return classes #1 are  taking ;return #1 where #2 is  accoutning ;return #1 where #2 is  Computer Information Systems ;return #1 of  both #3 and  #4 ;return first names of  #5,"[""SELECT['students']"", ""PROJECT['classes #REF are taking', '#1']"", ""COMPARATIVE['#1', '#2', 'is accoutning']"", ""COMPARATIVE['#1', '#2', 'is Computer Information Systems']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['first names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_3295,What is the average gpa of the students enrolled in the course with code ACCT-211?,return courses ;return code of #1 ;return #1 where #2 is  ACCT-211 ;return students enrolled in #3 ;return gpas of #4 ;return average of #5,"[""SELECT['courses']"", ""PROJECT['code of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is ACCT-211']"", ""PROJECT['students enrolled in #REF', '#3']"", ""PROJECT['gpas of #REF', '#4']"", ""AGGREGATE['avg', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'aggregate']",train
SPIDER_train_3296,What is the average GPA of students taking ACCT-211?,return students ;return #1 taking ACCT-211 ;return GPA of  #2 ;return average of  #3,"[""SELECT['students']"", ""FILTER['#1', 'taking ACCT-211']"", ""PROJECT['GPA of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_3297,"What is the first name, gpa and phone number of the top 5 students with highest gpa?","return students ;return gpas of #1 ;return #1 where #2 are in the  top 5 ;return first names of #3 ;return gpas of #3 ;return phone numbers of #3 ;return #4 ,  #5 ,   #6","[""SELECT['students']"", ""PROJECT['gpas of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'are in the top 5']"", ""PROJECT['first names of #REF', '#3']"", ""PROJECT['gpas of #REF', '#3']"", ""PROJECT['phone numbers of #REF', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_3298,"What is the first name, GPA, and phone number of the students with the top 5 GPAs?","return students ;return GPAs of #1 ;return #1 where #2 are top 5 ;return first names of #3 ;return GPAs of #3 ;return phone numbers of #3 ;return #4 ,  #5 ,   #6","[""SELECT['students']"", ""PROJECT['GPAs of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'are top 5']"", ""PROJECT['first names of #REF', '#3']"", ""PROJECT['GPAs of #REF', '#3']"", ""PROJECT['phone numbers of #REF', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_3299,What is the department name of the students with lowest gpa belongs to?,return students ;return gpas of  #1 ;return #1 where #2 is  lowest ;return departments of  #3 ;return names of  #4,"[""SELECT['students']"", ""PROJECT['gpas of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""PROJECT['departments of #REF', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'superlative', 'project', 'project']",train
SPIDER_train_33,What is the official name and status of the city with the most residents?,"return cities ;return residents of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest ;return official name of #4 ;return statuses of #4 ;return #5 ,  #6","[""SELECT['cities']"", ""PROJECT['residents of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['official name of #REF', '#4']"", ""PROJECT['statuses of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_330,What are the names of catalog entries with level number 8?,return catalog entries ;return #1 with level number 8 ;return the  names of  #2,"[""SELECT['catalog entries']"", ""FILTER['#1', 'with level number 8']"", ""PROJECT['the names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3300,What is the name of the department with the student that has the lowest GPA?,return departments ;return students of #1 ;return GPAS of #2 ;return #1 where #3 is  the   lowest ;return name of #4,"[""SELECT['departments']"", ""PROJECT['students of #REF', '#1']"", ""PROJECT['GPAS of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is the lowest']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_3301,Find the first name and gpa of the students whose gpa is lower than the average gpa of all students.,"return students  ;return gpa  of #1 ;return average of #2 ;return #1 where #2 is lower than #3 ;return first name of #4 ;return gpa  of #4 ;return #5 ,  #6","[""SELECT['students']"", ""PROJECT['gpa of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is lower than #3']"", ""PROJECT['first name of #REF', '#4']"", ""PROJECT['gpa of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3302,What is the first name and GPA of every student that has a GPA lower than average?,"return students ;return GPA  of  #1 ;return average of  #2 ;return #1 where #2 is  lower than #3 ;return first names of  #4 ;return GPA  of  #4 ;return #5 ,  #6","[""SELECT['students']"", ""PROJECT['GPA of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is lower than #3']"", ""PROJECT['first names of #REF', '#4']"", ""PROJECT['GPA of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3303,Find the name and address of the department that has the highest number of students.,"return departments ;return students of #1 ;return number of  #2 for each #1 ;return #1 where #3 is the  highest ;return name of #4 ;return address of #4 ;return #5 ,  #6","[""SELECT['departments']"", ""PROJECT['students of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['address of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3304,What is the name and address of the department with the most students?,"return departments ;return students of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest ;return name of #4 ;return address of #4 ;return #5 ,  #6","[""SELECT['departments']"", ""PROJECT['students of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['address of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_3305,"Find the name, address, number of students in the departments that have the top 3 highest number of students.","return departments ;return students  of #1 ;return number of  #2 for each #1 ;return the  3 highest of #3 ;return #1 where #3 is equal to any of #4 ;return names of #5 ;return addresses of #5 ;return #6 ,  #7 ,   #4","[""SELECT['departments']"", ""PROJECT['students of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['max', '#3']"", ""COMPARATIVE['#1', '#3', 'is equal to any of #4']"", ""PROJECT['names of #REF', '#5']"", ""PROJECT['addresses of #REF', '#5']"", ""UNION['#6', '#7', '#4']""]","['select', 'project', 'group', 'aggregate', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3306,"What is the name, address, and number of students in the departments that have the 3 most students?","return departments ;return students of #1 ;return number of  #2 for each #1 ;return the  3 highest of #3 ;return #1 where #3 is equal to any of #4 ;return names of #5 ;return addresses of #5 ;return students of #5 ;return number of  #8 for each #5 ;return #6 ,  #7 ,   #9","[""SELECT['departments']"", ""PROJECT['students of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['max', '#3']"", ""COMPARATIVE['#1', '#3', 'is equal to any of #4']"", ""PROJECT['names of #REF', '#5']"", ""PROJECT['addresses of #REF', '#5']"", ""PROJECT['students of #REF', '#5']"", ""GROUP['count', '#8', '#5']"", ""UNION['#6', '#7', '#9']""]","['select', 'project', 'group', 'aggregate', 'comparative', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_3307,Find the first name and office of the professor who is in the history department and has a Ph.D. degree.,"return professors ;return #1 in the history department ;return #2 that has Ph.D. degree ;return first name of #3 ;return office of #3 ;return #4 , #5","[""SELECT['professors']"", ""FILTER['#1', 'in the history department']"", ""FILTER['#2', 'that has Ph.D. degree']"", ""PROJECT['first name of #REF', '#3']"", ""PROJECT['office of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'filter', 'project', 'project', 'union']",train
SPIDER_train_3308,What are the first names and office of the professors who are in the history department and have a Ph.D?,"return professors ;return departments of  #1 ;return #1 where #2 is  history ;return #3 who  have  a Ph.D ;return first names of  #4 ;return offices of  #4 ;return #5 ,  #6","[""SELECT['professors']"", ""PROJECT['departments of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is history']"", ""FILTER['#3', 'who have a Ph.D']"", ""PROJECT['first names of #REF', '#4']"", ""PROJECT['offices of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'filter', 'project', 'project', 'union']",train
SPIDER_train_3309,Find the first names of all instructors who have taught some course and the course code.,"return courses ;return instructors who  have  taught #1 ;return first name of  #2 ;return course code of  #1 ;return #3 ,   #4","[""SELECT['courses']"", ""PROJECT['instructors who have taught #REF', '#1']"", ""PROJECT['first name of #REF', '#2']"", ""PROJECT['course code of #REF', '#1']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_331,Find the names of the products with length smaller than 3 or height greater than 5.,return products ;return length of  #1 ;return #1 where  #2 is  less than  3 ;return height of  #1 ;return #1 where  #4 is  greater than  5 ;return #3 or  #5 ;return names of  #6,"[""SELECT['products']"", ""PROJECT['length of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is less than 3']"", ""PROJECT['height of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is greater than 5']"", ""UNION['#3', '#5']"", ""PROJECT['names of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'comparative', 'union', 'project']",train
SPIDER_train_3310,What are the first names of all teachers who have taught a course and the corresponding course codes?,"return teachers ;return courses of #1 ;return number of  #2 for each #1 ;return #1 where #3 is at least one ;return courses of #4 ;return course codes of #5 ;return first names of #4 ;return #7 ,  #6","[""SELECT['teachers']"", ""PROJECT['courses of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least one']"", ""PROJECT['courses of #REF', '#4']"", ""PROJECT['course codes of #REF', '#5']"", ""PROJECT['first names of #REF', '#4']"", ""UNION['#7', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_3311,Find the first names of all instructors who have taught some course and the course description.,"return courses ;return instructors of  #1 ;return first names of  #2 ;return description of  #1 ;return #3 ,  #4","[""SELECT['courses']"", ""PROJECT['instructors of #REF', '#1']"", ""PROJECT['first names of #REF', '#2']"", ""PROJECT['description of #REF', '#1']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_3312,What are the first names of all teachers who have taught a course and the corresponding descriptions?,"return teachers ;return #1 who have taught a course ;return first names of #2 ;return courses of #2 ;return descriptions of #4 ;return #3 ,  #5","[""SELECT['teachers']"", ""FILTER['#1', 'who have taught a course']"", ""PROJECT['first names of #REF', '#2']"", ""PROJECT['courses of #REF', '#2']"", ""PROJECT['descriptions of #REF', '#4']"", ""UNION['#3', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_3313,Find the first names and offices of all instructors who have taught some course and also find the course description.,"return instructors ;return courses of #1 ;return number of  #2 for each #1 ;return #1 where #3 is at least one ;return first names of #4 ;return offices of #4 ;return courses of #4 ;return course descriptions of #7 ;return #5 ,  #6 ,   #8","[""SELECT['instructors']"", ""PROJECT['courses of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least one']"", ""PROJECT['first names of #REF', '#4']"", ""PROJECT['offices of #REF', '#4']"", ""PROJECT['courses of #REF', '#4']"", ""PROJECT['course descriptions of #REF', '#7']"", ""UNION['#5', '#6', '#8']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_3314,"What are the first names, office locations of all lecturers who have taught some course?","return lecturers ;return #1 who  have  taught some course ;return first names of  #2 ;return offices of  #2 ;return locations of  #4 ;return #3 ,  #5","[""SELECT['lecturers']"", ""FILTER['#1', 'who have taught some course']"", ""PROJECT['first names of #REF', '#2']"", ""PROJECT['offices of #REF', '#2']"", ""PROJECT['locations of #REF', '#4']"", ""UNION['#3', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_3315,Find the first names and offices of all instructors who have taught some course and the course description and the department name.,"return instructors ;return #1 who  taught some course  ;return first names of  #2 ;return offices of  #2 ;return courses #2 taught ;return course  descriptions of  #5 ;return departments of  #5 ;return names of  #7 ;return #3 ,  #4 ,   #6 , #8","[""SELECT['instructors']"", ""FILTER['#1', 'who taught some course']"", ""PROJECT['first names of #REF', '#2']"", ""PROJECT['offices of #REF', '#2']"", ""PROJECT['courses #REF taught', '#2']"", ""PROJECT['course descriptions of #REF', '#5']"", ""PROJECT['departments of #REF', '#5']"", ""PROJECT['names of #REF', '#7']"", ""UNION['#3', '#4', '#6', '#8']""]","['select', 'filter', 'project', 'project', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_3316,"What are the first names, office locations, and departments of all instructors, and also what are the descriptions of the courses they teach?","return instructors ;return first names of  #1 ;return offices of  #1 ;return locations of  #3 ;return departments of  #1 ;return courses of  #1 ;return descriptions of  #6 ;return #2 ,  #4 ,   #5 , #7","[""SELECT['instructors']"", ""PROJECT['first names of #REF', '#1']"", ""PROJECT['offices of #REF', '#1']"", ""PROJECT['locations of #REF', '#3']"", ""PROJECT['departments of #REF', '#1']"", ""PROJECT['courses of #REF', '#1']"", ""PROJECT['descriptions of #REF', '#6']"", ""UNION['#2', '#4', '#5', '#7']""]","['select', 'project', 'project', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_3317,Find names of all students who took some course and the course description.,"return students ;return #1 who  took some course  ;return names of  #2 ;return courses of  #2 ;return descriptions of  #4 ;return #3 ,  #5","[""SELECT['students']"", ""FILTER['#1', 'who took some course']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['courses of #REF', '#2']"", ""PROJECT['descriptions of #REF', '#4']"", ""UNION['#3', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_3318,What are the names of all students who took a class and the corresponding course descriptions?,"return students ;return #1 who  took a class ;return names of  #2 ;return courses of  #2 ;return descriptions of  #4 ;return #3 ,  #5","[""SELECT['students']"", ""FILTER['#1', 'who took a class']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['courses of #REF', '#2']"", ""PROJECT['descriptions of #REF', '#4']"", ""UNION['#3', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_3319,Find names of all students who took some course and got A or C.,return students ;return #1 who  took some course ;return #2 who  got A ;return #2 who  got C ;return #3 or  #4 ;return names of  #5,"[""SELECT['students']"", ""FILTER['#1', 'who took some course']"", ""FILTER['#2', 'who got A']"", ""FILTER['#2', 'who got C']"", ""UNION['#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'filter', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_332,Which catalog contents have length below 3 or above 5? Find the catalog entry names.,return catalog contents ;return length of #1 ;return #1 where #2 is  lower than 3 ;return #1 where #2 is  higher than 5 ;return #3 or  #4 ;return catalog entry names of #5,"[""SELECT['catalog contents']"", ""PROJECT['length of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is lower than 3']"", ""COMPARATIVE['#1', '#2', 'is higher than 5']"", ""UNION['#3', '#4']"", ""PROJECT['catalog entry names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_3320,What are the names of all students taking a course who received an A or C?,"return students ;return #1 taking a course ;return #2 who  received an A ;return #2 who  received a C ;return #3 ,  #4 ;return names of  #5","[""SELECT['students']"", ""FILTER['#1', 'taking a course']"", ""FILTER['#2', 'who received an A']"", ""FILTER['#2', 'who received a C']"", ""UNION['#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'filter', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_3321,Find the first names of all professors in the Accounting department who is teaching some course and the class room.,"return courses ;return #1 in the   Accounting department ;return professors that  are teaching #2 ;return class rooms of #2 ;return first names of #3 ;return #5 ,  #4","[""SELECT['courses']"", ""FILTER['#1', 'in the Accounting department']"", ""PROJECT['professors that are teaching #REF', '#2']"", ""PROJECT['class rooms of #REF', '#2']"", ""PROJECT['first names of #REF', '#3']"", ""UNION['#5', '#4']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_3322,What are the first names of all Accounting professors who teach and what are the classrooms of the courses they teach?,"return Accounting professors ;return #1 who  teach  ;return first names of  #2 ;return courses #2 teach  ;return classrooms of  #4 ;return #3 ,  #5","[""SELECT['Accounting professors']"", ""FILTER['#1', 'who teach']"", ""PROJECT['first names of #REF', '#2']"", ""PROJECT['courses #REF teach', '#2']"", ""PROJECT['classrooms of #REF', '#4']"", ""UNION['#3', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_3323,Find the first names and degree of all professors who are teaching some class in Computer Info. Systems department.,"return the  Computer Info Systems department ;return classes of #1 ;return professors of #2 ;return first names of #3 ;return degrees of #3 ;return #4 ,  #5","[""SELECT['the Computer Info Systems department']"", ""PROJECT['classes of #REF', '#1']"", ""PROJECT['professors of #REF', '#2']"", ""PROJECT['first names of #REF', '#3']"", ""PROJECT['degrees of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_3324,What are the different first names and highest degree attained for professors teaching in the Computer Information Systems department?,"return professors ;return departments of  #1 ;return #1 where #2 is  Computer Information Systems ;return different first names of  #3 ;return highest degrees attained of  #3 ;return #4 ,  #5","[""SELECT['professors']"", ""PROJECT['departments of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Computer Information Systems']"", ""PROJECT['different first names of #REF', '#3']"", ""PROJECT['highest degrees attained of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3325,What is the last name of the student who got a grade A in the class with code 10018.,return classes ;return codes of #1 ;return #1 where #2 is equal to 10018 ;return students of #3 ;return grades of #4 ;return #4 where #5 is equal to A ;return last name of #6,"[""SELECT['classes']"", ""PROJECT['codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is equal to 10018']"", ""PROJECT['students of #REF', '#3']"", ""PROJECT['grades of #REF', '#4']"", ""COMPARATIVE['#4', '#5', 'is equal to A']"", ""PROJECT['last name of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_3326,What is the last name of the student who received an A in the class with the code 10018?,return classes ;return #1 with  the   code 10018 ;return the   students of #2 ;return #3 who received an A ;return the   last name of #4,"[""SELECT['classes']"", ""FILTER['#1', 'with the code 10018']"", ""PROJECT['the students of #REF', '#2']"", ""FILTER['#3', 'who received an A']"", ""PROJECT['the last name of #REF', '#4']""]","['select', 'filter', 'project', 'filter', 'project']",train
SPIDER_train_3327,Find the first name and office of history professor who did not get a Ph.D. degree.,"return professors ;return #1 of  history ;return #2 not  have  Ph.D. ;return first name of  #3 ;return office of  #3 ;return #4 ,   #5","[""SELECT['professors']"", ""FILTER['#1', 'of history']"", ""FILTER['#2', 'not have Ph.D.']"", ""PROJECT['first name of #REF', '#3']"", ""PROJECT['office of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'filter', 'project', 'project', 'union']",train
SPIDER_train_3328,What are the first names and offices of history professors who don't have Ph.D.s?,"return history professors ;return #1 with Ph.D.s ;return #1 besides  #2 ;return first names of  #3 ;return offices of  #3 ;return #4 ,  #5","[""SELECT['history professors']"", ""FILTER['#1', 'with Ph.D.s']"", ""DISCARD['#1', '#2']"", ""PROJECT['first names of #REF', '#3']"", ""PROJECT['offices of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'discard', 'project', 'project', 'union']",train
SPIDER_train_3329,Find the first names of professors who are teaching more than one class.,return professors ;return classes that  #1 are teaching ;return number of  #2 for each #1 ;return #1 where #3 is  more than  one ;return first names of #4,"[""SELECT['professors']"", ""PROJECT['classes that #REF are teaching', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than one']"", ""PROJECT['first names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_333,Find the name and attribute ID of the attribute definitions with attribute value 0.,"return attribute  definitions ;return attribute  values of  #1 ;return #1 where  #2 is  0 ;return name of  #3 ;return attribute  ID of  #3 ;return #4 ,   #5","[""SELECT['attribute definitions']"", ""PROJECT['attribute values of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 0']"", ""PROJECT['name of #REF', '#3']"", ""PROJECT['attribute ID of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3330,What are the first names of all professors who teach more than one class?,return professors ;return classes #1 teach ;return number of  #2 for each #1 ;return #1 where #3 is  higher than one ;return first names of #4,"[""SELECT['professors']"", ""PROJECT['classes #REF teach', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than one']"", ""PROJECT['first names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_3331,Find the first names of students who took exactly one class.,return students ;return classes of  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  one ;return first names of  #4,"[""SELECT['students']"", ""PROJECT['classes of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is one']"", ""PROJECT['first names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_3332,What are the first names of student who only took one course?,return students ;return courses #1 took ;return number of  #2 for each  #1 ;return #1 where #3 is  one ;return first name of  #4,"[""SELECT['students']"", ""PROJECT['courses #REF took', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is one']"", ""PROJECT['first name of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_3333,"Find the name of department that offers the class whose description has the word ""Statistics"".",return departments ;return classes of  #1 ;return descriptions of  #2 ;return #1 where  #3 has  the word Statistics ;return name of  #4,"[""SELECT['departments']"", ""PROJECT['classes of #REF', '#1']"", ""PROJECT['descriptions of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'has the word Statistics']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_3334,"What is the name of the department that offers a course that has a description including the word ""Statistics""?",return departments ;return courses in #1 ;return descriptions of #2 ;return #1 where #3 has  the word Statistics ;return name of #4,"[""SELECT['departments']"", ""PROJECT['courses in #REF', '#1']"", ""PROJECT['descriptions of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'has the word Statistics']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_3335,What is the first name of the student whose last name starting with the letter S and is taking ACCT-211 class?,return students ;return last names of  #1 ;return #1 where #2 start with the  letter S ;return classes of  #1 ;return #1 where #4 is  ACCT-211 ;return #1 of  both #3 and  #5 ;return first name  of  #6,"[""SELECT['students']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'start with the letter S']"", ""PROJECT['classes of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is ACCT-211']"", ""INTERSECTION['#1', '#3', '#5']"", ""PROJECT['first name of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'comparative', 'intersection', 'project']",train
SPIDER_train_3336,What is the first name of the student whose last name starts with the letter S and is taking ACCT-211?,return students ;return #1 that  are taking ACCT-211 ;return the   last names of #2 ;return #2 where #3 starts with  the   letter S ;return the   first name of #4,"[""SELECT['students']"", ""FILTER['#1', 'that are taking ACCT-211']"", ""PROJECT['the last names of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'starts with the letter S']"", ""PROJECT['the first name of #REF', '#4']""]","['select', 'filter', 'project', 'comparative', 'project']",train
SPIDER_train_3337,How many clubs are there?,return clubs ;return number of #1,"[""SELECT['clubs']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_3338,What is the total number of clubs?,return clubs ;return number of  #1,"[""SELECT['clubs']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_3339,List the distinct region of clubs in ascending alphabetical order.,return clubs ;return regions of  #1 ;return distinct #2 ;return #3 sorted by alphabetical order,"[""SELECT['clubs']"", ""PROJECT['regions of #REF', '#1']"", ""PROJECT['distinct #REF', '#2']"", ""SORT['#3', '#3', 'alphabetical order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_334,Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID.,"return attribute   definitions ;return attribute   values of  #1 ;return #1 where #2 is  0 ;return attribute   name of  #3 ;return attribute   ID of  #3 ;return #4 ,  #5","[""SELECT['attribute definitions']"", ""PROJECT['attribute values of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 0']"", ""PROJECT['attribute name of #REF', '#3']"", ""PROJECT['attribute ID of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3340,What are the different regions of clubs in ascending alphabetical order?,return clubs ;return different regions of  #1 ;return #2 in ascending alphabetical order,"[""SELECT['clubs']"", ""PROJECT['different regions of #REF', '#1']"", ""FILTER['#2', 'in ascending alphabetical order']""]","['select', 'project', 'filter']",train
SPIDER_train_3341,What is the average number of gold medals for clubs?,return clubs ;return number of  gold medals for #1 ;return average of  #2,"[""SELECT['clubs']"", ""PROJECT['gold medals for #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['avg', '#3']""]","['select', 'project', 'group', 'aggregate']",train
SPIDER_train_3342,What is the average number of gold medals for a club?,return clubs ;return gold medals of  #1 ;return number of  #2 for each  #1 ;return average of  #3,"[""SELECT['clubs']"", ""PROJECT['gold medals of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['avg', '#3']""]","['select', 'project', 'group', 'aggregate']",train
SPIDER_train_3343,What are the types and countries of competitions?,"return competitions ;return types of  #1 ;return countries of  #1 ;return #2 ,  #3","[""SELECT['competitions']"", ""PROJECT['types of #REF', '#1']"", ""PROJECT['countries of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_3344,What are the types of every competition and in which countries are they located?,"return competitions ;return types of  #1 ;return countries #1 are  located in ;return #2 ,  #3","[""SELECT['competitions']"", ""PROJECT['types of #REF', '#1']"", ""PROJECT['countries #REF are located in', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_3345,"What are the distinct years in which the competitions type is not ""Tournament""?",return competitions ;return #1 where type is  Tournament ;return #1 besides  #2 ;return distinct years of  #3,"[""SELECT['competitions']"", ""FILTER['#1', 'where type is Tournament']"", ""DISCARD['#1', '#2']"", ""PROJECT['distinct years of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_3346,What are the different years for all competitions that are not of type equal to tournament?,return competitions ;return type of  #1 ;return #1 where #2 is  not  tournament ;return different years for #3,"[""SELECT['competitions']"", ""PROJECT['type of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not tournament']"", ""PROJECT['different years for #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3347,What are the maximum and minimum number of silver medals for clubs.,"return clubs ;return silver medals of  #1 ;return number of  #2 ;return maximum of  #3 ;return minimum of  #3 ;return #4 ,  #5","[""SELECT['clubs']"", ""PROJECT['silver medals of #REF', '#1']"", ""AGGREGATE['count', '#2']"", ""AGGREGATE['max', '#3']"", ""AGGREGATE['min', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_3348,What are the maximum and minimum number of silver medals for all the clubs?,"return clubs ;return silver medals of  #1 ;return number of  #2 ;return maximum of  #3 ;return minimum of  #3 ;return #4 ,  #5","[""SELECT['clubs']"", ""PROJECT['silver medals of #REF', '#1']"", ""AGGREGATE['count', '#2']"", ""AGGREGATE['max', '#3']"", ""AGGREGATE['min', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_3349,How many clubs have total medals less than 10?,return clubs ;return medals of  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  lower than 10 ;return number of #4,"[""SELECT['clubs']"", ""PROJECT['medals of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is lower than 10']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'group', 'comparative', 'aggregate']",train
SPIDER_train_335,Find the name and capacity of products with price greater than 700 (in USD).,"return products ;return prices of  #1 ;return #1 where #2 is  higher than 700 USD ;return names of  #3 ;return capacities of  #3 ;return #4 ,  #5","[""SELECT['products']"", ""PROJECT['prices of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 700 USD']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['capacities of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3350,What is the total number of clubs that have less than 10 medals in total?,return clubs ;return medals of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  lower than 10 ;return number of  #4,"[""SELECT['clubs']"", ""PROJECT['medals of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is lower than 10']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'group', 'comparative', 'aggregate']",train
SPIDER_train_3351,List all club names in ascending order of start year.,return clubs ;return names of  #1 ;return start years of  #1 ;return #2 sorted by ascending order of  #3,"[""SELECT['clubs']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['start years of #REF', '#1']"", ""SORT['#2', '#3', 'ascending order of']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_3352,What are the names of all the clubs starting with the oldest?,return clubs ;return names of #1 ;return age of #1; return #2 sorted by #3 descending,"[""SELECT['clubs']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['age of #REF', '#1']"", ""SORT['#2', '#3', 'descending']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_3353,List all club names in descending alphabetical order.,return clubs ;return names of  #1 ;return #2 in descending alphabetical order,"[""SELECT['clubs']"", ""PROJECT['names of #REF', '#1']"", ""FILTER['#2', 'in descending alphabetical order']""]","['select', 'project', 'filter']",train
SPIDER_train_3354,What are the names of all the clubs ordered in descending alphabetical order?,return clubs ;return names of  #1 ;return #2 sorted by descending alphabetical order,"[""SELECT['clubs']"", ""PROJECT['names of #REF', '#1']"", ""SORT['#2', '#2', 'descending alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_3355,Please show the names and the players of clubs.,"return clubs ;return names of  #1 ;return players of  #1 ;return #2 ,  #3","[""SELECT['clubs']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['players of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_3356,What are the names and players of all the clubs?,return clubs ;return players of  all #1 ;return names of  #2,"[""SELECT['clubs']"", ""PROJECT['players of all #REF', '#1']"", ""PROJECT['names of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_3357,"Show the names of clubs that have players with position ""Right Wing"".",return clubs ;return players of  #1 ;return positions of  #2 ;return #1 where #3 is  Right Wing ;return names of  #4,"[""SELECT['clubs']"", ""PROJECT['players of #REF', '#1']"", ""PROJECT['positions of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Right Wing']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_3358,"What are the names of the clubs that have players in the position of ""Right Wing""?",return clubs ;return players of  #1 ;return positions of  #2 ;return #1 where #3 is  Right Wing ;return names of  #4,"[""SELECT['clubs']"", ""PROJECT['players of #REF', '#1']"", ""PROJECT['positions of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Right Wing']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_3359,"What is the average points of players from club with name ""AIB"".",return players ;return #1 from  club with name AIB ;return points of  #2 ;return average of  #3,"[""SELECT['players']"", ""FILTER['#1', 'from club with name AIB']"", ""PROJECT['points of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_336,Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.,"return catalogs ;return contents of  #1 ;return prices of  #2 ;return #2 where #3 is  higher than 700 dollars ;return catalog  entry names of  #4 ;return capacities of  #4 ;return #5 ,  #6","[""SELECT['catalogs']"", ""PROJECT['contents of #REF', '#1']"", ""PROJECT['prices of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is higher than 700 dollars']"", ""PROJECT['catalog entry names of #REF', '#4']"", ""PROJECT['capacities of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3360,"What is the average number of points for players from the ""AIB"" club?",return players ;return #1 from  the  AIB club ;return points for #2 ;return average number of  #3,"[""SELECT['players']"", ""FILTER['#1', 'from the AIB club']"", ""PROJECT['points for #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_3361,List the position of players and the average number of points of players of each position.,"return positions ;return players  of   #1 ;return points of   #2 ;return average of   #3 for each #1 ;return #1 ,  #4","[""SELECT['positions']"", ""PROJECT['players of #REF', '#1']"", ""PROJECT['points of #REF', '#2']"", ""GROUP['avg', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_3362,"For each position, what is the average number of points for players in that position?",return positions ;return players of  #1 ;return points of  #2 ;return average of  #3 for each #1,"[""SELECT['positions']"", ""PROJECT['players of #REF', '#1']"", ""PROJECT['points of #REF', '#2']"", ""GROUP['avg', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_3363,List the position of players with average number of points scored by players of that position bigger than 20.,return players  ;return positions of   #1 ;return points scored by #1 ;return number of  #3 for each #1 ;return the  average of   #4 for each #2 ;return #2 where #5 is  bigger than  20,"[""SELECT['players']"", ""PROJECT['positions of #REF', '#1']"", ""PROJECT['points scored by #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""GROUP['avg', '#4', '#2']"", ""COMPARATIVE['#2', '#5', 'is bigger than 20']""]","['select', 'project', 'project', 'group', 'group', 'comparative']",train
SPIDER_train_3364,What are the positions of players whose average number of points scored by that position is larger than 20?,return players ;return points of  #1 ;return average of  #2 for each  #1 ;return #1 where #3 is  larger than 20 ;return positions of  #4,"[""SELECT['players']"", ""PROJECT['points of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is larger than 20']"", ""PROJECT['positions of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_3365,List the types of competition and the number of competitions of each type.,"return types of  competition ;return competitions of  #1 ;return number of  #2 for each  #1 ;return #1 ,  #3","[""SELECT['types of competition']"", ""PROJECT['competitions of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_3366,What are the types of competition and number of competitions for that type?,return competitions ;return types of  #1 ;return number of  competitions for each  #2,"[""SELECT['competitions']"", ""PROJECT['types of #REF', '#1']"", ""PROJECT['competitions', '#2']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_3367,List the most common type of competition.,return competitions ;return types of #1 ;return number of  #1 for each #2 ;return #2 where #3 is  the  highest,"[""SELECT['competitions']"", ""PROJECT['types of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""COMPARATIVE['#2', '#3', 'is the highest']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_3368,What is the most common competition type?,return competitions ;return types of  #1 ;return most common #2,"[""SELECT['competitions']"", ""PROJECT['types of #REF', '#1']"", ""PROJECT['most common #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_3369,List the types of competition that have at most five competitions of that type.,return types of  competition ;return competitions of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at most five,"[""SELECT['types of competition']"", ""PROJECT['competitions of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at most five']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_337,Find the dates on which more than one revisions were made.,return dates ;return revisions made on  #1 ;return number of #2 ;return #1 where  #3 is  more than  one,"[""SELECT['dates']"", ""PROJECT['revisions made on #REF', '#1']"", ""AGGREGATE['count', '#2']"", ""COMPARATIVE['#1', '#3', 'is more than one']""]","['select', 'project', 'aggregate', 'comparative']",train
SPIDER_train_3370,What are the types of competition that have most 5 competitions for that type?,return competitions ;return types of  #1 ;return number of  #1 for each  #2 ;return #2 where #3 is  at most 5,"[""SELECT['competitions']"", ""PROJECT['types of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""COMPARATIVE['#2', '#3', 'is at most 5']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_3371,List the names of clubs that do not have any players.,return clubs ;return #1 with  players ;return #1 besides #2 ;return names of  #3,"[""SELECT['clubs']"", ""FILTER['#1', 'with players']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_3372,What are the names of all clubs that do not have any players?,return clubs ;return #1 that  do not  have  players ;return names of  #2,"[""SELECT['clubs']"", ""FILTER['#1', 'that do not have players']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3373,What are the positions with both players having more than 20 points and less than 10 points.,return positions ;return players of #1 ;return points  of #2 ;return #2 where #3 is  higher than 20 ;return #2 where #3 is  lower than 10 ;return #1 of both #4 and #5,"[""SELECT['positions']"", ""PROJECT['players of #REF', '#1']"", ""PROJECT['points of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is higher than 20']"", ""COMPARATIVE['#2', '#3', 'is lower than 10']"", ""INTERSECTION['#1', '#4', '#5']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection']",train
SPIDER_train_3374,What are the positions of both players that have more than 20 20 points and less than 10 points?,"return players ;return points  of #1 ;return #1 where #2 is higher than 20 ;return #1 where #2 is lower than 10 ;return positions of #3 ;return positions of #4 ;return #5 ,  #6","[""SELECT['players']"", ""PROJECT['points of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 20']"", ""COMPARATIVE['#1', '#2', 'is lower than 10']"", ""PROJECT['positions of #REF', '#3']"", ""PROJECT['positions of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3375,Show total points of all players.,return players ;return points of  #1 ;return sum of  #2,"[""SELECT['players']"", ""PROJECT['points of #REF', '#1']"", ""AGGREGATE['sum', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_3376,What is the total number of points for all players?,return players ;return points of  #1 ;return sum of  #2,"[""SELECT['players']"", ""PROJECT['points of #REF', '#1']"", ""AGGREGATE['sum', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_3377,how many different positions are there?,return positions ;return number of  different #1,"[""SELECT['positions']"", ""PROJECT['different #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_3378,How many different position for players are listed?,return players ;return positions of  #1 ;return #2 that  are  different ;return number of #3,"[""SELECT['players']"", ""PROJECT['positions of #REF', '#1']"", ""FILTER['#2', 'that are different']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'filter', 'aggregate']",train
SPIDER_train_3379,what are the name of players who get more than the average points.,return players ;return points of  #1 ;return average of  #2 ;return #1 where #2 is  higher than #3 ;return names of  #4,"[""SELECT['players']"", ""PROJECT['points of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_338,On which days more than one revisions were made on catalogs.,return days ;return catalog revisions made On #1 ;return number of  #2 for each #1 ;return #1 where #3 is  higher than one,"[""SELECT['days']"", ""PROJECT['catalog revisions made On #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than one']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_3380,What are the names of all players that got more than the average number of points?,return players ;return points of #1 ;return sum of #2 for each #1 ;return average of #3 ;return #1 where #3 is higher than #4 ;return names of #5,"[""SELECT['players']"", ""PROJECT['points of #REF', '#1']"", ""GROUP['sum', '#2', '#1']"", ""AGGREGATE['avg', '#3']"", ""COMPARATIVE['#1', '#3', 'is higher than #4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'group', 'aggregate', 'comparative', 'project']",train
SPIDER_train_3381,find the number of players whose points are lower than 30 in each position.,return positions ;return players of #1 ;return points of #2 ;return sum of #3 for each #2 ;return #2 where #4 is lower than 30 ;return number of  #5 for each #1,"[""SELECT['positions']"", ""PROJECT['players of #REF', '#1']"", ""PROJECT['points of #REF', '#2']"", ""GROUP['sum', '#3', '#2']"", ""COMPARATIVE['#2', '#4', 'is lower than 30']"", ""GROUP['count', '#5', '#1']"", ""UNION['#1', '#6']""]","['select', 'project', 'project', 'group', 'comparative', 'group', 'union']",train
SPIDER_train_3382,What is the number of players who have points less than 30 for each position?,return positions ;return players of  #1 ;return points of  #2 ;return #2 where #3 is  lower than 30 ;return number of  #4 for each  #1,"[""SELECT['positions']"", ""PROJECT['players of #REF', '#1']"", ""PROJECT['points of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is lower than 30']"", ""GROUP['count', '#4', '#1']"", ""UNION['#1', '#5']""]","['select', 'project', 'project', 'comparative', 'group', 'union']",train
SPIDER_train_3383,which country did participated in the most number of Tournament competitions?,return countries ;return Tournament competitions #1 participated in ;return number of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['countries']"", ""PROJECT['Tournament competitions #REF participated in', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_3384,what is the name of the country that participated in the most tournament competitions?,return countries ;return competitions #1 participated in ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return name of  #4,"[""SELECT['countries']"", ""PROJECT['competitions #REF participated in', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_3385,which countries did participated in both Friendly and Tournament type competitions.,return countries ;return competitions #1 participated in ;return types of  #2 ;return #1 where #3 is  Friendly ;return #1 where #3 is  Tournament ;return #1 of  both #4 and  #5,"[""SELECT['countries']"", ""PROJECT['competitions #REF participated in', '#1']"", ""PROJECT['types of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Friendly']"", ""COMPARATIVE['#1', '#3', 'is Tournament']"", ""INTERSECTION['#1', '#4', '#5']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection']",train
SPIDER_train_3386,What are the countries that participated in both friendly and tournament type competitions?,return countries ;return competitions of #1 ;return types of #2 ;return #1 where #3 is friendly ;return #1 where #3 is tournament ;return #1 in  both #4 and  #5,"[""SELECT['countries']"", ""PROJECT['competitions of #REF', '#1']"", ""PROJECT['types of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is friendly']"", ""COMPARATIVE['#1', '#3', 'is tournament']"", ""INTERSECTION['#1', '#4', '#5']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection']",train
SPIDER_train_3387,Find the countries that have never participated in any competition with Friendly type.,return countries ;return competitions of #1 ;return types of #2 ;return #1 where #3 is Friendly ;return #1 besides  #4,"[""SELECT['countries']"", ""PROJECT['competitions of #REF', '#1']"", ""PROJECT['types of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Friendly']"", ""DISCARD['#1', '#4']""]","['select', 'project', 'project', 'comparative', 'discard']",train
SPIDER_train_3388,What are the countries that have never participated in any friendly-type competitions?,return countries ;return competitions #1 participated in ;return #1 where #2 is  not friendly-type,"[""SELECT['countries']"", ""PROJECT['competitions #REF participated in', '#1']"", ""COMPARATIVE['#1', '#2', 'is not friendly-type']""]","['select', 'project', 'comparative']",train
SPIDER_train_3389,How many furniture components are there in total?,return furniture ;return components of  #1 ;return number of  #2,"[""SELECT['furniture']"", ""PROJECT['components of #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_339,How many products are there in the records?,return products ;return #1 in records ;return number of #2,"[""SELECT['products']"", ""FILTER['#1', 'in records']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_3390,Return the name and id of the furniture with the highest market rate.,return furniture ;return #1 that  has highest market rate ;return id of  #2 ;return name of  #2 ;return #3 or #4,"[""SELECT['furniture']"", ""FILTER['#1', 'that has highest market rate']"", ""PROJECT['id of #REF', '#2']"", ""PROJECT['name of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_3391,find the total market rate of the furnitures that have the top 2 market shares.,return furnitures ;return market  shares of #1 ;return the  2 highest of #2 ;return #1 where #2 is equal to any of #3 ;return market  rates of #4 ;return sum of #5,"[""SELECT['furnitures']"", ""PROJECT['market shares of #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""COMPARATIVE['#1', '#2', 'is equal to any of #3']"", ""PROJECT['market rates of #REF', '#4']"", ""AGGREGATE['sum', '#5']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'aggregate']",train
SPIDER_train_3392,Find the component amounts and names of all furnitures that have more than 10 components.,return furnitures ;return #1 that  have  more than  10 components ;return component amounts of  #2 ;return component names of  #2 ;return #3 and #4,"[""SELECT['furnitures']"", ""FILTER['#1', 'that have more than 10 components']"", ""PROJECT['component amounts of #REF', '#2']"", ""PROJECT['component names of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_3393,Find the name and component amount of the least popular furniture.,"return furnitures ;return the least popular #1 ;return name of  #2 ;return component amount of  #2 ;return #3 ,   #4","[""SELECT['furnitures']"", ""PROJECT['the least popular #REF', '#1']"", ""PROJECT['name of #REF', '#2']"", ""PROJECT['component amount of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_3394,Find the names of furnitures whose prices are lower than the highest price.,return furnitures ;return prices of  #1 ;return the highest #2 ;return #1 where  #2 is  lower than #3 ;return names of  #4,"[""SELECT['furnitures']"", ""PROJECT['prices of #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""COMPARATIVE['#1', '#2', 'is lower than #3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_3395,Which manufacturer has the most number of shops? List its name and year of opening.,"return manufacturers ;return shops of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return name of  #4 ;return year of  opening of #4 ;return #5 ,  #6","[""SELECT['manufacturers']"", ""PROJECT['shops of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['year of opening of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_3396,Find the average number of factories for the manufacturers that have more than 20 shops.,return manufacturers ;return #1 that have more than  20 shops ;return the number of factories for each #2 ;return Find the average of  #3,"[""SELECT['manufacturers']"", ""FILTER['#1', 'that have more than 20 shops']"", ""PROJECT['factories', '#2']"", ""GROUP['count', '#3', '#2']"", ""AGGREGATE['avg', '#4']""]","['select', 'filter', 'project', 'group', 'aggregate']",train
SPIDER_train_3397,List all manufacturer names and ids ordered by their opening year.,"return manufacturers ;return names of #1 ;return ids of #1 ;return opening years of #1 ;return #2 ,  #3 ;return #5 sorted by #4","[""SELECT['manufacturers']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['opening years of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#5', '#4']""]","['select', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_3398,Give me the name and year of opening of the manufacturers that have either less than 10 factories or more than 10 shops.,"return manufacturers ;return factories of  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  lower than 10 ;return shops of  #1 ;return number of #5 for each #1 ;return #1 where  #6 is  higher than 10 ;return #4 or  #7 ;return names of  #8 ;return years of  opening of #8 ;return #9 ,   #10","[""SELECT['manufacturers']"", ""PROJECT['factories of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is lower than 10']"", ""PROJECT['shops of #REF', '#1']"", ""GROUP['count', '#5', '#1']"", ""COMPARATIVE['#1', '#6', 'is higher than 10']"", ""UNION['#4', '#7']"", ""PROJECT['names of #REF', '#8']"", ""PROJECT['years of opening of #REF', '#8']"", ""UNION['#9', '#10']""]","['select', 'project', 'group', 'comparative', 'project', 'group', 'comparative', 'union', 'project', 'project', 'union']",train
SPIDER_train_3399,what is the average number of factories and maximum number of shops for manufacturers that opened before 1990.,"return manufacturers ;return #1 that  opened before 1990 ;return factories of #2 ;return the  number of  #3 for each #2 ;return the  average of #4 ;return shops of #2 ;return the  number of  #6 for each #2 ;return the  maximum of #7 ;return #5 ,  #8","[""SELECT['manufacturers']"", ""FILTER['#1', 'that opened before 1990']"", ""PROJECT['factories of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""AGGREGATE['avg', '#4']"", ""PROJECT['shops of #REF', '#2']"", ""GROUP['count', '#6', '#2']"", ""AGGREGATE['max', '#7']"", ""UNION['#5', '#8']""]","['select', 'filter', 'project', 'group', 'aggregate', 'project', 'group', 'aggregate', 'union']",train
SPIDER_train_34,Show the years and the official names of the host cities of competitions.,"return competitions ;return years of #1 ;return host cities of #1 ;return official names of #3 ;return #2 ,  #4","[""SELECT['competitions']"", ""PROJECT['years of #REF', '#1']"", ""PROJECT['host cities of #REF', '#1']"", ""PROJECT['official names of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_340,Find the total number of catalog contents.,return catalog ;return contents of  #1 ;return number of #2,"[""SELECT['catalog']"", ""PROJECT['contents of #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_3400,Find the id and number of shops for the company that produces the most expensive furniture.,"return furnitures ;return price of #1 ;return #1 where #2 is the  highest ;return company of #3 ;return id of #4 ;return shops of #4 ;return number of  #6 ;return #5 ,  #7","[""SELECT['furnitures']"", ""PROJECT['price of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the highest']"", ""PROJECT['company of #REF', '#3']"", ""PROJECT['id of #REF', '#4']"", ""PROJECT['shops of #REF', '#4']"", ""AGGREGATE['count', '#6']"", ""UNION['#5', '#7']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'aggregate', 'union']",train
SPIDER_train_3401,Find the number of funiture types produced by each manufacturer as well as the company names.,"return manufacturers ;return funiture types produced by #1 ;return number of  #2 for each  #1 ;return company names of  #1 ;return #3 ,  #4","[""SELECT['manufacturers']"", ""PROJECT['funiture types produced by #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['company names of #REF', '#1']"", ""UNION['#3', '#4']""]","['select', 'project', 'group', 'project', 'union']",train
SPIDER_train_3402,Give me the names and prices of furnitures which some companies are manufacturing.,"return companies ;return furnitures that  #1 are manufacturing ;return the  names of #2 ;return the  prices of #2 ;return #3 ,  #4","[""SELECT['companies']"", ""PROJECT['furnitures that #REF are manufacturing', '#1']"", ""PROJECT['the names of #REF', '#2']"", ""PROJECT['the prices of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_3403,Find the market shares and names of furnitures which no any company is producing in our records.,"return furnitures ;return companies of #1 ;return number of  #2 for each #1 ;return #1 where #3 is zero ;return market shares of #4 ;return names of #4 ;return #6 ,  #5","[""SELECT['furnitures']"", ""PROJECT['companies of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is zero']"", ""PROJECT['market shares of #REF', '#4']"", ""PROJECT['names of #REF', '#4']"", ""UNION['#6', '#5']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3404,Find the name of the company that produces both furnitures with less than 6 components and furnitures with more than 10 components.,return companies ;return furniture of #1 ;return components of #2 ;return number of  #3 for each #2 ;return #1 where #4 is lower than 6 ;return #1 where #4 is higher than 10 ;return #1 in  both #5 and  #6 ;return name of #7,"[""SELECT['companies']"", ""PROJECT['furniture of #REF', '#1']"", ""PROJECT['components of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""COMPARATIVE['#1', '#4', 'is lower than 6']"", ""COMPARATIVE['#1', '#4', 'is higher than 10']"", ""INTERSECTION['#1', '#5', '#6']"", ""PROJECT['name of #REF', '#7']""]","['select', 'project', 'project', 'group', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_3405,Display the first name and department name for each employee.,"return employees ;return first name  of #1 ;return department name  of #1 ;return #2 ,  #3","[""SELECT['employees']"", ""PROJECT['first name of #REF', '#1']"", ""PROJECT['department name of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_3406,What are the first name and department name of all employees?,"return employees ;return first names of #1 ;return departments of #1 ;return #2 ,  #3","[""SELECT['employees']"", ""PROJECT['first names of #REF', '#1']"", ""PROJECT['departments of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_3407,"List the full name (first and last name), and salary for those employees who earn below 6000.","return employees ;return salary of  #1 ;return #1 where #2 is  less than 6000 ;return the  first name  of  #3 ;return the  last name  of  #3 ;return #4 ,  #5","[""SELECT['employees']"", ""PROJECT['salary of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is less than 6000']"", ""PROJECT['the first name of #REF', '#3']"", ""PROJECT['the last name of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3408,What are the full names and salaries for any employees earning less than 6000?,"return employees ;return #1 earning less than 6000 ;return full names of  #2 ;return salaries of  #2 ;return #3 ,  #4","[""SELECT['employees']"", ""FILTER['#1', 'earning less than 6000']"", ""PROJECT['full names of #REF', '#2']"", ""PROJECT['salaries of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_3409,"Display the first name, and department number for all employees whose last name is ""McEwen"".","return employees ;return last names of #1 ;return #1 where #2 is McEwen ;return first names of #3 ;return department numbers of #3 ;return #4 ,  #5","[""SELECT['employees']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is McEwen']"", ""PROJECT['first names of #REF', '#3']"", ""PROJECT['department numbers of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_341,Name all the products with next entry ID greater than 8.,return products ;return next entry ID of  #1 ;return #1 where  #2 is higher than 8 ;return Names of  #3,"[""SELECT['products']"", ""PROJECT['next entry ID of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 8']"", ""PROJECT['Names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3410,What are the first names and department numbers for employees with last name McEwen?,"return employees ;return last names of  #1 ;return #1 where #2 is  McEwen ;return first names of  #3 ;return department numbers of  #3 ;return #4 ,  #5","[""SELECT['employees']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is McEwen']"", ""PROJECT['first names of #REF', '#3']"", ""PROJECT['department numbers of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3411,Return all the information for all employees without any department number.,return employees ;return #1 without any  department number ;return information for #2,"[""SELECT['employees']"", ""FILTER['#1', 'without any department number']"", ""PROJECT['information for #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3412,What are all the employees without a department number?,return employees ;return #1 without department numbers,"[""SELECT['employees']"", ""FILTER['#1', 'without department numbers']""]","['select', 'filter']",train
SPIDER_train_3413,Display all the information about the department Marketing.,return department Marketing ;return information about #1,"[""SELECT['department Marketing']"", ""PROJECT['information about #REF', '#1']""]","['select', 'project']",train
SPIDER_train_3415,when is the hire date for those employees whose first name does not containing the letter M?,return employees ;return first names of  #1 ;return #1 where #2 does not  contain the  letter M ;return hire dates of  #3,"[""SELECT['employees']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'does not contain the letter M']"", ""PROJECT['hire dates of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3416,On what dates were employees without the letter M in their first names hired?,return employees ;return first names of #1 ;return #1 where #2 has the  letter M ;return #1 besides #3 ;return dates that  #4 were hired,"[""SELECT['employees']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'has the letter M']"", ""DISCARD['#1', '#3']"", ""PROJECT['dates that #REF were hired', '#4']""]","['select', 'project', 'comparative', 'discard', 'project']",train
SPIDER_train_3417,"display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M.","return employees ;return #1 whose first  name  does contain the  letter M ;return #1 besides  #2 ;return the  full name  of  #3 ;return the  hire date of  #3 ;return the  salary of  #3 ;return the  department number of  #3 ;return #4 ,  #5 ,   #6 , #7","[""SELECT['employees']"", ""FILTER['#1', 'whose first name does contain the letter M']"", ""DISCARD['#1', '#2']"", ""PROJECT['the full name of #REF', '#3']"", ""PROJECT['the hire date of #REF', '#3']"", ""PROJECT['the salary of #REF', '#3']"", ""AGGREGATE['count', '#3']"", ""UNION['#4', '#5', '#6', '#7']""]","['select', 'filter', 'discard', 'project', 'project', 'project', 'aggregate', 'union']",train
SPIDER_train_3418,"What are the full name, hire date, salary, and department id for employees without the letter M in their first name?","return employees ;return first names of  #1 ;return #1 where #2 has  the  letter M ;return #1 besides  #3 ;return full names of  #4 ;return hire dates of  #4 ;return salary of  #4 ;return department ids of  #4 ;return #5 ,  #6 ,   #7 , #8","[""SELECT['employees']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'has the letter M']"", ""DISCARD['#1', '#3']"", ""PROJECT['full names of #REF', '#4']"", ""PROJECT['hire dates of #REF', '#4']"", ""PROJECT['salary of #REF', '#4']"", ""PROJECT['department ids of #REF', '#4']"", ""UNION['#5', '#6', '#7', '#8']""]","['select', 'project', 'comparative', 'discard', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_3419,"display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M and make the result set in ascending order by department number.","return employees ;return first  names of #1 ;return #1 where #2 contain M ;return #1 besides #3 ;return full name of #4 ;return hire date of #4 ;return salary of #4 ;return department  number of #4 ;return #5 ,  #6 ,   #7 , #8 ;return #9 sorted by #8 in ascending order","[""SELECT['employees']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'contain M']"", ""DISCARD['#1', '#3']"", ""PROJECT['full name of #REF', '#4']"", ""PROJECT['hire date of #REF', '#4']"", ""PROJECT['salary of #REF', '#4']"", ""AGGREGATE['count', '#4']"", ""UNION['#5', '#6', '#7', '#8']"", ""SORT['#9', '#8', 'in ascending order']""]","['select', 'project', 'comparative', 'discard', 'project', 'project', 'project', 'aggregate', 'union', 'sort']",train
SPIDER_train_342,What are the catalog entry names of the products with next entry ID above 8?,return products ;return next entry ID of  #1 ;return #1 where #2 is  higher than 8 ;return catalog entries of  #3 ;return names of  #4,"[""SELECT['products']"", ""PROJECT['next entry ID of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 8']"", ""PROJECT['catalog entries of #REF', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_3420,"What are the full name, hire data, salary and department id for employees without the letter M in their first name, ordered by ascending department id?","return employees ;return first names of #1 ;return #1 where #2 has the  letter M ;return #1 besides  #3 ;return full names of #4 ;return hire data of #4 ;return salary of #4 ;return department id of #4 ;return #5 ,  #6 ,   #7 , #8 ;return #9 sorted by #8 in  ascending order","[""SELECT['employees']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'has the letter M']"", ""DISCARD['#1', '#3']"", ""PROJECT['full names of #REF', '#4']"", ""PROJECT['hire data of #REF', '#4']"", ""PROJECT['salary of #REF', '#4']"", ""PROJECT['department id of #REF', '#4']"", ""UNION['#5', '#6', '#7', '#8']"", ""SORT['#9', '#8', 'in ascending order']""]","['select', 'project', 'comparative', 'discard', 'project', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_3421,what is the phone number of employees whose salary is in the range of 8000 and 12000?,return employees ;return salaries of  #1 ;return #1 where #2 is  at least 8000 ;return #1 where #2 is  at most 12000 ;return #1 of  both #3 and  #4 ;return phone numbers of  #5,"[""SELECT['employees']"", ""PROJECT['salaries of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least 8000']"", ""COMPARATIVE['#1', '#2', 'is at most 12000']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['phone numbers of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_3422,Return the phone numbers of employees with salaries between 8000 and 12000.,return employees ;return salaries of  #1 ;return #1 where #2 is  at least 8000 ;return #1 where #2 is  at most 12000 ;return #1 of  both #3 and  #4 ;return phone numbers of  #5,"[""SELECT['employees']"", ""PROJECT['salaries of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least 8000']"", ""COMPARATIVE['#1', '#2', 'is at most 12000']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['phone numbers of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_3423,display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.,return employees ;return salaries of #1 ;return #1 where #2 is at least 8000 ;return #1 where #2 is at most 12000 ;return #1 in  both #3 and  #4 ;return commission of #1 ;return #1 where #6 is null ;return #1 besides  #7 ;return department numbers of #1 ;return #1 where #9 is 40 ;return #1 besides  #10 ;return #8 or  #11 ;return #1 in  both #5 and  #12,"[""SELECT['employees']"", ""PROJECT['salaries of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least 8000']"", ""COMPARATIVE['#1', '#2', 'is at most 12000']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['commission of #REF', '#1']"", ""COMPARATIVE['#1', '#6', 'is null']"", ""DISCARD['#1', '#7']"", ""PROJECT['department numbers of #REF', '#1']"", ""COMPARATIVE['#1', '#9', 'is 40']"", ""DISCARD['#1', '#10']"", ""UNION['#8', '#11']"", ""INTERSECTION['#1', '#5', '#12']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project', 'comparative', 'discard', 'project', 'comparative', 'discard', 'union', 'intersection']",train
SPIDER_train_3424,Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.,"return employees ;return salaries of #1 ;return #1 where #2 is higher than 8000 ;return #3 where #2 is lower than 12000 ;return commission of #4 ;return #4 where #5 is null ;return #4 besides  #6 ;return department id of #4 ;return #4 where #8 is 40 ;return #4 besides  #9 ;return #7 ,  #10 ;return all information of #11","[""SELECT['employees']"", ""PROJECT['salaries of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 8000']"", ""COMPARATIVE['#3', '#2', 'is lower than 12000']"", ""PROJECT['commission of #REF', '#4']"", ""COMPARATIVE['#4', '#5', 'is null']"", ""DISCARD['#4', '#6']"", ""PROJECT['department id of #REF', '#4']"", ""COMPARATIVE['#4', '#8', 'is 40']"", ""DISCARD['#4', '#9']"", ""UNION['#7', '#10']"", ""PROJECT['all information of #REF', '#11']""]","['select', 'project', 'comparative', 'comparative', 'project', 'comparative', 'discard', 'project', 'comparative', 'discard', 'union', 'project']",train
SPIDER_train_3425,What are the full name (first and last name) and salary for all employees who does not have any value for commission?,"return employees ;return #1 who does not have value for commission ;return first names of #2 ;return last names of #2 ;return salary of #2 ;return #3 ,  #4 ,   #5","[""SELECT['employees']"", ""FILTER['#1', 'who does not have value for commission']"", ""PROJECT['first names of #REF', '#2']"", ""PROJECT['last names of #REF', '#2']"", ""PROJECT['salary of #REF', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_3426,Return the full names and salaries of employees with null commissions.,"return employees ;return commissions of  #1 ;return #1 where #2 is  null ;return full names of  #3 ;return salaries of  #3 ;return #4 ,  #5","[""SELECT['employees']"", ""PROJECT['commissions of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is null']"", ""PROJECT['full names of #REF', '#3']"", ""PROJECT['salaries of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3427,"Display the first and last name, and salary for those employees whose first name is ending with the letter m.","return employees ;return first  names of  #1 ;return #1 where #2 end with the  letter m ;return first  names of  #3 ;return last names of  #3 ;return salary of  #3 ;return #4 ,  #5 ,   #6","[""SELECT['employees']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'end with the letter m']"", ""PROJECT['first names of #REF', '#3']"", ""PROJECT['last names of #REF', '#3']"", ""PROJECT['salary of #REF', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_3428,Return the full names and salaries for employees with first names that end with the letter m.,"return employees ;return first names of  #1 ;return #1 where  #2 end with  m ;return full names of  #3 ;return salaries of  #3 ;return #4 ,  #5","[""SELECT['employees']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'end with m']"", ""PROJECT['full names of #REF', '#3']"", ""PROJECT['salaries of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3429,"Find job id and date of hire for those employees who was hired between November 5th, 2007 and July 5th, 2009.","return employees ;return date of hire of  #1 ;return #1 where #2 is higher than November 5th ,  2007 ;return #3 where #2 is lower than July 5th ,  2009 ;return job id of #4 ;return date of hire of  #4 ;return #5 ,  #6","[""SELECT['employees']"", ""PROJECT['date of hire of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than November 5th , 2007']"", ""COMPARATIVE['#3', '#2', 'is lower than July 5th , 2009']"", ""PROJECT['job id of #REF', '#4']"", ""PROJECT['date of hire of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_343,How many aircrafts do we have?,return aircrafts ;return number of  #1,"[""SELECT['aircrafts']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_3430,"What are the job ids and dates of hire for employees hired after November 5th, 2007 and before July 5th, 2009?","return employees ;return the  dates of  hire for #1 ;return #1 where #2 is  after November 5th  2007 ;return #3 where #2 is  before July 5th  2009 ;return the  job ids of  #4 ;return the  dates of  hire of #4 ;return #5 ,  #6","[""SELECT['employees']"", ""PROJECT['the dates of hire for #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is after November 5th 2007']"", ""COMPARATIVE['#3', '#2', 'is before July 5th 2009']"", ""PROJECT['the job ids of #REF', '#4']"", ""PROJECT['the dates of hire of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3431,What are the first and last name for those employees who works either in department 70 or 90?,"return employees ;return departments of #1 ;return #1 where #2 is  70 ;return #1 where #2 is  90 ;return #3 ,  #4 ;return first names of #5 ;return last names of #5 ;return #6 ,  #7","[""SELECT['employees']"", ""PROJECT['departments of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 70']"", ""COMPARATIVE['#1', '#2', 'is 90']"", ""UNION['#3', '#4']"", ""PROJECT['first names of #REF', '#5']"", ""PROJECT['last names of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project', 'project', 'union']",train
SPIDER_train_3432,What are the full names of employees who with in department 70 or 90?,return employees ;return departments of  #1 ;return #1 where #2 is  70 ;return #1 where #2 is  90 ;return #3 or  #4 ;return full names of  #5,"[""SELECT['employees']"", ""PROJECT['departments of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 70']"", ""COMPARATIVE['#1', '#2', 'is 90']"", ""UNION['#3', '#4']"", ""PROJECT['full names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_3433,Find the salary and manager number for those employees who is working under a manager.,"return employees ;return #1 who  is  working under a manager ;return salary of #2 ;return manager number of #2 ;return #3 ,   #4","[""SELECT['employees']"", ""FILTER['#1', 'who is working under a manager']"", ""PROJECT['salary of #REF', '#2']"", ""AGGREGATE['count', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'aggregate', 'union']",train
SPIDER_train_3434,What are the salaries and manager ids for employees who have managers?,"return employees ;return #1 who  have  managers ;return salaries of  #2 ;return managers of  #2 ;return ids of  #3 ;return #3 ,  #5","[""SELECT['employees']"", ""FILTER['#1', 'who have managers']"", ""PROJECT['salaries of #REF', '#2']"", ""PROJECT['managers of #REF', '#2']"", ""PROJECT['ids of #REF', '#3']"", ""UNION['#3', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_3435,display all the details from Employees table for those employees who was hired before 2002-06-21.,return employees ;return #1 who was hired before 2002-06-21 ;return the  details of #2 ;return #3 from the  Employees table,"[""SELECT['employees']"", ""FILTER['#1', 'who was hired before 2002-06-21']"", ""PROJECT['the details of #REF', '#2']"", ""FILTER['#3', 'from the Employees table']""]","['select', 'filter', 'project', 'filter']",train
SPIDER_train_3436,"What is all the information about employees hired before June 21, 2002?","return employees ;return #1 hired before June 21 ,  2002 ;return all the  information about #2","[""SELECT['employees']"", ""FILTER['#1', 'hired before June 21 , 2002']"", ""PROJECT['all the information about #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3437,display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.,"return employees ;return first names of #1 ;return #1 where #2 has the  letter D ;return #1 where #2 has the  letter S ;return #3 ,  #4 ;return salaries of #5 ;return information of #5 ;return #7 sorted by #6 in  descending order","[""SELECT['employees']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'has the letter D']"", ""COMPARATIVE['#1', '#2', 'has the letter S']"", ""UNION['#3', '#4']"", ""PROJECT['salaries of #REF', '#5']"", ""PROJECT['information of #REF', '#5']"", ""SORT['#7', '#6', 'in descending order']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project', 'project', 'sort']",train
SPIDER_train_3438,"What is all the information about employees with D or S in their first name, ordered by salary descending?","return employees with D in their first name ;return employees with S in their first name ;return #1 ,  #2 ;return all information about #3 ;return salary of  #3 ;return #4 ordered by #5 descending","[""SELECT['employees with D in their first name']"", ""SELECT['employees with S in their first name']"", ""UNION['#1', '#2']"", ""PROJECT['all information about #REF', '#3']"", ""PROJECT['salary of #REF', '#3']"", ""SORT['#4', '#5', 'descending']""]","['select', 'select', 'union', 'project', 'project', 'sort']",train
SPIDER_train_3439,"display those employees who joined after 7th September, 1987.","return employees ;return #1 who joined after September 7th ,  1987","[""SELECT['employees']"", ""FILTER['#1', 'who joined after September 7th , 1987']""]","['select', 'filter']",train
SPIDER_train_344,How many aircrafts exist in the database?,return aircrafts in the  database ;return number of  #1,"[""SELECT['aircrafts in the database']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_3440,"Which employees were hired after September 7th, 1987?",return employees ;return #1 that  were hired after September 7th 1987,"[""SELECT['employees']"", ""FILTER['#1', 'that were hired after September 7th 1987']""]","['select', 'filter']",train
SPIDER_train_3441,display the job title of jobs which minimum salary is greater than 9000.,return jobs ;return salaries of #1 ;return the  lowest #2 for each #1 ;return #1 where #3 is  greater than  9000 ;return the  job titles of #4,"[""SELECT['jobs']"", ""PROJECT['salaries of #REF', '#1']"", ""GROUP['min', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is greater than 9000']"", ""PROJECT['the job titles of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_3442,Which job titles correspond to jobs with salaries over 9000?,return jobs ;return salaries of  #1 ;return #1 where #2 is  higher than 9000 ;return job titles of  #3,"[""SELECT['jobs']"", ""PROJECT['salaries of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 9000']"", ""PROJECT['job titles of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3443,"display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.","return jobs ;return the max salary for each #1 ;return #1 where #2 is  within the range 12000 to 18000 ;return the minimum salary of #3 ;return the maximum salary of #3 ;return the difference of #4 and #5 ;return the job Title of #3 ;return #6 , #7","[""SELECT['jobs']"", ""PROJECT['salary', '#1']"", ""GROUP['max', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is within the range 12000 to 18000']"", ""PROJECT['salary of #REF', '#4']"", ""GROUP['min', '#5', '#4']"", ""PROJECT['salary of #REF', '#4']"", ""GROUP['max', '#7', '#4']"", ""ARITHMETIC['difference', '#6', '#8']"", ""PROJECT['the job Title of #REF', '#4']"", ""UNION['#9', '#10']""]","['select', 'project', 'group', 'comparative', 'project', 'group', 'project', 'group', 'arithmetic', 'project', 'union']",train
SPIDER_train_3444,"What are the job titles, and range of salaries for jobs with maximum salary between 12000 and 18000?","return jobs ;return salaries of #1 ;return the  highest of #2 for each #1 ;return #1 where #3 is at least 12000 ;return #1 where #3 is at most 18000 ;return #1 in  both #4 and  #5 ;return job titles of #6 ;return ranges of salaries of  #6 ;return #7 ,  #8","[""SELECT['jobs']"", ""PROJECT['salaries of #REF', '#1']"", ""GROUP['max', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 12000']"", ""COMPARATIVE['#1', '#3', 'is at most 18000']"", ""INTERSECTION['#1', '#4', '#5']"", ""PROJECT['job titles of #REF', '#6']"", ""PROJECT['ranges of salaries of #REF', '#6']"", ""UNION['#7', '#8']""]","['select', 'project', 'group', 'comparative', 'comparative', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_3445,display the emails of the employees who have no commission percentage and salary within the range 7000 to 12000 and works in that department which number is 50.,return employees ;return #1 who  have commission percentages ;return #1 besides  #2 ;return salaries of #3 ;return #3 where #4 is at least 7000 ;return #3 where #4 is at most 12000 ;return #3 in  both #5 and  #6 ;return departments of #7 ;return department number of #8 ;return #7 where #9 is equal to 50 ;return emails of #10,"[""SELECT['employees']"", ""FILTER['#1', 'who have commission percentages']"", ""DISCARD['#1', '#2']"", ""PROJECT['salaries of #REF', '#3']"", ""COMPARATIVE['#3', '#4', 'is at least 7000']"", ""COMPARATIVE['#3', '#4', 'is at most 12000']"", ""INTERSECTION['#3', '#5', '#6']"", ""PROJECT['departments of #REF', '#7']"", ""AGGREGATE['count', '#8']"", ""COMPARATIVE['#7', '#9', 'is equal to 50']"", ""PROJECT['emails of #REF', '#10']""]","['select', 'filter', 'discard', 'project', 'comparative', 'comparative', 'intersection', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_3446,"What are the emails of employees with null commission, salary between 7000 and 12000, and who work in department 50?",return employees ;return commission of #1 ;return #1 where #2 is null ;return salary of #3 ;return #3 where #4 is higher than 7000 ;return #5 where #4 is lower than 12000 ;return #6 who  work in  department 50,"[""SELECT['employees']"", ""PROJECT['commission of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is null']"", ""PROJECT['salary of #REF', '#3']"", ""COMPARATIVE['#3', '#4', 'is higher than 7000']"", ""COMPARATIVE['#5', '#4', 'is lower than 12000']"", ""FILTER['#6', 'who work in department 50']""]","['select', 'project', 'comparative', 'project', 'comparative', 'comparative', 'filter']",train
SPIDER_train_3447,display the employee ID for each employee and the date on which he ended his previous job.,"return employees ;return employee ID of #1 ;return previous jobs of #1 ;return end dates of #3 ;return #2 ,  #4","[""SELECT['employees']"", ""PROJECT['employee ID of #REF', '#1']"", ""PROJECT['previous jobs of #REF', '#1']"", ""PROJECT['end dates of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_3448,What are the employee ids for each employee and final dates of employment at their last job?,"return employees ;return employee ids of  #1 ;return last jobs of  #1 ;return final dates of  employment of #3 ;return #2 ,  #4","[""SELECT['employees']"", ""PROJECT['employee ids of #REF', '#1']"", ""PROJECT['last jobs of #REF', '#1']"", ""PROJECT['final dates of employment of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_3449,display those departments where more than ten employees work who got a commission percentage.,return departments ;return employees who work in #1 ;return #2 that  got a commission percentage ;return number of  #3 for each #1 ;return #1 where #4 is  more than  ten,"[""SELECT['departments']"", ""PROJECT['employees who work in #REF', '#1']"", ""FILTER['#2', 'that got a commission percentage']"", ""GROUP['count', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is more than ten']""]","['select', 'project', 'filter', 'group', 'comparative']",train
SPIDER_train_345,Show name and distance for all aircrafts.,"return aircrafts ;return names of #1 ;return distances of #1 ;return #2 ,  #3","[""SELECT['aircrafts']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['distances of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_3450,What are the department ids for which more than 10 employees had a commission?,return departments ;return employees of #1 ;return #2 that  had a commission ;return number of  #3 for each #1 ;return #1 where #4 is  higher than 10 ;return department ids of #5,"[""SELECT['departments']"", ""PROJECT['employees of #REF', '#1']"", ""FILTER['#2', 'that had a commission']"", ""GROUP['count', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is higher than 10']"", ""PROJECT['department ids of #REF', '#5']""]","['select', 'project', 'filter', 'group', 'comparative', 'project']",train
SPIDER_train_3451,Find the ids of the departments where any manager is managing 4 or more employees.,return managers ;return employees of  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  4 or  more ;return departments of  #4 ;return ids of  #5,"[""SELECT['managers']"", ""PROJECT['employees of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is 4 or more']"", ""PROJECT['departments of #REF', '#4']"", ""PROJECT['ids of #REF', '#5']""]","['select', 'project', 'group', 'comparative', 'project', 'project']",train
SPIDER_train_3452,What are department ids for departments with managers managing more than 3 employees?,return departments ;return managers of  #1 ;return employees of  #2 ;return number of  #3 for each  #2 ;return #1 where #4 is  higher than 3 ;return department ids of  #5,"[""SELECT['departments']"", ""PROJECT['managers of #REF', '#1']"", ""PROJECT['employees of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""COMPARATIVE['#1', '#4', 'is higher than 3']"", ""PROJECT['department ids of #REF', '#5']""]","['select', 'project', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_3453,display the average salary of employees for each department who gets a commission percentage.,return departments ;return #1 that  get a commission percentage ;return employees of #2 ;return salaries of #3 ;return average of #4 for each #2,"[""SELECT['departments']"", ""FILTER['#1', 'that get a commission percentage']"", ""PROJECT['employees of #REF', '#2']"", ""PROJECT['salaries of #REF', '#3']"", ""GROUP['avg', '#4', '#2']"", ""UNION['#2', '#5']""]","['select', 'filter', 'project', 'project', 'group', 'union']",train
SPIDER_train_3454,What is the average salary of employees who have a commission percentage that is not null?,return employees ;return #1 who  have  a commission percentage that  is  null ;return #1 besides  #2 ;return salaries of  #3 ;return average of  #4,"[""SELECT['employees']"", ""FILTER['#1', 'who have a commission percentage that is null']"", ""DISCARD['#1', '#2']"", ""PROJECT['salaries of #REF', '#3']"", ""AGGREGATE['avg', '#4']""]","['select', 'filter', 'discard', 'project', 'aggregate']",train
SPIDER_train_3455,display the country ID and number of cities for each country.,"return countries ;return country  ID of #1 ;return cities of #1 ;return number of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['countries']"", ""PROJECT['country ID of #REF', '#1']"", ""PROJECT['cities of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_3456,Give the country id and corresponding count of cities in each country.,"return countries ;return country  ids of  #1 ;return cities of  #1 ;return number of #3 for each #1 ;return #2 ,   #4","[""SELECT['countries']"", ""PROJECT['country ids of #REF', '#1']"", ""PROJECT['cities of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_3457,display job ID for those jobs that were done by two or more for more than 300 days.,return jobs ;return #1 done by two or  more ;return #2 for  more than 300 days ;return the  job ID for  #3,"[""SELECT['jobs']"", ""FILTER['#1', 'done by two or more']"", ""FILTER['#2', 'for more than 300 days']"", ""PROJECT['the job ID for #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_3458,What are the job ids for jobs done more than once for a period of more than 300 days?,return jobs ;return #1 done more  than  once ;return #2 for  a period of more  than  300 days ;return job ids of #3,"[""SELECT['jobs']"", ""FILTER['#1', 'done more than once']"", ""FILTER['#2', 'for a period of more than 300 days']"", ""PROJECT['job ids of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_346,What are the names and distances for all airplanes?,"return airplanes ;return names of  #1 ;return distances of  #1 ;return #2 ,  #3","[""SELECT['airplanes']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['distances of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_3460,What are the employee ids for employees who have held two or more jobs?,return employees ;return jobs #1 held ;return number of  #2 for each #1 ;return #1 where #3 is  at least two ;return employee ids of #4,"[""SELECT['employees']"", ""PROJECT['jobs #REF held', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""PROJECT['employee ids of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_3461,Find employee with ID and name of the country presently where (s)he is working.,"return employees ;return ID of  #1 ;return country where #1 is  presently working ;return name of  #3 ;return #1 ,  #2 ,   #4","[""SELECT['employees']"", ""PROJECT['ID of #REF', '#1']"", ""PROJECT['country where #REF is presently working', '#1']"", ""PROJECT['name of #REF', '#3']"", ""UNION['#1', '#2', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_3462,What are all the employee ids and the names of the countries in which they work?,"return employees ;return employee ids of  #1 ;return countries in which #1 work ;return #2 ,  #3","[""SELECT['employees']"", ""PROJECT['employee ids of #REF', '#1']"", ""PROJECT['countries in which #REF work', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_3463,display the department name and number of employees in each of the department.,"return departments ;return names of #1 ;return employees of #1 ;return number of  #3 for each #1 ;return #2 ,  #4","[""SELECT['departments']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['employees of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_3464,Give the name of each department and the number of employees in each.,"return departments ;return names of  #1 ;return employees of  #1 ;return number of #3 for each #1 ;return #2 ,   #4","[""SELECT['departments']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['employees of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_3465,Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?,return employees ;return salaries of #1 ;return #1 where #2 is at least 12000 ;return jobs done by #3 ;return detailed info of #4,"[""SELECT['employees']"", ""PROJECT['salaries of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least 12000']"", ""PROJECT['jobs done by #REF', '#3']"", ""PROJECT['detailed info of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_3466,What is all the job history info done by employees earning a salary greater than or equal to 12000?,return employees ;return salary of #1 ;return #1 where #2 is  at least 12000 ;return job history infos done by #3,"[""SELECT['employees']"", ""PROJECT['salary of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least 12000']"", ""PROJECT['job history infos done by #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3467,display job title and average salary of employees.,"return employees ;return job titles of  #1 ;return salaries of  #1 ;return average of  #3 ;return #2 ,  #4","[""SELECT['employees']"", ""PROJECT['job titles of #REF', '#1']"", ""PROJECT['salaries of #REF', '#1']"", ""AGGREGATE['avg', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'aggregate', 'union']",train
SPIDER_train_3468,What is the average salary for each job title?,return job titles ;return salary of #1 ;return average of #2 for each  #1,"[""SELECT['job titles']"", ""PROJECT['salary of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_3469,What is the full name ( first name and last name ) for those employees who gets more salary than the employee whose id is 163?,"return employees ;return ids of #1 ;return salary of #1 ;return #3 where #2 is  163 ;return #1 where #3 is  higher than #4 ;return first names of #5 ;return last names of #5 ;return #6 , #7","[""SELECT['employees']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['salary of #REF', '#1']"", ""COMPARATIVE['#3', '#2', 'is 163']"", ""COMPARATIVE['#1', '#3', 'is higher than #4']"", ""PROJECT['first names of #REF', '#5']"", ""PROJECT['last names of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'project', 'comparative', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_347,Show ids for all aircrafts with more than 1000 distance.,return aircrafts ;return distances of  #1 ;return #1 where #2 is  higher than 1000 ;return ids of  #3,"[""SELECT['aircrafts']"", ""PROJECT['distances of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 1000']"", ""PROJECT['ids of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3470,Provide the full names of employees earning more than the employee with id 163.,return employees ;return id of  #1 ;return #1 where #2 is  163 ;return earning of  #3 ;return earning of  #1 besides  #3 ;return #1 where #5 is  higher than #4 ;return full names of  #6,"[""SELECT['employees']"", ""PROJECT['id of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 163']"", ""PROJECT['earning of #REF', '#3']"", ""PROJECT['earning of #REF', '#1']"", ""DISCARD['#5', '#3']"", ""COMPARATIVE['#1', '#6', 'is higher than #4']"", ""PROJECT['full names of #REF', '#7']""]","['select', 'project', 'comparative', 'project', 'project', 'discard', 'comparative', 'project']",train
SPIDER_train_3471,return the smallest salary for every departments.,return departments ;return salaries of  #1 ;return smallest #2 for each  #1,"[""SELECT['departments']"", ""PROJECT['salaries of #REF', '#1']"", ""GROUP['min', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_3472,What is the minimum salary in each department?,return departments ;return salaries of  #1 ;return minimum of  #2 for each  #1,"[""SELECT['departments']"", ""PROJECT['salaries of #REF', '#1']"", ""GROUP['min', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_3473,Find the first name and last name and department id for those employees who earn such amount of salary which is the smallest salary of any of the departments.,"return employees ;return salaries of   #1 ;return #1 where #2 is the  lowest ;return first names of   #3 ;return last names of   #3 ;return department ids of   #3 ;return #4 ,  #5 ,   #6","[""SELECT['employees']"", ""PROJECT['salaries of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the lowest']"", ""PROJECT['first names of #REF', '#3']"", ""PROJECT['last names of #REF', '#3']"", ""PROJECT['department ids of #REF', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_3474,What are the full names and department ids for the lowest paid employees across all departments.,"return employees ;return #1 that  are lowest paid ;return full names of #2 ;return departments of #2 ;return department ids of #4 ;return #3 ,  #5","[""SELECT['employees']"", ""FILTER['#1', 'that are lowest paid']"", ""PROJECT['full names of #REF', '#2']"", ""PROJECT['departments of #REF', '#2']"", ""PROJECT['department ids of #REF', '#4']"", ""UNION['#3', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_3475,Find the employee id for all employees who earn more than the average salary.,return employees ;return salaries of  #1 ;return average of  #2 ;return #1 where #2 is  higher than #3 ;return employee ids of  #4,"[""SELECT['employees']"", ""PROJECT['salaries of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['employee ids of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_3476,What are the employee ids for employees who make more than the average?,return employees ;return make of  #1 ;return average of  #2 ;return #1 where #2 is  more than #3,"[""SELECT['employees']"", ""PROJECT['make of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is more than #3']""]","['select', 'project', 'aggregate', 'comparative']",train
SPIDER_train_3477,display the employee id and salary of all employees who report to Payam (first name).,"return employee ;return #1 who  report to Payam ;return id of  #2 ;return salary of  #2 ;return #3 ,  #4","[""SELECT['employee']"", ""FILTER['#1', 'who report to Payam']"", ""PROJECT['id of #REF', '#2']"", ""PROJECT['salary of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_3478,"What are the employee ids of employees who report to Payam, and what are their salaries?","return employees ;return #1 who  report to Payam ;return ids of  #2 ;return salaries of  #2 ;return #3 ,  #4","[""SELECT['employees']"", ""FILTER['#1', 'who report to Payam']"", ""PROJECT['ids of #REF', '#2']"", ""PROJECT['salaries of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_3479,find the name of all departments that do actually have one or more employees assigned to them.,return departments ;return employees assigned to #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  one or  more ;return names of  #4,"[""SELECT['departments']"", ""PROJECT['employees assigned to #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is one or more']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_348,What are the ids of all aircrafts that can cover a distance of more than 1000?,return aircraft ;return distance #1 can cover ;return #1 where #2 is  more than  1000 ;return ids of #3,"[""SELECT['aircraft']"", ""PROJECT['distance #REF can cover', '#1']"", ""COMPARATIVE['#1', '#2', 'is more than 1000']"", ""PROJECT['ids of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3480,What are the names of departments that have at least one employee.,return departments ;return employees of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least one ;return names of  #4,"[""SELECT['departments']"", ""PROJECT['employees of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least one']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_3481,get the details of employees who manage a department.,return employees ;return #1 who  manage a department ;return details of  #2,"[""SELECT['employees']"", ""FILTER['#1', 'who manage a department']"", ""PROJECT['details of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3482,What is all the information regarding employees who are managers?,return employees ;return #1 who  are  managers ;return all information regarding #2,"[""SELECT['employees']"", ""FILTER['#1', 'who are managers']"", ""PROJECT['all information regarding #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3483,display all the information about the department Marketing.,return department ;return #1 that  is  Marketing ;return all information about #2,"[""SELECT['department']"", ""FILTER['#1', 'that is Marketing']"", ""PROJECT['all information about #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3484,What is all the information about the Marketing department?,return Marketing department ;return all information about #1,"[""SELECT['Marketing department']"", ""PROJECT['all information about #REF', '#1']""]","['select', 'project']",train
SPIDER_train_3485,display the ID for those employees who did two or more jobs in the past.,return employees ;return past jobs of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is at least two ;return ID of  #4,"[""SELECT['employees']"", ""PROJECT['past jobs of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""PROJECT['ID of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_3486,What are the employee ids for those who had two or more jobs.,return jobs ;return number of  #1 for each employee ;return employees where #2 at least two ;return employee ids of #3,"[""SELECT['jobs']"", ""PROJECT['employee', '#1']"", ""GROUP['count', '#1', '#2']"", ""PROJECT['employees where #REF at least two', '#3']"", ""PROJECT['employee ids of #REF', '#4']""]","['select', 'project', 'group', 'project', 'project']",train
SPIDER_train_3487,What are the unique ids of those departments where any manager is managing 4 or more employees.,return departments ;return managers of  #1 ;return employees #2 manage ;return number of  #3 for each  #2 ;return #1 where #4 is  at least 4 ;return unique ids of  #5,"[""SELECT['departments']"", ""PROJECT['managers of #REF', '#1']"", ""PROJECT['employees #REF manage', '#2']"", ""GROUP['count', '#3', '#2']"", ""COMPARATIVE['#1', '#4', 'is at least 4']"", ""PROJECT['unique ids of #REF', '#5']""]","['select', 'project', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_3488,Give the distinct department ids of departments in which a manager is in charge of 4 or more employees?,return departments ;return managers of  #1 ;return employees of  #2 ;return number of #3 for each #2 ;return #1 where  #4 is  4 or  more ;return department ids of  #5 ;return distinct #6,"[""SELECT['departments']"", ""PROJECT['managers of #REF', '#1']"", ""PROJECT['employees of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""COMPARATIVE['#1', '#4', 'is 4 or more']"", ""PROJECT['department ids of #REF', '#5']"", ""PROJECT['distinct #REF', '#6']""]","['select', 'project', 'project', 'group', 'comparative', 'project', 'project']",train
SPIDER_train_349,How many aircrafts have distance between 1000 and 5000?,return aircrafts ;return distances of  #1 ;return #1 where #2 is  at least 1000 ;return #1 where #2 is  at most 5000 ;return #1 of  both #3 and  #4 ;return number of  #5,"[""SELECT['aircrafts']"", ""PROJECT['distances of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least 1000']"", ""COMPARATIVE['#1', '#2', 'is at most 5000']"", ""INTERSECTION['#1', '#3', '#4']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'aggregate']",train
SPIDER_train_3490,What are the job ids corresponding to jobs with average salary above 8000?,return jobs ;return salary of  #1 ;return average of  #2 for each  #1 ;return #1 where #3 is  higher than 8000 ;return job ids of  #4,"[""SELECT['jobs']"", ""PROJECT['salary of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 8000']"", ""PROJECT['job ids of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_3491,display the employee ID and job name for all those jobs in department 80.,"return jobs ;return departments of  #1 ;return #1 where #2 is  department 80 ;return employee ID of  #3 ;return job names of  #3 ;return #4 ,  #5","[""SELECT['jobs']"", ""PROJECT['departments of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is department 80']"", ""PROJECT['employee ID of #REF', '#3']"", ""PROJECT['job names of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3492,what are the employee ids and job titles for employees in department 80?,"return employees ;return departments of  #1 ;return #1 where #2 is  80 ;return employee ids of  #3 ;return job titles of  #3 ;return #4 ,  #5","[""SELECT['employees']"", ""PROJECT['departments of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 80']"", ""PROJECT['employee ids of #REF', '#3']"", ""PROJECT['job titles of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3493,What is the first name and job id for all employees in the Finance department?,"return employees ;return #1 in the  Finance department ;return first names of  #2 ;return job id of  #2 ;return #3 ,  #4","[""SELECT['employees']"", ""FILTER['#1', 'in the Finance department']"", ""PROJECT['first names of #REF', '#2']"", ""PROJECT['job id of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_3494,Give the first name and job id for all employees in the Finance department.,"return employees ;return departments of  #1 ;return #1 where  #2 is  Finance ;return first names of  #3 ;return job id of  #3 ;return #4 ,   #5","[""SELECT['employees']"", ""PROJECT['departments of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Finance']"", ""PROJECT['first names of #REF', '#3']"", ""PROJECT['job id of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3495,display all the information of the employees whose salary if within the range of smallest salary and 2500.,return employees ;return salaries of #1 ;return #1 where #2 is at most 2500 ;return information of #3,"[""SELECT['employees']"", ""PROJECT['salaries of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at most 2500']"", ""PROJECT['information of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3496,What is all the information regarding employees with salaries above the minimum and under 2500?,return employees ;return salaries of #1 ;return the  lowest of #2 ;return #1 where #2 is higher than #3 ;return #1 where #2 is lower than 2500 ;return #1 in  both #4 and  #5 ;return information of #6,"[""SELECT['employees']"", ""PROJECT['salaries of #REF', '#1']"", ""AGGREGATE['min', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""COMPARATIVE['#1', '#2', 'is lower than 2500']"", ""INTERSECTION['#1', '#4', '#5']"", ""PROJECT['information of #REF', '#6']""]","['select', 'project', 'aggregate', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_3497,Find the ids of the employees who does not work in those departments where some employees works whose manager id within the range 100 and 200.,return employees  ;return managers of #1 ;return ids of #2 ;return #1 where #2 is higher than 100 ;return #4 where #2 is lower than 200 ;return departments of #5 ;return departments of #1 ;return #7 besides  #6 ;return #1 who  work in  #8 ;return ids of #9,"[""SELECT['employees']"", ""PROJECT['managers of #REF', '#1']"", ""PROJECT['ids of #REF', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than 100']"", ""COMPARATIVE['#4', '#2', 'is lower than 200']"", ""PROJECT['departments of #REF', '#5']"", ""PROJECT['departments of #REF', '#1']"", ""DISCARD['#7', '#6']"", ""FILTER['#1', 'who work in #8']"", ""PROJECT['ids of #REF', '#9']""]","['select', 'project', 'project', 'comparative', 'comparative', 'project', 'project', 'discard', 'filter', 'project']",train
SPIDER_train_3498,What are the ids for employees who do not work in departments with managers that have ids between 100 and 200?,return departments ;return managers of #1 ;return ids  of #2 ;return #1 where #3 is higher than 100 ;return #4 where #3 is lower than 200 ;return #1 besides  #5 ;return employees of #6 ;return ids  of #7,"[""SELECT['departments']"", ""PROJECT['managers of #REF', '#1']"", ""PROJECT['ids of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is higher than 100']"", ""COMPARATIVE['#4', '#3', 'is lower than 200']"", ""DISCARD['#1', '#5']"", ""PROJECT['employees of #REF', '#6']"", ""PROJECT['ids of #REF', '#7']""]","['select', 'project', 'project', 'comparative', 'comparative', 'discard', 'project', 'project']",train
SPIDER_train_3499,display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara.,"return Clara ;return the  department of  #1 ;return employees if department is  the  same as #2 ;return the  first name  of  #3 ;return the  last name  of  #3 ;return the  hire date of  #3 ;return #4 ,  #5 ,   #6","[""SELECT['Clara']"", ""PROJECT['the department of #REF', '#1']"", ""PROJECT['employees if department is the same as #REF', '#2']"", ""PROJECT['the first name of #REF', '#3']"", ""PROJECT['the last name of #REF', '#3']"", ""PROJECT['the hire date of #REF', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'project', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_35,Give the years and official names of the cities of each competition.,"return competitions ;return years of  #1 ;return cities of  #1 ;return official names of  #3 ;return #2 ,   #4","[""SELECT['competitions']"", ""PROJECT['years of #REF', '#1']"", ""PROJECT['cities of #REF', '#1']"", ""PROJECT['official names of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_350,What is the count of aircrafts that have a distance between 1000 and 5000?,return aircrafts ;return distances of  #1 ;return #1 where #2 is  at least 1000 ;return #1 where #2 is  at most 5000 ;return #1 of  both #3 and  #4 ;return number of  #5,"[""SELECT['aircrafts']"", ""PROJECT['distances of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least 1000']"", ""COMPARATIVE['#1', '#2', 'is at most 5000']"", ""INTERSECTION['#1', '#3', '#4']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'aggregate']",train
SPIDER_train_3500,What are the full names and hire dates for employees in the same department as someone with the first name Clara?,"return departments ;return employees of #1 ;return first names of #2 ;return #1 where #3 is  Clara ;return employees of #4 ;return full names of #5 ;return hire dates of #5 ;return #6 ,  #7","[""SELECT['departments']"", ""PROJECT['employees of #REF', '#1']"", ""PROJECT['first names of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Clara']"", ""PROJECT['employees of #REF', '#4']"", ""PROJECT['full names of #REF', '#5']"", ""PROJECT['hire dates of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_3501,display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara excluding Clara.,"return employees ;return #1 that is Clara  ;return department of #1 ;return department of #2 ;return #1 where #3 is the  same as #4 ;return #5 besides  #2 ;return first names of #6 ;return last names of #6 ;return hire dates of #6 ;return #7 ,  #8 ,   #9","[""SELECT['employees']"", ""FILTER['#1', 'that is Clara']"", ""PROJECT['department of #REF', '#1']"", ""PROJECT['department of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is the same as #4']"", ""DISCARD['#5', '#2']"", ""PROJECT['first names of #REF', '#6']"", ""PROJECT['last names of #REF', '#6']"", ""PROJECT['hire dates of #REF', '#6']"", ""UNION['#7', '#8', '#9']""]","['select', 'filter', 'project', 'project', 'comparative', 'discard', 'project', 'project', 'project', 'union']",train
SPIDER_train_3502,"What are the full names and hire dates for employees in the same department as someone with the first name Clara, not including Clara?","return departments ;return employees of #1 ;return first names of #2 ;return #1 where #3 is  Clara ;return employees of #4 ;return #5 besides Clara ;return full names of #6 ;return hire dates of #6 ;return #7 ,  #8","[""SELECT['departments']"", ""PROJECT['employees of #REF', '#1']"", ""PROJECT['first names of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Clara']"", ""PROJECT['employees of #REF', '#4']"", ""FILTER['#5', 'Clara']"", ""DISCARD['#5', '#6']"", ""PROJECT['full names of #REF', '#7']"", ""PROJECT['hire dates of #REF', '#7']"", ""UNION['#8', '#9']""]","['select', 'project', 'project', 'comparative', 'project', 'filter', 'discard', 'project', 'project', 'union']",train
SPIDER_train_3503,display the employee number and name( first name and last name ) for all employees who work in a department with any employee whose name contains a ’T’.,"return employees ;return #1 who work in a  department ;return names of #2 ;return #2 where #3 contains a  T ;return employee numbers of #4 ;return first names of #4 ;return last names of #4 ;return #5 ,  #6 ,   #7","[""SELECT['employees']"", ""FILTER['#1', 'who work in a department']"", ""PROJECT['names of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'contains a T']"", ""PROJECT['employee numbers of #REF', '#4']"", ""PROJECT['first names of #REF', '#4']"", ""PROJECT['last names of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'filter', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_3504,What are the ids and full names for employees who work in a department that has someone with a first name that contains the letter T?,"return departments ;return employees of  #1 ;return #2 with first name contains the  letter T ;return ids of  #3 ;return full names of  #3 ;return #4 ,  #5","[""SELECT['departments']"", ""PROJECT['employees of #REF', '#1']"", ""FILTER['#2', 'with first name contains the letter T']"", ""PROJECT['ids of #REF', '#3']"", ""PROJECT['full names of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'filter', 'project', 'project', 'union']",train
SPIDER_train_3505,"display the employee number, name( first name and last name ), and salary for all employees who earn more than the average salary and who work in a department with any employee with a 'J' in their first name.","return employees ;return salaries of #1 ;return average of #2 ;return #1 where #2 is higher than #3 ;return departments of #4 ;return employees of #5 ;return first names of #6 ;return #5 where #7 has a 'J ;return #4 where #5 is equal to #8 ;return employee number of #9 ;return name  of #9 ;return salary  of #9 ;return #10 ,  #11 ,   #12","[""SELECT['employees']"", ""PROJECT['salaries of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['departments of #REF', '#4']"", ""PROJECT['employees of #REF', '#5']"", ""PROJECT['first names of #REF', '#6']"", ""COMPARATIVE['#5', '#7', 'has a J']"", ""COMPARATIVE['#4', '#5', 'is equal to #8']"", ""AGGREGATE['count', '#9']"", ""PROJECT['name of #REF', '#9']"", ""PROJECT['salary of #REF', '#9']"", ""UNION['#10', '#11', '#12']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'project', 'project', 'comparative', 'comparative', 'aggregate', 'project', 'project', 'union']",train
SPIDER_train_3506,"What are the ids, full names, and salaries for employees making more than average and who work in a department with employees who have the letter J in their first name?","return employees  ;return first names of #1 ;return #1 where #2 has the  letter J ;return departments of #3 ;return employees  of #4 ;return salaries of #5 ;return the  average of #6 for each #4 ;return #5 where #6 is higher than #7 ;return ids of #8 ;return full names of #8 ;return salaries of #8 ;return #9 ,  #10 ,   #11","[""SELECT['employees']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'has the letter J']"", ""PROJECT['departments of #REF', '#3']"", ""PROJECT['employees of #REF', '#4']"", ""PROJECT['salaries of #REF', '#5']"", ""GROUP['avg', '#6', '#4']"", ""COMPARATIVE['#5', '#6', 'is higher than #7']"", ""PROJECT['ids of #REF', '#8']"", ""PROJECT['full names of #REF', '#8']"", ""PROJECT['salaries of #REF', '#8']"", ""UNION['#9', '#10', '#11']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'group', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_3507,display the employee number and job id for all employees whose salary is smaller than any salary of those employees whose job title is MK_MAN.,"return employees  ;return job  titles of #1 ;return #1 where #2 is MK_MAN ;return salaries of #3 ;return highest of #4 ;return salaries of #1 ;return #1 where #6 is lower than #5 ;return employee numbers of #7 ;return job  id of #7 ;return #8 ,  #9","[""SELECT['employees']"", ""PROJECT['job titles of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is MK_MAN']"", ""PROJECT['salaries of #REF', '#3']"", ""AGGREGATE['max', '#4']"", ""PROJECT['salaries of #REF', '#1']"", ""COMPARATIVE['#1', '#6', 'is lower than #5']"", ""PROJECT['employee numbers of #REF', '#7']"", ""PROJECT['job id of #REF', '#7']"", ""UNION['#8', '#9']""]","['select', 'project', 'comparative', 'project', 'aggregate', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3508,What are the employee ids and job ids for employees who make less than the lowest earning employee with title MK_MAN?,"return employees ;return #1 with  title MK_MAN ;return earning of #2 ;return the  lowest of #3 ;return earning of #1 ;return #1 where #5 is  lower than #4 ;return the  employee ids of #6 ;return the  job ids of #6 ;return #7 ,  #8","[""SELECT['employees']"", ""FILTER['#1', 'with title MK_MAN']"", ""PROJECT['earning of #REF', '#2']"", ""AGGREGATE['min', '#3']"", ""PROJECT['earning of #REF', '#1']"", ""COMPARATIVE['#1', '#5', 'is lower than #4']"", ""PROJECT['the employee ids of #REF', '#6']"", ""PROJECT['the job ids of #REF', '#6']"", ""UNION['#7', '#8']""]","['select', 'filter', 'project', 'aggregate', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3509,"display the employee number, name( first name and last name ) and job title for all employees whose salary is more than any salary of those employees whose job title is PU_MAN.","return employees  ;return titles of #1 ;return #1 where #2 is PU_MAN ;return salary  of #3 ;return lowest of #4 ;return salary  of #1 ;return #1 where #6 is higher than #5 ;return employee number of #7 ;return name  of #7 ;return job  title  of #7 ;return #8 ,  #9 ,   #10","[""SELECT['employees']"", ""PROJECT['titles of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is PU_MAN']"", ""PROJECT['salary of #REF', '#3']"", ""AGGREGATE['min', '#4']"", ""PROJECT['salary of #REF', '#1']"", ""COMPARATIVE['#1', '#6', 'is higher than #5']"", ""AGGREGATE['count', '#7']"", ""PROJECT['name of #REF', '#7']"", ""PROJECT['job title of #REF', '#7']"", ""UNION['#8', '#9', '#10']""]","['select', 'project', 'comparative', 'project', 'aggregate', 'project', 'comparative', 'aggregate', 'project', 'project', 'union']",train
SPIDER_train_351,What is the name and distance for aircraft with id 12?,"return aircraft ;return ids of #1 ;return #1 where #2 is  12 ;return name of #3 ;return distance of #3 ;return #4 , #5","[""SELECT['aircraft']"", ""PROJECT['ids of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 12']"", ""PROJECT['name of #REF', '#3']"", ""PROJECT['distance of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3510,"What are the employee ids, full names, and job ids for employees who make more than the highest earning employee with title PU_MAN?","return employees ;return #1 with  title PU_MAN ;return earning of #2 ;return highest of #3 ;return earning of #1 ;return #1 where #5 higher than #4 ;return employee ids of #6 ;return full names of #6 ;return job ids of #6 ;return #7 ,  #8 ,   #9","[""SELECT['employees']"", ""FILTER['#1', 'with title PU_MAN']"", ""PROJECT['earning of #REF', '#2']"", ""AGGREGATE['max', '#3']"", ""PROJECT['earning of #REF', '#1']"", ""COMPARATIVE['#1', '#5', 'higher than #4']"", ""PROJECT['employee ids of #REF', '#6']"", ""PROJECT['full names of #REF', '#6']"", ""PROJECT['job ids of #REF', '#6']"", ""UNION['#7', '#8', '#9']""]","['select', 'filter', 'project', 'aggregate', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_3511,display the department id and the total salary for those departments which contains at least two employees.,"return departments ;return #1 which contain at least two employees ;return department id of  #2 ;return total salary of  #2 ;return #3 ,  #4","[""SELECT['departments']"", ""FILTER['#1', 'which contain at least two employees']"", ""PROJECT['department id of #REF', '#2']"", ""PROJECT['salary of #REF', '#2']"", ""GROUP['sum', '#4', '#2']"", ""UNION['#3', '#5']""]","['select', 'filter', 'project', 'project', 'group', 'union']",train
SPIDER_train_3512,What are total salaries and department id for each department that has more than 2 employees?,"return departments ;return employees of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than 2 ;return employees of  #4 ;return salaries of  #5 ;return sum of  #6 for each  #4 ;return department ids of  #4 ;return #7 ,  #8","[""SELECT['departments']"", ""PROJECT['employees of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 2']"", ""PROJECT['employees of #REF', '#4']"", ""PROJECT['salaries of #REF', '#5']"", ""GROUP['sum', '#6', '#4']"", ""PROJECT['department ids of #REF', '#4']"", ""UNION['#7', '#8']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'group', 'project', 'union']",train
SPIDER_train_3513,display all the information of those employees who did not have any job in the past.,return employees ;return #1 that  did not  have  jobs in the  past ;return information of  #2,"[""SELECT['employees']"", ""FILTER['#1', 'that did not have jobs in the past']"", ""PROJECT['information of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3514,What is all the information about employees who have never had a job in the past?,return employees ;return jobs that  #1 had in the  past ;return number of  #2 for each #1 ;return #1 where #3 is  at least one ;return #1 besides #4 ;return the  information about #5,"[""SELECT['employees']"", ""PROJECT['jobs that #REF had in the past', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least one']"", ""DISCARD['#1', '#4']"", ""PROJECT['the information about #REF', '#5']""]","['select', 'project', 'group', 'comparative', 'discard', 'project']",train
SPIDER_train_3515,"display the department ID, full name (first and last name), salary for those employees who is highest salary in every department.","return employees ;return department  ;return salary  of #1 ;return #1 where #3 is  highest for each #2 ;return department  ID of #4 ;return full name of #4 ;return salary  of #4 ;return #5 ,  #6 ,   #7","[""SELECT['employees']"", ""SELECT['department']"", ""PROJECT['salary of #REF', '#1']"", ""GROUP['max', '#1', '#2']"", ""PROJECT['department ID of #REF', '#4']"", ""PROJECT['full name of #REF', '#4']"", ""PROJECT['salary of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'select', 'project', 'group', 'project', 'project', 'project', 'union']",train
SPIDER_train_3516,"What are the department ids, full names, and salaries for employees who make the most in their departments?","return departments ;return employees of #1 ;return salaries of #2 ;return the  highest of #3 for each #1 ;return #2 where #3 is  any  of #4 ;return the  department ids of #5 ;return the  full names of #5 ;return the  salaries of #5 ;return #6 ,  #7 ,   #8","[""SELECT['departments']"", ""PROJECT['employees of #REF', '#1']"", ""PROJECT['salaries of #REF', '#2']"", ""GROUP['max', '#3', '#1']"", ""COMPARATIVE['#2', '#3', 'is any of #4']"", ""PROJECT['the department ids of #REF', '#5']"", ""PROJECT['the full names of #REF', '#5']"", ""PROJECT['the salaries of #REF', '#5']"", ""UNION['#6', '#7', '#8']""]","['select', 'project', 'project', 'group', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_3517,"display the first and last name, department, city, and state province for each employee.","return employees ;return first name of #1 ;return last name of #1 ;return department of #1 ;return city of #1 ;return state province of #1 ;return #2 ,  #3 ,   #4 , #5 #6","[""SELECT['employees']"", ""PROJECT['first name of #REF', '#1']"", ""PROJECT['last name of #REF', '#1']"", ""PROJECT['department of #REF', '#1']"", ""PROJECT['city of #REF', '#1']"", ""PROJECT['state province of #REF', '#1']"", ""UNION['#2', '#3', '#4', '#5', '#6']""]","['select', 'project', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_3518,"What are the full names, departments, cities, and state provinces for each employee?","return employees ;return full names of  #1 ;return departments of  #1 ;return cities of  #1 ;return state provinces of  #1 ;return #2 ,  #3 ,   #4 , #5","[""SELECT['employees']"", ""PROJECT['full names of #REF', '#1']"", ""PROJECT['departments of #REF', '#1']"", ""PROJECT['cities of #REF', '#1']"", ""PROJECT['state provinces of #REF', '#1']"", ""UNION['#2', '#3', '#4', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_3519,"display those employees who contain a letter z to their first name and also display their last name, city.","return employees ;return first name  of  #1 ;return #1 where #2 contain a letter z ;return last name  of  #3 ;return city of  #3 ;return #4 ,  #5","[""SELECT['employees']"", ""PROJECT['first name of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'contain a letter z']"", ""PROJECT['last name of #REF', '#3']"", ""PROJECT['city of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_352,What is the name and distance for the aircraft that has an id of 12?,"return aircraft ;return ids of #1 ;return #1 where #2 is 12 ;return name of #3 ;return distance of #3 ;return #4 ,  #5","[""SELECT['aircraft']"", ""PROJECT['ids of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 12']"", ""PROJECT['name of #REF', '#3']"", ""PROJECT['distance of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3520,What are the full names and cities of employees who have the letter Z in their first names?,"return employees ;return first names of #1 ;return #1 where #2 has Z ;return full names of #3 ;return cities of #3 ;return #4 ,  #5","[""SELECT['employees']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'has Z']"", ""PROJECT['full names of #REF', '#3']"", ""PROJECT['cities of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3521,"display the department name, city, and state province for each department.","return departments ;return the  department name of  each #1 ;return the  city of  each #1 ;return the  state province of  each #1 ;return #2 ,  #3 ,   #4","[""SELECT['departments']"", ""PROJECT['the department name of each #REF', '#1']"", ""PROJECT['the city of each #REF', '#1']"", ""PROJECT['the state province of each #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_3522,"What are the department names, cities, and state provinces for each department?","return departments ;return department  names of #1 ;return cities of #1 ;return states of #1 ;return provinces of #4 ;return #2 ,  #3 ,   #5","[""SELECT['departments']"", ""PROJECT['department names of #REF', '#1']"", ""PROJECT['cities of #REF', '#1']"", ""PROJECT['states of #REF', '#1']"", ""PROJECT['provinces of #REF', '#4']"", ""UNION['#2', '#3', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_3523,display the full name (first and last name ) of employee with ID and name of the country presently where (s)he is working.,"return employees ;return country where #1 are  presently working ;return first name  of  #1 ;return last name  of  #1 ;return ID of  #1 ;return #3 ,  #4 ,   #5 , #2","[""SELECT['employees']"", ""PROJECT['country where #REF are presently working', '#1']"", ""PROJECT['first name of #REF', '#1']"", ""PROJECT['last name of #REF', '#1']"", ""PROJECT['ID of #REF', '#1']"", ""UNION['#3', '#4', '#5', '#2']""]","['select', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_3524,"What the full names, ids of each employee and the name of the country they are in?","return employees ;return full names of #1 ;return ids of #1 ;return countries #1 are in ;return names of #4 ;return #2 ,  #3 ,   #5","[""SELECT['employees']"", ""PROJECT['full names of #REF', '#1']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['countries #REF are in', '#1']"", ""PROJECT['names of #REF', '#4']"", ""UNION['#2', '#3', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_3526,What are the department names and how many employees work in each of them?,"return departments ;return names of  #1 ;return employees who  work in #1 ;return number of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['departments']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['employees who work in #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_3527,"display the full name (first and last name), and salary of those employees who working in any department located in London.","return departments ;return #1 located in London ;return employees of  #2 ;return first names of  #3 ;return last names of  #3 ;return salaries of  #3 ;return #4 ,  #5 ,   #6","[""SELECT['departments']"", ""FILTER['#1', 'located in London']"", ""PROJECT['employees of #REF', '#2']"", ""PROJECT['first names of #REF', '#3']"", ""PROJECT['last names of #REF', '#3']"", ""PROJECT['salaries of #REF', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'filter', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_3528,What are full names and salaries of employees working in the city of London?,"return employees ;return cities #1 are  working in ;return #1 where #2 is  London ;return full names of  #3 ;return salaries of  #3 ;return #4 ,  #5","[""SELECT['employees']"", ""PROJECT['cities #REF are working in', '#1']"", ""COMPARATIVE['#1', '#2', 'is London']"", ""PROJECT['full names of #REF', '#3']"", ""PROJECT['salaries of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3529,What is the name of the song that was released in the most recent year?,return songs ;return year released of #1 ;return #1 where #2 is  most recent ;return name of #3,"[""SELECT['songs']"", ""PROJECT['year released of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_353,"What is the minimum, average, and maximum distance of all aircrafts.","return aircrafts ;return distances of  #1 ;return minimum of  #2 ;return average of  #2 ;return maximum of  #2 ;return #3 ,  #4 ,   #5","[""SELECT['aircrafts']"", ""PROJECT['distances of #REF', '#1']"", ""AGGREGATE['min', '#2']"", ""AGGREGATE['avg', '#2']"", ""AGGREGATE['max', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'project', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_3530,What is the name of the song that was released most recently?,return songs ;return how recently #1 was released ;return #1 where #2 is  the  most recently ;return the  name of #3,"[""SELECT['songs']"", ""PROJECT['how recently #REF was released', '#1']"", ""COMPARATIVE['#1', '#2', 'is the most recently']"", ""PROJECT['the name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3531,What is the id of the longest song?,return songs ;return ids of  #1 ;return #2 where #1 is  longest,"[""SELECT['songs']"", ""PROJECT['ids of #REF', '#1']"", ""SUPERLATIVE['max', '#2', '#1']""]","['select', 'project', 'superlative']",train
SPIDER_train_3532,Find the id of the song that lasts the longest.,return songs ;return how  long #1 last ;return #1 where  #2 is  highest ;return id of  #3,"[""SELECT['songs']"", ""PROJECT['how long #REF last', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['id of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_3533,Find the names of all English songs.,return songs ;return #1 that  are  English ;return names of  #2,"[""SELECT['songs']"", ""FILTER['#1', 'that are English']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3534,What are the names of all songs in English?,return songs ;return #1 that  are  in English ;return names of  all #2,"[""SELECT['songs']"", ""FILTER['#1', 'that are in English']"", ""PROJECT['names of all #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3535,What are the id of songs whose format is mp3.,return songs ;return #1 whose format is  mp3 ;return id of  #2,"[""SELECT['songs']"", ""FILTER['#1', 'whose format is mp3']"", ""PROJECT['id of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3536,What are the id of all the files in mp3 format?,return files ;return formats of  #1 ;return #1 where #2 is  mp3 ;return id of  #3,"[""SELECT['files']"", ""PROJECT['formats of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is mp3']"", ""PROJECT['id of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3537,List the name and country of origin for all singers who have produced songs with rating above 9.,"return songs ;return ratings of  #1 ;return #1 where  #2 is higher than 9 ;return singers who  produced #3 ;return names of  #4 ;return countries of  origin of #4 ;return #5 ,  #6","[""SELECT['songs']"", ""PROJECT['ratings of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 9']"", ""PROJECT['singers who produced #REF', '#3']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['countries of origin of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_3538,What are the different names and countries of origins for all artists whose song ratings are above 9?,"return artists ;return song ratings of #1 ;return #1 where #2 is higher than 9 ;return different names of #3 ;return countries of origin of  #3 ;return #4 ,  #5","[""SELECT['artists']"", ""PROJECT['song ratings of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 9']"", ""PROJECT['different names of #REF', '#3']"", ""PROJECT['countries of origin of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3539,List the file size and format for all songs that have resolution lower than 800.,"return songs ;return resolutions of  #1 ;return #1 where  #2 is lower than 800 ;return file sizes of  #3 ;return formats of  #3 ;return #4 ,  #5","[""SELECT['songs']"", ""PROJECT['resolutions of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is lower than 800']"", ""PROJECT['file sizes of #REF', '#3']"", ""PROJECT['formats of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_354,"Return the minimum, average and maximum distances traveled across all aircrafts.","return aircrafts ;return distances that  #1 traveled ;return the  lowest #2 ;return the  average of #2 ;return the  highest #2 ;return #3 ,  #4 ,   #5","[""SELECT['aircrafts']"", ""PROJECT['distances that #REF traveled', '#1']"", ""AGGREGATE['min', '#2']"", ""AGGREGATE['avg', '#2']"", ""AGGREGATE['max', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'project', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_3540,What are the file sizes and formats for all songs with a resolution lower than 800?,return songs ;return #1 with a resolution lower than 800 ;return file sizes and  formats of  #2,"[""SELECT['songs']"", ""FILTER['#1', 'with a resolution lower than 800']"", ""PROJECT['file sizes and formats of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3541,What is the name of the artist who produced the shortest song?,return artists ;return songs of #1 ;return #1 where #2 is  shortest ;return name of #3,"[""SELECT['artists']"", ""PROJECT['songs of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_3542,What are the names of the artists who sang the shortest song?,return artists ;return #1 that  sang the  shortest song ;return names of  #2,"[""SELECT['artists']"", ""FILTER['#1', 'that sang the shortest song']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3543,What are the names and countries of origin for the artists who produced the top three highly rated songs.,"return songs ;return the   top three highly rated #1 ;return the   artists who produced #2 ;return the   names of #3 ;return the   countries of origin of  #3 ;return #4 ,  #5","[""SELECT['songs']"", ""PROJECT['the top three highly rated #REF', '#1']"", ""PROJECT['the artists who produced #REF', '#2']"", ""PROJECT['the names of #REF', '#3']"", ""PROJECT['the countries of origin of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_3544,What are the names of the singers who sang the top 3 most highly rated songs and what countries do they hail from?,"return songs ;return 3 top rated #1 ;return singers of  #2 ;return names of  #3 ;return countries hail from  #3 ;return #4 ,  #5","[""SELECT['songs']"", ""PROJECT['3 top rated #REF', '#1']"", ""PROJECT['singers of #REF', '#2']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['countries hail from #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_3545,How many songs have 4 minute duration?,return songs ;return duration of  #1 ;return #1 where  #2 is 4 minutes ;return number of  #3,"[""SELECT['songs']"", ""PROJECT['duration of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 4 minutes']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_3546,What is the count of the songs that last approximately 4 minutes?,return songs ;return #1 that  last approximately 4 minutes ;return the  count of  #2,"[""SELECT['songs']"", ""FILTER['#1', 'that last approximately 4 minutes']"", ""PROJECT['the count of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3547,How many artists are from Bangladesh?,return artists ;return #1 from Bangladesh ;return number of  #2,"[""SELECT['artists']"", ""FILTER['#1', 'from Bangladesh']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_3548,How many Bangladeshi artists are listed?,return artists ;return #1 that  are  Bangladeshi ;return number of  #2,"[""SELECT['artists']"", ""FILTER['#1', 'that are Bangladeshi']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_3549,What is the average rating of songs produced by female artists?,return songs ;return artists of  #1 ;return #1 where #2 are  female ;return ratings of  #3 ;return average of  #4,"[""SELECT['songs']"", ""PROJECT['artists of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'are female']"", ""PROJECT['ratings of #REF', '#3']"", ""AGGREGATE['avg', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_355,Show the id and name of the aircraft with the maximum distance.,"return aircraft ;return distances of #1 ;return #1 where #2 is  maximum ;return id of #3 ;return name of #3 ;return #4 ,  #5","[""SELECT['aircraft']"", ""PROJECT['distances of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is maximum']"", ""PROJECT['id of #REF', '#3']"", ""PROJECT['name of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3550,"How many songs, on average, are sung by a female artist?",return female artists ;return songs of  #1 ;return number of  #2 for each  #1 ;return average of  #3,"[""SELECT['female artists']"", ""PROJECT['songs of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['avg', '#3']""]","['select', 'project', 'group', 'aggregate']",train
SPIDER_train_3551,What is the most popular file format?,return file formats ;return most popular #1,"[""SELECT['file formats']"", ""PROJECT['most popular #REF', '#1']""]","['select', 'project']",train
SPIDER_train_3552,Find the file format that is used by the most files.,return file formats ;return files with #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['file formats']"", ""PROJECT['files with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_3553,Find the names of the artists who are from UK and have produced English songs.,return artists ;return #1 who  are  from  UK ;return #1 who  have  produced English songs ;return #1 of  both #2 and #3 ;return names of  #4,"[""SELECT['artists']"", ""FILTER['#1', 'who are from UK']"", ""FILTER['#1', 'who have produced English songs']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'filter', 'intersection', 'project']",train
SPIDER_train_3554,What are the names of the artists that are from the UK and sang songs in English?,return the  UK ;return artists of #1 ;return songs of #2 ;return #3 that are sang in  English ;return number of  #4 for each #2 ;return #2 where #5 is at least one ;return names of #6,"[""SELECT['the UK']"", ""PROJECT['artists of #REF', '#1']"", ""PROJECT['songs of #REF', '#2']"", ""FILTER['#3', 'that are sang in English']"", ""GROUP['count', '#4', '#2']"", ""COMPARATIVE['#2', '#5', 'is at least one']"", ""PROJECT['names of #REF', '#6']""]","['select', 'project', 'project', 'filter', 'group', 'comparative', 'project']",train
SPIDER_train_3555,Find the id of songs that are available in mp4 format and have resolution lower than 1000.,return songs ;return formats of  #1 ;return #1 where #2 is  mp4 ;return resolutions of  #1 ;return #1 where #4 is  lower than 1000 ;return #1 of  both #3 and  #5 ;return ids of  #6,"[""SELECT['songs']"", ""PROJECT['formats of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is mp4']"", ""PROJECT['resolutions of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is lower than 1000']"", ""INTERSECTION['#1', '#3', '#5']"", ""PROJECT['ids of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'comparative', 'intersection', 'project']",train
SPIDER_train_3556,What is the id of the files that are available in the format of mp4 and a resolution smaller than 1000?,return files ;return formats of #1 ;return #1 where #2 is  mp4 ;return resolutions of #1 ;return #1 where #4 is  lower than 1000 ;return id of #1 ;reutrn #6 of both #3 and  #5,"[""SELECT['files']"", ""PROJECT['formats of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is mp4']"", ""PROJECT['resolutions of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is lower than 1000']"", ""PROJECT['id of #REF', '#1']"", ""INTERSECTION['#6', '#3', '#5']""]","['select', 'project', 'comparative', 'project', 'comparative', 'project', 'intersection']",train
SPIDER_train_3557,What is the country of origin of the artist who is female and produced a song in Bangla?,return artists ;return #1 who are female ;return songs of #1 ;return #3 produced in Bangla ;return number of  #4 for each #1 ;return #1 where #5 is  one ;return #1 in both #2 and #6 ;return the  country of origin of  #7,"[""SELECT['artists']"", ""FILTER['#1', 'who are female']"", ""PROJECT['songs of #REF', '#1']"", ""FILTER['#3', 'produced in Bangla']"", ""GROUP['count', '#4', '#1']"", ""COMPARATIVE['#1', '#5', 'is one']"", ""INTERSECTION['#1', '#2', '#6']"", ""PROJECT['the country of origin of #REF', '#7']""]","['select', 'filter', 'project', 'filter', 'group', 'comparative', 'intersection', 'project']",train
SPIDER_train_3558,What countries are the female artists who sung in the language Bangla from?,return female artists ;return #1 who  sung in the  language Bangla ;return the  countries of  #2,"[""SELECT['female artists']"", ""FILTER['#1', 'who sung in the language Bangla']"", ""PROJECT['the countries of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3559,What is the average duration of songs that have mp3 format and resolution below 800?,return songs ;return formats of  #1 ;return #1 where #2 is  mp3 ;return resolutions of  #1 ;return #1 where #4 is  lower than 800 ;return #1 of  both #3 and  #5 ;return durations of  #6 ;return average of  #7,"[""SELECT['songs']"", ""PROJECT['formats of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is mp3']"", ""PROJECT['resolutions of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is lower than 800']"", ""INTERSECTION['#1', '#3', '#5']"", ""PROJECT['durations of #REF', '#6']"", ""AGGREGATE['avg', '#7']""]","['select', 'project', 'comparative', 'project', 'comparative', 'intersection', 'project', 'aggregate']",train
SPIDER_train_356,What is the id and name of the aircraft that can cover the maximum distance?,"return aircraft ;return distances that  #1 can cover ;return #1 where #2 is  the   highest ;return id of #3 ;return the   name of #3 ;return #4 ,  #5","[""SELECT['aircraft']"", ""PROJECT['distances that #REF can cover', '#1']"", ""COMPARATIVE['#1', '#2', 'is the highest']"", ""PROJECT['id of #REF', '#3']"", ""PROJECT['the name of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3560,What is the average song duration for the songs that are in mp3 format and whose resolution below 800?,return songs ;return formats of  #1 ;return #1 where #2 is  mp3 ;return resolutions of  #1 ;return #1 where #4 is  lower than 800 ;return #1 of  both #3 and  #5 ;return duration of  #6 ;return average of  #7,"[""SELECT['songs']"", ""PROJECT['formats of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is mp3']"", ""PROJECT['resolutions of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is lower than 800']"", ""INTERSECTION['#1', '#3', '#5']"", ""PROJECT['duration of #REF', '#6']"", ""AGGREGATE['avg', '#7']""]","['select', 'project', 'comparative', 'project', 'comparative', 'intersection', 'project', 'aggregate']",train
SPIDER_train_3561,What is the number of artists for each gender?,return artists ;return gender ;return number of  #1 for each  #2,"[""SELECT['artists']"", ""SELECT['gender']"", ""GROUP['count', '#1', '#2']"", ""UNION['#2', '#3']""]","['select', 'select', 'group', 'union']",train
SPIDER_train_3562,How many artists are male and how many are female?,"return artists ;return #1 that  are  male ;return number of #2 ;return #1 that  are  female ;return number of #4 ;return #3 ,   #5","[""SELECT['artists']"", ""FILTER['#1', 'that are male']"", ""AGGREGATE['count', '#2']"", ""FILTER['#1', 'that are female']"", ""AGGREGATE['count', '#4']"", ""UNION['#3', '#5']""]","['select', 'filter', 'aggregate', 'filter', 'aggregate', 'union']",train
SPIDER_train_3563,What is the average rating of songs for each language?,return languages ;return songs of #1 ;return ratings of #2 ;return average of #3 for each #1,"[""SELECT['languages']"", ""PROJECT['songs of #REF', '#1']"", ""PROJECT['ratings of #REF', '#2']"", ""GROUP['avg', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_3564,What is the average song rating for each language?,return languages ;return songs in #1 ;return ratings of  #2 ;return average of  #3 for each  #1,"[""SELECT['languages']"", ""PROJECT['songs in #REF', '#1']"", ""PROJECT['ratings of #REF', '#2']"", ""GROUP['avg', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_3565,Return the gender and name of artist who produced the song with the lowest resolution.,"return songs ;return resolutions of #1 ;return #1 where #2 is  the   lowest ;return the   artist who produced #3 ;return the   gender of #4 ;return the   name of #4 ;return #5 ,  #6","[""SELECT['songs']"", ""PROJECT['resolutions of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the lowest']"", ""PROJECT['the artist who produced #REF', '#3']"", ""PROJECT['the gender of #REF', '#4']"", ""PROJECT['the name of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_3566,What is the gender and name of the artist who sang the song with the smallest resolution?,"return artists ;return songs of  #1 ;return resolutions of  #2 ;return #1 where #3 is  lowest ;return gender of  #4 ;return name of  #4 ;return #5 ,  #6","[""SELECT['artists']"", ""PROJECT['songs of #REF', '#1']"", ""PROJECT['resolutions of #REF', '#2']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['gender of #REF', '#4']"", ""PROJECT['name of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'project', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_3567,"For each file format, return the number of artists who released songs in that format.",return file formats ;return songs in #1 ;return artists of  #2 ;return number of #3 for each #1,"[""SELECT['file formats']"", ""PROJECT['songs in #REF', '#1']"", ""PROJECT['artists of #REF', '#2']"", ""GROUP['count', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_3568,How many songs were released for each format?,return formats ;return songs of  #1 ;return number of #2 for each #1,"[""SELECT['formats']"", ""PROJECT['songs of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_3569,Find the distinct names of all songs that have a higher resolution than some songs in English.,return songs  ;return #1 in English ;return resolutions of #2 ;return the  lowest #3 ;return resolutions of #1 ;return #1 where #5 is  higher than #4 ;return the  distinct names of #6,"[""SELECT['songs']"", ""FILTER['#1', 'in English']"", ""PROJECT['resolutions of #REF', '#2']"", ""AGGREGATE['min', '#3']"", ""PROJECT['resolutions of #REF', '#1']"", ""COMPARATIVE['#1', '#5', 'is higher than #4']"", ""PROJECT['the distinct names of #REF', '#6']""]","['select', 'filter', 'project', 'aggregate', 'project', 'comparative', 'project']",train
SPIDER_train_357,Show the name of aircrafts with top three lowest distances.,return aircrafts ;return distances of #1 ;return #1 where #2 is  three lowest ;return names of #3,"[""SELECT['aircrafts']"", ""PROJECT['distances of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is three lowest']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3570,What are the different names for all songs that have a higher resolution than English songs?,return songs  ;return #1 that are English ;return resolutions of #1 ;return resolutions of #2 ;return #1 where #3 is higher than #4 ;return different names of #5,"[""SELECT['songs']"", ""FILTER['#1', 'that are English']"", ""PROJECT['resolutions of #REF', '#1']"", ""PROJECT['resolutions of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is higher than #4']"", ""PROJECT['different names of #REF', '#5']""]","['select', 'filter', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_3571,What are the names of all songs that have a lower rating than some song of blues genre?,return songs ;return genre of #1 ;return #1 where #2 is  blues ;return ratings of #3 ;return ratings of #1 ;return #1 where #5 is  lower than any  #4 ;return the  names of #6,"[""SELECT['songs']"", ""PROJECT['genre of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is blues']"", ""PROJECT['ratings of #REF', '#3']"", ""PROJECT['ratings of #REF', '#1']"", ""COMPARATIVE['#1', '#5', 'is lower than any #4']"", ""PROJECT['the names of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_3572,What are the names of the songs that have a lower rating than at least one blues song?,return songs ;return blues songs ;return ratings of #2 ;return the  highest of #3 ;return ratings of #1 ;return #1 where #5 is lower than #4 ;return names of #6,"[""SELECT['songs']"", ""SELECT['blues songs']"", ""PROJECT['ratings of #REF', '#2']"", ""AGGREGATE['max', '#3']"", ""PROJECT['ratings of #REF', '#1']"", ""COMPARATIVE['#1', '#5', 'is lower than #4']"", ""PROJECT['names of #REF', '#6']""]","['select', 'select', 'project', 'aggregate', 'project', 'comparative', 'project']",train
SPIDER_train_3573,"What is the name and country of origin of the artist who released a song that has ""love"" in its title?","return artists ;return songs of  #1 ;return titles of  #2 ;return #1 where #3 has  love ;return name of  #4 ;return country of  origin of #4 ;return #5 ,  #6","[""SELECT['artists']"", ""PROJECT['songs of #REF', '#1']"", ""PROJECT['titles of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'has love']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['country of origin of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3574,"What are the names of the artists who released a song that has the word love in its title, and where are the artists from?","return songs ;return #1 with love in the   title ;return artists  of  #2 ;return names of  #3 ;return where from  #3 ;return #4 ,  #5","[""SELECT['songs']"", ""FILTER['#1', 'with love in the title']"", ""PROJECT['artists of #REF', '#2']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['where from #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_3575,List the name and gender for all artists who released songs in March.,"return artists ;return #1 who  released songs in  March ;return name of #2 ;return gender of #2 ;return #3 ,  #4","[""SELECT['artists']"", ""FILTER['#1', 'who released songs in March']"", ""PROJECT['name of #REF', '#2']"", ""PROJECT['gender of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_3576,What are the names and genders of all artists who released songs in the month of March?,"return artists ;return months #1 released songs ;return #1 where #2 is  March ;return names of  #3 ;return genders of  #3 ;return #4 ,  #5","[""SELECT['artists']"", ""PROJECT['months #REF released songs', '#1']"", ""COMPARATIVE['#1', '#2', 'is March']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['genders of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3577,"List the names of all genres in alphabetical oder, together with its ratings.","return genres ;return names of  #1 ;return ratings of  #1 ;return #2 ,  #3 ;return #4 sorted by #2 in alphabetical oder","[""SELECT['genres']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['ratings of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#4', '#2', 'in alphabetical oder']""]","['select', 'project', 'project', 'union', 'sort']",train
SPIDER_train_3578,"What are the names of all genres in alphabetical order, combined with its ratings?","return genres ;return names of  #1 ;return ratings of  #1 ;return #2 ,  #3 ;return #4 sorted by alphabetical order","[""SELECT['genres']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['ratings of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#4', '#4', 'alphabetical order']""]","['select', 'project', 'project', 'union', 'sort']",train
SPIDER_train_3579,Give me a list of the names of all songs ordered by their resolution.,return songs ;return names of  #1 ;return resolution of  #1 ;return #2 sorted by #3,"[""SELECT['songs']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['resolution of #REF', '#1']"", ""SORT['#2', '#3']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_358,What are the aircrafts with top 3 shortest lengthes? List their names.,return aircraft ;return names of  #1 ;return lengthes of  #1 ;return #2 sorted by #3 ;return top 3 #4,"[""SELECT['aircraft']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['lengthes of #REF', '#1']"", ""SORT['#2', '#3']"", ""PROJECT['top 3 #REF', '#4']""]","['select', 'project', 'project', 'sort', 'project']",train
SPIDER_train_3580,What are the names of all songs that are ordered by their resolution numbers?,return songs ;return names of #1 ;return resolution numbers of #1 ;return #2 sorted by #3,"[""SELECT['songs']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['resolution numbers of #REF', '#1']"", ""SORT['#2', '#3']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_3581,What are the ids of songs that are available in either mp4 format or have resolution above 720?,return songs ;return formats #1 are  available in ;return #1 where #2 is  mp4 ;return resolution of  #1 ;return #1 where #4 is  higher than 720 ;return #3 or  #5 ;return ids of  #6,"[""SELECT['songs']"", ""PROJECT['formats #REF are available in', '#1']"", ""COMPARATIVE['#1', '#2', 'is mp4']"", ""PROJECT['resolution of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is higher than 720']"", ""UNION['#3', '#5']"", ""PROJECT['ids of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'comparative', 'union', 'project']",train
SPIDER_train_3582,What are the ids of all songs that are available on mp4 or have a higher resolution than 720?,return songs ;return #1 that  are  available on  mp4 ;return resolution of  #1 ;return #1 where #3 is  higher than 720 ;return #2 or  #4 ;return ids of  #5,"[""SELECT['songs']"", ""FILTER['#1', 'that are available on mp4']"", ""PROJECT['resolution of #REF', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 720']"", ""UNION['#2', '#4']"", ""PROJECT['ids of #REF', '#5']""]","['select', 'filter', 'project', 'comparative', 'union', 'project']",train
SPIDER_train_3583,List the names of all songs that have 4 minute duration or are in English.,return songs ;return durations of  #1 ;return #1 where  #2 is 4 minute ;return #1 that  are  in English ;return #3 or #4 ;return names of  #5,"[""SELECT['songs']"", ""PROJECT['durations of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 4 minute']"", ""FILTER['#1', 'that are in English']"", ""UNION['#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'filter', 'union', 'project']",train
SPIDER_train_3584,What are the names of all songs that are approximately 4 minutes long or are in English?,"return songs ;return #1 that  are in English ;return minutes long that  #1 are ;return #1 where #3 is  approximately 4 ;return #4 ,  #2 ;return names of #5","[""SELECT['songs']"", ""FILTER['#1', 'that are in English']"", ""PROJECT['minutes long that #REF are', '#1']"", ""COMPARATIVE['#1', '#3', 'is approximately 4']"", ""UNION['#4', '#2']"", ""PROJECT['names of #REF', '#5']""]","['select', 'filter', 'project', 'comparative', 'union', 'project']",train
SPIDER_train_3585,What is the language used most often in the songs?,return languages ;return songs that  used #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['languages']"", ""PROJECT['songs that used #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_3586,What are the languages that are used most often in songs?,return languages ;return songs in #1 ;return number of #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['languages']"", ""PROJECT['songs in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_3587,What is the language that was used most often in songs with resolution above 500?,return songs ;return resolutions of #1 ;return #1 where #2 is  higher than 500 ;return languages used in #3 ;return number of  #3 for each #4 ;return #4 where #5 is  the  highest,"[""SELECT['songs']"", ""PROJECT['resolutions of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 500']"", ""PROJECT['languages used in #REF', '#3']"", ""GROUP['count', '#3', '#4']"", ""COMPARATIVE['#4', '#5', 'is the highest']""]","['select', 'project', 'comparative', 'project', 'group', 'comparative']",train
SPIDER_train_3588,"What is the name of the artist, for each language, that has the most songs with a higher resolution than 500?",return songs ;return resolution of #1 ;return #1 where #2 higher than 500 ;return number of  #3 for each language ;return highest of #4 for each language ;return artists of #5 ;return names of #6,"[""SELECT['songs']"", ""PROJECT['resolution of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'higher than 500']"", ""PROJECT['language', '#3']"", ""GROUP['count', '#3', '#4']"", ""PROJECT['language', '#5']"", ""GROUP['max', '#5', '#6']"", ""PROJECT['artists of #REF', '#7']"", ""PROJECT['names of #REF', '#8']""]","['select', 'project', 'comparative', 'project', 'group', 'project', 'group', 'project', 'project']",train
SPIDER_train_3589,What are the names of artists who are Male and are from UK?,return artists ;return #1 that  are  Male ;return #1 that  are  from  UK ;return #1 of  both #2 and  #3 ;return names of  #4,"[""SELECT['artists']"", ""FILTER['#1', 'that are Male']"", ""FILTER['#1', 'that are from UK']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'filter', 'intersection', 'project']",train
SPIDER_train_359,Show names for all aircrafts with distances more than the average.,return aircrafts ;return distances of #1 ;return average of #2 ;return #1 where #2 is higher than #3 ;return names of #4,"[""SELECT['aircrafts']"", ""PROJECT['distances of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_3590,What are the names of all male British artists?,return male British artists ;return names of  #1,"[""SELECT['male British artists']"", ""PROJECT['names of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_3591,Find the names of songs whose genre is modern or language is English.,return songs ;return genres of #1 ;return #1 where #2 is modern ;return languages of #1 ;return #1 where #4 is English ;return #3 or  #5 ;return names of #6,"[""SELECT['songs']"", ""PROJECT['genres of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is modern']"", ""PROJECT['languages of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is English']"", ""UNION['#3', '#5']"", ""PROJECT['names of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'comparative', 'union', 'project']",train
SPIDER_train_3592,What are the names of the songs that are modern or sung in English?,return songs ;return #1 that  are  modern ;return #1 sung in English ;return #2 or  #3 ;return names of #4,"[""SELECT['songs']"", ""FILTER['#1', 'that are modern']"", ""FILTER['#1', 'sung in English']"", ""UNION['#2', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_3593,Return the names of songs for which format is mp3 and resolution is below 1000.,return songs ;return #1 with  format of  mp3 ;return #2 with  resolution below 1000 ;return names of #3,"[""SELECT['songs']"", ""FILTER['#1', 'with format of mp3']"", ""FILTER['#2', 'with resolution below 1000']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_3594,What are the names of all songs that are in mp3 format and have a resolution lower than 1000?,return songs ;return formats of  #1 ;return #1 where #2 is  mp3 ;return resolutions of  #1 ;return #1 where #4 is  lower than 1000 ;return #1 of  both #3 and  #5 ;return names of  #6,"[""SELECT['songs']"", ""PROJECT['formats of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is mp3']"", ""PROJECT['resolutions of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is lower than 1000']"", ""INTERSECTION['#1', '#3', '#5']"", ""PROJECT['names of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'comparative', 'intersection', 'project']",train
SPIDER_train_3595,Return the names of singers who are from UK and released an English song.,return singers ;return #1 from the  UK ;return #2 who  released English song ;return names of  #3,"[""SELECT['singers']"", ""FILTER['#1', 'from the UK']"", ""FILTER['#2', 'who released English song']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_3596,What are the names of all singers that are from the UK and released a song in English?,return singers ;return #1 from the  UK ;return songs #2 released ;return #1 where #3 is  in English ;return names of #4,"[""SELECT['singers']"", ""FILTER['#1', 'from the UK']"", ""PROJECT['songs #REF released', '#2']"", ""COMPARATIVE['#1', '#3', 'is in English']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'project', 'comparative', 'project']",train
SPIDER_train_3597,What are the average rating and resolution of songs that are in Bangla?,"return songs ;return #1 that  are in Bangla ;return ratings of #2 ;return average of #3 ;return resolutions of #2 ;return average of #5 ;return #4 ,  #6","[""SELECT['songs']"", ""FILTER['#1', 'that are in Bangla']"", ""PROJECT['ratings of #REF', '#2']"", ""AGGREGATE['avg', '#3']"", ""PROJECT['resolutions of #REF', '#2']"", ""AGGREGATE['avg', '#5']"", ""UNION['#4', '#6']""]","['select', 'filter', 'project', 'aggregate', 'project', 'aggregate', 'union']",train
SPIDER_train_3598,What is the average rating and resolution of all bangla songs?,"return bangla songs ;return ratings of  #1 ;return average of  #2 ;return resolutions of  #1 ;return average of  #4 ;return #3 ,  #5","[""SELECT['bangla songs']"", ""PROJECT['ratings of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""PROJECT['resolutions of #REF', '#1']"", ""AGGREGATE['avg', '#4']"", ""UNION['#3', '#5']""]","['select', 'project', 'aggregate', 'project', 'aggregate', 'union']",train
SPIDER_train_3599,What are the maximum and minimum resolution of songs whose duration is 3 minutes?,"return songs ;return durations of  #1 ;return #1 where #2 is  3 minutes ;return maximum resolution of  #3 ;return minimum resolution of  #3 ;return #4 ,  #5","[""SELECT['songs']"", ""PROJECT['durations of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 3 minutes']"", ""PROJECT['resolution of #REF', '#3']"", ""GROUP['max', '#4', '#3']"", ""PROJECT['resolution of #REF', '#3']"", ""GROUP['min', '#6', '#3']"", ""UNION['#5', '#7']""]","['select', 'project', 'comparative', 'project', 'group', 'project', 'group', 'union']",train
SPIDER_train_36,Show the official names of the cities that have hosted more than one competition.,return cities ;return competitions that  #1 hosted ;return number of  #2 for each #1 ;return #1 where #3 is  more than  one ;return the  official names of #4,"[""SELECT['cities']"", ""PROJECT['competitions that #REF hosted', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than one']"", ""PROJECT['the official names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_360,What are the names of all aircrafts that can cover more distances than average?,return aircrafts ;return distances #1 can cover ;return average of  #2 ;return #1 where #2 is  higher than #3 ;return names of  #4,"[""SELECT['aircrafts']"", ""PROJECT['distances #REF can cover', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_3600,What is the maximum and minimum resolution of all songs that are approximately 3 minutes long?,"return songs ;return #1 that  are approximately 3 minutes long ;return resolutions of #2 ;return maximum of #3 ;return minimum of #3 ;return #4 ,  #5","[""SELECT['songs']"", ""FILTER['#1', 'that are approximately 3 minutes long']"", ""PROJECT['resolutions of #REF', '#2']"", ""AGGREGATE['max', '#3']"", ""AGGREGATE['min', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_3601,What are the maximum duration and resolution of songs grouped and ordered by languages?,"return songs ;return resolutions of  #1 ;return languages of  #1 ;return maximum durations of  #1 ;return #2 ,  #4 ;return #5 sorted by #3","[""SELECT['songs']"", ""PROJECT['resolutions of #REF', '#1']"", ""PROJECT['languages of #REF', '#1']"", ""PROJECT['durations of #REF', '#1']"", ""GROUP['max', '#4', '#1']"", ""UNION['#2', '#5']"", ""SORT['#6', '#3']""]","['select', 'project', 'project', 'project', 'group', 'union', 'sort']",train
SPIDER_train_3602,"What are the maximum duration and resolution of all songs, for each language, ordered alphabetically by language?","return songs ;return languages of #1 ;return durations of #1 ;return resolutions of #1 ;return the  highest of #3 for each #2 ;return the  highest of #4 for each #2 ;return #5 ,  #6 ; return #7 sorted by #2 alphabetically","[""SELECT['songs']"", ""PROJECT['languages of #REF', '#1']"", ""PROJECT['durations of #REF', '#1']"", ""PROJECT['resolutions of #REF', '#1']"", ""GROUP['max', '#3', '#2']"", ""GROUP['max', '#4', '#2']"", ""UNION['#5', '#6']"", ""SORT['#7', '#2', 'alphabetically']""]","['select', 'project', 'project', 'project', 'group', 'group', 'union', 'sort']",train
SPIDER_train_3603,What are the shortest duration and lowest rating of songs grouped by genre and ordered by genre?,return songs ;return genre of #1 ;return rating of #1 ;return duration of #1 ;return #1 where #3 is  lowest for each #2 ;return #1 where #4 is  shortest for each #2 ;return #5 and #6 ;return #7 ordered by  #2,"[""SELECT['songs']"", ""PROJECT['genre of #REF', '#1']"", ""PROJECT['rating of #REF', '#1']"", ""PROJECT['duration of #REF', '#1']"", ""GROUP['min', '#1', '#2']"", ""GROUP['min', '#1', '#2']"", ""UNION['#5', '#6']"", ""SORT['#7', '#2']""]","['select', 'project', 'project', 'project', 'group', 'group', 'union', 'sort']",train
SPIDER_train_3604,"What is the shortest and most poorly rated song for each genre, ordered alphabetically by genre?","return genres ;return songs of #1 ;return how short are #2 ;return how rated are #2 ;return #2 where #3 is the  lowest for each #1 ;return #2 where #4 is the  lowest for each #1 ;return #5 ,  #6 ; return #7 sorted by #1 alphabetically","[""SELECT['genres']"", ""PROJECT['songs of #REF', '#1']"", ""PROJECT['how short are #REF', '#2']"", ""PROJECT['how rated are #REF', '#2']"", ""GROUP['min', '#2', '#1']"", ""GROUP['min', '#2', '#1']"", ""UNION['#5', '#6']"", ""SORT['#7', '#1', 'alphabetically']""]","['select', 'project', 'project', 'project', 'group', 'group', 'union', 'sort']",train
SPIDER_train_3605,Find the names and number of works of all artists who have at least one English songs.,"return songs ;return #1 in English ;return artists of  #2 ;return works of  #3 ;return names of  #4 ;return number of #4 ;return #5 ,   #6","[""SELECT['songs']"", ""FILTER['#1', 'in English']"", ""PROJECT['artists of #REF', '#2']"", ""PROJECT['works of #REF', '#3']"", ""PROJECT['names of #REF', '#4']"", ""AGGREGATE['count', '#4']"", ""UNION['#5', '#6']""]","['select', 'filter', 'project', 'project', 'project', 'aggregate', 'union']",train
SPIDER_train_3606,What are the names and number of works for all artists who have sung at least one song in English?,"return artists ;return songs of #1 ;return #2 that are sung in  English ;return number of  #3 for each #1 ;return #1 where #4 is at least one ;return names of #5 ;return works of #5 ;return number of  #7 for each #5 ;return #6 ,  #8","[""SELECT['artists']"", ""PROJECT['songs of #REF', '#1']"", ""FILTER['#2', 'that are sung in English']"", ""GROUP['count', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is at least one']"", ""PROJECT['names of #REF', '#5']"", ""PROJECT['works of #REF', '#5']"", ""GROUP['count', '#7', '#5']"", ""UNION['#6', '#8']""]","['select', 'project', 'filter', 'group', 'comparative', 'project', 'project', 'group', 'union']",train
SPIDER_train_3607,Find the name and country of origin for all artists who have release at least one song of resolution above 900.,"return songs ;return #1 of  resolution above 900 ;return artists who  have  release #2 ;return country of  origin of #3 ;return names of  #3 ;return #4 ,   #5","[""SELECT['songs']"", ""FILTER['#1', 'of resolution above 900']"", ""PROJECT['artists who have release #REF', '#2']"", ""PROJECT['country of origin of #REF', '#3']"", ""PROJECT['names of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_3608,What is the name and country of origin for each artist who has released a song with a resolution higher than 900?,"return artists ;return songs of  #1 ;return resolutions of  #2 ;return #1 where #3 is  higher than 900 ;return name of  #4 ;return country of  origin of #4 ;return #5 ,  #6","[""SELECT['artists']"", ""PROJECT['songs of #REF', '#1']"", ""PROJECT['resolutions of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is higher than 900']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['country of origin of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3609,Find the names and number of works of the three artists who have produced the most songs.,"return artists ;return songs produced of #1 ;return number of  #2 for each #1 ;return the  three highest of #3 ;return #1 where #3 is equal to any of #4 ;return names of #5 ;return works of #5 ;return number of  #7 for each #5 ;return #6 ,  #8","[""SELECT['artists']"", ""PROJECT['songs produced of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['max', '#3']"", ""COMPARATIVE['#1', '#3', 'is equal to any of #4']"", ""PROJECT['names of #REF', '#5']"", ""PROJECT['works of #REF', '#5']"", ""GROUP['count', '#7', '#5']"", ""UNION['#6', '#8']""]","['select', 'project', 'group', 'aggregate', 'comparative', 'project', 'project', 'group', 'union']",train
SPIDER_train_3610,"What are the names of the three artists who have produced the most songs, and how many works did they produce?","return artists ;return songs #1 produced ;return number of  #2 for each #1 ;return #1 where #3 are the   three highest ;return names of #4 ;return songs #4 produced ;return number of  #6 for each #4 ;return #5 ,  #7","[""SELECT['artists']"", ""PROJECT['songs #REF produced', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'are the three highest']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['songs #REF produced', '#4']"", ""GROUP['count', '#6', '#4']"", ""UNION['#5', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'group', 'union']",train
SPIDER_train_3611,Find the country of origin for the artist who made the least number of songs?,return artists ;return songs #1 made ;return number of #2 ;return #1 where  #3 is  least ;return country of  origin of #4,"[""SELECT['artists']"", ""PROJECT['songs #REF made', '#1']"", ""AGGREGATE['count', '#2']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['country of origin of #REF', '#4']""]","['select', 'project', 'aggregate', 'superlative', 'project']",train
SPIDER_train_3612,What country is the artist who made the fewest songs from?,return artists ;return #1 who  made the  fewest songs ;return country #2 is  from,"[""SELECT['artists']"", ""FILTER['#1', 'who made the fewest songs']"", ""PROJECT['country #REF is from', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3613,What are the names of the songs whose rating is below the rating of all songs in English?,return songs  ;return #1 in English ;return ratings of #2 ;return the   lowest of #3 ;return ratings of #1 ;return #1 where #5 is  lower than #4 ;return the   names of #6,"[""SELECT['songs']"", ""FILTER['#1', 'in English']"", ""PROJECT['ratings of #REF', '#2']"", ""AGGREGATE['min', '#3']"", ""PROJECT['ratings of #REF', '#1']"", ""COMPARATIVE['#1', '#5', 'is lower than #4']"", ""PROJECT['the names of #REF', '#6']""]","['select', 'filter', 'project', 'aggregate', 'project', 'comparative', 'project']",train
SPIDER_train_3614,What are the song names for every song whose rating is less than the minimum rating for English songs?,return songs ;return #1 that  are English ;return ratings of #1 ;return ratings of #2 ;return minimum of #4 ;return #1 where #3 is  lower than #5 ;return song names of #6,"[""SELECT['songs']"", ""FILTER['#1', 'that are English']"", ""PROJECT['ratings of #REF', '#1']"", ""PROJECT['ratings of #REF', '#2']"", ""AGGREGATE['min', '#4']"", ""COMPARATIVE['#1', '#3', 'is lower than #5']"", ""PROJECT['song names of #REF', '#6']""]","['select', 'filter', 'project', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_3615,What is ids of the songs whose resolution is higher than the resolution of any songs with rating lower than 8?,return songs  ;return ratings of #1 ;return #1 where #2 is lower than 8 ;return resolutions of #1 ;return resolutions of #3 ;return #1 where #4 is higher #5 ;return ids of #6,"[""SELECT['songs']"", ""PROJECT['ratings of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is lower than 8']"", ""PROJECT['resolutions of #REF', '#1']"", ""PROJECT['resolutions of #REF', '#3']"", ""COMPARATIVE['#1', '#4', 'is higher #5']"", ""PROJECT['ids of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_3616,What is the id of every song that has a resolution higher than that of a song with a rating below 8?,return songs ;return #1 with a   rating below 8 ;return resolutions of  #2 ;return #1 where the  resolutions are  higher than #3 ;return the  ids of  #4,"[""SELECT['songs']"", ""FILTER['#1', 'with a rating below 8']"", ""PROJECT['resolutions of #REF', '#2']"", ""COMPARATIVE['#1', '#3', '']"", ""PROJECT['the ids of #REF', '#4']""]","['select', 'filter', 'project', 'comparative', 'project']",train
SPIDER_train_3617,What is ids of the songs whose resolution is higher than the average resolution of songs in modern genre?,return genres ;return songs in #1 ;return #2 where #1 is  modern ;return resolutions of  #3 ;return average of  #4 ;return #3 where #4 is  higher than #5 ;return ids of  #6,"[""SELECT['genres']"", ""PROJECT['songs in #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is modern']"", ""PROJECT['resolutions of #REF', '#3']"", ""AGGREGATE['avg', '#4']"", ""COMPARATIVE['#3', '#4', 'is higher than #5']"", ""PROJECT['ids of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_3618,What are the ids of all songs that have higher resolution of the average resolution in the modern genre?,return songs ;return genres of  #1 ;return #1 where #2 is  modern ;return resolutions of  #3 ;return average of  #4 ;return #3 where #4 is  higher than #5 ;return ids of  #6,"[""SELECT['songs']"", ""PROJECT['genres of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is modern']"", ""PROJECT['resolutions of #REF', '#3']"", ""AGGREGATE['avg', '#4']"", ""COMPARATIVE['#3', '#4', 'is higher than #5']"", ""PROJECT['ids of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_362,What is the number of employees?,return employees ;return number of  #1,"[""SELECT['employees']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_3620,What are the top 3 artists with the largest number of songs in the language Bangla?,return artists ;return songs of #1 ;return #2 in the   language Bangla ;return the   number of  #3 for each #1 ;return the   top 3 highest of #4 ;return #1 where #4 is  in #5,"[""SELECT['artists']"", ""PROJECT['songs of #REF', '#1']"", ""FILTER['#2', 'in the language Bangla']"", ""GROUP['count', '#3', '#1']"", ""AGGREGATE['max', '#4']"", ""COMPARATIVE['#1', '#4', 'is in #5']""]","['select', 'project', 'filter', 'group', 'aggregate', 'comparative']",train
SPIDER_train_3621,"List the id, genre and artist name of English songs ordered by rating.","return English songs ;return ids of  #1 ;return genres of  #1 ;return artist names of  #1 ;return ratings of  #1 ;return #2 ,  #3 , #4 ;return #6 sorted by #5","[""SELECT['English songs']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['genres of #REF', '#1']"", ""PROJECT['artist names of #REF', '#1']"", ""PROJECT['ratings of #REF', '#1']"", ""UNION['#2', '#3', '#4']"", ""SORT['#6', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_3622,"What is the id, genre, and name of the artist for every English song ordered by ascending rating?","return songs ;return #1 that  are English ;return artists of #2 ;return ids of #3 ;return genres of #3 ;return names of #3 ;return ratings of #3 ;return #4 ,  #5 ,   #6 ;return #8 sorted by #7 ascending","[""SELECT['songs']"", ""FILTER['#1', 'that are English']"", ""PROJECT['artists of #REF', '#2']"", ""PROJECT['ids of #REF', '#3']"", ""PROJECT['genres of #REF', '#3']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['ratings of #REF', '#3']"", ""UNION['#4', '#5', '#6']"", ""SORT['#8', '#7', 'ascending']""]","['select', 'filter', 'project', 'project', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_3623,"List the duration, file size and format of songs whose genre is pop, ordered by title?","return songs ;return genres of  #1 ;return #1 where  #2 is pop ;return durations of  #3 ;return file sizes of  #3 ;return formats of  #3 ;return titles of  #3 ;return #4 ,  #5 , #6 ;return #8 sorted by #7","[""SELECT['songs']"", ""PROJECT['genres of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is pop']"", ""PROJECT['durations of #REF', '#3']"", ""PROJECT['file sizes of #REF', '#3']"", ""PROJECT['formats of #REF', '#3']"", ""PROJECT['titles of #REF', '#3']"", ""UNION['#4', '#5', '#6']"", ""SORT['#8', '#7']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_3624,"What is the duration, file size, and song format for every pop song, ordered by title alphabetically?","return pop songs ;return durations of  #1 ;return file sizes of  #1 ;return song formats of  #1 ;return titles of  #1 ;return #2 ,  #3 ,   #4 ;return #6 sorted by #5 alphabetically","[""SELECT['pop songs']"", ""PROJECT['durations of #REF', '#1']"", ""PROJECT['file sizes of #REF', '#1']"", ""PROJECT['song formats of #REF', '#1']"", ""PROJECT['titles of #REF', '#1']"", ""UNION['#2', '#3', '#4']"", ""SORT['#6', '#5', 'alphabetically']""]","['select', 'project', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_3625,Find the names of the artists who have produced English songs but have never received rating higher than 8.,return artists ;return songs that  #1 produced ;return #2 in English ;return number of  #3 for each #1 ;return #1 where #4 is  at least one ;return ratings that  #1 received ;return #1 where any  #6 is  higher than 8 ;return #1 besides #7 ;return #1 in both #5 and #8 ;return the  names of #9,"[""SELECT['artists']"", ""PROJECT['songs that #REF produced', '#1']"", ""FILTER['#2', 'in English']"", ""GROUP['count', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is at least one']"", ""PROJECT['ratings that #REF received', '#1']"", ""COMPARATIVE['#1', '#6', 'is higher than 8']"", ""DISCARD['#1', '#7']"", ""INTERSECTION['#1', '#5', '#8']"", ""PROJECT['the names of #REF', '#9']""]","['select', 'project', 'filter', 'group', 'comparative', 'project', 'comparative', 'discard', 'intersection', 'project']",train
SPIDER_train_3626,What are the names of the different artists that have produced a song in English but have never receieved a rating higher than 8?,return artists ;return song #1 produced ;return #2 in English ;return number of  #3 for each #1 ;return #1 where #4 is  at least one ;return ratings #1 receieved ;return #1 where any  #6 is  higher than 8 ;return #1 besides #7 ;return #1 in both #5 and #8 ;return the  names of #9,"[""SELECT['artists']"", ""PROJECT['song #REF produced', '#1']"", ""FILTER['#2', 'in English']"", ""GROUP['count', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is at least one']"", ""PROJECT['ratings #REF receieved', '#1']"", ""COMPARATIVE['#1', '#6', 'is higher than 8']"", ""DISCARD['#1', '#7']"", ""INTERSECTION['#1', '#5', '#8']"", ""PROJECT['the names of #REF', '#9']""]","['select', 'project', 'filter', 'group', 'comparative', 'project', 'comparative', 'discard', 'intersection', 'project']",train
SPIDER_train_3627,Find the names of the artists who are from Bangladesh and have never received rating higher than 7.,return artists ;return #1 from  Bangladesh ;return #2 with  ratings of  7 or  less ;return names of  #3,"[""SELECT['artists']"", ""FILTER['#1', 'from Bangladesh']"", ""FILTER['#2', 'with ratings of 7 or less']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_3628,What are the names of the different artists from Bangladesh who never received a rating higher than a 7?,return artists ;return #1 from  Bangladesh ;return ratings ;return highest #3 for each  #2 ;return #2 where #4 is  at most 7 ;return names of  #5,"[""SELECT['artists']"", ""FILTER['#1', 'from Bangladesh']"", ""SELECT['ratings']"", ""GROUP['max', '#3', '#2']"", ""COMPARATIVE['#2', '#4', 'is at most 7']"", ""PROJECT['names of #REF', '#5']""]","['select', 'filter', 'select', 'group', 'comparative', 'project']",train
SPIDER_train_3629,what is the full name and id of the college with the largest number of baseball players?,"return colleges ;return baseball players of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return full name of  #4 ;return id of  #4 ;return #5 ,  #6","[""SELECT['colleges']"", ""PROJECT['baseball players of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['full name of #REF', '#4']"", ""PROJECT['id of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_363,Show name and salary for all employees sorted by salary.,return employees ;return names of  #1 ;return salaries of  #1 ;return #2 sorted by #3,"[""SELECT['employees']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['salaries of #REF', '#1']"", ""SORT['#2', '#3']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_3630,Find the full name and id of the college that has the most baseball players.,"return colleges ;return baseball players of #1 ;return number of  #2 for each #1 ;return #1 where #3 is highest ;return full name of #4 ;return id of #4 ;return #5 ,  #6","[""SELECT['colleges']"", ""PROJECT['baseball players of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['full name of #REF', '#4']"", ""PROJECT['id of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_3631,What is average salary of the players in the team named 'Boston Red Stockings' ?,return teams ;return #1 named 'Boston Red Stockings ;return players in #2 ;return salaries of  #3 ;return average of  #4,"[""SELECT['teams']"", ""FILTER['#1', 'named Boston Red Stockings']"", ""PROJECT['players in #REF', '#2']"", ""PROJECT['salaries of #REF', '#3']"", ""AGGREGATE['avg', '#4']""]","['select', 'filter', 'project', 'project', 'aggregate']",train
SPIDER_train_3632,Compute the average salary of the players in the team called 'Boston Red Stockings'.,return players ;return #1 of  the team 'Boston Red Stockings ;return salary of  #2 ;return the average of  #3,"[""SELECT['players']"", ""FILTER['#1', 'of the team Boston Red Stockings']"", ""PROJECT['salary of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_3633,What are first and last names of players participating in all star game in 1998?,"return players ;return #1 participating in the  all star games ;return #2 in 1998 ;return the  first names of #3 ;return the  last names of #3 ;return #4 ,  #5","[""SELECT['players']"", ""FILTER['#1', 'participating in the all star games']"", ""FILTER['#2', 'in 1998']"", ""PROJECT['the first names of #REF', '#3']"", ""PROJECT['the last names of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'filter', 'project', 'project', 'union']",train
SPIDER_train_3634,List the first and last name for players who participated in all star game in 1998.,"return players ;return #1 who participated in the  all star game ;return #2 in 1998 ;return first names of #3 ;return last names of #3 ;return #4 ,  #5","[""SELECT['players']"", ""FILTER['#1', 'who participated in the all star game']"", ""FILTER['#2', 'in 1998']"", ""PROJECT['first names of #REF', '#3']"", ""PROJECT['last names of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'filter', 'project', 'project', 'union']",train
SPIDER_train_3635,"What are the first name, last name and id of the player with the most all star game experiences? Also list the count.","return players ;return all star game experiences of #1 ;return the   number of  #2 for each #1 ;return the   highest of #3 ;return #1 where #3 is  #4 ;return the   first name of #5 ;return the   last name of #5 ;return the   id of #5 ;return #6 ,  #7 ,   #8 , #4","[""SELECT['players']"", ""PROJECT['all star game experiences of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['max', '#3']"", ""COMPARATIVE['#1', '#3', 'is #4']"", ""PROJECT['the first name of #REF', '#5']"", ""PROJECT['the last name of #REF', '#5']"", ""PROJECT['the id of #REF', '#5']"", ""UNION['#6', '#7', '#8', '#4']""]","['select', 'project', 'group', 'aggregate', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_3636,"Which player has the most all star game experiences? Give me the first name, last name and id of the player, as well as the number of times the player participated in all star game.","return players ;return all star game  experiences of #1 ;return the   number of  #2 for each #1 ;return the   highest of #3 ;return #1 where #3 is  #4 ;return the   first name of #5 ;return the   last name of #5 ;return the   id of #5 ;return #6 ,  #7 ,   #8 , #4","[""SELECT['players']"", ""PROJECT['all star game experiences of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['max', '#3']"", ""COMPARATIVE['#1', '#3', 'is #4']"", ""PROJECT['the first name of #REF', '#5']"", ""PROJECT['the last name of #REF', '#5']"", ""PROJECT['the id of #REF', '#5']"", ""UNION['#6', '#7', '#8', '#4']""]","['select', 'project', 'group', 'aggregate', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_3637,How many players enter hall of fame each year?,return players ;return #1 in the  hall of fame ;return years that  #2 enter the  hall of fame ;return number of  #2 for each #3,"[""SELECT['players']"", ""FILTER['#1', 'in the hall of fame']"", ""PROJECT['years that #REF enter the hall of fame', '#2']"", ""GROUP['count', '#2', '#3']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'group', 'union']",train
SPIDER_train_3639,What is the average number of attendance at home games for each year?,return the  home games ;return attendance of #1 ;return number of  #2 ;return average of #3 for each year,"[""SELECT['the home games']"", ""PROJECT['attendance of #REF', '#1']"", ""AGGREGATE['count', '#2']"", ""PROJECT['year', '#3']"", ""GROUP['avg', '#3', '#4']"", ""UNION['#4', '#5']""]","['select', 'project', 'aggregate', 'project', 'group', 'union']",train
SPIDER_train_364,What is the name and salary of all employees in order of salary?,"return employees ;return names of #1 ;return salaries of #1 ;return #2 ,  #3 ;return #4 sorted by #3","[""SELECT['employees']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['salaries of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#4', '#3']""]","['select', 'project', 'project', 'union', 'sort']",train
SPIDER_train_3640,"For each year, return the year and the average number of attendance at home games.","return years ;return attendance at home games of  #1 ;return average of  #2 for each #1 ;return #1 ,   #3","[""SELECT['years']"", ""PROJECT['attendance at home games of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_3641,"In 2014, what are the id and rank of the team that has the largest average number of attendance?","return teams ;return attendances of #1 ;return #2 in 2014 ;return the   average of #3 for each #1 ;return #1 where #4 is  the   largest ;return the   id of #5 ;return the   rank of #5 ;return #6 ,  #7","[""SELECT['teams']"", ""PROJECT['attendances of #REF', '#1']"", ""FILTER['#2', 'in 2014']"", ""GROUP['avg', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is the largest']"", ""PROJECT['the id of #REF', '#5']"", ""PROJECT['the rank of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'filter', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3642,Find the id and rank of the team that has the highest average attendance rate in 2014.,"return teams ;return attendance rates of  #1 ;return #2 in 2014 ;return average of  #3 for each #1 ;return #1 where  #4 is  highest ;return id of  #5 ;return rank of  #5 ;return #6 ,   #7","[""SELECT['teams']"", ""PROJECT['attendance rates of #REF', '#1']"", ""FILTER['#2', 'in 2014']"", ""GROUP['avg', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']"", ""PROJECT['id of #REF', '#5']"", ""PROJECT['rank of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'filter', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_3643,"What are the manager's first name, last name and id who won the most manager award?","return managers ;return manager awards of #1 ;return number of  #2 for each #1 ;return #1 where #3 is the  highest ;return first name  of #4 ;return last name  of #4 ;return id of #4 ;return #5 ,  #6 ,   #7","[""SELECT['managers']"", ""PROJECT['manager awards of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']"", ""PROJECT['first name of #REF', '#4']"", ""PROJECT['last name of #REF', '#4']"", ""PROJECT['id of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_3644,"Which manager won the most manager award? Give me the manager's first name, last name and id.","return managers ;return manager  award that  #1 won ;return number of  #2 for each #1 ;return #1 where #3 is  the  highest ;return the  first name of #4 ;return the  last name of #4 ;return the  id of #4 ;return #5 ,  #6 ,   #7","[""SELECT['managers']"", ""PROJECT['manager award that #REF won', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']"", ""PROJECT['the first name of #REF', '#4']"", ""PROJECT['the last name of #REF', '#4']"", ""PROJECT['the id of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_3645,How many parks are there in the state of NY?,return parks ;return #1 in state of  NY ;return number of  #2,"[""SELECT['parks']"", ""FILTER['#1', 'in state of NY']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_3646,Show me the number of parks the state of NY has.,return parks ;return states of  #1 ;return #1 where #2 is  NY ;return number of  #3,"[""SELECT['parks']"", ""PROJECT['states of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is NY']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_3647,Which 3 players won the most player awards? List their full name and id.,"return players ;return player awards that  #1 won ;return number of  #2 for each #1 ;return #1 where #3 is  the  highest ;return the  full names of #4 ;return the  ids of #4 ;return #5 ,  #6","[""SELECT['players']"", ""PROJECT['player awards that #REF won', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']"", ""PROJECT['the full names of #REF', '#4']"", ""PROJECT['the ids of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3648,"Find the first name, last name and id for the top three players won the most player awards.","return players ;return player awards ;return number of #2 for each #1 ;return top three with  highest #3 ;return first name  of  #4 ;return last name  of  #4 ;return id of  #4 ;return #5 ,   #6 , #7","[""SELECT['players']"", ""SELECT['player awards']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['max', '#3']"", ""PROJECT['first name of #REF', '#4']"", ""PROJECT['last name of #REF', '#4']"", ""PROJECT['id of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'select', 'group', 'aggregate', 'project', 'project', 'project', 'union']",train
SPIDER_train_3649,List three countries which are the origins of the least players.,return countries ;return players with  origins in #1 ;return number of  #2 for each #1 ;return #1 where #3 is  the  three lowest,"[""SELECT['countries']"", ""PROJECT['players with origins in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the three lowest']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_365,Show ids for all employees with at least 100000 salary.,return employee ;return #1 with  at least 100000 salary ;return ids of #2,"[""SELECT['employee']"", ""FILTER['#1', 'with at least 100000 salary']"", ""PROJECT['ids of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3650,What are the three countries that the least players are from?,"return players ;return country of #1 ;return number of  #1 for each #2 ;return #2 where #3 is lowest ;return #2 besides  #4 ;return #5 where #3 is lowest ;return #5 besides  #6 ;return #7 where #3 is lowest ;return #4 ,  #6 ,   #8","[""SELECT['players']"", ""PROJECT['country of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""SUPERLATIVE['min', '#2', '#3']"", ""DISCARD['#2', '#4']"", ""SUPERLATIVE['min', '#5', '#3']"", ""DISCARD['#5', '#6']"", ""SUPERLATIVE['min', '#7', '#3']"", ""UNION['#4', '#6', '#8']""]","['select', 'project', 'group', 'superlative', 'discard', 'superlative', 'discard', 'superlative', 'union']",train
SPIDER_train_3651,Find all the players' first name and last name who have empty death record.,"return players ;return #1 who  have  empty death record ;return first name  of  #2 ;return last name  of  #2 ;return #3 ,   #4","[""SELECT['players']"", ""FILTER['#1', 'who have empty death record']"", ""PROJECT['first name of #REF', '#2']"", ""PROJECT['last name of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_3652,What are the first name and last name of the players whose death record is empty?,"return players ;return death records of  #1 ;return #1 where #2 is  empty ;return first names of  #3 ;return last names of  #3 ;return #4 ,  #5","[""SELECT['players']"", ""PROJECT['death records of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is empty']"", ""PROJECT['first names of #REF', '#3']"", ""PROJECT['last names of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3653,"How many players born in USA are right-handed batters? That is, have the batter value 'R'.",return players ;return #1 born in USA ;return batter values of  #2 ;return #2 where  #3 is  'R ;return number of #4,"[""SELECT['players']"", ""FILTER['#1', 'born in USA']"", ""PROJECT['batter values of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is R']"", ""AGGREGATE['count', '#4']""]","['select', 'filter', 'project', 'comparative', 'aggregate']",train
SPIDER_train_3654,Count the number of players who were born in USA and have bats information 'R'.,return players ;return #1 that were born in  the  USA ;return bats information of #2 ;return #2 where #3 is 'R ;return number of  #4,"[""SELECT['players']"", ""FILTER['#1', 'that were born in the USA']"", ""PROJECT['bats information of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is R']"", ""AGGREGATE['count', '#4']""]","['select', 'filter', 'project', 'comparative', 'aggregate']",train
SPIDER_train_3655,What is the average height of the players from the college named 'Yale University'?,return players ;return #1 from  the  college named 'Yale University ;return the  height of  #2 ;return the  average of  #3,"[""SELECT['players']"", ""FILTER['#1', 'from the college named Yale University']"", ""PROJECT['the height of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_3656,Find the average height of the players who belong to the college called 'Yale University'.,return 'Yale University ;return players of #1 ;return heights of #2 ;return the  average of #3,"[""SELECT['Yale University']"", ""PROJECT['players of #REF', '#1']"", ""PROJECT['heights of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_3657,"What is the highest salary among each team? List the team name, id and maximum salary.","return teams ;return the  salaries among #1 ;return the  highest of #2 for each #1 ;return the  names of #1 ;return the  ids of #1 ;return #4 ,  #5 ,   #3","[""SELECT['teams']"", ""PROJECT['the salaries among #REF', '#1']"", ""GROUP['max', '#2', '#1']"", ""PROJECT['the names of #REF', '#1']"", ""PROJECT['the ids of #REF', '#1']"", ""UNION['#4', '#5', '#3']""]","['select', 'project', 'group', 'project', 'project', 'union']",train
SPIDER_train_3658,"For each team, return the team name, id and the maximum salary among the team.","return teams ;return team name of  #1 ;return id of  #1 ;return salaries of  #1 ;return maximum #4 for each #1 ;return #2 ,   #3 , #5","[""SELECT['teams']"", ""PROJECT['team name of #REF', '#1']"", ""PROJECT['id of #REF', '#1']"", ""PROJECT['salaries of #REF', '#1']"", ""GROUP['max', '#4', '#1']"", ""UNION['#2', '#3', '#5']""]","['select', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_3659,What are the name and id of the team offering the lowest average salary?,"return teams ;return salaries ;return the  average #2 for each  #1 ;return #1 where #3 is  the  lowest ;return the  name of  #4 ;return the  id of  #4 ;return #5 ,  #6","[""SELECT['teams']"", ""SELECT['salaries']"", ""GROUP['avg', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the lowest']"", ""PROJECT['the name of #REF', '#4']"", ""PROJECT['the id of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'select', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_366,What is the id of every employee who has at least a salary of  100000?,return employees ;return salaries of  #1 ;return #1 where #2 is  at least 100000 ;return ids of  #3,"[""SELECT['employees']"", ""PROJECT['salaries of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least 100000']"", ""PROJECT['ids of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3660,Which team offers the lowest average salary? Give me the name and id of the team.,"return team ;return salary ;return average #2 for each  #1 ;return #1 where #3 is  lowest ;return name of  #4 ;return id of  #4 ;return #5 ,  #6","[""SELECT['team']"", ""SELECT['salary']"", ""GROUP['avg', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['id of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'select', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_3661,Find the players' first name and last name who won award both in 1960 and in 1961.,"return players ;return #1 who  won award in 1960 ;return #1 who  won award in 1961 ;return #1 in both #2 and #3 ;return first name  of  #4 ;return last name  of  #4 ;return #5 ,   #6","[""SELECT['players']"", ""FILTER['#1', 'who won award in 1960']"", ""FILTER['#1', 'who won award in 1961']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['first name of #REF', '#4']"", ""PROJECT['last name of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'filter', 'filter', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_3662,Which players won awards in both 1960 and 1961? Return their first names and last names.,"return players ;return #1 who won awards ;return #2 in 1960 ;return #2 in 1961 ;return #2 in both #3 and #4 ;return the  first names  of #5 ;return the  last names  of #5 ;return #6 ,  #7","[""SELECT['players']"", ""FILTER['#1', 'who won awards']"", ""FILTER['#2', 'in 1960']"", ""FILTER['#2', 'in 1961']"", ""INTERSECTION['#2', '#3', '#4']"", ""PROJECT['the first names of #REF', '#5']"", ""PROJECT['the last names of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'filter', 'filter', 'filter', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_3663,List players' first name and last name who have weight greater than 220 or height shorter than 75.,"return players ;return weight of  #1 ;return #1 where #2 is  higher than 220 ;return height of  #1 ;return #1 where #4 is  lower than 75 ;return #3 or  #5 ;return first names of  #6 ;return last names of  #6 ;return #7 ,  #8","[""SELECT['players']"", ""PROJECT['weight of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 220']"", ""PROJECT['height of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is lower than 75']"", ""UNION['#3', '#5']"", ""PROJECT['first names of #REF', '#6']"", ""PROJECT['last names of #REF', '#6']"", ""UNION['#7', '#8']""]","['select', 'project', 'comparative', 'project', 'comparative', 'union', 'project', 'project', 'union']",train
SPIDER_train_3664,What are the first name and last name of the players who have weight above 220 or height below 75?,"return players ;return weight of #1 ;return height of #1 ;return #1 where #2 is  higher than 220 ;return #1 where #3 is  less than  75 ;return #4 ,  #5 ;return the  first names of #6 ;return the  last names of #6 ;return #7 ,  #8","[""SELECT['players']"", ""PROJECT['weight of #REF', '#1']"", ""PROJECT['height of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 220']"", ""COMPARATIVE['#1', '#3', 'is less than 75']"", ""UNION['#4', '#5']"", ""PROJECT['the first names of #REF', '#6']"", ""PROJECT['the last names of #REF', '#6']"", ""UNION['#7', '#8']""]","['select', 'project', 'project', 'comparative', 'comparative', 'union', 'project', 'project', 'union']",train
SPIDER_train_3665,List the maximum scores of the team Boston Red Stockings when the team won in postseason?,return teams ;return #1 that  are Boston Red Stockings ;return #2 that  won in postseason ;return scores of #3 ;return maximum of #4,"[""SELECT['teams']"", ""FILTER['#1', 'that are Boston Red Stockings']"", ""FILTER['#2', 'that won in postseason']"", ""PROJECT['scores of #REF', '#3']"", ""AGGREGATE['max', '#4']""]","['select', 'filter', 'filter', 'project', 'aggregate']",train
SPIDER_train_3666,What are the maximum scores the team Boston Red Stockings got when the team won in postseason?,return scores of  Boston Red Stockings ;return #1 when  Boston Red Stockings won in postseason ;return maximum of  #2,"[""SELECT['scores of Boston Red Stockings']"", ""FILTER['#1', 'when Boston Red Stockings won in postseason']"", ""AGGREGATE['max', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_3667,How many times did Boston Red Stockings lose in 2009 postseason?,return Boston Red Stockings loses ;return #1 in 2009 postseason ;return number of  #2,"[""SELECT['Boston Red Stockings loses']"", ""FILTER['#1', 'in 2009 postseason']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_3668,"Count the number of times the team ""Boston Red Stockings"" lost in 2009 postseason.",return the  Boston Red Stockings ;return times lost of #1 ;return #2 in  the  2009 postseason ;return number of  #3,"[""SELECT['the Boston Red Stockings']"", ""PROJECT['times lost of #REF', '#1']"", ""FILTER['#2', 'in the 2009 postseason']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'filter', 'aggregate']",train
SPIDER_train_3669,What are the name and id of the team with the most victories in 2008 postseason?,"return teams ;return victories of  #1 ;return #2 in 2008 postseason ;return number of  #3 for each  #1 ;return #1 where #4 is  highest ;return name of  #5 ;return id of  #5 ;return #6 ,  #7","[""SELECT['teams']"", ""PROJECT['victories of #REF', '#1']"", ""FILTER['#2', 'in 2008 postseason']"", ""GROUP['count', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']"", ""PROJECT['name of #REF', '#5']"", ""PROJECT['id of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'filter', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_367,How many employees have salary between 100000 and 200000?,return employees ;return salary of  #1 ;return #1 where  #2 is higher than 100000 ;return #1 where  #2 is lower than 200000 ;return #1 of  both #3 and #4 ;return the  number of  #5,"[""SELECT['employees']"", ""PROJECT['salary of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 100000']"", ""COMPARATIVE['#1', '#2', 'is lower than 200000']"", ""INTERSECTION['#1', '#3', '#4']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'aggregate']",train
SPIDER_train_3670,Find the name and id of the team that won the most times in 2008 postseason.,"return teams ;return #1 in 2008 postseason ;return number of win for each #2 ;return #2 where  #3 is  highest ;return name of  #4 ;return id of  #4 ;return #5 ,   #6","[""SELECT['teams']"", ""FILTER['#1', 'in 2008 postseason']"", ""PROJECT['win', '#2']"", ""GROUP['count', '#3', '#2']"", ""SUPERLATIVE['max', '#2', '#4']"", ""PROJECT['name of #REF', '#5']"", ""PROJECT['id of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'filter', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_3671,What is the number of wins the team Boston Red Stockings got in the postseasons each year in history?,return the   Boston Red Stockings ;return wins of #1 ;return #2 in the   postseasons ;return years of #3 ;return the   number of  #3 for each #4,"[""SELECT['the Boston Red Stockings']"", ""PROJECT['wins of #REF', '#1']"", ""FILTER['#2', 'in the postseasons']"", ""PROJECT['years of #REF', '#3']"", ""GROUP['count', '#3', '#4']"", ""UNION['#4', '#5']""]","['select', 'project', 'filter', 'project', 'group', 'union']",train
SPIDER_train_3672,"For each year, return the year and the number of times the team Boston Red Stockings won in the postseasons.","return team ;return #1 that  is  Boston Red Stockings ;return times #2 won ;return #3 in postseason ;return number of  #4 for each year ;return year of #5 ;return #6 ,  #5","[""SELECT['team']"", ""FILTER['#1', 'that is Boston Red Stockings']"", ""PROJECT['times #REF won', '#2']"", ""FILTER['#3', 'in postseason']"", ""PROJECT['year', '#4']"", ""GROUP['count', '#4', '#5']"", ""PROJECT['year of #REF', '#6']"", ""UNION['#7', '#6']""]","['select', 'filter', 'project', 'filter', 'project', 'group', 'project', 'union']",train
SPIDER_train_3673,What is the total number of postseason games that team Boston Red Stockings participated in?,return Boston Red Stockings ;return games #1 participated in ;return #2 in the  postseason ;return number of  #3,"[""SELECT['Boston Red Stockings']"", ""PROJECT['games #REF participated in', '#1']"", ""FILTER['#2', 'in the postseason']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'filter', 'aggregate']",train
SPIDER_train_3674,How many times in total did the team Boston Red Stockings participate in postseason games?,return games ;return #1 in the  postseasons ;return #2 that  the  Boston Red Stockings participate in ;return number of  #3,"[""SELECT['games']"", ""FILTER['#1', 'in the postseasons']"", ""FILTER['#2', 'that the Boston Red Stockings participate in']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'filter', 'aggregate']",train
SPIDER_train_3675,"How many games in 1885 postseason resulted in ties (that is, the value of ""ties"" is '1')?",return games ;return #1 in 1885 postseason ;return values of  #2 ;return #1 where  #3 is '1 ;return number of  #4,"[""SELECT['games']"", ""FILTER['#1', 'in 1885 postseason']"", ""PROJECT['values of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is 1']"", ""AGGREGATE['count', '#4']""]","['select', 'filter', 'project', 'comparative', 'aggregate']",train
SPIDER_train_3676,"Find the number of tied games (the value of ""ties"" is '1') in 1885 postseason.",return games ;return #1 from  1885 ;return #2 in postseason ;return #3 with  value of  '1 ;return number of #4,"[""SELECT['games']"", ""FILTER['#1', 'from 1885']"", ""FILTER['#2', 'in postseason']"", ""FILTER['#3', 'with value of 1']"", ""AGGREGATE['count', '#4']""]","['select', 'filter', 'filter', 'filter', 'aggregate']",train
SPIDER_train_3677,What is the total salary paid by team Boston Red Stockings in 2010?,return salaries ;return #1 paid by the  Boston Red Stockings ;return #2 in 2010 ;return the  sum of #3,"[""SELECT['salaries']"", ""FILTER['#1', 'paid by the Boston Red Stockings']"", ""FILTER['#2', 'in 2010']"", ""AGGREGATE['sum', '#3']""]","['select', 'filter', 'filter', 'aggregate']",train
SPIDER_train_3678,What is the total salary expenses of team Boston Red Stockings in 2010?,return the  team Boston Red Stockings ;return the  salary expenses of #1 ;return #2 in 2010 ;return the  sum of #3,"[""SELECT['the team Boston Red Stockings']"", ""PROJECT['the salary expenses of #REF', '#1']"", ""FILTER['#2', 'in 2010']"", ""AGGREGATE['sum', '#3']""]","['select', 'project', 'filter', 'aggregate']",train
SPIDER_train_3679,How many players were in the team Boston Red Stockings in 2000?,return the  team Boston Red Stockings ;return players in #1 ;return #2 in 2000 ;return the  number of  #3,"[""SELECT['the team Boston Red Stockings']"", ""PROJECT['players in #REF', '#1']"", ""FILTER['#2', 'in 2000']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'filter', 'aggregate']",train
SPIDER_train_368,What is the number of employees that have a salary between 100000 and 200000?,return employees ;return salaries of  #1 ;return #1 where #2 is  at least 100000 ;return #1 where #2 is  at most 200000 ;return #1 of  both #3 and  #4 ;return number of  #5,"[""SELECT['employees']"", ""PROJECT['salaries of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least 100000']"", ""COMPARATIVE['#1', '#2', 'is at most 200000']"", ""INTERSECTION['#1', '#3', '#4']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'aggregate']",train
SPIDER_train_3680,How many players did Boston Red Stockings have in 2000?,return players ;return #1 on  Boston Red Stockings ;return #2 in 2000 ;return number of  #3,"[""SELECT['players']"", ""FILTER['#1', 'on Boston Red Stockings']"", ""FILTER['#2', 'in 2000']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'filter', 'aggregate']",train
SPIDER_train_3681,List the 3 highest salaries of the players in 2001?,return players ;return #1 in 2001 ;return salaries of  #2 ;return the  3 highest of #3,"[""SELECT['players']"", ""FILTER['#1', 'in 2001']"", ""PROJECT['salaries of #REF', '#2']"", ""AGGREGATE['max', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_3682,How much salary did the top 3 well-paid players get in 2001?,return well-paid players ;return top 3 of #1 ;return #2 in 2001 ;return salaries of #3,"[""SELECT['well-paid players']"", ""PROJECT['top 3 of #REF', '#1']"", ""FILTER['#2', 'in 2001']"", ""PROJECT['salaries of #REF', '#3']""]","['select', 'project', 'filter', 'project']",train
SPIDER_train_3683,What were all the salary values of players in 2010 and 2001?,"return players ;return salary values of #1 ;return #2 in 2010 ;return #2 in 2001 ;return #3 ,  #4","[""SELECT['players']"", ""PROJECT['salary values of #REF', '#1']"", ""FILTER['#2', 'in 2010']"", ""FILTER['#2', 'in 2001']"", ""UNION['#3', '#4']""]","['select', 'project', 'filter', 'filter', 'union']",train
SPIDER_train_3684,List all the salary values players received in 2010 and 2001.,"return players ;return salary values #1 received ;return #2 in 2010 ;return #2 in 2001 ;return #3 ,  #4","[""SELECT['players']"", ""PROJECT['salary values #REF received', '#1']"", ""FILTER['#2', 'in 2010']"", ""FILTER['#2', 'in 2001']"", ""UNION['#3', '#4']""]","['select', 'project', 'filter', 'filter', 'union']",train
SPIDER_train_3685,In which year did the least people enter hall of fame?,return the  hall of fame ;return people of #1 ;return years enter of #2 ;return number of  #2 for each #3 ;return #3 where #4 is the  lowest,"[""SELECT['the hall of fame']"", ""PROJECT['people of #REF', '#1']"", ""PROJECT['years enter of #REF', '#2']"", ""GROUP['count', '#2', '#3']"", ""COMPARATIVE['#3', '#4', 'is the lowest']""]","['select', 'project', 'project', 'group', 'comparative']",train
SPIDER_train_3686,Find the year in which the least people enter hall of fame.,return years ;return people that  enter the  hall of fame in #1 ;return number of  #2 for each #1 ;return #1 where #3 is  lowest,"[""SELECT['years']"", ""PROJECT['people that enter the hall of fame in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_3687,How many parks are there in Atlanta city?,return parks ;return cities of  #1 ;return #1 where  #2 is Atlanta ;return number of  #3,"[""SELECT['parks']"", ""PROJECT['cities of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Atlanta']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_3688,How many parks does Atlanta city have?,return parks ;return #1 in Atlanta city ;return the  number of  #2,"[""SELECT['parks']"", ""FILTER['#1', 'in Atlanta city']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_3689,"How many games were played in park ""Columbia Park"" in 1907?",return games ;return #1 played in Columbia Park ;return #2 in 1907 ;return number of  #3,"[""SELECT['games']"", ""FILTER['#1', 'played in Columbia Park']"", ""FILTER['#2', 'in 1907']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'filter', 'aggregate']",train
SPIDER_train_369,What is the name and salary for employee with id 242518965?,"return employees ;return ids of #1 ;return #1 where #2 is  242518965 ;return the  name of #3 ;return the  salary of #3 ;return #4 ,  #5","[""SELECT['employees']"", ""PROJECT['ids of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 242518965']"", ""PROJECT['the name of #REF', '#3']"", ""PROJECT['the salary of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3690,"Count the number of games taken place in park ""Columbia Park"" in 1907.",return games ;return #1 taken place in Columbia Park ;return #2 in 1907 ;return number of #3,"[""SELECT['games']"", ""FILTER['#1', 'taken place in Columbia Park']"", ""FILTER['#2', 'in 1907']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'filter', 'aggregate']",train
SPIDER_train_3691,How many games were played in city Atlanta in 2000?,return games ;return #1 played in Atlanta ;return #1 played in 2000 ;return #1 in both #2 and #3 ;return number of  #4,"[""SELECT['games']"", ""FILTER['#1', 'played in Atlanta']"", ""FILTER['#1', 'played in 2000']"", ""INTERSECTION['#1', '#2', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'filter', 'filter', 'intersection', 'aggregate']",train
SPIDER_train_3692,Find the number of games taken place in city Atlanta in 2000.,return games ;return #1 taken place in city Atlanta ;return #2 in 2000 ;return number of #3,"[""SELECT['games']"", ""FILTER['#1', 'taken place in city Atlanta']"", ""FILTER['#2', 'in 2000']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'filter', 'aggregate']",train
SPIDER_train_3693,What is the total home game attendance of team Boston Red Stockings from 2000 to 2010?,return home game attendances ;return #1 of  the  team Boston Red Stockings ;return the  total #2 from  2000 to 2010,"[""SELECT['home game attendances']"", ""FILTER['#1', 'of the team Boston Red Stockings']"", ""AGGREGATE['sum', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_3694,How many games in total did team Boston Red Stockings attend from 2000 to 2010?,return games ;return #1 that  team Boston Red Stockings attend ;return #2 from 2000 to  2010 ;return number of  #3,"[""SELECT['games']"", ""FILTER['#1', 'that team Boston Red Stockings attend']"", ""FILTER['#2', 'from 2000 to 2010']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'filter', 'aggregate']",train
SPIDER_train_3695,How much did the the player with first name Len and last name Barker earn between 1985 to 1990 in total?,return players ;return #1 with  first name Len ;return #2 with  last name Barker ;return how much #3 earn ;return #4 between 1985 to  1990 ;return the  sum of #5,"[""SELECT['players']"", ""FILTER['#1', 'with first name Len']"", ""FILTER['#2', 'with last name Barker']"", ""PROJECT['how much #REF earn', '#3']"", ""FILTER['#4', 'between 1985 to 1990']"", ""AGGREGATE['sum', '#5']""]","['select', 'filter', 'filter', 'project', 'filter', 'aggregate']",train
SPIDER_train_3696,Compute the total salary that the player with first name Len and last name Barker received between 1985 to 1990.,return players ;return first name  of #1 ;return #1 where #2 is Len ;return last name  of #3 ;return #3 where #4 is Barker ;return salaries of #5 ;return #6 between 1985 and  1990 ;return sum of #7,"[""SELECT['players']"", ""PROJECT['first name of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Len']"", ""PROJECT['last name of #REF', '#3']"", ""COMPARATIVE['#3', '#4', 'is Barker']"", ""PROJECT['salaries of #REF', '#5']"", ""FILTER['#6', 'betweenleftside 1985']"", ""FILTER['#7', 'betweenrightside 1990']"", ""AGGREGATE['sum', '#8']""]","['select', 'project', 'comparative', 'project', 'comparative', 'project', 'filter', 'filter', 'aggregate']",train
SPIDER_train_3697,List players' first name and last name who received salary from team Washington Nationals in both 2005 and 2007.,"return players ;return #1 who  received salary from team Washington in 2005 ;return #2 who  received salary from team Washington in 2007 ;return first name of #3 ;return last name of #3 ;return #4 ,  #5","[""SELECT['players']"", ""FILTER['#1', 'who received salary from team Washington in 2005']"", ""FILTER['#2', 'who received salary from team Washington in 2007']"", ""PROJECT['first name of #REF', '#3']"", ""PROJECT['last name of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'filter', 'project', 'project', 'union']",train
SPIDER_train_3698,What are the first name and last name of the players who were paid salary by team Washington Nationals in both 2005 and 2007?,"return team Washington Nationals ;return players who  were paid by #1 ;return #2 in  2005 ;return #2 in  2007 ;return #2 of both #3 and  #4 ;return first name  of #5 ;return last name  of #5 ;return #6 ,  #7","[""SELECT['team Washington Nationals']"", ""PROJECT['players who were paid by #REF', '#1']"", ""FILTER['#2', 'in 2005']"", ""FILTER['#2', 'in 2007']"", ""INTERSECTION['#2', '#3', '#4']"", ""PROJECT['first name of #REF', '#5']"", ""PROJECT['last name of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'filter', 'filter', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_3699,How many home games did the team Boston Red Stockings play from 1990 to 2000 in total?,return Boston Red Stockings ;return home games of #1 ;return #2 from 1990 to  2000 ;return number of  #3,"[""SELECT['Boston Red Stockings']"", ""PROJECT['home games of #REF', '#1']"", ""FILTER['#2', 'from 1990 to 2000']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'filter', 'aggregate']",train
SPIDER_train_37,What are the official names of cities that have hosted more than one competition?,return cities ;return competitions #1 hosted ;return number of  #2 for each  #1 ;return #1 where #3 is  more than one ;return official names of  #4,"[""SELECT['cities']"", ""PROJECT['competitions #REF hosted', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than one']"", ""PROJECT['official names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_370,What is the name and salary of the employee with the id 242518965?,"return employees ;return ids of  #1 ;return #1 where #2 is  242518965 ;return name of  #3 ;return salary of  #3 ;return #4 ,  #5","[""SELECT['employees']"", ""PROJECT['ids of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 242518965']"", ""PROJECT['name of #REF', '#3']"", ""PROJECT['salary of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3700,Count the total number of games the team Boston Red Stockings attended from 1990 to 2000.,return games ;return #1 that  the Boston Red Stockings attended ;return #2 from  1990 to  2000 ;return number of #3,"[""SELECT['games']"", ""FILTER['#1', 'that the Boston Red Stockings attended']"", ""FILTER['#2', 'from 1990 to 2000']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'filter', 'aggregate']",train
SPIDER_train_3701,Which team had the least number of attendances in home games in 1980?,return teams ;return attendances of  #1 ;return #2 in 1980 ;return number of  #3 for each  #1 ;return #1 where #4 is  lowest,"[""SELECT['teams']"", ""PROJECT['attendances of #REF', '#1']"", ""FILTER['#2', 'in 1980']"", ""GROUP['count', '#3', '#1']"", ""SUPERLATIVE['min', '#1', '#4']""]","['select', 'project', 'filter', 'group', 'superlative']",train
SPIDER_train_3702,Find the team that attended the least number of home games in 1980.,return teams ;return home games attended of  #1 ;return #2 in 1980 ;return number of #3 for each #1 ;return #1 where  #4 is  lowest,"[""SELECT['teams']"", ""PROJECT['home games attended of #REF', '#1']"", ""FILTER['#2', 'in 1980']"", ""GROUP['count', '#3', '#1']"", ""SUPERLATIVE['min', '#1', '#4']""]","['select', 'project', 'filter', 'group', 'superlative']",train
SPIDER_train_3703,List the names of states that have more than 2 parks.,return states ;return parks of  #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is higher than 2 ;return names of  #4,"[""SELECT['states']"", ""PROJECT['parks of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 2']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_3704,Which states have more than 2 parks?,return states ;return parks ;return number of  #2 for each  #1 ;return #1 where #3 is  more than 2,"[""SELECT['states']"", ""SELECT['parks']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than 2']""]","['select', 'select', 'group', 'comparative']",train
SPIDER_train_3705,"How many team franchises are active, with active value 'Y'?",return team franchises ;return active values of  #1 ;return #1 where  #2 is  'Y ;return number of #3,"[""SELECT['team franchises']"", ""PROJECT['active values of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Y']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_3706,"Find the number of team franchises that are active (have 'Y' as ""active"" information).",return team franchises ;return active information of  #1 ;return #1 where  #2 is  'Y ;return number of #3,"[""SELECT['team franchises']"", ""PROJECT['active information of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Y']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_3707,Which cities have 2 to 4 parks?,return cities ;return parks of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  at least 2 ;return #1 where #3 is  at most 4 ;return #1 in both #4 and #5,"[""SELECT['cities']"", ""PROJECT['parks of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 2']"", ""COMPARATIVE['#1', '#3', 'is at most 4']"", ""INTERSECTION['#1', '#4', '#5']""]","['select', 'project', 'group', 'comparative', 'comparative', 'intersection']",train
SPIDER_train_3708,Find all the cities that have 2 to 4 parks.,return all cities ;return #1 with  parks ;return #2 with  2 or  more ;return #2 with  4 or  less ;return #1 of both #3 and #4,"[""SELECT['all cities']"", ""FILTER['#1', 'with parks']"", ""FILTER['#2', 'with 2 or more']"", ""FILTER['#2', 'with 4 or less']"", ""INTERSECTION['#1', '#3', '#4']""]","['select', 'filter', 'filter', 'filter', 'intersection']",train
SPIDER_train_3709,Which park had most attendances in 2008?,return park ;return attendances of  #1 ;return #2 in 2008 ;return number of  #3 for each  park ;return #1 where #4 is  highest,"[""SELECT['park']"", ""PROJECT['attendances of #REF', '#1']"", ""FILTER['#2', 'in 2008']"", ""PROJECT['park', '#3']"", ""GROUP['count', '#3', '#4']"", ""SUPERLATIVE['max', '#1', '#5']""]","['select', 'project', 'filter', 'project', 'group', 'superlative']",train
SPIDER_train_371,What is average and maximum salary of all employees.,"return employees ;return salaries of  #1 ;return average of  #2 ;return maximum of  #2 ;return #3 ,  #4","[""SELECT['employees']"", ""PROJECT['salaries of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""AGGREGATE['max', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_3710,Which park did the most people attend in 2008?,return parks ;return people that  attend #1 in 2008 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['parks']"", ""PROJECT['people that attend #REF in 2008', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_3711,How many camera lenses have a focal length longer than 15 mm?,return camera lenses ;return focal lengths of  #1 ;return #1 where  #2 is  higher than 15 mm ;return number of #3,"[""SELECT['camera lenses']"", ""PROJECT['focal lengths of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 15 mm']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_3712,"Find the brand and name for each camera lens, and sort in descending order of maximum aperture.","return camera lens ;return brands of  #1 ;return names of  #1 ;return maximum aperture of  #1 ;return #2 ,  #3 ;return #5 sorted by #4 in descending order","[""SELECT['camera lens']"", ""PROJECT['brands of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['aperture of #REF', '#1']"", ""GROUP['max', '#4', '#1']"", ""UNION['#2', '#3']"", ""SORT['#6', '#5', 'in descending order']""]","['select', 'project', 'project', 'project', 'group', 'union', 'sort']",train
SPIDER_train_3713,"List the id, color scheme, and name for all the photos.","return photos ;return ids of  #1 ;return color schemes of  #1 ;return names of  #1 ;return #2 ,  #3 ,   #4","[""SELECT['photos']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['color schemes of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_3714,What are the maximum and average height of the mountains?,"return mountains ;return heights of  #1 ;return maximum of  #2 ;return average of  #2 ;return #3 ,  #4","[""SELECT['mountains']"", ""PROJECT['heights of #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""AGGREGATE['avg', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_3715,What are the average prominence of the mountains in country 'Morocco'?,return countries ;return mountains of  #1 ;return #2 where #1 is  'Morocco ;return prominences of  #3 ;return average of  #4,"[""SELECT['countries']"", ""PROJECT['mountains of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Morocco']"", ""PROJECT['prominences of #REF', '#3']"", ""AGGREGATE['avg', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_3716,"What are the name, height and prominence of mountains which do not belong to the range 'Aberdare Range'?","return mountains ;return ranges of  #1 ;return #1 where #2 is  not  'Aberdare Range ;return names of  #3 ;return heights of  #3 ;return prominences of  #3 ;return #4 ,  #5 ,   #6","[""SELECT['mountains']"", ""PROJECT['ranges of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not Aberdare Range']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['heights of #REF', '#3']"", ""PROJECT['prominences of #REF', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_3717,What are the id and name of the photos for mountains?,"return photos ;return #1 for mountains ;return id of  #2 ;return name of  #2 ;return #3 ,  #4","[""SELECT['photos']"", ""FILTER['#1', 'for mountains']"", ""PROJECT['id of #REF', '#2']"", ""PROJECT['name of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_3718,What are the id and name of the mountains that have at least 2 photos?,"return mountains ;return photos of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least 2 ;return ids of  #4 ;return names of  #4 ;return #5 ,  #6","[""SELECT['mountains']"", ""PROJECT['photos of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 2']"", ""PROJECT['ids of #REF', '#4']"", ""PROJECT['names of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3719,What are the names of the cameras that have taken picture of the most mountains?,return cameras ;return pictures of #1 ;return mountains of #2 ;return number of  #3 for each #1 ;return #1 where #4 is the  highest ;return names of #5,"[""SELECT['cameras']"", ""PROJECT['pictures of #REF', '#1']"", ""PROJECT['mountains of #REF', '#2']"", ""GROUP['count', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is the highest']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_372,What is the average and largest salary of all employees?,"return employees ;return salary of  all #1 ;return average of  #2 ;return largest of  #2 ;return #3 ,  #4","[""SELECT['employees']"", ""PROJECT['salary of all #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""AGGREGATE['max', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_3720,What are the names of photos taken with the lens brand 'Sigma' or 'Olympus'?,return photos ;return lens #1 are taken with  ;return #1 where #2 is  'Sigma ;return #1 where #2 is  'Olympus ;return #3 or  #4 ;return names of #5,"[""SELECT['photos']"", ""PROJECT['lens #REF are taken with', '#1']"", ""COMPARATIVE['#1', '#2', 'is Sigma']"", ""COMPARATIVE['#1', '#2', 'is Olympus']"", ""UNION['#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_3721,How many different kinds of lens brands are there?,return lens brands ;return kinds of  #1 ;return #2 that  are  different ;return number of  #3,"[""SELECT['lens brands']"", ""PROJECT['kinds of #REF', '#1']"", ""FILTER['#2', 'that are different']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'filter', 'aggregate']",train
SPIDER_train_3722,How many camera lenses are not used in taking any photos?,return camera lenses ;return #1 used in taking photos ;return #1 besides #2 ;return number of #3,"[""SELECT['camera lenses']"", ""FILTER['#1', 'used in taking photos']"", ""DISCARD['#1', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'discard', 'aggregate']",train
SPIDER_train_3723,How many distinct kinds of camera lenses are used to take photos of mountains in the country 'Ethiopia'?,return mountains ;return #1 in the  country 'Ethiopia ;return photos of #2 ;return camera lenses used to  take #3 ;return kinds of #4 ;return number of  distinct #5,"[""SELECT['mountains']"", ""FILTER['#1', 'in the country Ethiopia']"", ""PROJECT['photos of #REF', '#2']"", ""PROJECT['camera lenses used to take #REF', '#3']"", ""PROJECT['kinds of #REF', '#4']"", ""PROJECT['distinct #REF', '#5']"", ""GROUP['count', '#6', '#5']"", ""UNION['#5', '#7']""]","['select', 'filter', 'project', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_3724,List the brands of lenses that took both a picture of mountains with range 'Toubkal Atlas' and a picture of mountains with range 'Lasta Massif',return mountains  ;return ranges of   #1 ;return #1 where #2 is 'Toubkal Atlas ;return #1 where #2 is 'Lasta Massif' ;return pictures of   #3 ;return pictures of   #4 ;return lenses ; return #7 of both #5 and  #6 ;return brands of #8,"[""SELECT['mountains']"", ""PROJECT['ranges of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Toubkal Atlas']"", ""COMPARATIVE['#1', '#2', 'is Lasta Massif']"", ""PROJECT['pictures of #REF', '#3']"", ""PROJECT['pictures of #REF', '#4']"", ""SELECT['lenses']"", ""INTERSECTION['#7', '#5', '#6']"", ""PROJECT['brands of #REF', '#8']""]","['select', 'project', 'comparative', 'comparative', 'project', 'project', 'select', 'intersection', 'project']",train
SPIDER_train_3725,Show the name and prominence of the mountains whose picture is not taken by a lens of brand 'Sigma'.,"return mountains ;return pictures of #1 ;return lenses of #2 ;return brands of #3 ;return #1 where #4 is  not 'Sigma ;return names of #5 ;return prominences of #5 ;return #6 ,  #7","[""SELECT['mountains']"", ""PROJECT['pictures of #REF', '#1']"", ""PROJECT['lenses of #REF', '#2']"", ""PROJECT['brands of #REF', '#3']"", ""COMPARATIVE['#1', '#4', 'is not Sigma']"", ""PROJECT['names of #REF', '#5']"", ""PROJECT['prominences of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'project', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3726,"List the camera lens names containing substring ""Digital"".",return camera lens ;return names of  #1 ;return #2 containing substring Digital,"[""SELECT['camera lens']"", ""PROJECT['names of #REF', '#1']"", ""FILTER['#2', 'containing substring Digital']""]","['select', 'project', 'filter']",train
SPIDER_train_3727,What is the name of each camera lens and the number of photos taken by it? Order the result by the count of photos.,"return camera lens ;return name of   #1 ;return photos  taken by  #1 ;return number of  #3 for each #1 ;return #2 ,  #4 ;return #5 sorted by #4","[""SELECT['camera lens']"", ""PROJECT['name of #REF', '#1']"", ""PROJECT['photos taken by #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']"", ""SORT['#5', '#4']""]","['select', 'project', 'project', 'group', 'union', 'sort']",train
SPIDER_train_3728,Find the names of channels that are not owned by CCTV.,return channels ;return #1 owned by CCTV ;return #1 besides #2 ;return names of  #3,"[""SELECT['channels']"", ""FILTER['#1', 'owned by CCTV']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_3729,Which channels are not owned by CCTV? Give me the channel names.,return channels ;return #1 that  are owned by CCTV ;return #1 besides #2 ;return names of #3,"[""SELECT['channels']"", ""FILTER['#1', 'that are owned by CCTV']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_373,Show the id and name of the employee with maximum salary.,"return employees ;return salaries of #1 ;return #1 where #2 is  maximum ;return id of #3 ;return name of #3 ;return #4 ,  #5","[""SELECT['employees']"", ""PROJECT['salaries of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is maximum']"", ""PROJECT['id of #REF', '#3']"", ""PROJECT['name of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3730,List all channel names ordered by their rating in percent from big to small.,return channel names ;return ratings of #1 ;return #2 in percent ;return #1 sorted by #3 from big to  small,"[""SELECT['channel names']"", ""PROJECT['ratings of #REF', '#1']"", ""FILTER['#2', 'in percent']"", ""SORT['#1', '#3', 'from big to small']""]","['select', 'project', 'filter', 'sort']",train
SPIDER_train_3731,Give me a list of all the channel names sorted by the channel rating in descending order.,return channels ;return names of  #1 ;return ratings of  #1 ;return #2 sorted by #3 in descending order,"[""SELECT['channels']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['ratings of #REF', '#1']"", ""SORT['#2', '#3', 'in descending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_3732,What is the owner of the channel that has the highest rating ratio?,return channels ;return rating ratios of #1 ;return #1 where #2 is  the   highest ;return the   owner of #3,"[""SELECT['channels']"", ""PROJECT['rating ratios of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the highest']"", ""PROJECT['the owner of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3733,Show me the owner of the channel with the highest rating.,return channels ;return ratings of  #1 ;return #1 where #2 is  highest ;return owner of  #3,"[""SELECT['channels']"", ""PROJECT['ratings of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['owner of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_3734,how many programs are there?,return programs ;return number of  #1,"[""SELECT['programs']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_3735,Count the number of programs.,return programs ;return number of  #1,"[""SELECT['programs']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_3736,"list all the names of programs, ordering by launch time.",return programs ;return names of  #1 ;return launch times of  #1 ;return #2 sorted by #3,"[""SELECT['programs']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['launch times of #REF', '#1']"", ""SORT['#2', '#3']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_3737,"What is the list of program names, sorted by the order of launch date?",return programs ;return names of #1 ;return launch dates of #1 ;return #2 sorted by #3,"[""SELECT['programs']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['launch dates of #REF', '#1']"", ""SORT['#2', '#3']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_3738,"List the name, origin and owner of each program.","return programs ;return names of  #1 ;return origins of  #1 ;return owners of  #1 ;return #2 ,  #3 ,   #4","[""SELECT['programs']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['origins of #REF', '#1']"", ""PROJECT['owners of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_3739,"What are the name, origin and owner of each program?","return programs ;return names of  #1 ;return origins of  #1 ;return owners of  #1 ;return #2 ,  #3 ,   #4","[""SELECT['programs']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['origins of #REF', '#1']"", ""PROJECT['owners of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_374,What is the id and name of the employee with the highest salary?,"return employee ;return salary ;return the  #1 with the   highest salary ;return the  id of  #3 ;return the  names of  #3 ;return #4 ,  #5","[""SELECT['employee']"", ""SELECT['salary']"", ""PROJECT['the #REF with the highest salary', '#1']"", ""PROJECT['the id of #REF', '#3']"", ""PROJECT['the names of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'select', 'project', 'project', 'project', 'union']",train
SPIDER_train_3740,find the name of the program that was launched most recently.,return programs ;return when  #1 was launched ;return #1 where #2 is  the most recently ;return the name of #3,"[""SELECT['programs']"", ""PROJECT['when #REF was launched', '#1']"", ""COMPARATIVE['#1', '#2', 'is the most recently']"", ""PROJECT['the name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3741,Which program was launched most recently? Return the program name.,return programs ;return how recently #1 was launched ;return #1 where #2 is  the  most recently ;return the  name of #3,"[""SELECT['programs']"", ""PROJECT['how recently #REF was launched', '#1']"", ""COMPARATIVE['#1', '#2', 'is the most recently']"", ""PROJECT['the name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3742,find the total percentage share of all channels owned by CCTV.,return channels ;return #1 which  are owned by CCTV ;return the total percentage share of all #2,"[""SELECT['channels']"", ""FILTER['#1', 'which are owned by CCTV']"", ""PROJECT['percentage share of all #REF', '#2']"", ""GROUP['sum', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'filter', 'project', 'group', 'union']",train
SPIDER_train_3743,What is the total share (in percent) of all the channels owned by CCTV?,return channels ;return the  number of  #1 ;return #1 owned by CCTV ;return the  number of  #3 ;return the  division of #4 and #2 in percent,"[""SELECT['channels']"", ""AGGREGATE['count', '#1']"", ""FILTER['#1', 'owned by CCTV']"", ""AGGREGATE['count', '#3']"", ""ARITHMETIC['division', '#4', '#2']""]","['select', 'aggregate', 'filter', 'aggregate', 'arithmetic']",train
SPIDER_train_3744,Find the names of the channels that are broadcast in the morning.,return channels ;return #1 that are broadcast in  the  morning ;return names of #2,"[""SELECT['channels']"", ""FILTER['#1', 'that are broadcast in the morning']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3745,Which channels are broadcast in the morning? Give me the channel names.,return channels ;return #1 that are broadcast in  the  morning ;return names of #2,"[""SELECT['channels']"", ""FILTER['#1', 'that are broadcast in the morning']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3746,what are the names of the channels that broadcast in both morning and night?,return channels ;return #1 that  broadcast in morning ;return #1 that  broadcast in night ;return #1 of  both #2 and  #3 ;return names of  #4,"[""SELECT['channels']"", ""FILTER['#1', 'that broadcast in morning']"", ""FILTER['#1', 'that broadcast in night']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'filter', 'intersection', 'project']",train
SPIDER_train_3747,Which channels broadcast both in the morning and at night? Give me the channel names.,return channels ;return #1 that  broadcast in the  morning ;return #1 that  broadcast at night ;return #1 of both #2 and #3 ;return channel names of #4,"[""SELECT['channels']"", ""FILTER['#1', 'that broadcast in the morning']"", ""FILTER['#1', 'that broadcast at night']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['channel names of #REF', '#4']""]","['select', 'filter', 'filter', 'intersection', 'project']",train
SPIDER_train_3748,how many programs are broadcast in each time section of the day?,return time sections ;return #1 of the day ;return programs broadcast in #2 ;return number of #3 for each #2,"[""SELECT['time sections']"", ""FILTER['#1', 'of the day']"", ""PROJECT['programs broadcast in #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'filter', 'project', 'group', 'union']",train
SPIDER_train_3749,Count the number of programs broadcast for each time section of a day.,return time sections ;return #1 of a day ;return programs broadcast in #2 ;return number of #3 for each #2,"[""SELECT['time sections']"", ""FILTER['#1', 'of a day']"", ""PROJECT['programs broadcast in #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'filter', 'project', 'group', 'union']",train
SPIDER_train_375,Show the name of employees with three lowest salaries.,return employees ;return salaries of #1 ;return #1 where #2 are the  three lowest ;return names of #3,"[""SELECT['employees']"", ""PROJECT['salaries of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'are the three lowest']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3750,find the number of different programs that are broadcast during night time.,return programs ;return times broadcast of #1 ;return #1 where #2 is  night time ;return different #3 ;return number of  #4,"[""SELECT['programs']"", ""PROJECT['times broadcast of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is night time']"", ""PROJECT['different #REF', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_3751,"How many distinct programs are broadcast at ""Night"" time?",return programs ;return broadcast time of  #1 ;return #1 where  #2 is  Night ;return distinct #3 ;return number of #4,"[""SELECT['programs']"", ""PROJECT['broadcast time of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Night']"", ""PROJECT['distinct #REF', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_3752,Find the names of programs that are never broadcasted in the morning.,return programs ;return #1 that  are  broadcasted in the morning ;return #1 besides #2 ;return names of  #3,"[""SELECT['programs']"", ""FILTER['#1', 'that are broadcasted in the morning']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_3753,Which programs are never broadcasted in the morning? Give me the names of the programs.,return programs  ;return #1 that  are never broadcasted in the morning ;return names of #2,"[""SELECT['programs']"", ""FILTER['#1', 'that are never broadcasted in the morning']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3754,find the program owners that have some programs in both morning and night time.,return programs ;return times of #1 ;return #1 where #2 is  morning ;return #1 where #2 is  night ;return program owners of #1 ;return #5 of both #3 and #4,"[""SELECT['programs']"", ""PROJECT['times of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is morning']"", ""COMPARATIVE['#1', '#2', 'is night']"", ""PROJECT['program owners of #REF', '#1']"", ""INTERSECTION['#5', '#3', '#4']""]","['select', 'project', 'comparative', 'comparative', 'project', 'intersection']",train
SPIDER_train_3755,Who are the owners of the programs that broadcast both in the morning and at night?,return programs ;return #1 that  broadcast in the  morning ;return #1 that  broadcast at night ;return #1 in both #2 and  #3 ;return owners of  #4,"[""SELECT['programs']"", ""FILTER['#1', 'that broadcast in the morning']"", ""FILTER['#1', 'that broadcast at night']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['owners of #REF', '#4']""]","['select', 'filter', 'filter', 'intersection', 'project']",train
SPIDER_train_3756,List all program origins in the alphabetical order.,return programs ;return origins of  #1 ;return #2 sorted by alphabetical order,"[""SELECT['programs']"", ""PROJECT['origins of #REF', '#1']"", ""SORT['#2', '#2', 'alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_3757,What is the list of program origins ordered alphabetically?,return programs ;return origins of #1 ;return #2 ordered alphabetically,"[""SELECT['programs']"", ""PROJECT['origins of #REF', '#1']"", ""FILTER['#2', 'ordered alphabetically']""]","['select', 'project', 'filter']",train
SPIDER_train_3758,what is the number of different channel owners?,return different channel owners ;return number of  #1,"[""SELECT['different channel owners']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_3759,Count the number of distinct channel owners.,return channel ;return #1 owners ;return distinct #2 ;return number of #3,"[""SELECT['channel']"", ""FILTER['#1', 'owners']"", ""PROJECT['distinct #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_376,What is the name of the 3 employees who get paid the least?,return employees ;return What employee is  paid ;return #1 where #2 is  3 least ;return names of  #3,"[""SELECT['employees']"", ""SELECT['What employee is paid']"", ""COMPARATIVE['#1', '#2', 'is 3 least']"", ""PROJECT['names of #REF', '#3']""]","['select', 'select', 'comparative', 'project']",train
SPIDER_train_3760,find the names of programs whose origin is not in Beijing.,return programs ;return origin of #1 ;return #1 where #2 is Beijing ;return #1 besides  #3 ;return the  names of #4,"[""SELECT['programs']"", ""PROJECT['origin of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Beijing']"", ""DISCARD['#1', '#3']"", ""PROJECT['the names of #REF', '#4']""]","['select', 'project', 'comparative', 'discard', 'project']",train
SPIDER_train_3761,"Which programs' origins are not ""Beijing""? Give me the program names.",return programs ;return origins of #1 ;return #1 where #2 is Beijing ;return #1 besides  #3 ;return names of #4,"[""SELECT['programs']"", ""PROJECT['origins of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Beijing']"", ""DISCARD['#1', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'comparative', 'discard', 'project']",train
SPIDER_train_3762,What are the names of the channels owned by CCTV or HBS?,"return channels ;return #1 owned by CCTV ;return #1 owned by HBS ;return #2 ,  #3 ;return names of  #4","[""SELECT['channels']"", ""FILTER['#1', 'owned by CCTV']"", ""FILTER['#1', 'owned by HBS']"", ""UNION['#2', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_3763,List the names of all the channels owned by either CCTV or HBS,return channels ;return #1 owned by CCTV ;return #1 owned by HBS ;return #2 or #3 ;return names of  #4,"[""SELECT['channels']"", ""FILTER['#1', 'owned by CCTV']"", ""FILTER['#1', 'owned by HBS']"", ""UNION['#2', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_3764,Find the total rating ratio for each channel owner.,return channel owners ;return rating ratios of #1 ;return sum of #2 for each #1,"[""SELECT['channel owners']"", ""PROJECT['rating ratios of #REF', '#1']"", ""GROUP['sum', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_3765,What is the total rating of channel for each channel owner?,return channel  owners ;return channels of #1 ;return ratings of #2 ;return sum of #3 for each  #1,"[""SELECT['channel owners']"", ""PROJECT['channels of #REF', '#1']"", ""PROJECT['ratings of #REF', '#2']"", ""GROUP['sum', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_3766,Find the name of the program that is broadcast most frequently.,return programs ;return #1 that  is  broadcast most frequently ;return name of #2,"[""SELECT['programs']"", ""FILTER['#1', 'that is broadcast most frequently']"", ""PROJECT['name of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3767,Which program is broadcast most frequently? Give me the program name.,return programs ;return how frequently #1 are broadcast ;return #1 where #2 is  the  most frequently ;return the  program  name of #3,"[""SELECT['programs']"", ""PROJECT['how frequently #REF are broadcast', '#1']"", ""COMPARATIVE['#1', '#2', 'is the most frequently']"", ""PROJECT['the program name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3768,How many courses are there in total?,return courses ;return number of #1,"[""SELECT['courses']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_3769,Find the total number of courses offered.,return courses offered ;return number of #1,"[""SELECT['courses offered']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_377,Show names for all employees with salary more than the average.,return employees ;return salaries of #1 ;return averages of #2 ;return #1 where #2 is  higher than #3 ;return names of #4,"[""SELECT['employees']"", ""PROJECT['salaries of #REF', '#1']"", ""PROJECT['averages of #REF', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_3770,"What are the descriptions of the courses with name ""database""?",return courses ;return names of  #1 ;return #1 where #2 is  database ;return descriptions of  #3,"[""SELECT['courses']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is database']"", ""PROJECT['descriptions of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3771,"Return the description for the courses named ""database"".",return courses ;return #1 named database ;return descriptions of  #2,"[""SELECT['courses']"", ""FILTER['#1', 'named database']"", ""PROJECT['descriptions of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3772,"What are the addresses of the course authors or tutors with personal name ""Cathrine""",return courses ;return authors of  #1 ;return #1 where #2 is  Cathrine ;return tutors of  #1 ;return #1 where #4 is  Cathrine ;return #3 or  #5 ;return addresses of  #6,"[""SELECT['courses']"", ""PROJECT['authors of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Cathrine']"", ""PROJECT['tutors of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is Cathrine']"", ""UNION['#3', '#5']"", ""PROJECT['addresses of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'comparative', 'union', 'project']",train
SPIDER_train_3773,"Return the addresses of the course authors or tutors whose personal name is ""Cathrine"".",return courses ;return authors of  #1 ;return personal names of  #2 ;return #2 where  #3 is Cathrine ;return tutors of  #1 ;return personal names of  #5 ;return #5 where  #6 is Cathrine ;return #4 or #7 ;return addresses of  #8,"[""SELECT['courses']"", ""PROJECT['authors of #REF', '#1']"", ""PROJECT['personal names of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is Cathrine']"", ""PROJECT['tutors of #REF', '#1']"", ""PROJECT['personal names of #REF', '#5']"", ""COMPARATIVE['#5', '#6', 'is Cathrine']"", ""UNION['#4', '#7']"", ""PROJECT['addresses of #REF', '#8']""]","['select', 'project', 'project', 'comparative', 'project', 'project', 'comparative', 'union', 'project']",train
SPIDER_train_3774,List the addresses of all the course authors or tutors.,return course authors ;return addresses of  #1 ;return course tutors ;return addresses of  #3 ;return #2 or #4,"[""SELECT['course authors']"", ""PROJECT['addresses of #REF', '#1']"", ""SELECT['course tutors']"", ""PROJECT['addresses of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'select', 'project', 'union']",train
SPIDER_train_3775,What is the address of each course author or tutor?,"return courses ;return authors of #1 ;return tutors of #1 ;return #2 ,  #3 ;return the  addresses of #4","[""SELECT['courses']"", ""PROJECT['authors of #REF', '#1']"", ""PROJECT['tutors of #REF', '#1']"", ""UNION['#2', '#3']"", ""PROJECT['the addresses of #REF', '#4']""]","['select', 'project', 'project', 'union', 'project']",train
SPIDER_train_3776,List all the login names and family names of course author and tutors.,"return courses ;return authors of #1 ;return tutors of #1 ;return #2 ,  #3 ;return login names  of #4 ;return family names  of #4 ;return #5 ,  #6","[""SELECT['courses']"", ""PROJECT['authors of #REF', '#1']"", ""PROJECT['tutors of #REF', '#1']"", ""UNION['#2', '#3']"", ""PROJECT['login names of #REF', '#4']"", ""PROJECT['family names of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'project', 'union', 'project', 'project', 'union']",train
SPIDER_train_3777,What are the login names and family names of course author and tutors?,"return course authors ;return course tutors ;return #1 ,  #2 ;return login names of  #3 ;return family names  of  #3 ;return #4 ,  #5","[""SELECT['course authors']"", ""SELECT['course tutors']"", ""UNION['#1', '#2']"", ""PROJECT['login names of #REF', '#3']"", ""PROJECT['family names of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'select', 'union', 'project', 'project', 'union']",train
SPIDER_train_3778,List all the dates of enrollment and completion of students.,"return students ;return dates of  enrollment of #1 ;return dates of  completion of #1 ;return #2 ,  #3","[""SELECT['students']"", ""PROJECT['dates of enrollment of #REF', '#1']"", ""PROJECT['dates of completion of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_3779,What are all the dates of enrollment and completion in record?,"return record ;return dates of  enrollment in #1 ;return dates of  completion in #1 ;return #2 ,  #3","[""SELECT['record']"", ""PROJECT['dates of enrollment in #REF', '#1']"", ""PROJECT['dates of completion in #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_378,What are the names of all employees who have a salary higher than average?,return employees ;return salaries of  #1 ;return average of  #2 ;return #1 where #2 is  higher than #3 ;return names of  #4,"[""SELECT['employees']"", ""PROJECT['salaries of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_3780,How many distinct students are enrolled in courses?,return courses ;return students enrolled in #1 ;return distinct #2 ;return number of #3,"[""SELECT['courses']"", ""PROJECT['students enrolled in #REF', '#1']"", ""PROJECT['distinct #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_3781,Find the number of distinct students enrolled in courses.,return courses ;return students enrolled in #1 ;return the  number of  distinct #2,"[""SELECT['courses']"", ""PROJECT['students enrolled in #REF', '#1']"", ""PROJECT['distinct #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_3782,How many distinct courses are enrolled in by students?,return students ;return courses of  #1 ;return distinct #2 ;return number of  #3,"[""SELECT['students']"", ""PROJECT['courses of #REF', '#1']"", ""PROJECT['distinct #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_3783,Find the number of distinct courses that have enrolled students.,return courses ;return students enrolled in #1 ;return number of  #2 for each #1 ;return #1 where #3 is  at least one ;return number of  distinct #4,"[""SELECT['courses']"", ""PROJECT['students enrolled in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least one']"", ""PROJECT['distinct #REF', '#4']"", ""GROUP['count', '#5', '#4']"", ""UNION['#4', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'group', 'union']",train
SPIDER_train_3784,"Find the dates of the tests taken with result ""Pass"".",return tests ;return results of #1 ;return #1 where #2 is Pass ;return dates of #3,"[""SELECT['tests']"", ""PROJECT['results of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Pass']"", ""PROJECT['dates of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3785,"Which tests have ""Pass"" results? Return the dates when the tests were taken.",return tests  ;return results of #1 ;return #1 where #2 is  Pass ;return dates #3 were taken,"[""SELECT['tests']"", ""PROJECT['results of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Pass']"", ""PROJECT['dates #REF were taken', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3786,"How many tests have result ""Fail""?",return tests ;return result of  #1 ;return #1 where  #2 is Fail ;return number of  #3,"[""SELECT['tests']"", ""PROJECT['result of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Fail']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_3787,"Count the number of tests with ""Fail"" result.",return tests ;return #1 with  Fail result ;return number of  #2,"[""SELECT['tests']"", ""FILTER['#1', 'with Fail result']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_3788,"What are the login names of the students with family name ""Ward""?",return students ;return family names of  #1 ;return #1 where #2 is  Ward ;return login names of  #3,"[""SELECT['students']"", ""PROJECT['family names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Ward']"", ""PROJECT['login names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3789,"Return the login names of the students whose family name is ""Ward"".",return students ;return family names of  #1 ;return #1 where #2 is  Ward ;return login names of  #3,"[""SELECT['students']"", ""PROJECT['family names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Ward']"", ""PROJECT['login names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_379,Show the id and salary of Mark Young.,"return Mark Young ;return id of  #1 ;return salary of  #1 ;return #2 ,  #3","[""SELECT['Mark Young']"", ""PROJECT['id of #REF', '#1']"", ""PROJECT['salary of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_3790,"What are the dates of the latest logon of the students with family name ""Jaskolski"" or ""Langosh""?","return students ;return #1 with  family name Jaskolski ;return #1 with  family name Langosh ;return #2 ,  #3 ;return logons of #4 ;return the   latest of #5 ;return the   dates of #6","[""SELECT['students']"", ""FILTER['#1', 'with family name Jaskolski']"", ""FILTER['#1', 'with family name Langosh']"", ""UNION['#2', '#3']"", ""PROJECT['logons of #REF', '#4']"", ""PROJECT['the latest of #REF', '#5']"", ""PROJECT['the dates of #REF', '#6']""]","['select', 'filter', 'filter', 'union', 'project', 'project', 'project']",train
SPIDER_train_3791,"Find the latest logon date of the students whose family name is ""Jaskolski"" or ""Langosh"".","return students ;return family name of #1 ;return #1 where #2 is Jaskolski ;return #1 where #2 is Langosh ;return #3 ,  #4 ;return logon dates of #5 ;return highest #6 for each #5","[""SELECT['students']"", ""PROJECT['family name of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Jaskolski']"", ""COMPARATIVE['#1', '#2', 'is Langosh']"", ""UNION['#3', '#4']"", ""PROJECT['logon dates of #REF', '#5']"", ""GROUP['max', '#6', '#5']"", ""UNION['#5', '#7']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project', 'group', 'union']",train
SPIDER_train_3792,"How many students have personal names that contain the word ""son""?",return students ;return personal names of  #1 ;return #1 where  #2 contain son ;return number of #3,"[""SELECT['students']"", ""PROJECT['personal names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'contain son']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_3793,"Find the number of students who have the word ""son"" in their personal names.",return students ;return personal names of  #1 ;return #1 where  #2 has  son ;return number of #3,"[""SELECT['students']"", ""PROJECT['personal names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'has son']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_3794,List all the subject names.,return subjects ;return names of #1,"[""SELECT['subjects']"", ""PROJECT['names of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_3795,What are the names of all the subjects.,return subjects ;return names of  #1,"[""SELECT['subjects']"", ""PROJECT['names of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_3796,List all the information about course authors and tutors in alphabetical order of the personal name.,"return courses ;return authors of  #1 ;return tutors of  #1 ;return #2 ,  #3 ;return all information about #4 ;return personal names of  #4 ;return #5 sorted by #6 in alphabetical order","[""SELECT['courses']"", ""PROJECT['authors of #REF', '#1']"", ""PROJECT['tutors of #REF', '#1']"", ""UNION['#2', '#3']"", ""PROJECT['all information about #REF', '#4']"", ""PROJECT['personal names of #REF', '#4']"", ""SORT['#5', '#6', 'in alphabetical order']""]","['select', 'project', 'project', 'union', 'project', 'project', 'sort']",train
SPIDER_train_3797,Sort the information about course authors and tutors in alphabetical order of the personal name.,"return course authors ;return tutors ;return #1 , #2 ;return the personal name of #3 ;return the information about #3 ;return #5 sorted by #4","[""SELECT['course authors']"", ""SELECT['tutors']"", ""UNION['#1', '#2']"", ""PROJECT['the personal name of #REF', '#3']"", ""PROJECT['the information about #REF', '#3']"", ""SORT['#5', '#4']""]","['select', 'select', 'union', 'project', 'project', 'sort']",train
SPIDER_train_3798,List the personal names and family names of all the students in alphabetical order of family name.,"return students ;return personal names of  #1 ;return family  names of  #1 ;return #2 ,  #3 ;return #4 sorted by #3 in alphabetical order","[""SELECT['students']"", ""PROJECT['personal names of #REF', '#1']"", ""PROJECT['family names of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#4', '#3', 'in alphabetical order']""]","['select', 'project', 'project', 'union', 'sort']",train
SPIDER_train_3799,What are the personal names and family names of the students? Sort the result in alphabetical order of the family name.,"return students ;return personal names of #1 ;return family  names of #1 ;return #2 ,  #3 ;return #4 sorted by #3 in alphabetical order","[""SELECT['students']"", ""PROJECT['personal names of #REF', '#1']"", ""PROJECT['family names of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#4', '#3', 'in alphabetical order']""]","['select', 'project', 'project', 'union', 'sort']",train
SPIDER_train_38,Show the status of the city that has hosted the greatest number of competitions.,return cities ;return competitions hosted of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return status of  #4,"[""SELECT['cities']"", ""PROJECT['competitions hosted of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['status of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_380,What is the id and salary of the employee named Mark Young?,"return employee ;return #1 named Mark Young ;return id of  #2 ;return salary of  #2 ;return #3 ,  #4","[""SELECT['employee']"", ""FILTER['#1', 'named Mark Young']"", ""PROJECT['id of #REF', '#2']"", ""PROJECT['salary of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_3800,List each test result and its count in descending order of count.,return test results ;return count  of #1 ;return #1 sorted by #2 in descending order,"[""SELECT['test results']"", ""PROJECT['count of #REF', '#1']"", ""SORT['#1', '#2', 'in descending order']""]","['select', 'project', 'sort']",train
SPIDER_train_3801,"For each distinct test result, find the number of students who got the result.",return distinct test results ;return students who  got #1 ;return number of #2 for each #1,"[""SELECT['distinct test results']"", ""PROJECT['students who got #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_3802,"Find the login name of the course author that teaches the course with name ""advanced database"".",return courses ;return names of  #1 ;return #1 where  #2 is  advanced database ;return author of  #3 ;return login name  of  #4,"[""SELECT['courses']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is advanced database']"", ""PROJECT['author of #REF', '#3']"", ""PROJECT['login name of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_3803,"Which course author teaches the ""advanced database"" course? Give me his or her login name.",return course  authors ;return courses of #1 ;return #1 where #2 is  advanced database ;return login name of #3,"[""SELECT['course authors']"", ""PROJECT['courses of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is advanced database']"", ""PROJECT['login name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3804,"Find the addresses of the course authors who teach the course with name ""operating system"" or ""data structure"".",return course authors ;return courses of #1 ;return names of #2 ;return #1 where #2 is operating system ;return #1 where #2 is data structure ;return #4 or  #5 ;return addresses of #6,"[""SELECT['course authors']"", ""PROJECT['courses of #REF', '#1']"", ""PROJECT['names of #REF', '#2']"", ""COMPARATIVE['#1', '#2', 'is operating system']"", ""COMPARATIVE['#1', '#2', 'is data structure']"", ""UNION['#4', '#5']"", ""PROJECT['addresses of #REF', '#6']""]","['select', 'project', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_3805,"What are the addresses of the course authors who teach either ""operating system"" or ""data structure"" course.",return course authors ;return courses of #1 ;return #1 where #2 is operating system ;return #1 where #2 is data structure ;return #3 or  #4 ;return addresses of #5,"[""SELECT['course authors']"", ""PROJECT['courses of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is operating system']"", ""COMPARATIVE['#1', '#2', 'is data structure']"", ""UNION['#3', '#4']"", ""PROJECT['addresses of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_3806,"Find the personal name, family name, and author ID of the course author that teaches the most courses.","return authors ;return courses of  #1 ;return number of #2 ;return #1 where  #3 is  highest ;return personal name  of  #4 ;return family name  of  #4 ;return author ID of  #4 ;return #5 ,   #6 , #7","[""SELECT['authors']"", ""PROJECT['courses of #REF', '#1']"", ""AGGREGATE['count', '#2']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['personal name of #REF', '#4']"", ""PROJECT['family name of #REF', '#4']"", ""PROJECT['author ID of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'aggregate', 'superlative', 'project', 'project', 'project', 'union']",train
SPIDER_train_3807,"What are the personal name, family name, and author ID of the course author who teaches the most courses?","return courses ;return course authors of #1 ;return number of  #1 for each #2 ;return #2 where #3 is the  highest ;return personal name  of #4 ;return family name  of #4 ;return author ID of #4 ;return #5 ,  #6 ,   #7","[""SELECT['courses']"", ""PROJECT['course authors of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""COMPARATIVE['#2', '#3', 'is the highest']"", ""PROJECT['personal name of #REF', '#4']"", ""PROJECT['family name of #REF', '#4']"", ""PROJECT['author ID of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_3808,Find the addresses and author IDs of the course authors that teach at least two courses.,return course authors ;return #1 that teach at least two courses ;return addresses of  #2 ;return author IDs of  #2,"[""SELECT['course authors']"", ""FILTER['#1', 'that teach at least two courses']"", ""PROJECT['addresses of #REF', '#2']"", ""PROJECT['author IDs of #REF', '#2']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_3809,Which course authors teach two or more courses? Give me their addresses and author IDs.,"return course authors ;return courses #1 teach ;return number of  #2 for each  #1 ;return #1 where #3 is  at least two ;return addresses of  #4 ;return author IDs of  #4 ;return #5 ,  #6","[""SELECT['course authors']"", ""PROJECT['courses #REF teach', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""PROJECT['addresses of #REF', '#4']"", ""PROJECT['author IDs of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_381,How many flights do we have?,return flights ;return number of #1,"[""SELECT['flights']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_3810,"Find the names of courses taught by the tutor who has personal name ""Julio"".",return tutors ;return personal names of #1 ;return #1 where #2 is Julio ;return courses of #3 ;return names of #4,"[""SELECT['tutors']"", ""PROJECT['personal names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Julio']"", ""PROJECT['courses of #REF', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_3811,"What are the names of the courses taught by the tutor whose personal name is ""Julio""?",return courses ;return tutors of  #1 ;return personal names of  #2 ;return #1 where #3 is  Julio ;return names of  #4,"[""SELECT['courses']"", ""PROJECT['tutors of #REF', '#1']"", ""PROJECT['personal names of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Julio']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_3812,"Find the names and descriptions of courses that belong to the subject named ""Computer Science"".","return courses ;return subjects of  #1 ;return #1 where  #2 is  Computer Science ;return names of  #3 ;return descriptions of  #3 ;return #4 ,   #5","[""SELECT['courses']"", ""PROJECT['subjects of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Computer Science']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['descriptions of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3813,"What are the names and descriptions of the all courses under the ""Computer Science"" subject?","return courses ;return subjects of #1 ;return #1 where #2 is  Computer Science ;return names of #3 ;return descriptions of #3 ;return #4 ,  #5","[""SELECT['courses']"", ""PROJECT['subjects of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Computer Science']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['descriptions of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3814,"Find the subject ID, subject name, and the corresponding number of available courses for each subject.","return subjects ;return subject ID of  #1 ;return subject name of  #1 ;return available courses for #1 ;return number of #4 for each #1 ;return #2 ,   #3 , #5","[""SELECT['subjects']"", ""PROJECT['subject ID of #REF', '#1']"", ""PROJECT['subject name of #REF', '#1']"", ""PROJECT['available courses for #REF', '#1']"", ""GROUP['count', '#4', '#1']"", ""UNION['#2', '#3', '#5']""]","['select', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_3815,"What are the subject ID, subject name, and the number of available courses for each subject?","return subjects ;return subject   ID of #1 ;return subject  name of #1 ;return courses of #1 ;return number of  #4 for each #1 ;return #2 ,  #3 ,   #5","[""SELECT['subjects']"", ""PROJECT['subject ID of #REF', '#1']"", ""PROJECT['subject name of #REF', '#1']"", ""PROJECT['courses of #REF', '#1']"", ""GROUP['count', '#4', '#1']"", ""UNION['#2', '#3', '#5']""]","['select', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_3816,"Find the subject ID, name of subject and the corresponding number of courses for each subject, and sort by the course count in ascending order.","return subjects ;return subject   ID of #1 ;return names of #1 ;return courses of #1 ;return number of  #4 for each #1 ;return #2 ,  #3 ,   #5 ;return #6 sorted by #5 in ascending order","[""SELECT['subjects']"", ""PROJECT['subject ID of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['courses of #REF', '#1']"", ""GROUP['count', '#4', '#1']"", ""UNION['#2', '#3', '#5']"", ""SORT['#6', '#5', 'in ascending order']""]","['select', 'project', 'project', 'project', 'group', 'union', 'sort']",train
SPIDER_train_3817,"List the subject ID, name of subject and the number of courses available for each subject in ascending order of the course counts.","return subjects ;return subject ID of  #1 ;return names of  #1 ;return courses available of  #1 ;return number of  #4 for each  #1 ;return #2 ,  #3 , #5 ;return #6 sorted by #5 in ascending order","[""SELECT['subjects']"", ""PROJECT['subject ID of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['courses available of #REF', '#1']"", ""GROUP['count', '#4', '#1']"", ""UNION['#2', '#3', '#5']"", ""SORT['#6', '#5', 'in ascending order']""]","['select', 'project', 'project', 'project', 'group', 'union', 'sort']",train
SPIDER_train_3818,"What is the date of enrollment of the course named ""Spanish""?",return courses ;return #1 named Spanish ;return enrollment of #2 ;return date of #3,"[""SELECT['courses']"", ""FILTER['#1', 'named Spanish']"", ""PROJECT['enrollment of #REF', '#2']"", ""PROJECT['date of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_3819,"Find the the date of enrollment of the ""Spanish"" course.",return the   Spanish course ;return enrollments of #1 ;return the   dates of #2,"[""SELECT['the Spanish course']"", ""PROJECT['enrollments of #REF', '#1']"", ""PROJECT['the dates of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_382,What is the number of flights?,return flights ;return number of  #1,"[""SELECT['flights']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_3820,What is the name of the course that has the most student enrollment?,return courses ;return student enrollment of #1 ;return #1 where #2 is highest ;return name of #3,"[""SELECT['courses']"", ""PROJECT['student enrollment of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_3821,Which course is enrolled in by the most students? Give me the course name.,return courses ;return students enrolled of  #1 ;return number of  #2 for each #1 ;return #1 where #2 is  highest ;return name of #4,"[""SELECT['courses']"", ""PROJECT['students enrolled of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_3822,What are the names of the courses that have exactly 1 student enrollment?,return courses ;return enrollments of  #1 ;return #1 where #2 is  1 ;return names of  #3,"[""SELECT['courses']"", ""PROJECT['enrollments of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 1']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3823,Find the names of the courses that have just one student enrollment.,return courses ;return enrollments of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  one ;return names of #4,"[""SELECT['courses']"", ""PROJECT['enrollments of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is one']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_3824,What are the descriptions and names of the courses that have student enrollment bigger than 2?,"return courses ;return student enrollments of  #1 ;return #1 where #2 is  higher than 2 ;return descriptions of  #3 ;return names of  #3 ;return #4 ,  #5","[""SELECT['courses']"", ""PROJECT['student enrollments of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 2']"", ""PROJECT['descriptions of #REF', '#3']"", ""PROJECT['names of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3825,Return the descriptions and names of the courses that have more than two students enrolled in.,"return courses ;return students enrolled in #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is higher than two ;return descriptions of  #4 ;return names of  #4 ;return #5 ,  #6","[""SELECT['courses']"", ""PROJECT['students enrolled in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than two']"", ""PROJECT['descriptions of #REF', '#4']"", ""PROJECT['names of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3826,What is the name of each course and the corresponding number of student enrollment?,"return courses ;return names of  #1 ;return student enrollments in #1 ;return number of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['courses']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['student enrollments in #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_3827,List the name and the number of enrolled student for each course.,"return courses ;return names of  #1 ;return students enrolled in #1 ;return number of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['courses']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['students enrolled in #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_3828,"What are the enrollment dates of all the tests that have result ""Pass""?",return tests ;return #1 that  have  result Pass ;return enrollment dates of  all #2,"[""SELECT['tests']"", ""FILTER['#1', 'that have result Pass']"", ""PROJECT['enrollment dates of all #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3829,"Find the enrollment date for all the tests that have ""Pass"" result.",return tests ;return results of #1 ;return #1 where #2 is Pass ;return enrollment dates of #3,"[""SELECT['tests']"", ""PROJECT['results of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Pass']"", ""PROJECT['enrollment dates of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_383,"Show flight number, origin, destination of all flights in the alphabetical order of the departure cities.","return flights ;return flight numbers of  #1 ;return origins of  #1 ;return destinations of  #1 ;return departure cities of  #1 ;return #2 ,  #3 ,   #4 ;return #6 sorted by #5 in alphabetical order","[""SELECT['flights']"", ""PROJECT['flight numbers of #REF', '#1']"", ""PROJECT['origins of #REF', '#1']"", ""PROJECT['destinations of #REF', '#1']"", ""PROJECT['departure cities of #REF', '#1']"", ""UNION['#2', '#3', '#4']"", ""SORT['#6', '#5', 'in alphabetical order']""]","['select', 'project', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_3830,"What are the completion dates of all the tests that have result ""Fail""?",return tests ;return result of #1 ;return #1 where #2 is  Fail ;return completion dates of #3,"[""SELECT['tests']"", ""PROJECT['result of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Fail']"", ""PROJECT['completion dates of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3831,"Return the completion date for all the tests that have ""Fail"" result.",return tests ;return results of  #1 ;return #1 where  #2 is Fail ;return completion dates of  #3,"[""SELECT['tests']"", ""PROJECT['results of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Fail']"", ""PROJECT['completion dates of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3832,"List the dates of enrollment and completion of the student with personal name ""Karson"".","return students ;return personal names of  #1 ;return #1 where #2 is  Karson ;return date of  enrollment of #3 ;return date of  completion of #3 ;return #4 ,  #5","[""SELECT['students']"", ""PROJECT['personal names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Karson']"", ""PROJECT['date of enrollment of #REF', '#3']"", ""PROJECT['date of completion of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3833,"On what dates did the student whose personal name is ""Karson"" enroll in and complete the courses?","return students ;return personal names of #1 ;return #1 where #2 is  Karson ;return the  dates that  #3 enrolls in courses ;return the  dates that  #3 complete the courses ;return #4 ,  #5","[""SELECT['students']"", ""PROJECT['personal names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Karson']"", ""PROJECT['the dates that #REF enrolls in courses', '#3']"", ""PROJECT['the dates that #REF complete the courses', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3834,"List the dates of enrollment and completion of the student with family name ""Zieme"" and personal name ""Bernie"".","return students ;return family names of  #1 ;return #1 where  #2 is Zieme ;return personal names of  #1 ;return #1 where  #4 is Bernie ;return #1 of  both #3 and #5 ;return date of  enrollment of #6 ;return date of  completion of #6 ;return #7 ,  #8","[""SELECT['students']"", ""PROJECT['family names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Zieme']"", ""PROJECT['personal names of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is Bernie']"", ""INTERSECTION['#1', '#3', '#5']"", ""PROJECT['date of enrollment of #REF', '#6']"", ""PROJECT['date of completion of #REF', '#6']"", ""UNION['#7', '#8']""]","['select', 'project', 'comparative', 'project', 'comparative', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_3835,"On what dates did the student with family name ""Zieme"" and personal name ""Bernie"" enroll in and complete the courses?","return student ;return family names of #1 ;return personal names of #1 ;return #1 where #2 is Zieme ;return #4 where #3 is Bernie ;return dates that #5 enroll in  courses ;return dates that #5 complete the  courses ;return #6 ,  #7","[""SELECT['student']"", ""PROJECT['family names of #REF', '#1']"", ""PROJECT['personal names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Zieme']"", ""COMPARATIVE['#4', '#3', 'is Bernie']"", ""PROJECT['dates that #REF enroll in courses', '#5']"", ""PROJECT['dates that #REF complete the courses', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'project', 'comparative', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3836,Find the student ID and login name of the student with the most course enrollments,"return students ;return course enrollments of  #1 ;return number of #2 ;return #1 where  #3 is  highest ;return student ID of  #4 ;return login name of  #4 ;return #5 ,   #6","[""SELECT['students']"", ""PROJECT['course enrollments of #REF', '#1']"", ""AGGREGATE['count', '#2']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['student ID of #REF', '#4']"", ""PROJECT['login name of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'aggregate', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_3837,What are the student ID and login name of the student who are enrolled in the most courses?,"return students ;return courses #1 are  enrolled in ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return student  ID of  #4 ;return login name of  #4 ;return #5 ,  #6","[""SELECT['students']"", ""PROJECT['courses #REF are enrolled in', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['student ID of #REF', '#4']"", ""PROJECT['login name of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_3838,Find the student ID and personal name of the student with at least two enrollments.,"return students ;return enrollments of  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  at least two ;return student ID of  #4 ;return personal name of  #4 ;return #5 ,   #6","[""SELECT['students']"", ""PROJECT['enrollments of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""PROJECT['student ID of #REF', '#4']"", ""PROJECT['personal name of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3839,Which student are enrolled in at least two courses? Give me the student ID and personal name.,"return students ;return courses #1 are enrolled in ;return number of  #2 for each #1 ;return #1 where #3 is  at least two ;return student  ID of #4 ;return personal name of #4 ;return #5 ,  #6","[""SELECT['students']"", ""PROJECT['courses #REF are enrolled in', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""PROJECT['student ID of #REF', '#4']"", ""PROJECT['personal name of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_384,"What is the flight number, origin, and destination for all flights in alphabetical order by departure cities?","return flights ;return flight numbers of  #1 ;return origins of  #1 ;return destinations of  #1 ;return departure cities of  #1 ;return #2 ,  #3 ,   #4 ;return #6 sorted by #5 in alphabetical order","[""SELECT['flights']"", ""PROJECT['flight numbers of #REF', '#1']"", ""PROJECT['origins of #REF', '#1']"", ""PROJECT['destinations of #REF', '#1']"", ""PROJECT['departure cities of #REF', '#1']"", ""UNION['#2', '#3', '#4']"", ""SORT['#6', '#5', 'in alphabetical order']""]","['select', 'project', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_3840,Find the student ID and middle name for all the students with at most two enrollments.,"return students ;return enrollments of  students ;return number of #2 for each #1 ;return #1 where  #3 is  at most two ;return student ID of  #4 ;return middle names of  #4 ;return #5 ,   #6","[""SELECT['students']"", ""SELECT['enrollments of students']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at most two']"", ""PROJECT['student ID of #REF', '#4']"", ""PROJECT['middle names of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'select', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3841,What are the student IDs and middle names of the students enrolled in at most two courses?,"return students ;return courses #1 are  enrolled in ;return number of  #2 for each  #1 ;return #1 where #3 is  at most two ;return student IDs of  #4 ;return middle names of  #4 ;return #5 ,  #6","[""SELECT['students']"", ""PROJECT['courses #REF are enrolled in', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at most two']"", ""PROJECT['student IDs of #REF', '#4']"", ""PROJECT['middle names of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3842,Find the personal names of students not enrolled in any course.,return students ;return #1 enrolled in any course ;return #1 besides #2 ;return personal names of  #3,"[""SELECT['students']"", ""FILTER['#1', 'enrolled in any course']"", ""DISCARD['#1', '#2']"", ""PROJECT['personal names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_3843,Which students not enrolled in any course? Find their personal names.,return students ;return #1 who are not enrolled in any  courses ;return personal names of #2,"[""SELECT['students']"", ""FILTER['#1', 'who are not enrolled in any courses']"", ""PROJECT['personal names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3844,How many students did not have any course enrollment?,return students ;return #1 with  course enrollment ;return #1 besides #2 ;return number of  #3,"[""SELECT['students']"", ""FILTER['#1', 'with course enrollment']"", ""DISCARD['#1', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'discard', 'aggregate']",train
SPIDER_train_3845,Count the number of students who did not enroll in any course.,return number of  students ;return number of  students enroll in any course ;return difference in #1 and #2,"[""SELECT['number of students']"", ""SELECT['number of students enroll in any course']"", ""ARITHMETIC['difference', '#1', '#2']""]","['select', 'select', 'arithmetic']",train
SPIDER_train_3846,Find the common login name of course authors and students.,return course authors ;return students ;return login name ;return #3 of both #1 and #2,"[""SELECT['course authors']"", ""SELECT['students']"", ""SELECT['login name']"", ""INTERSECTION['#3', '#1', '#2']""]","['select', 'select', 'select', 'intersection']",train
SPIDER_train_3847,What are the login names used both by some course authors and some students?,return login names ;return #1 used by some  course authors ;return #1 used by some  students ;return #1 of both #2 and  #3,"[""SELECT['login names']"", ""FILTER['#1', 'used by some course authors']"", ""FILTER['#1', 'used by some students']"", ""INTERSECTION['#1', '#2', '#3']""]","['select', 'filter', 'filter', 'intersection']",train
SPIDER_train_3848,Find the common personal name of course authors and students.,return students ;return personal names of #1 ;return course authors ;return personal names of #3 ;return personal names ;return #5 of both #2 and  #4,"[""SELECT['students']"", ""PROJECT['personal names of #REF', '#1']"", ""SELECT['course authors']"", ""PROJECT['personal names of #REF', '#3']"", ""SELECT['personal names']"", ""INTERSECTION['#5', '#2', '#4']""]","['select', 'project', 'select', 'project', 'select', 'intersection']",train
SPIDER_train_3849,What are the personal names used both by some course authors and some students?,return personal names ;return #1 that are used by some  course authors ;return #1 that are used by some  students ;return #1 of both #2 and  #3,"[""SELECT['personal names']"", ""FILTER['#1', 'that are used by some course authors']"", ""FILTER['#1', 'that are used by some students']"", ""INTERSECTION['#1', '#2', '#3']""]","['select', 'filter', 'filter', 'intersection']",train
SPIDER_train_385,Show all flight number from Los Angeles.,return flights ;return #1 from  Los Angeles ;return flight numbers of  #2,"[""SELECT['flights']"", ""FILTER['#1', 'from Los Angeles']"", ""PROJECT['flight numbers of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3850,Which claims caused more than 2 settlements or have the maximum claim value? List the date the claim was made and the claim id.,"return claims ;return settlements ;return #1 where #2 caused is  more than 2 ;return #1 that  have  the  maximum claim  value ;return #3 or  #4 ;return the  date of  #5 ;return the  claim  id of  #5 ;return #6 ,  #7","[""SELECT['claims']"", ""SELECT['settlements']"", ""COMPARATIVE['#1', '#2', 'caused is more than 2']"", ""FILTER['#1', 'that have the maximum claim value']"", ""UNION['#3', '#4']"", ""PROJECT['the date of #REF', '#5']"", ""PROJECT['the claim id of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'select', 'comparative', 'filter', 'union', 'project', 'project', 'union']",train
SPIDER_train_3851,"Find the claims that led to more than two settlements or have the maximum claim value. For each of them, return the date the claim was made and the id of the claim.","return claims ;return settlements that #1 led to ;return number of  #2 for each #1 ;return #1 where #3 is higher than two ;return values of #1 ;return maximum of #5 ;return #1 where #5 is equal to #6 ;return #4 ,  #7 ;return date of #8 ;return id of #8 ;return #9 ,  #10","[""SELECT['claims']"", ""PROJECT['settlements that #REF led to', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than two']"", ""PROJECT['values of #REF', '#1']"", ""AGGREGATE['max', '#5']"", ""COMPARATIVE['#1', '#5', 'is equal to #6']"", ""UNION['#4', '#7']"", ""PROJECT['date of #REF', '#8']"", ""PROJECT['id of #REF', '#8']"", ""UNION['#9', '#10']""]","['select', 'project', 'group', 'comparative', 'project', 'aggregate', 'comparative', 'union', 'project', 'project', 'union']",train
SPIDER_train_3852,Which customer had at least 2 policies but did not file any claims? List the customer details and id.,"return customer ;return policies ;return number of  #2 for each  #1 ;return #1 where #3 is  at least 2 ;return claims ;return number of  #5 for each  #1 ;return #1 where #6 is  not  any ;return #1 in both #4 and  #7 ;return details of  #8 ;return id of  #8 ;return #9 ,  #10","[""SELECT['customer']"", ""SELECT['policies']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 2']"", ""SELECT['claims']"", ""GROUP['count', '#5', '#1']"", ""COMPARATIVE['#1', '#6', 'is not any']"", ""INTERSECTION['#1', '#4', '#7']"", ""PROJECT['details of #REF', '#8']"", ""PROJECT['id of #REF', '#8']"", ""UNION['#9', '#10']""]","['select', 'select', 'group', 'comparative', 'select', 'group', 'comparative', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_3853,Give me the the customer details and id for the customers who had two or more policies but did not file any claims.,"return customers ;return policies of  #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is at least two ;return #4 that  did not  file any claims ;return customer details of  #5 ;return ids of  #5 ;return #6 ,  #7","[""SELECT['customers']"", ""PROJECT['policies of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""FILTER['#4', 'that did not file any claims']"", ""PROJECT['customer details of #REF', '#5']"", ""PROJECT['ids of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'group', 'comparative', 'filter', 'project', 'project', 'union']",train
SPIDER_train_3854,"List the method, date and amount of all the payments, in ascending order of date.","return payments ;return methods of  #1 ;return dates of  #1 ;return amounts of  #1 ;return #2 ,  #3 , #4 ;return #5 sorted by #3","[""SELECT['payments']"", ""PROJECT['methods of #REF', '#1']"", ""PROJECT['dates of #REF', '#1']"", ""PROJECT['amounts of #REF', '#1']"", ""UNION['#2', '#3', '#4']"", ""SORT['#5', '#3']""]","['select', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_3855,"What are the method, date and amount of each payment? Sort the list in ascending order of date.","return payments ;return methods of  #1 ;return dates of  #1 ;return amounts of  #1 ;return #2 ,  #3 ,   #4 ;return #5 sorted by #3 in ascending order","[""SELECT['payments']"", ""PROJECT['methods of #REF', '#1']"", ""PROJECT['dates of #REF', '#1']"", ""PROJECT['amounts of #REF', '#1']"", ""UNION['#2', '#3', '#4']"", ""SORT['#5', '#3', 'in ascending order']""]","['select', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_3856,"Among all the claims, what is the settlement amount of the claim with the largest claim amount? List both the settlement amount and claim amount.","return claims ;return claim  amounts of  #1 ;return #1 where #2 is  highest ;return settlement amount   of  #3 ;return claim  amount   of  #3 ;return #4 ,  #5","[""SELECT['claims']"", ""PROJECT['claim amounts of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['settlement amount of #REF', '#3']"", ""PROJECT['claim amount of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_3857,Find the settlement amount of the claim with the largest claim amount. Show both the settlement amount and claim amount.,"return claims ;return amounts of  #1 ;return #1 where  #2 is  highest ;return settlement  amount of  #3 ;return claim amount of  #3 ;return #4 ,   #5","[""SELECT['claims']"", ""PROJECT['amounts of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['settlement amount of #REF', '#3']"", ""PROJECT['claim amount of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_3858,"Among all the claims, what is the amount claimed in the claim with the least amount settled? List both the settlement amount and claim amount.","return claims ;return settlement amounts of  #1 ;return #1 where  #2 is  lowest ;return settlement amount of  #3 ;return claim amount of  #3 ;return #4 ,   #5","[""SELECT['claims']"", ""PROJECT['settlement amounts of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""PROJECT['settlement amount of #REF', '#3']"", ""PROJECT['claim amount of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_3859,Find the claimed amount in the claim with the least amount settled. Show both the settlement amount and claim amount.,"return claims ;return #1 with  least amount settled ;return claim amount of  #2 ;return settlement amount of  #2 ;return #3 ,   #4","[""SELECT['claims']"", ""FILTER['#1', 'with least amount settled']"", ""PROJECT['claim amount of #REF', '#2']"", ""PROJECT['settlement amount of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_386,What are the numbers of all flights coming from Los Angeles?,return flights ;return #1 coming from  Los Angeles ;return numbers of  #2,"[""SELECT['flights']"", ""FILTER['#1', 'coming from Los Angeles']"", ""PROJECT['numbers of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3860,"Among all the claims, which claims have a claimed amount larger than the average? List the date the claim was made and the date it was settled.","return claims  ;return claimed amount of #1 ;return average of #2 ;return #1 where #2 is higher than #3 ;return date  made of #4 ;return date  settled of #4 ;return #5 ,  #6","[""SELECT['claims']"", ""PROJECT['claimed amount of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['date made of #REF', '#4']"", ""PROJECT['date settled of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3861,"Give me the claim date, settlement date for all the claims whose claimed amount is larger than the average.","return claims ;return claim amounts of  #1 ;return average of  #2 ;return #1 where  #2 is  higher than #3 ;return claim dates of  #4 ;return settlement dates of  #4 ;return #5 ,   #6","[""SELECT['claims']"", ""PROJECT['claim amounts of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['claim dates of #REF', '#4']"", ""PROJECT['settlement dates of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3862,"Among all the claims, which settlements have a claimed amount that is no more than the average? List the claim start date.",return claims ;return settlements of  #1 ;return claimed amounts of  #2 ;return average of  #3 ;return #1 where #3 is  at most #4 ;return claim start dates of  #5,"[""SELECT['claims']"", ""PROJECT['settlements of #REF', '#1']"", ""PROJECT['claimed amounts of #REF', '#2']"", ""AGGREGATE['avg', '#3']"", ""COMPARATIVE['#1', '#3', 'is at most #4']"", ""PROJECT['claim start dates of #REF', '#5']""]","['select', 'project', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_3863,Return the claim start date for the claims whose claimed amount is no more than the average,return claims ;return claimed amounts of  #1 ;return average of  #2 ;return #1 where  #2 is at most #3 ;return claim start dates of  #4,"[""SELECT['claims']"", ""PROJECT['claimed amounts of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is at most #3']"", ""PROJECT['claim start dates of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_3864,How many settlements does each claim correspond to? List the claim id and the number of settlements.,"return claims ;return settlements of  #1 ;return number of #2 for each #1 ;return claim ids of  #1 ;return #4 ,   #3","[""SELECT['claims']"", ""PROJECT['settlements of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['claim ids of #REF', '#1']"", ""UNION['#4', '#3']""]","['select', 'project', 'group', 'project', 'union']",train
SPIDER_train_3865,Find the number of settlements each claim corresponds to. Show the number together with the claim id.,"return claims ;return settlements of  #1 ;return number of #2 for each #1 ;return claim ids of  #1 ;return #3 ,   #4","[""SELECT['claims']"", ""PROJECT['settlements of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['claim ids of #REF', '#1']"", ""UNION['#3', '#4']""]","['select', 'project', 'group', 'project', 'union']",train
SPIDER_train_3866,"Which claim incurred the most number of settlements? List the claim id, the date the claim was made, and the number.","return claims ;return settlements incurred of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest ;return claim  id of #4 ;return date made of #4 ;return settlements of #4 ;return number of  #7 ;return #5 ,  #6 ,   #8","[""SELECT['claims']"", ""PROJECT['settlements incurred of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['claim id of #REF', '#4']"", ""PROJECT['date made of #REF', '#4']"", ""PROJECT['settlements of #REF', '#4']"", ""AGGREGATE['count', '#7']"", ""UNION['#5', '#6', '#8']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'project', 'aggregate', 'union']",train
SPIDER_train_3867,Find the claim id and claim date of the claim that incurred the most settlement count. Also tell me the count.,"return claims ;return settlements of #1 ;return number of  #2 for each #1 ;return the  highest of #3 ;return #1 where #2 is equal to #4 ;return claim   id of #5 ;return claim   date of #5 ;return #6 ,  #7 ,   #4","[""SELECT['claims']"", ""PROJECT['settlements of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['max', '#3']"", ""COMPARATIVE['#1', '#2', 'is equal to #4']"", ""PROJECT['claim id of #REF', '#5']"", ""PROJECT['claim date of #REF', '#5']"", ""UNION['#6', '#7', '#4']""]","['select', 'project', 'group', 'aggregate', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3868,How many settlements were made on the claim with the most recent claim settlement date? List the number and the claim id.,"return claims ;return the   settlement dates of #1 ;return #1 where #2 is  the   most recent ;return settlements made on #3 ;return the   number of  #4 ;return the   claim  id of #3 ;return #5 ,  #6","[""SELECT['claims']"", ""PROJECT['the settlement dates of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the most recent']"", ""PROJECT['settlements made on #REF', '#3']"", ""AGGREGATE['count', '#4']"", ""PROJECT['the claim id of #REF', '#3']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'project', 'aggregate', 'project', 'union']",train
SPIDER_train_3869,Find the claim id and the number of settlements made for the claim with the most recent settlement date.,"return claims ;return settlement dates of #1 ;return #1 where #2 is highest ;return claim id of #3 ;return settlements of #3 ;return number of  #5 ;return #4 ,  #6","[""SELECT['claims']"", ""PROJECT['settlement dates of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['claim id of #REF', '#3']"", ""PROJECT['settlements of #REF', '#3']"", ""AGGREGATE['count', '#5']"", ""UNION['#4', '#6']""]","['select', 'project', 'superlative', 'project', 'project', 'aggregate', 'union']",train
SPIDER_train_387,Show origins of all flights with destination Honolulu.,return flights ;return destinations of  #1 ;return #1 where #2 is  Honolulu ;return origins of  #3,"[""SELECT['flights']"", ""PROJECT['destinations of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Honolulu']"", ""PROJECT['origins of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3870,"Of all the claims, what was the earliest date when any claim was made?",return claims ;return dates made of  #1 ;return earliest #2,"[""SELECT['claims']"", ""PROJECT['dates made of #REF', '#1']"", ""PROJECT['earliest #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_3871,Tell me the the date when the first claim was made.,return claim ;return first #1 ;return date of  #2,"[""SELECT['claim']"", ""AGGREGATE['min', '#1']"", ""PROJECT['date of #REF', '#2']""]","['select', 'aggregate', 'project']",train
SPIDER_train_3872,What is the total amount of settlement made for all the settlements?,return settlements ;return amounts of  #1 ;return sum of  #2,"[""SELECT['settlements']"", ""PROJECT['amounts of #REF', '#1']"", ""AGGREGATE['sum', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_3873,Compute the total amount of settlement across all the settlements.,return settlements ;return settlement amounts of #1 ;return sum of #2,"[""SELECT['settlements']"", ""PROJECT['settlement amounts of #REF', '#1']"", ""AGGREGATE['sum', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_3874,Who are the customers that had more than 1 policy? List the customer details and id.,"return customers ;return policies ;return the  number of  #2 for each  #1 ;return #1 where #3 is  more than 1 ;return the  customer details of  #4 ;return the  customer id of  #4 ;return #5 ,  #6","[""SELECT['customers']"", ""SELECT['policies']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than 1']"", ""PROJECT['the customer details of #REF', '#4']"", ""PROJECT['the customer id of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'select', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3875,Find the the customer details and id for the customers who had more than one policy.,"return customers ;return number of policies for each #1 ;return #1 where  #2 is  more than  one ;return details of  #3 ;return ids of  #3 ;return #4 ,   #5","[""SELECT['customers']"", ""PROJECT['policies', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than one']"", ""PROJECT['details of #REF', '#4']"", ""PROJECT['ids of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3876,What are the claim dates and settlement dates of all the settlements?,"return settlements ;return claim dates  of  #1 ;return settlement dates  of  #1 ;return #2 ,  #3","[""SELECT['settlements']"", ""PROJECT['claim dates of #REF', '#1']"", ""PROJECT['settlement dates of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_3877,Tell me the the claim date and settlement date for each settlement case.,"return settlement cases ;return claim dates of  #1 ;return settlement dates of  #1 ;return #2 ,  #3","[""SELECT['settlement cases']"", ""PROJECT['claim dates of #REF', '#1']"", ""PROJECT['settlement dates of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_3878,What is the most popular payment method?,return payment methods ;return most popular #1,"[""SELECT['payment methods']"", ""PROJECT['most popular #REF', '#1']""]","['select', 'project']",train
SPIDER_train_3879,Which payment method is used the most often?,return payment method ;return how often #1 is  used ;return #1 where #2 is  most,"[""SELECT['payment method']"", ""PROJECT['how often #REF is used', '#1']"", ""SUPERLATIVE['max', '#1', '#2']""]","['select', 'project', 'superlative']",train
SPIDER_train_388,What are the origins of all flights that are headed to Honolulu?,return flights ;return #1 headed to  Honolulu ;return origins of #2,"[""SELECT['flights']"", ""FILTER['#1', 'headed to Honolulu']"", ""PROJECT['origins of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3880,With which kind of payment method were the least number of payments processed?,return payments ;return payment methods that  processed #1 ;return number of  #1 for each #2 ;return #2 where #3 is  the  lowest ;return the  kind of #4,"[""SELECT['payments']"", ""PROJECT['payment methods that processed #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""COMPARATIVE['#2', '#3', 'is the lowest']"", ""PROJECT['the kind of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_3881,What is the payment method that were used the least often?,return payment methods ;return #1 used the  least often,"[""SELECT['payment methods']"", ""FILTER['#1', 'used the least often']""]","['select', 'filter']",train
SPIDER_train_3882,What is the total amount of payment?,return payments ;return amounts of  #1 ;return sum of  #2,"[""SELECT['payments']"", ""PROJECT['amounts of #REF', '#1']"", ""AGGREGATE['sum', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_3883,Compute the total amount of payment processed.,return payments processed ;return amounts of  #1 ;return sum of  #2,"[""SELECT['payments processed']"", ""PROJECT['amounts of #REF', '#1']"", ""AGGREGATE['sum', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_3884,What are all the distinct details of the customers?,return customers ;return details of  #1 ;return distinct #2,"[""SELECT['customers']"", ""PROJECT['details of #REF', '#1']"", ""PROJECT['distinct #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_3885,Return the distinct customer details.,return customer details ;return distinct #1,"[""SELECT['customer details']"", ""PROJECT['distinct #REF', '#1']""]","['select', 'project']",train
SPIDER_train_3886,Which kind of policy type was chosen by the most customers?,return policy types ;return #1 which was chosen by the  most customers ;return the  kind of  #2,"[""SELECT['policy types']"", ""FILTER['#1', 'which was chosen by the most customers']"", ""PROJECT['the kind of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3887,Find the policy type the most customers choose.,return policy type ;return customers who  choose #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['policy type']"", ""PROJECT['customers who choose #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_3888,How many settlements are there in total?,return settlements ;return number of  #1,"[""SELECT['settlements']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_3889,Count the total number of settlements made.,return settlements ;return number of #1,"[""SELECT['settlements']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_389,Show me the departure date and arrival date for all flights from Los Angeles to Honolulu.,"return flights ;return #1 from  Los Angeles ;return #1 to Honolulu ;return #1 of  both #2 and  #3 ;return departure dates of  #4 ;return arrival dates of  #4 ;return #5 ,  #6","[""SELECT['flights']"", ""FILTER['#1', 'from Los Angeles']"", ""FILTER['#1', 'to Honolulu']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['departure dates of #REF', '#4']"", ""PROJECT['arrival dates of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'filter', 'filter', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_3890,"Which Payments were processed with Visa? List the payment Id, the date and the amount.","return payments ;return #1 processed with Visa ;return payment Id of  #2 ;return date of  #2 ;return amount of  #2 ;return #3 ,  #4 ,   #5","[""SELECT['payments']"", ""FILTER['#1', 'processed with Visa']"", ""PROJECT['payment Id of #REF', '#2']"", ""PROJECT['date of #REF', '#2']"", ""PROJECT['amount of #REF', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_3891,"Give me the payment Id, the date and the amount for all the payments processed with Visa.","return payments ;return #1 processed with  Visa ;return payment Id of  #2 ;return date of  #2 ;return amount of  #2 ;return #3 ,   #4 , #5","[""SELECT['payments']"", ""FILTER['#1', 'processed with Visa']"", ""PROJECT['payment Id of #REF', '#2']"", ""PROJECT['date of #REF', '#2']"", ""PROJECT['amount of #REF', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_3892,List the details of the customers who do not have any policies.,return customers ;return #1 who  have  policies ;return #1 besides #2 ;return details of  #3,"[""SELECT['customers']"", ""FILTER['#1', 'who have policies']"", ""DISCARD['#1', '#2']"", ""PROJECT['details of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_3893,Which customers do not have any policies? Find the details of these customers.,return customers ;return #1 with policies ;return #1 besides  #2 ;return details of  #3,"[""SELECT['customers']"", ""FILTER['#1', 'with policies']"", ""DISCARD['#1', '#2']"", ""PROJECT['details of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_3894,"List the date the claim was made, the date it was settled and the amount settled for all the claims which had exactly one settlement.","return claims ;return settlements of  #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is one ;return date  #4 was made ;return date  #4 was settled  ;return amount settled  for of  #4 ;return #5 ,  #6 , #7","[""SELECT['claims']"", ""PROJECT['settlements of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is one']"", ""PROJECT['date #REF was made', '#4']"", ""PROJECT['date #REF was settled', '#4']"", ""PROJECT['amount settled for of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_3895,"Which claims had exactly one settlement? For each, tell me the the date the claim was made, the date it was settled and the amount settled.","return claims ;return settlements of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  one ;return dates that  #4 was made ;return dates that  #4 was settled ;return the   amounts settled in #4 ;return #5 ,  #6 ,   #7","[""SELECT['claims']"", ""PROJECT['settlements of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is one']"", ""PROJECT['dates that #REF was made', '#4']"", ""PROJECT['dates that #REF was settled', '#4']"", ""PROJECT['the amounts settled in #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_3896,Find the total claimed amount of all the claims.,return claims ;return claimed amount of  #1 ;return sum of  #2,"[""SELECT['claims']"", ""PROJECT['claimed amount of #REF', '#1']"", ""AGGREGATE['sum', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_3897,What is total amount claimed summed across all the claims?,return claims ;return amounts claimed of  #1 ;return sum of  #2,"[""SELECT['claims']"", ""PROJECT['amounts claimed of #REF', '#1']"", ""AGGREGATE['sum', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_3898,Which department has the largest number of employees?,return employees ;return number of  #1 for each  department ;return department with largest #2,"[""SELECT['employees']"", ""PROJECT['department', '#1']"", ""GROUP['count', '#1', '#2']"", ""AGGREGATE['max', '#3']""]","['select', 'project', 'group', 'aggregate']",train
SPIDER_train_3899,Find the department with the most employees.,return departments ;return employees of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  the  highest,"[""SELECT['departments']"", ""PROJECT['employees of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_39,What is the status of the city that has hosted the most competitions?,return cities ;return #1 that  has  hosted the  most competitions ;return the  status of  #2,"[""SELECT['cities']"", ""FILTER['#1', 'that has hosted the most competitions']"", ""PROJECT['the status of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_390,What are the departure and arrival dates of all flights from LA to Honolulu?,"return flights ;return #1 from  LA to Honolulu ;return departure dates of  #2 ;return arrival dates of  #2 ;return #3 ,  #4","[""SELECT['flights']"", ""FILTER['#1', 'from LA to Honolulu']"", ""PROJECT['departure dates of #REF', '#2']"", ""PROJECT['arrival dates of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_3900,What is the employee id of the head whose department has the least number of employees?,return departments ;return employees of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  lowest ;return head of  #4 ;return employee id of  #5,"[""SELECT['departments']"", ""PROJECT['employees of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['head of #REF', '#4']"", ""PROJECT['employee id of #REF', '#5']""]","['select', 'project', 'group', 'superlative', 'project', 'project']",train
SPIDER_train_3901,Tell me the employee id of the head of the department with the least employees.,return departments ;return number of  employees for each  #1 ;return highest of  #2 ;return #1 where number of  employees equal #3 ;return head of  #4 ;return employee id of  #5,"[""SELECT['departments']"", ""PROJECT['employees', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['max', '#3']"", ""COMPARATIVE['#1', '#4', '']"", ""PROJECT['head of #REF', '#5']"", ""PROJECT['employee id of #REF', '#6']""]","['select', 'project', 'group', 'aggregate', 'comparative', 'project', 'project']",train
SPIDER_train_3902,what is the name and position of the head whose department has least number of employees?,"return departments ;return employees of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  lowest ;return head of  #4 ;return name of  #5 ;return position of  #5 ;return #6 ,  #7","[""SELECT['departments']"", ""PROJECT['employees of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['head of #REF', '#4']"", ""PROJECT['name of #REF', '#5']"", ""PROJECT['position of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'project', 'union']",train
SPIDER_train_3903,Find the name and position of the head of the department with the least employees.,"return departments ;return employees of #1 ;return number of  #2 for each #1 ;return #1 where #3 is lowest ;return head of #4 ;return name of #5 ;return position of #5 ;return #6 ,  #7","[""SELECT['departments']"", ""PROJECT['employees of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['head of #REF', '#4']"", ""PROJECT['name of #REF', '#5']"", ""PROJECT['position of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'project', 'union']",train
SPIDER_train_3904,What are names of patients who made an appointment?,return patients ;return #1 with appointment ;return names of  #2,"[""SELECT['patients']"", ""FILTER['#1', 'with appointment']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3905,List the names of patients who have made appointments.,return appointments ;return patients who  made #1 ;return names of  #2,"[""SELECT['appointments']"", ""PROJECT['patients who made #REF', '#1']"", ""PROJECT['names of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_3906,what are name and phone number of patients who had more than one appointment?,"return patients ;return appointments of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than one ;return name of  #4 ;return phone number of  #4 ;return #5 ,  #6","[""SELECT['patients']"", ""PROJECT['appointments of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than one']"", ""PROJECT['name of #REF', '#4']"", ""AGGREGATE['count', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'aggregate', 'union']",train
SPIDER_train_3907,Which patients made more than one appointment? Tell me the name and phone number of these patients.,"return patients  ;return appointments ;return number of  #2 for each  #1 ;return #1 where #3 is  more than one ;return name of  #4 ;return phone number of  #4 ;return #5 ,  #6","[""SELECT['patients']"", ""SELECT['appointments']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than one']"", ""PROJECT['name of #REF', '#4']"", ""AGGREGATE['count', '#4']"", ""UNION['#5', '#6']""]","['select', 'select', 'group', 'comparative', 'project', 'aggregate', 'union']",train
SPIDER_train_3908,Find the id of the appointment with the most recent start date?,return appointments ;return start dates of  #1 ;return #1 where  #2 is  most recent ;return id of  #3,"[""SELECT['appointments']"", ""PROJECT['start dates of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['id of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_3909,What is the id of the appointment that started most recently?,return appointments ;return #1 that  started most recently ;return id of  #2,"[""SELECT['appointments']"", ""FILTER['#1', 'that started most recently']"", ""PROJECT['id of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_391,Show flight number for all flights with more than 2000 distance.,return flights ;return distances of #1 ;return #1 where #2 is higher than 2000 ;return flight numbers of #3,"[""SELECT['flights']"", ""PROJECT['distances of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 2000']"", ""PROJECT['flight numbers of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3910,List the name of physicians who took some appointment.,return physicians ;return appointments of #1 ;return number of  #2 for each #1 ;return #1 where #3 is higher than zero ;return names of #4,"[""SELECT['physicians']"", ""PROJECT['appointments of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than zero']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_3911,What are the names of all the physicians who took appointments.,return physicians ;return #1 who  took appointments ;return names of  #2,"[""SELECT['physicians']"", ""FILTER['#1', 'who took appointments']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3912,List the name of physicians who never took any appointment.,return physicians ;return #1 who  never took any appointments ;return names of  #2,"[""SELECT['physicians']"", ""FILTER['#1', 'who never took any appointments']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3913,Which physicians have never taken any appointment? Find their names.,return physicians ;return #1 that  have  never taken any  appointment ;return names of #2,"[""SELECT['physicians']"", ""FILTER['#1', 'that have never taken any appointment']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3914,Find the names of all physicians and their primary affiliated departments' names.,"return physicians ;return names  of  #1 ;return primary affiliated departments of  #1 ;return names  of  #3 ;return #2 ,   #4","[""SELECT['physicians']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['primary affiliated departments of #REF', '#1']"", ""PROJECT['names of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_3915,What are the name and primarily affiliated department name of each physician?,"return physicians ;return names of  #1 ;return primarily affiliated departments of  #1 ;return #2 ,  #3","[""SELECT['physicians']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['primarily affiliated departments of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_3916,What is the name of the patient who made the most recent appointment?,return patients ;return appointments of #1 ;return the   most recent #2 ;return #1 where #2 is  #3 ;return the   name of #4,"[""SELECT['patients']"", ""PROJECT['appointments of #REF', '#1']"", ""PROJECT['the most recent #REF', '#2']"", ""COMPARATIVE['#1', '#2', 'is #3']"", ""PROJECT['the name of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_3917,Find the name of the patient who made the appointment with the most recent start date.,return patients ;return appointments of  #1 ;return start dates of  #2 ;return #1 where  #3 is  most recent ;return name of  #4,"[""SELECT['patients']"", ""PROJECT['appointments of #REF', '#1']"", ""PROJECT['start dates of #REF', '#2']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'project', 'superlative', 'project']",train
SPIDER_train_3918,How many patients stay in room 112?,return patients ;return rooms #1 stay in ;return #1 where #2 is  112 ;return number of  #3,"[""SELECT['patients']"", ""PROJECT['rooms #REF stay in', '#1']"", ""COMPARATIVE['#1', '#2', 'is 112']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_3919,Count the number of patients who stayed in room 112.,return patients ;return rooms #1 stayed in ;return #1 where #2 is  112 ;return number of  #3,"[""SELECT['patients']"", ""PROJECT['rooms #REF stayed in', '#1']"", ""COMPARATIVE['#1', '#2', 'is 112']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_392,What are the numbers of all flights that can cover a distance of more than 2000?,return flights ;return distances #1 can cover ;return #1 where #2 is  higher than 2000 ;return numbers of  #3,"[""SELECT['flights']"", ""PROJECT['distances #REF can cover', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 2000']"", ""PROJECT['numbers of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3920,How many patients' prescriptions are made by physician John Dorian?,return patients ;return prescriptions of  #1 ;return #2 made by John Dorian ;return number of #3,"[""SELECT['patients']"", ""PROJECT['prescriptions of #REF', '#1']"", ""FILTER['#2', 'made by John Dorian']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'filter', 'aggregate']",train
SPIDER_train_3921,Find the number of patients' prescriptions physician John Dorian made.,return patients ;return prescriptions of  #1 ;return #2 that  physician John Dorian made ;return number of #3,"[""SELECT['patients']"", ""PROJECT['prescriptions of #REF', '#1']"", ""FILTER['#2', 'that physician John Dorian made']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'filter', 'aggregate']",train
SPIDER_train_3922,Find the name of medication used on the patient who stays in room 111?,return patients ;return rooms of #1 ;return #1 where #2 is 111 ;return medication of #3 ;return name of #4,"[""SELECT['patients']"", ""PROJECT['rooms of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 111']"", ""PROJECT['medication of #REF', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_3923,What is the name of the medication used for the patient staying in room 111?,return patients ;return rooms of #1 ;return number of #2 ;return #1 where #3 is  111 ;return medication of #4 ;return name of #5,"[""SELECT['patients']"", ""PROJECT['rooms of #REF', '#1']"", ""AGGREGATE['count', '#2']"", ""COMPARATIVE['#1', '#3', 'is 111']"", ""PROJECT['medication of #REF', '#4']"", ""PROJECT['name of #REF', '#5']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'project']",train
SPIDER_train_3924,Find the patient who most recently stayed in room 111.,return room 111 ;return patients of #1 ;return when  did #2 stay ;return #2 where #3 is the  highest,"[""SELECT['room 111']"", ""PROJECT['patients of #REF', '#1']"", ""PROJECT['when did #REF stay', '#2']"", ""COMPARATIVE['#2', '#3', 'is the highest']""]","['select', 'project', 'project', 'comparative']",train
SPIDER_train_3925,What is the id of the patient who stayed in room 111 most recently?,return patients ;return #1 who stayed in room 111 ;return #2 most recently ;return the  id of #3,"[""SELECT['patients']"", ""FILTER['#1', 'who stayed in room 111']"", ""FILTER['#2', 'most recently']"", ""PROJECT['the id of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_3926,What is the name of the nurse has the most appointments?,return nurses ;return appointments of #1 ;return number of #2 for each #1 ;return #1 where #3 is  highest ;return name of #4,"[""SELECT['nurses']"", ""PROJECT['appointments of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_3927,Find the name of the nurse who has the largest number of appointments.,return nurses ;return appointments of  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  highest ;return name of  #4,"[""SELECT['nurses']"", ""PROJECT['appointments of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_3928,How many patients do each physician take care of? List their names and number of patients they take care of.,"return physicians ;return patients  of  #1 ;return number of #2 for each #1 ;return names of  #1 ;return #4 ,   #3","[""SELECT['physicians']"", ""PROJECT['patients of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['names of #REF', '#1']"", ""UNION['#4', '#3']""]","['select', 'project', 'group', 'project', 'union']",train
SPIDER_train_3929,Return the name of each physician and the number of patients he or she treats.,"return physicians ;return names of #1 ;return patients of #1 ;return number of  #3 for each #1 ;return #2 ,  #4","[""SELECT['physicians']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['patients of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_393,What is the average price for flights from Los Angeles to Honolulu.,return flights ;return #1 from  Los Angeles to Honolulu ;return price of  #2 ;return average of  #3,"[""SELECT['flights']"", ""FILTER['#1', 'from Los Angeles to Honolulu']"", ""PROJECT['price of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_3930,Find the name of physicians who are in charge of more than one patient.,return physicians ;return number of patients for each #1 ;return #1 where  #2 is  more than  one ;return names of  #3,"[""SELECT['physicians']"", ""PROJECT['patients', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than one']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_3931,Which physicians are in charge of more than one patient? Give me their names.,return physicians ;return patients #1 are  in charge of  ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than one ;return names of  #4,"[""SELECT['physicians']"", ""PROJECT['patients #REF are in charge of', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than one']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_3932,Find the number of rooms located on each block floor.,return block floors ;return rooms of  #1 ;return number of #2 for each #1,"[""SELECT['block floors']"", ""PROJECT['rooms of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_3933,How many rooms does each block floor have?,return block floors ;return rooms of  #1 ;return number of  #2 for each  #1,"[""SELECT['block floors']"", ""PROJECT['rooms of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_3934,Find the number of rooms for different block code?,return block codes ;return rooms of  #1 ;return number of #2 for each #1,"[""SELECT['block codes']"", ""PROJECT['rooms of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_3935,How many rooms are located for each block code?,return block codes ;return rooms located for #1 ;return number of  #2 for each  #1,"[""SELECT['block codes']"", ""PROJECT['rooms located for #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_3936,What are the unique block codes that have available rooms?,return unique block codes ;return #1 that  have  available rooms,"[""SELECT['unique block codes']"", ""FILTER['#1', 'that have available rooms']""]","['select', 'filter']",train
SPIDER_train_3937,Tell me the distinct block codes where some rooms are available.,return rooms ;return #1 that  are available ;return block codes of #2 ;return distinct #3,"[""SELECT['rooms']"", ""FILTER['#1', 'that are available']"", ""PROJECT['block codes of #REF', '#2']"", ""PROJECT['distinct #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_3938,How many different types of rooms are there?,return rooms ;return types of  #1 ;return different #2 ;return number of #3,"[""SELECT['rooms']"", ""PROJECT['types of #REF', '#1']"", ""PROJECT['different #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_3939,Find the number of distinct room types available.,return rooms ;return distinct types of  #1 ;return number of  #2,"[""SELECT['rooms']"", ""PROJECT['distinct types of #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_394,What is the average price for flights from LA to Honolulu?,return flights ;return #1 from  LA ;return #2 to Honolulu ;return prices of #3 ;return average of #4,"[""SELECT['flights']"", ""FILTER['#1', 'from LA']"", ""FILTER['#2', 'to Honolulu']"", ""PROJECT['prices of #REF', '#3']"", ""AGGREGATE['avg', '#4']""]","['select', 'filter', 'filter', 'project', 'aggregate']",train
SPIDER_train_3940,What is the names of the physicians who prescribe medication Thesisin?,return physicians ;return medications #1 prescribe ;return #1 where #2 is  Thesisin ;return names of #3,"[""SELECT['physicians']"", ""PROJECT['medications #REF prescribe', '#1']"", ""COMPARATIVE['#1', '#2', 'is Thesisin']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3941,List the names of all the physicians who prescribe Thesisin as medication.,return physicians ;return medications #1 prescribe ;return #1 where  #2 is Thesisin ;return names of  #3,"[""SELECT['physicians']"", ""PROJECT['medications #REF prescribe', '#1']"", ""COMPARATIVE['#1', '#2', 'is Thesisin']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3942,Find the name and position of physicians who prescribe some medication whose brand is X?,"return medications ;return brands of  #1 ;return #1 where  brand is  X ;return physicians who  prescribe #3 ;return names of  #4 ;return positions of  #4 ;return #5 ,   #6","[""SELECT['medications']"", ""PROJECT['brands of #REF', '#1']"", ""FILTER['#1', 'where brand is X']"", ""PROJECT['physicians who prescribe #REF', '#3']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['positions of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_3943,Which physicians prescribe a medication of brand X? Tell me the name and position of those physicians.,"return physicians ;return medications #1 prescribe ;return #1 where #2 is  of brand X ;return names of #3 ;return positions of #3 ;return #4 , #5","[""SELECT['physicians']"", ""PROJECT['medications #REF prescribe', '#1']"", ""COMPARATIVE['#1', '#2', 'is of brand X']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['positions of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3944,Find the number of medications prescribed for each brand.,return brands ;return medications prescribed for #1 ;return number of #2 for each #1,"[""SELECT['brands']"", ""PROJECT['medications prescribed for #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_3945,How many medications are prescribed for each brand?,return brands ;return medications prescribed for #1 ;return number of #2 for each #1,"[""SELECT['brands']"", ""PROJECT['medications prescribed for #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_3946,Find the name of physicians whose position title contains the word 'senior'.,return physicians ;return position titles of  #1 ;return #1 where  #2 contains 'senior ;return name of  #3,"[""SELECT['physicians']"", ""PROJECT['position titles of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'contains senior']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3947,What are the names of the physicians who have 'senior' in their titles.,return physicians ;return titles of #1 ;return #1 where #2 has 'senior in  ;return names of #3,"[""SELECT['physicians']"", ""PROJECT['titles of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'has senior in']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3948,Find the patient who has the most recent undergoing treatment?,return treatments ;return the  most recent #1 ;return the  patient undergoing #2,"[""SELECT['treatments']"", ""PROJECT['the most recent #REF', '#1']"", ""PROJECT['the patient undergoing #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_3949,Which patient is undergoing the most recent treatment?,return patients ;return treatments of #1 ;return when  was  #2 ;return #1 where #3 is the  highest,"[""SELECT['patients']"", ""PROJECT['treatments of #REF', '#1']"", ""PROJECT['when was #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is the highest']""]","['select', 'project', 'project', 'comparative']",train
SPIDER_train_395,Show origin and destination for flights with price higher than 300.,"return flights ;return prices of #1 ;return #1 where #2 is higher than 300 ;return origins of #3 ;return destinations of #3 ;return #4 ,  #5","[""SELECT['flights']"", ""PROJECT['prices of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 300']"", ""PROJECT['origins of #REF', '#3']"", ""PROJECT['destinations of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3950,Find the names of all patients who have an undergoing treatment and are staying in room 111.,return patients ;return #1 that have an undergoing treatment ;return rooms of #2 ;return #2 where #3 is equal to room 111 ;return names of #4,"[""SELECT['patients']"", ""FILTER['#1', 'that have an undergoing treatment']"", ""PROJECT['rooms of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is equal to room 111']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'project', 'comparative', 'project']",train
SPIDER_train_3951,What are the names of patients who are staying in room 111 and have an undergoing treatment?,return patients ;return rooms of  #1 ;return #1 where #2 is  111 ;return #3 who  have  an undergoing treatment ;return names of  #4,"[""SELECT['patients']"", ""PROJECT['rooms of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 111']"", ""FILTER['#3', 'who have an undergoing treatment']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'comparative', 'filter', 'project']",train
SPIDER_train_3952,List the names of all distinct nurses ordered by alphabetical order?,return nurses ;return distinct #1 ;return names of  #2 ;return #3 sorted by alphabetical order,"[""SELECT['nurses']"", ""PROJECT['distinct #REF', '#1']"", ""PROJECT['names of #REF', '#2']"", ""SORT['#3', '#3', 'alphabetical order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_3953,What is the alphabetically ordered list of all the distinct names of nurses?,return nurses ;return distinct names of  #1 ;return #2 alphabetically ordered,"[""SELECT['nurses']"", ""PROJECT['distinct names of #REF', '#1']"", ""FILTER['#2', 'alphabetically ordered']""]","['select', 'project', 'filter']",train
SPIDER_train_3954,Find the names of nurses who are nursing an undergoing treatment.,return nurses ;return #1 who are nursing an undergoing treatment ;return names of #2,"[""SELECT['nurses']"", ""FILTER['#1', 'who are nursing an undergoing treatment']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3955,Which nurses are in charge of patients undergoing treatments?,return patients ;return #1 undergoing treatment ;return the  nurses in charge of  #2,"[""SELECT['patients']"", ""FILTER['#1', 'undergoing treatment']"", ""PROJECT['the nurses in charge of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3956,"List the names of all distinct medications, ordered in an alphabetical order.",return medications ;return distinct #1 ;return names of  #2 ;return #3 sorted by alphabetical order,"[""SELECT['medications']"", ""PROJECT['distinct #REF', '#1']"", ""PROJECT['names of #REF', '#2']"", ""SORT['#3', '#3', 'alphabetical order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_3957,What is the alphabetically ordered list of all distinct medications?,return distinct medications ;return #1 alphabetically ordered,"[""SELECT['distinct medications']"", ""FILTER['#1', 'alphabetically ordered']""]","['select', 'filter']",train
SPIDER_train_3958,What are the names of the physician who prescribed the highest dose?,return doses ;return highest #1 ;return physician who  prescribed #2 ;return name of  #3,"[""SELECT['doses']"", ""AGGREGATE['max', '#1']"", ""PROJECT['physician who prescribed #REF', '#2']"", ""PROJECT['name of #REF', '#3']""]","['select', 'aggregate', 'project', 'project']",train
SPIDER_train_3959,Find the physician who prescribed the highest dose. What is his or her name?,return physicians ;return doses #1 prescribed ;return #1 where #2 is  highest ;return name of #3,"[""SELECT['physicians']"", ""PROJECT['doses #REF prescribed', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_396,What is the origin and destination for all flights whose price is higher than 300?,"return flights ;return prices of #1 ;return #1 where #2 is  higher than 300 ;return origins of #3 ;return destinations of #3 ;return #4 ,  #5","[""SELECT['flights']"", ""PROJECT['prices of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 300']"", ""PROJECT['origins of #REF', '#3']"", ""PROJECT['destinations of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_3960,List the physicians' employee ids together with their primary affiliation departments' ids.,"return physicians ;return employee ids  of  #1 ;return primary affiliation departments of  #1 ;return ids  of  #3 ;return #2 ,  #4","[""SELECT['physicians']"", ""PROJECT['employee ids of #REF', '#1']"", ""PROJECT['primary affiliation departments of #REF', '#1']"", ""PROJECT['ids of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_3961,What are each physician's employee id and department id primarily affiliated.,"return physicians ;return employee ids of  #1 ;return departments #1 are  primarily affiliated with ;return department ids of  #3 ;return #2 ,  #4","[""SELECT['physicians']"", ""PROJECT['employee ids of #REF', '#1']"", ""PROJECT['departments #REF are primarily affiliated with', '#1']"", ""PROJECT['department ids of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_3962,List the names of departments where some physicians are primarily affiliated with.,return physicians ;return departments #1 are  primarily affiliated with  ;return names of  #2,"[""SELECT['physicians']"", ""PROJECT['departments #REF are primarily affiliated with', '#1']"", ""PROJECT['names of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_3963,What are the names of departments that have primarily affiliated physicians.,return physicians ;return primarily affiliated #1 ;return departments that  have  #2 ;return names of  #3,"[""SELECT['physicians']"", ""PROJECT['primarily affiliated #REF', '#1']"", ""PROJECT['departments that have #REF', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'project', 'project']",train
SPIDER_train_3964,What nurses are on call with block floor 1 and block code 1? Tell me their names.,return nurses ;return #1 on call ;return block  floors of #2 ;return block  codes of #2 ;return #2 where #3 is  1 ;return #2 where #4 is  1 ;return #2 in both #5 and #6 ;return the  names of #7,"[""SELECT['nurses']"", ""FILTER['#1', 'on call']"", ""PROJECT['block floors of #REF', '#2']"", ""PROJECT['block codes of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is 1']"", ""COMPARATIVE['#2', '#4', 'is 1']"", ""INTERSECTION['#2', '#5', '#6']"", ""PROJECT['the names of #REF', '#7']""]","['select', 'filter', 'project', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_3965,Find the ids of the nurses who are on call in block floor 1 and block code 1.,return nurses ;return #1 who are on call ;return block floors of #2 ;return #2 where #3 is  1 ;return block  codes of #2 ;return #2 where #5 is  1 ;return ids of #1 ;return #7 of both #4 and #6,"[""SELECT['nurses']"", ""FILTER['#1', 'who are on call']"", ""PROJECT['block floors of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is 1']"", ""PROJECT['block codes of #REF', '#2']"", ""COMPARATIVE['#2', '#5', 'is 1']"", ""PROJECT['ids of #REF', '#1']"", ""INTERSECTION['#7', '#4', '#6']""]","['select', 'filter', 'project', 'comparative', 'project', 'comparative', 'project', 'intersection']",train
SPIDER_train_3966,"What are the highest cost, lowest cost and average cost of procedures?","return procedures ;return costs of  #1 ;return highest #2 ;return lowest #2 ;return average of  #2 ;return #3 ,  #4 ,   #5","[""SELECT['procedures']"", ""PROJECT['costs of #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""AGGREGATE['min', '#2']"", ""AGGREGATE['avg', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'project', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_3967,"Tell me the highest, lowest, and average cost of procedures.","return procedures ;return costs of  #1 ;return highest #2 ;return lowest #2 ;return average of  #2 ;return #3 ,  #4 ,   #5","[""SELECT['procedures']"", ""PROJECT['costs of #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""AGGREGATE['min', '#2']"", ""AGGREGATE['avg', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'project', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_3968,List the name and cost of all procedures sorted by the cost from the highest to the lowest.,return procedures ;return names of  #1 ;return costs of  #1 ;return #2 sorted by #3 from highest to  lowest,"[""SELECT['procedures']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['costs of #REF', '#1']"", ""SORT['#2', '#3', 'from highest to lowest']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_3969,Sort the list of names and costs of all procedures in the descending order of cost.,"return procedures ;return names of  #1 ;return costs of  #1 ;return #2 ,  #3 ;return #4 sorted by #3 in descending order","[""SELECT['procedures']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['costs of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#4', '#3', 'in descending order']""]","['select', 'project', 'project', 'union', 'sort']",train
SPIDER_train_397,Show the flight number and distance of the flight with maximum price.,"return flights ;return prices of #1 ;return #1 where #2 is  the  highest ;return the  flight number of #3 ;return the  distance of #3 ;return #4 ,  #5","[""SELECT['flights']"", ""PROJECT['prices of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the highest']"", ""AGGREGATE['count', '#3']"", ""PROJECT['the distance of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'aggregate', 'project', 'union']",train
SPIDER_train_3970,Find the three most expensive procedures.,return procedures ;return #1 that  are the  three most expensive,"[""SELECT['procedures']"", ""FILTER['#1', 'that are the three most expensive']""]","['select', 'filter']",train
SPIDER_train_3971,What are the three most costly procedures?,return costly procedures ;return the  three highest of  #1,"[""SELECT['costly procedures']"", ""AGGREGATE['max', '#1']""]","['select', 'aggregate']",train
SPIDER_train_3972,Find the physicians who are trained in a procedure that costs more than 5000.,"return settlements ;return amounts of  #1 ;return sum of  #2 ;return average of  #2 ;return #3 ,   #4","[""SELECT['settlements']"", ""PROJECT['amounts of #REF', '#1']"", ""AGGREGATE['sum', '#2']"", ""AGGREGATE['avg', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_3973,Which physicians are trained in procedures that are more expensive than 5000?,return physicians ;return procedures that #1 trained in  ;return how expensive is #2 ;return #1 where #3 is higher than 5000,"[""SELECT['physicians']"", ""PROJECT['procedures that #REF trained in', '#1']"", ""PROJECT['how expensive is #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is higher than 5000']""]","['select', 'project', 'project', 'comparative']",train
SPIDER_train_3974,Find the physician who was trained in the most expensive procedure?,return procedures ;return #1 where expensive is highest ;return physician who  was  trained in  #2,"[""SELECT['procedures']"", ""FILTER['#1', 'where expensive is highest']"", ""PROJECT['physician who was trained in #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3975,Which physician was trained in the procedure that costs the most.,return procedures ;return costs of #1 ;return #1 where #2 is  highest ;return physician trained in #3,"[""SELECT['procedures']"", ""PROJECT['costs of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['physician trained in #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_3976,What is the average cost of procedures that physician John Wen was trained in?,return John Wen ;return procedures #1 was trained in ;return costs of #2 ;return average of #3,"[""SELECT['John Wen']"", ""PROJECT['procedures #REF was trained in', '#1']"", ""PROJECT['costs of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_3977,Compute the mean price of procedures physician John Wen was trained in.,return the  physician John Wen ;return procedures trained in  of #1 ;return prices of #2 ;return the  mean of #3,"[""SELECT['the physician John Wen']"", ""PROJECT['procedures trained in of #REF', '#1']"", ""PROJECT['prices of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_3978,Find the names of procedures which physician John Wen was trained in.,return procedures ;return #1 that  physician John Wen was trained in ;return names of  #2,"[""SELECT['procedures']"", ""FILTER['#1', 'that physician John Wen was trained in']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3979,What are the names of procedures physician John Wen was trained in?,return John Wen ;return procedures #1 has  trained in ;return names of  #2,"[""SELECT['John Wen']"", ""PROJECT['procedures #REF has trained in', '#1']"", ""PROJECT['names of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_398,What is the flight number and its distance for the one with the maximum price?,"return flights ;return prices of  #1 ;return #1 where #2 is  maximum ;return flight number of  #3 ;return distance of  #3 ;return #4 ,  #5","[""SELECT['flights']"", ""PROJECT['prices of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is maximum']"", ""AGGREGATE['count', '#3']"", ""PROJECT['distance of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'aggregate', 'project', 'union']",train
SPIDER_train_3980,Find all procedures which cost more than 1000 or which physician John Wen was trained in.,"return procedures ;return #1 which  cost more than  1000 ;return #1 which  John Wen trained in ;return #2 ,   #3","[""SELECT['procedures']"", ""FILTER['#1', 'which cost more than 1000']"", ""FILTER['#1', 'which John Wen trained in']"", ""UNION['#2', '#3']""]","['select', 'filter', 'filter', 'union']",train
SPIDER_train_3981,What are the procedures that cost more than 1000 or are specialized in by physician John Wen?,return procedures ;return cost of  #1 ;return #1 where #2 is  higher than 1000 ;return physician that  specialized in #1 ;return #1 where #4 is  John Wen ;return #3 or  #5,"[""SELECT['procedures']"", ""PROJECT['cost of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 1000']"", ""PROJECT['physician that specialized in #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is John Wen']"", ""UNION['#3', '#5']""]","['select', 'project', 'comparative', 'project', 'comparative', 'union']",train
SPIDER_train_3982,Find the names of all procedures which cost more than 1000 but which physician John Wen was not trained in?,return procedures ;return #1 that  cost more than  1000 ;return #2 that  physician John Wen is  not  trained in,"[""SELECT['procedures']"", ""FILTER['#1', 'that cost more than 1000']"", ""FILTER['#2', 'that physician John Wen is not trained in']""]","['select', 'filter', 'filter']",train
SPIDER_train_3983,"Among the procedures that cost more than 1000, which were not specialized in by physician John Wen?",return procedures ;return #1 that  cost more than  1000 ;return #2 specialized in by physician John Wen ;return #2 besides #3,"[""SELECT['procedures']"", ""FILTER['#1', 'that cost more than 1000']"", ""FILTER['#2', 'specialized in by physician John Wen']"", ""DISCARD['#2', '#3']""]","['select', 'filter', 'filter', 'discard']",train
SPIDER_train_3984,Find the names of all procedures such that the cost is less than 5000 and physician John Wen was trained in.,return procedures ;return cost of  #1 ;return #1 where  #2 is  lower than 5000 ;return physician trained in #1 ;return #1 where  #4 is  John Wen ;return #1 of  both #3 and #5 ;return names of  #6,"[""SELECT['procedures']"", ""PROJECT['cost of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is lower than 5000']"", ""PROJECT['physician trained in #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is John Wen']"", ""INTERSECTION['#1', '#3', '#5']"", ""PROJECT['names of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'comparative', 'intersection', 'project']",train
SPIDER_train_3985,What procedures cost less than 5000 and have John Wen as a trained physician?,return procedures ;return costs of #1 ;return #1 where #2 is  lower than 5000 ;return physicians trained in #1 ;return #1 where #2 is  John Wen ;return #1 of both #3 and #5,"[""SELECT['procedures']"", ""PROJECT['costs of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is lower than 5000']"", ""PROJECT['physicians trained in #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is John Wen']"", ""INTERSECTION['#1', '#3', '#5']""]","['select', 'project', 'comparative', 'project', 'comparative', 'intersection']",train
SPIDER_train_3986,Find the name of physicians who are affiliated with both Surgery and Psychiatry departments.,return physicians ;return #1 affiliated with  Surgery departments ;return #2 and Psychiatry departments ;return the  names of  #3,"[""SELECT['physicians']"", ""FILTER['#1', 'affiliated with Surgery departments']"", ""FILTER['#2', 'and Psychiatry departments']"", ""PROJECT['the names of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_3987,Which physicians are affiliated with both Surgery and Psychiatry departments? Tell me their names.,return physicians ;return departments that  #1 are affiliated with  ;return #1 where #2 is  Surgery ;return #1 where #2 is  Psychiatry ;return #1 in both #3 and #4 ;return the  names of #5,"[""SELECT['physicians']"", ""PROJECT['departments that #REF are affiliated with', '#1']"", ""COMPARATIVE['#1', '#2', 'is Surgery']"", ""COMPARATIVE['#1', '#2', 'is Psychiatry']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['the names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_3988,Find the name of physicians who are affiliated with Surgery or Psychiatry department.,return physicians ;return departments #1 are affiliated with  ;return #1 where #2 is  Surgery ;return #1 where #2 is  Psychiatry ;return #3 or  #4 ;return names of #5,"[""SELECT['physicians']"", ""PROJECT['departments #REF are affiliated with', '#1']"", ""COMPARATIVE['#1', '#2', 'is Surgery']"", ""COMPARATIVE['#1', '#2', 'is Psychiatry']"", ""UNION['#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_3989,Which physicians are affiliated with either Surgery or Psychiatry department? Give me their names.,"return physicians ;return #1 that  are  affiliated with Surgery department ;return #1 that  are  affiliated with Psychiatry department ;return names of  #2 ;return names of  #3 ;return #2 ,  #3","[""SELECT['physicians']"", ""FILTER['#1', 'that are affiliated with Surgery department']"", ""FILTER['#1', 'that are affiliated with Psychiatry department']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['names of #REF', '#3']"", ""UNION['#2', '#3']""]","['select', 'filter', 'filter', 'project', 'project', 'union']",train
SPIDER_train_399,Show the flight number of flights with three lowest distances.,return flights ;return distances of #1 ;return #1 where #2 are the  three lowest ;return flight numbers of #3,"[""SELECT['flights']"", ""PROJECT['distances of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'are the three lowest']"", ""PROJECT['flight numbers of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3990,Find the names of patients who are not using the medication of Procrastin-X.,return patients ;return medications of  #1 ;return #1 where  #2 is  not  Procrastin-X ;return names of  #3,"[""SELECT['patients']"", ""PROJECT['medications of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not Procrastin-X']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_3991,What are the names of patients who are not taking the medication of Procrastin-X.,return patients ;return #1 taking the  medication Procrastin-X ;return #1 besides  #2 ;return names of  #3,"[""SELECT['patients']"", ""FILTER['#1', 'taking the medication Procrastin-X']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_3992,Find the number of patients who are not using the medication of Procrastin-X.,return patients ;return medication of  #1 ;return #1 where  #2 is  not  Procrastin-X ;return number of #3,"[""SELECT['patients']"", ""PROJECT['medication of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not Procrastin-X']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_3993,How many patients are not using Procrastin-X as medication?,return patients ;return #1 that  are  using Procrastin-X as medication ;return #1 besides #2 ;return the number of #3,"[""SELECT['patients']"", ""FILTER['#1', 'that are using Procrastin-X as medication']"", ""DISCARD['#1', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'discard', 'aggregate']",train
SPIDER_train_3994,How many appointments are there?,return appointments ;return number of #1,"[""SELECT['appointments']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_3995,Count how many appointments have been made in total.,return appointments ;return number of #1,"[""SELECT['appointments']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_3996,Find the names of nurses who are on call.,return nurses ;return #1 who  are  on  call ;return names of  #2,"[""SELECT['nurses']"", ""FILTER['#1', 'who are on call']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3997,What are the distinct names of nurses on call?,return nurses ;return #1 who  are  on  call ;return distinct names of  #2,"[""SELECT['nurses']"", ""FILTER['#1', 'who are on call']"", ""PROJECT['distinct names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_3998,How many ships are there?,return ships ;return number of #1,"[""SELECT['ships']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_3999,What is the number of ships?,return ships ;return number of  #1,"[""SELECT['ships']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_4,What is the average number of employees of the departments whose rank is between 10 and 15?,return departments ;return #1 whose rank is  between 10 and  15 ;return employees of  #2 ;return average number of  #3,"[""SELECT['departments']"", ""FILTER['#1', 'whose rank is betweenleftside 10']"", ""FILTER['#2', 'whose rank is betweenrightside 15']"", ""PROJECT['employees of #REF', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'filter', 'filter', 'project', 'aggregate']",train
SPIDER_train_40,Please show the themes of competitions with host cities having populations larger than 1000.,return competitions ;return host cities of  #1 ;return populations of  #2 ;return #1 where  #3 is higher than 1000 ;return themes of  #4,"[""SELECT['competitions']"", ""PROJECT['host cities of #REF', '#1']"", ""PROJECT['populations of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is higher than 1000']"", ""PROJECT['themes of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_400,What are the numbers of the shortest flights?,return flights ;return numbers of  #1 ;return #2 where #1 are  shortest,"[""SELECT['flights']"", ""PROJECT['numbers of #REF', '#1']"", ""SUPERLATIVE['min', '#2', '#1']""]","['select', 'project', 'superlative']",train
SPIDER_train_4000,List the name of ships in ascending order of tonnage.,return ships ;return names of  #1 ;return tonnages of  #1 ;return #2 sorted by #3 in ascending order,"[""SELECT['ships']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['tonnages of #REF', '#1']"", ""SORT['#2', '#3', 'in ascending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_4001,what are the names of the ships ordered by ascending tonnage?,return ships ;return names of  #1 ;return tonnages of  #1 ;return #2 sorted by #3 ascending,"[""SELECT['ships']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['tonnages of #REF', '#1']"", ""SORT['#2', '#3', 'ascending']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_4002,What are the type and nationality of ships?,"return ships ;return type of  #1 ;return nationality of  #1 ;return #2 ,  #3","[""SELECT['ships']"", ""PROJECT['type of #REF', '#1']"", ""PROJECT['nationality of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_4003,What are the types and nationalities of every ship?,"return ships ;return types of #1 ;return nationalities of #1 ;return #2 ,  #3","[""SELECT['ships']"", ""PROJECT['types of #REF', '#1']"", ""PROJECT['nationalities of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_4004,"List the name of ships whose nationality is not ""United States"".",return ships ;return nationalities of  #1 ;return #1 where  #2 is not  United States ;return names of  #3,"[""SELECT['ships']"", ""PROJECT['nationalities of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not United States']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4005,What are the names of the ships that are not from the United States?,return ships ;return #1 from the   United States ;return #1 besides #2 ;return the   names of #3,"[""SELECT['ships']"", ""FILTER['#1', 'from the United States']"", ""DISCARD['#1', '#2']"", ""PROJECT['the names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_4006,Show the name of ships whose nationality is either United States or United Kingdom.,return ships ;return nationalities of  #1 ;return #1 where #2 is  United  States ;return #1 where #2 is  United  Kingdom ;return #3 or  #4 ;return names of  #5,"[""SELECT['ships']"", ""PROJECT['nationalities of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is United States']"", ""COMPARATIVE['#1', '#2', 'is United Kingdom']"", ""UNION['#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_4007,What are the names of the ships  that are from either the US or the UK?,return ships ;return #1 from the   US ;return #1 from the   UK ;return #2 or  #3 ;return names of #4,"[""SELECT['ships']"", ""FILTER['#1', 'from the US']"", ""FILTER['#1', 'from the UK']"", ""UNION['#2', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_4008,What is the name of the ship with the largest tonnage?,return ships ;return tonnages of  #1 ;return #1 where #2 is  highest ;return name of  #3,"[""SELECT['ships']"", ""PROJECT['tonnages of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_4009,What is the ship with the largest amount of tonnage called?,return ships ;return tonnages of #1 ;return #1 where #2 is  largest ;return What is  #3 called,"[""SELECT['ships']"", ""PROJECT['tonnages of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['What is #REF called', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_401,What is the average distance and average price for flights from Los Angeles.,"return flights ;return #1 from  Los Angeles ;return distances of  #2 ;return average  of  #3 ;return prices of  #2 ;return average  of  #5 ;return #4 ,  #6","[""SELECT['flights']"", ""FILTER['#1', 'from Los Angeles']"", ""PROJECT['distances of #REF', '#2']"", ""AGGREGATE['avg', '#3']"", ""PROJECT['prices of #REF', '#2']"", ""AGGREGATE['avg', '#5']"", ""UNION['#4', '#6']""]","['select', 'filter', 'project', 'aggregate', 'project', 'aggregate', 'union']",train
SPIDER_train_4010,Show different types of ships and the number of ships of each type.,return ships  ;return types of  #1 ;return number of  #1 for each  #2,"[""SELECT['ships']"", ""PROJECT['types of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""UNION['#2', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_4011,"For each type, how many ships are there?",return types ;return ships of  #1 ;return number of #2 for each #1,"[""SELECT['types']"", ""PROJECT['ships of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_4012,Please show the most common type of ships.,return types of ships ;return ships of #1 ;return number of  #2 for each #1 ;return #1 where #2 is  highest,"[""SELECT['types of ships']"", ""PROJECT['ships of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#2']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_4013,What is the most common type of ships?,return ships ;return types of  #1 ;return most common of  #2,"[""SELECT['ships']"", ""PROJECT['types of #REF', '#1']"", ""PROJECT['most common of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_4014,List the nations that have more than two ships.,return nations ;return ships of  #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is higher than two,"[""SELECT['nations']"", ""PROJECT['ships of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than two']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_4015,What are the nations that have more than two ships?,return nations ;return ships of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than two,"[""SELECT['nations']"", ""PROJECT['ships of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than two']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_4016,Show different types of ships and the average tonnage of ships of each type.,"return types of  ships  ;return different #1 ;return tonnages of  #2 ;return average of  #3 for each  #2 ;return #2 ,  #4","[""SELECT['types of ships']"", ""PROJECT['different #REF', '#1']"", ""PROJECT['tonnages of #REF', '#2']"", ""GROUP['avg', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_4017,"For each type, what is the average tonnage?",return types ;return tonnages of  #1 ;return average #2 for each #1,"[""SELECT['types']"", ""PROJECT['tonnages of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_4018,"Show codes and fates of missions, and names of ships involved.",return missions ;return codes of  #1 ;return fates of  #1 ;return ships involved of  #1 ;return #2 or #3 or  #4,"[""SELECT['missions']"", ""PROJECT['codes of #REF', '#1']"", ""PROJECT['fates of #REF', '#1']"", ""PROJECT['ships involved of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_4019,"What are the mission codes, fates, and names of the ships involved?","return ships ;return #1 involved ;return mission codes of  #2 ;return fates of  #2 ;return names of  #2 ;return #3 ,  #4 ,   #5","[""SELECT['ships']"", ""FILTER['#1', 'involved']"", ""PROJECT['mission codes of #REF', '#2']"", ""PROJECT['fates of #REF', '#2']"", ""PROJECT['names of #REF', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_402,What is the average distance and price for all flights from LA?,"return flights ;return #1 from  LA ;return the  distances for #2 ;return the  prices for #2 ;return the  average of  #3 ;return the  average of  #4 ;return #5 ,  #6","[""SELECT['flights']"", ""FILTER['#1', 'from LA']"", ""PROJECT['the distances for #REF', '#2']"", ""PROJECT['the prices for #REF', '#2']"", ""AGGREGATE['avg', '#3']"", ""AGGREGATE['avg', '#4']"", ""UNION['#5', '#6']""]","['select', 'filter', 'project', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_4020,Show names of ships involved in a mission launched after 1928.,return missions ;return #1 launched after 1928 ;return ships involved in #2 ;return names of  #3,"[""SELECT['missions']"", ""FILTER['#1', 'launched after 1928']"", ""PROJECT['ships involved in #REF', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_4021,What are the names of ships that were involved in a mission launched after 1928?,return ships ;return #1 that  were involved in a mission ;return #2 after 1928 ;return names of  #3,"[""SELECT['ships']"", ""FILTER['#1', 'that were involved in a mission']"", ""FILTER['#2', 'after 1928']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_4022,"Show the distinct fate of missions that involve ships with nationality ""United States""",return ships ;return nationalities of #1 ;return #1 where #2 is United States ;return missions of #3 ;return the  distinct fates of #4,"[""SELECT['ships']"", ""PROJECT['nationalities of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is United States']"", ""PROJECT['missions of #REF', '#3']"", ""PROJECT['the distinct fates of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_4023,What are the different fates of the mission that involved ships from the United States?,return ships ;return #1 from  the  United States ;return missions that  involved #2 ;return fates of  #3 ;return different #4,"[""SELECT['ships']"", ""FILTER['#1', 'from the United States']"", ""PROJECT['missions that involved #REF', '#2']"", ""PROJECT['fates of #REF', '#3']"", ""PROJECT['different #REF', '#4']""]","['select', 'filter', 'project', 'project', 'project']",train
SPIDER_train_4024,List the name of ships that are not involved in any mission,return ships ;return #1 involved in missions ;return #1 besides #2 ;return names of  #3,"[""SELECT['ships']"", ""FILTER['#1', 'involved in missions']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_4025,What are the names of the ships that are not involved in any missions?,return ships ;return #1 that  are  involved in missions ;return #1 besides  #2 ;return names of  #3,"[""SELECT['ships']"", ""FILTER['#1', 'that are involved in missions']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_4026,Show the types of ships that have both ships with tonnage larger than 6000 and ships with tonnage smaller than 4000.,return ships   ;return tonnages of  #1 ;return #1 where #2 is  higher than 6000 ;return #1 where #2 is  lower than 4000 ;return #1 of  both #3 and  #4 ;return types of  #5,"[""SELECT['ships']"", ""PROJECT['tonnages of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 6000']"", ""COMPARATIVE['#1', '#2', 'is lower than 4000']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['types of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_4027,What are the types of the ships that have both shiips with tonnage more than 6000 and those with tonnage less than 4000?,return ships ;return tonnages of  #1 ;return #1 where #2 is  higher than 6000 ;return #1 where #2 is  lower than 4000 ;return #1 of  both #3 and  #4 ;return types of  #5,"[""SELECT['ships']"", ""PROJECT['tonnages of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 6000']"", ""COMPARATIVE['#1', '#2', 'is lower than 4000']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['types of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_4028,Find the number of students in total.,return students ;return number of #1,"[""SELECT['students']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_403,Show all origins and the number of flights from each origin.,return flights ;return origin of  #1 ;return number of #1 for each #2,"[""SELECT['flights']"", ""PROJECT['origin of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""UNION['#2', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_4030,Find the last names of students studying in room 111.,return students ;return #1 studying in room 111 ;return last names of  #2,"[""SELECT['students']"", ""FILTER['#1', 'studying in room 111']"", ""PROJECT['last names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4031,What are the last names of students in room 111?,return students ;return rooms of  #1 ;return #1 where #2 is  111 ;return last names of  #3,"[""SELECT['students']"", ""PROJECT['rooms of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 111']"", ""PROJECT['last names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4032,Find the first names of students studying in room 108.,return students ;return study rooms of #1 ;return #1 where #2 is room 108 ;return first names of #3,"[""SELECT['students']"", ""PROJECT['study rooms of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is room 108']"", ""PROJECT['first names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4033,What are the first names of students in room 108?,return students ;return rooms of  #1 ;return #1 where #2 is  108 ;return first names of  #3,"[""SELECT['students']"", ""PROJECT['rooms of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 108']"", ""PROJECT['first names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4034,What are the first names of students studying in room 107?,return students ;return rooms #1 are  studying in ;return #1 where #2 is  107 ;return first names of  #3,"[""SELECT['students']"", ""PROJECT['rooms #REF are studying in', '#1']"", ""COMPARATIVE['#1', '#2', 'is 107']"", ""PROJECT['first names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4035,List the first names of all the students in room 107.,return students ;return rooms of  #1 ;return #1 where  #2 is 107 ;return first names of  #3,"[""SELECT['students']"", ""PROJECT['rooms of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 107']"", ""PROJECT['first names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4036,For each classroom report the grade that is taught in it. Report just the classroom number and the grade number.,"return classrooms ;return grades taught in #1 ;return grade  numbers of  #2 ;return classroom numbers of  #1 ;return #4 ,   #3","[""SELECT['classrooms']"", ""PROJECT['grades taught in #REF', '#1']"", ""PROJECT['grade numbers of #REF', '#2']"", ""PROJECT['classroom numbers of #REF', '#1']"", ""UNION['#4', '#3']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_4037,What are the grade number and classroom number of each class in the list?,"return classes ;return grade numbers of  #1 ;return classroom numbers of  #1 ;return #2 ,  #3","[""SELECT['classes']"", ""PROJECT['grade numbers of #REF', '#1']"", ""PROJECT['classroom numbers of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_4038,Which grade is studying in classroom 103?,return grades ;return classrooms of #1 ;return #1 where #2 is  103,"[""SELECT['grades']"", ""PROJECT['classrooms of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 103']""]","['select', 'project', 'comparative']",train
SPIDER_train_4039,Find the grade taught in classroom 103.,return grades ;return #1 taught in classroom 103,"[""SELECT['grades']"", ""FILTER['#1', 'taught in classroom 103']""]","['select', 'filter']",train
SPIDER_train_404,"For each origin, how many flights came from there?",return origins ;return flights from  #1 ;return number of #2 for each #1,"[""SELECT['origins']"", ""PROJECT['flights from #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_4040,Find the grade studying in room 105.,return room 105 ;return grade studying in #1,"[""SELECT['room 105']"", ""PROJECT['grade studying in #REF', '#1']""]","['select', 'project']",train
SPIDER_train_4041,Which grade is studying in room 105?,return grades ;return #1 studying in room 105,"[""SELECT['grades']"", ""FILTER['#1', 'studying in room 105']""]","['select', 'filter']",train
SPIDER_train_4042,Which classrooms are used by grade 4?,return classrooms ;return #1 used by grade 4,"[""SELECT['classrooms']"", ""FILTER['#1', 'used by grade 4']""]","['select', 'filter']",train
SPIDER_train_4043,Find the classrooms in which grade 4 is studying.,return classrooms ;return #1 in which  grade 4 is  studying,"[""SELECT['classrooms']"", ""FILTER['#1', 'in which grade 4 is studying']""]","['select', 'filter']",train
SPIDER_train_4044,Which classrooms are used by grade 5?,return classrooms ;return grades #1 are used by ;return #1 where #2 is  5,"[""SELECT['classrooms']"", ""PROJECT['grades #REF are used by', '#1']"", ""COMPARATIVE['#1', '#2', 'is 5']""]","['select', 'project', 'comparative']",train
SPIDER_train_4045,Show me the classrooms grade 5 is using.,return classrooms ;return #1 with  use of  grade 5,"[""SELECT['classrooms']"", ""FILTER['#1', 'with use of grade 5']""]","['select', 'filter']",train
SPIDER_train_4046,Find the last names of the teachers that teach fifth grade.,return teachers ;return #1 that  teach fifth grade ;return last names of  #2,"[""SELECT['teachers']"", ""FILTER['#1', 'that teach fifth grade']"", ""PROJECT['last names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4047,what are the last names of the teachers who teach grade 5?,return teachers ;return grade #1 teach ;return #1 where #2 is  5 ;return last names of  #3,"[""SELECT['teachers']"", ""PROJECT['grade #REF teach', '#1']"", ""COMPARATIVE['#1', '#2', 'is 5']"", ""PROJECT['last names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4048,Find the first names of the teachers that teach first grade.,return first grade ;return teachers of #1 ;return first names of #2,"[""SELECT['first grade']"", ""PROJECT['teachers of #REF', '#1']"", ""PROJECT['first names of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_4049,What are the first names of the teachers who teach grade 1?,return teachers ;return grade #1 teach ;return #1 where #2 is  1 ;return first names of  #3,"[""SELECT['teachers']"", ""PROJECT['grade #REF teach', '#1']"", ""COMPARATIVE['#1', '#2', 'is 1']"", ""PROJECT['first names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_405,Show all destinations and the number of flights to each destination.,"return destinations ;return flights to  each #1 ;return number of #2 for each #1 ;return #1 ,   #3","[""SELECT['destinations']"", ""PROJECT['flights to each #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_4050,Find the first names of all the teachers that teach in classroom 110.,return teachers ;return classrooms of  #1 ;return #1 where  #2 is  110 ;return first names of  #3,"[""SELECT['teachers']"", ""PROJECT['classrooms of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 110']"", ""PROJECT['first names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4051,Which teachers teach in classroom 110? Give me their first names.,return teachers ;return #1 that  teach in classroom 110 ;return first names of  #2,"[""SELECT['teachers']"", ""FILTER['#1', 'that teach in classroom 110']"", ""PROJECT['first names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4052,Find the last names of teachers teaching in classroom 109.,return teachers ;return #1 teaching in classrooms 109 ;return last names of  #2,"[""SELECT['teachers']"", ""FILTER['#1', 'teaching in classrooms 109']"", ""PROJECT['last names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4053,Which teachers teach in classroom 109? Give me their last names.,return teachers ;return classrooms of  #1 ;return #1 where #2 is  109 ;return last names of  #3,"[""SELECT['teachers']"", ""PROJECT['classrooms of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 109']"", ""PROJECT['last names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4054,Report the first name and last name of all the teachers.,"return teachers ;return first names of  #1 ;return last names of  #1 ;return #2 ,  #3","[""SELECT['teachers']"", ""PROJECT['first names of #REF', '#1']"", ""PROJECT['last names of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_4055,What are the first name and last name of all the teachers?,"return teachers ;return first names of  #1 ;return last names of  #1 ;return #2 ,  #3","[""SELECT['teachers']"", ""PROJECT['first names of #REF', '#1']"", ""PROJECT['last names of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_4056,Report the first name and last name of all the students.,"return students ;return first names of  #1 ;return last names of  #1 ;return #2 ,  #3","[""SELECT['students']"", ""PROJECT['first names of #REF', '#1']"", ""PROJECT['last names of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_4057,Show each student's first name and last name.,"return students ;return first name  of  each #1 ;return last name  of  each #1 ;return #2 ,   #3","[""SELECT['students']"", ""PROJECT['first name of each #REF', '#1']"", ""PROJECT['last name of each #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_4058,Find all students taught by OTHA MOYER. Output the first and last names of the students.,return students ;return #1 taught by OTHA MOYER ;return first and last names of  #2,"[""SELECT['students']"", ""FILTER['#1', 'taught by OTHA MOYER']"", ""PROJECT['first and last names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4059,Which students study under the teacher named OTHA MOYER? Give me the first and last names of the students.,"return students  ;return teachers #1 study under ;return #1 where #2 is  OTHA MOYER ;return first names of  #3 ;return last names of  #3 ;return #4 ,  #5","[""SELECT['students']"", ""PROJECT['teachers #REF study under', '#1']"", ""COMPARATIVE['#1', '#2', 'is OTHA MOYER']"", ""PROJECT['first names of #REF', '#3']"", ""PROJECT['last names of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_406,What are the destinations and number of flights to each one?,return flights ;return destinations of #1 ;return number of  #1 for each  #2,"[""SELECT['flights']"", ""PROJECT['destinations of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""UNION['#2', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_4060,Find all students taught by MARROTTE KIRK. Output first and last names of students.,"return students ;return #1 taught by MARROTTE KIRK ;return last name ,   first names of  #2","[""SELECT['students']"", ""FILTER['#1', 'taught by MARROTTE KIRK']"", ""PROJECT['last name , first names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4061,Which are the first and last names of the students taught by MARROTTE KIRK?,"return students ;return #1 that  are taught by MARROTTE KIRK ;return first names of #2 ;return last names of #2 ;return #3 ,  #4","[""SELECT['students']"", ""FILTER['#1', 'that are taught by MARROTTE KIRK']"", ""PROJECT['first names of #REF', '#2']"", ""PROJECT['last names of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_4062,Find the first and last name of all the teachers that teach EVELINA BROMLEY.,"return teachers ;return #1 that  teach EVELINA BROMLEY ;return first name of  #2 ;return last name of  #2 ;return #3 ,   #4","[""SELECT['teachers']"", ""FILTER['#1', 'that teach EVELINA BROMLEY']"", ""PROJECT['first name of #REF', '#2']"", ""PROJECT['last name of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_4063,Which teachers teach the student named EVELINA BROMLEY? Give me the first and last name  of the teachers.,"return student ;return #1 that is named EVELINA BROMLEY ;return teachers of #2 ;return first names of #3 ;return last names of #3 ;return #4 ,  #5","[""SELECT['student']"", ""FILTER['#1', 'that is named EVELINA BROMLEY']"", ""PROJECT['teachers of #REF', '#2']"", ""PROJECT['first names of #REF', '#3']"", ""PROJECT['last names of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_4064,Find the last names of all the teachers that teach GELL TAMI.,return teachers ;return #1 that  teach GELL TAMI ;return last names of  #2,"[""SELECT['teachers']"", ""FILTER['#1', 'that teach GELL TAMI']"", ""PROJECT['last names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4065,What are the last names of the teachers who teach the student called GELL TAMI?,return students ;return #1 called GELL TAMI ;return teachers of  #2 ;return last names of  #3,"[""SELECT['students']"", ""FILTER['#1', 'called GELL TAMI']"", ""PROJECT['teachers of #REF', '#2']"", ""PROJECT['last names of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_4066,How many students does LORIA ONDERSMA teaches?,return students ;return #1 that  LORIA ONDERSMA teaches ;return number of  #2,"[""SELECT['students']"", ""FILTER['#1', 'that LORIA ONDERSMA teaches']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_4067,Count the number of students the teacher LORIA ONDERSMA teaches.,return students ;return #1 with  teacher LORIA ONDERSMA ;return the number of #2,"[""SELECT['students']"", ""FILTER['#1', 'with teacher LORIA ONDERSMA']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_4068,How many students does KAWA GORDON teaches?,return KAWA GORDON ;return students of #1 ;return number of  #2,"[""SELECT['KAWA GORDON']"", ""PROJECT['students of #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_4069,Find the number of students taught by the teacher KAWA GORDON.,return students ;return #1 taught by the teacher KAWA GORDON ;return number of #2,"[""SELECT['students']"", ""FILTER['#1', 'taught by the teacher KAWA GORDON']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_407,Which origin has most number of flights?,return flights ;return origin of #1 ;return number of  #1 for each #2 ;return #2 where #3 is  the  highest,"[""SELECT['flights']"", ""PROJECT['origin of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""COMPARATIVE['#2', '#3', 'is the highest']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_4070,Find the number of students taught by TARRING LEIA.,return students ;return #1 taught by TARRING LEIA ;return number of #2,"[""SELECT['students']"", ""FILTER['#1', 'taught by TARRING LEIA']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_4071,How many students are taught by teacher TARRING LEIA?,return teachers ;return students of  #1 ;return #2 where  #1 is TARRING LEIA ;return number of  #3,"[""SELECT['teachers']"", ""PROJECT['students of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is TARRING LEIA']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_4072,How many teachers does the student named CHRISSY NABOZNY have?,return teachers ;return students of  #1 ;return #1 where  #2 is  CHRISSY NABOZNY ;return number of #3,"[""SELECT['teachers']"", ""PROJECT['students of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is CHRISSY NABOZNY']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_4073,Find the number of teachers who teach the student called CHRISSY NABOZNY.,return teachers ;return students of  #1 ;return #1 where  #2 is  CHRISSY NABOZNY ;return number of #3,"[""SELECT['teachers']"", ""PROJECT['students of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is CHRISSY NABOZNY']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_4074,How many teachers does the student named MADLOCK RAY have?,return students ;return #1 named MADLOCK RAY ;return teachers of  #2 ;return number of  #3,"[""SELECT['students']"", ""FILTER['#1', 'named MADLOCK RAY']"", ""PROJECT['teachers of #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_4075,Find the number of teachers who teach the student called MADLOCK RAY.,return teachers ;return students of  #1 ;return #1 where  #2 is  MADLOCK RAY ;return number of #3,"[""SELECT['teachers']"", ""PROJECT['students of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is MADLOCK RAY']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_4076,Find all first-grade students who are NOT taught by OTHA MOYER. Report their first and last names.,"return students ;return #1 in first-grade ;return #2 not  taught by OTHA MOYER ;return first names of  #3 ;return last names of  #3 ;return #4 ,  #5","[""SELECT['students']"", ""FILTER['#1', 'in first-grade']"", ""FILTER['#2', 'not taught by OTHA MOYER']"", ""PROJECT['first names of #REF', '#3']"", ""PROJECT['last names of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'filter', 'project', 'project', 'union']",train
SPIDER_train_4077,What are the first and last names of the first-grade students who are NOT taught by teacher OTHA MOYER?,"return students ;return #1 in first-grade ;return #2 not  taught by OTHA MOYER ;return first names of  #3 ;return last names of  #3 ;return #4 ,  #5","[""SELECT['students']"", ""FILTER['#1', 'in first-grade']"", ""FILTER['#2', 'not taught by OTHA MOYER']"", ""PROJECT['first names of #REF', '#3']"", ""PROJECT['last names of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'filter', 'project', 'project', 'union']",train
SPIDER_train_4078,Find the last names of the students in third grade that are not taught by COVIN JEROME.,return students ;return #1 in third grade ;return #2 taught by COVIN JEROME ;return #2 not  in #3 ;return last names of  #4,"[""SELECT['students']"", ""FILTER['#1', 'in third grade']"", ""FILTER['#2', 'taught by COVIN JEROME']"", ""DISCARD['#2', '#3']"", ""PROJECT['last names of #REF', '#4']""]","['select', 'filter', 'filter', 'discard', 'project']",train
SPIDER_train_4079,Which students in third grade are not taught by teacher COVIN JEROME? Give me the last names of the students.,return students ;return #1 in third grade ;return teachers that  #2 are taught by ;return #2 where #3 is  COVIN JEROME ;return #2 besides #4 ;return the  last names of #5,"[""SELECT['students']"", ""FILTER['#1', 'in third grade']"", ""PROJECT['teachers that #REF are taught by', '#2']"", ""COMPARATIVE['#2', '#3', 'is COVIN JEROME']"", ""DISCARD['#2', '#4']"", ""PROJECT['the last names of #REF', '#5']""]","['select', 'filter', 'project', 'comparative', 'discard', 'project']",train
SPIDER_train_408,What place has the most flights coming from there?,return places ;return flights coming from  #1 ;return number of  #2 ;return #1 where #3 is  most,"[""SELECT['places']"", ""PROJECT['flights coming from #REF', '#1']"", ""AGGREGATE['count', '#2']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'aggregate', 'superlative']",train
SPIDER_train_4080,"For each grade, report the grade, the number of classrooms in which it is taught and the total number of students in the grade.","return grades ;return classrooms of  #1 ;return number of #2 for each #1 ;return students of  #1 ;return number of #4 for each #1 ;return #1 ,   #3 , #5","[""SELECT['grades']"", ""PROJECT['classrooms of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['students of #REF', '#1']"", ""GROUP['count', '#4', '#1']"", ""UNION['#1', '#3', '#5']""]","['select', 'project', 'group', 'project', 'group', 'union']",train
SPIDER_train_4081,"For each grade, return the grade number, the number of classrooms used for the grade, and the total number of students enrolled in the grade.","return grades ;return grade    number   of  #1 ;return classrooms used for #1 ;return number of #3 for each #1 ;return students enrolled in #1 ;return number   of  #5 for each #1 ;return #2 ,   #4 , #6","[""SELECT['grades']"", ""AGGREGATE['count', '#1']"", ""PROJECT['classrooms used for #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""PROJECT['students enrolled in #REF', '#1']"", ""GROUP['count', '#5', '#1']"", ""UNION['#2', '#4', '#6']""]","['select', 'aggregate', 'project', 'group', 'project', 'group', 'union']",train
SPIDER_train_4082,"For each classroom, report the classroom number and the number of grades using it.","return classrooms ;return classroom number of  #1 ;return grades using #1 ;return number of #3 for each #1 ;return #2 ,   #4","[""SELECT['classrooms']"", ""AGGREGATE['count', '#1']"", ""PROJECT['grades using #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'aggregate', 'project', 'group', 'union']",train
SPIDER_train_4083,"For each classroom, show the classroom number and count the number of distinct grades that use the room.","return classrooms ;return classroom number of  #1 ;return distinct grades that  use #1 ;return number of #3 for each #1 ;return #2 ,   #4","[""SELECT['classrooms']"", ""AGGREGATE['count', '#1']"", ""PROJECT['distinct grades that use #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'aggregate', 'project', 'group', 'union']",train
SPIDER_train_4084,Which classroom has the most students?,return classrooms ;return students ;return number of  #2 for each #1 ;return #1 where #3 is  most,"[""SELECT['classrooms']"", ""SELECT['students']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'select', 'group', 'superlative']",train
SPIDER_train_4085,Find the classroom that the most students use.,return classrooms ;return students of #1 ;return number of  #2 for each #1 ;return #1 where #3 is highest,"[""SELECT['classrooms']"", ""PROJECT['students of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_4086,Report the number of students in each classroom.,return classrooms ;return students in #1 ;return number of  #2 for each  #1,"[""SELECT['classrooms']"", ""PROJECT['students in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_4087,"For each classroom, show the classroom number and find how many students are using it.","return classrooms ;return classroom number of  #1 ;return students using #1 ;return number of #3 for each #1 ;return #2 ,   #4","[""SELECT['classrooms']"", ""AGGREGATE['count', '#1']"", ""PROJECT['students using #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'aggregate', 'project', 'group', 'union']",train
SPIDER_train_4088,"For each grade 0 classroom, report the total number of students.",return classrooms ;return grades of  #1 ;return #1 where  #2 is  0 ;return students of  #3 ;return number of #4 for each #3,"[""SELECT['classrooms']"", ""PROJECT['grades of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 0']"", ""PROJECT['students of #REF', '#3']"", ""GROUP['count', '#4', '#3']"", ""UNION['#3', '#5']""]","['select', 'project', 'comparative', 'project', 'group', 'union']",train
SPIDER_train_4089,"For each grade 0 classroom, return the classroom number and the count of students.","return classrooms ;return grades of  #1 ;return #1 where  #2 is  0 ;return classroom numbers of  #3 ;return students of  #3 ;return number of  #5 for each #3 ;return #5 ,   #6","[""SELECT['classrooms']"", ""PROJECT['grades of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 0']"", ""PROJECT['classroom numbers of #REF', '#3']"", ""PROJECT['students of #REF', '#3']"", ""GROUP['count', '#5', '#3']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'group', 'union']",train
SPIDER_train_409,Which destination has least number of flights?,return destinations ;return flights to #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  lowest,"[""SELECT['destinations']"", ""PROJECT['flights to #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_4090,Report the total number of students for each fourth-grade classroom.,return fourth-grade classrooms ;return students of  #1 ;return number of  #2 for each  #1,"[""SELECT['fourth-grade classrooms']"", ""PROJECT['students of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_4091,"For each fourth-grade classroom, show the classroom number and the total number of students using it.","return fourth-grade classrooms ;return classroom number of  #1 ;return students using #1 ;return number of #3 for each #1 ;return #2 ,   #4","[""SELECT['fourth-grade classrooms']"", ""AGGREGATE['count', '#1']"", ""PROJECT['students using #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'aggregate', 'project', 'group', 'union']",train
SPIDER_train_4092,Find the name of the teacher who teaches the largest number of students.,return teachers ;return students of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest ;return name of #4,"[""SELECT['teachers']"", ""PROJECT['students of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_4093,Which teacher teaches the most students? Give me the first name and last name of the teacher.,"return teachers ;return students #1 teach ;return number of  #2 for each #1 ;return #1 where #3 is  highest ;return first name of #4 ;return last name of #4 ;return #5 ,  #6","[""SELECT['teachers']"", ""PROJECT['students #REF teach', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['first name of #REF', '#4']"", ""PROJECT['last name of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_4094,Find the number of students in one classroom.,return students ;return #1 in one classroom ;return number of  #2,"[""SELECT['students']"", ""FILTER['#1', 'in one classroom']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_4095,How many students does one classroom have?,return classrooms ;return students that  #1 have ;return number of  #2,"[""SELECT['classrooms']"", ""PROJECT['students that #REF have', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_4096,How many companies are headquartered in the US?,return companies ;return #1 headquartered in the US ;return number of #2,"[""SELECT['companies']"", ""FILTER['#1', 'headquartered in the US']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_4097,List the names of companies by ascending number of sales.,return companies ;return sales of  #1 ;return number of  #2 for each  #1 ;return names of  #1 ;return #4 sorted by ascending #3,"[""SELECT['companies']"", ""PROJECT['sales of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['names of #REF', '#1']"", ""SORT['#4', '#3', 'ascending']""]","['select', 'project', 'group', 'project', 'sort']",train
SPIDER_train_4098,What are the headquarters and industries of all companies?,"return companies ;return headquarters of  #1 ;return industries of  #1 ;return #2 ,  #3","[""SELECT['companies']"", ""PROJECT['headquarters of #REF', '#1']"", ""PROJECT['industries of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_4099,Show the names of companies in the banking or retailing industry?,return industries ;return companies industry #1 ;return #2 where #1 is  banking ;return #2 where #1 is  retailing ;return #3 or  #4 ;return names of  #5,"[""SELECT['industries']"", ""PROJECT['companies industry #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is banking']"", ""COMPARATIVE['#2', '#1', 'is retailing']"", ""UNION['#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_41,What are the themes of competitions that have corresponding host cities with more than 1000 residents?,return competitions ;return host cities of  #1 ;return residents of  #2 ;return number of  #3 for each  #2 ;return #1 where #4 is  higher than 1000 ;return themes of  #5,"[""SELECT['competitions']"", ""PROJECT['host cities of #REF', '#1']"", ""PROJECT['residents of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""COMPARATIVE['#1', '#4', 'is higher than 1000']"", ""PROJECT['themes of #REF', '#5']""]","['select', 'project', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_410,What destination has the fewest number of flights?,return destinations ;return flights of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  lowest,"[""SELECT['destinations']"", ""PROJECT['flights of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_4100,What is the maximum and minimum market value of companies?,"return companies ;return market values of  #1 ;return maximum of  #2 ;return minimum of  #2 ;return #3 ,  #4","[""SELECT['companies']"", ""PROJECT['market values of #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""AGGREGATE['min', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_4101,What is the headquarter of the company with the largest sales?,return companies ;return sales of #1 ;return #1 where #2 is  highest ;return headquarters of #3,"[""SELECT['companies']"", ""PROJECT['sales of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['headquarters of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_4102,Show the different headquarters and number of companies at each headquarter.,"return headquarters ;return different #1 ;return companies at #2 ;return number of  #3 for each  #2 ;return #2 ,  #4","[""SELECT['headquarters']"", ""PROJECT['different #REF', '#1']"", ""PROJECT['companies at #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_4103,Show the most common headquarter for companies.,return companies ;return headquarters of #1 ;return number of #1 for each #2 ;return #2 where #3 is  the highest,"[""SELECT['companies']"", ""PROJECT['headquarters of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""COMPARATIVE['#2', '#3', 'is the highest']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_4104,Show the headquarters that have at least two companies.,return headquarters ;return companies of #1 ;return number of #2 for each #1 ;return #1 where #3 is  at least two,"[""SELECT['headquarters']"", ""PROJECT['companies of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_4105,Show the headquarters that have both companies in banking industry and companies in oil and gas industry.,return companies  ;return #1 in banking industry  ;return #1 in oil and gas industry  ;return #1 in both #2 and #3 ;return headquarters of #4,"[""SELECT['companies']"", ""FILTER['#1', 'in banking industry']"", ""FILTER['#1', 'in oil and gas industry']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['headquarters of #REF', '#4']""]","['select', 'filter', 'filter', 'intersection', 'project']",train
SPIDER_train_4106,Show the names of companies and of employees.,"return companies ;return names of  #1 ;return employees of  #1 ;return #2 ,  #3","[""SELECT['companies']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['employees of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_4107,Show names of companies and that of employees in descending order of number of years working for that employee.,"return companies ;return names of   #1 ;return employees of   #1 ;return years working of   #3 ;return number of  #4 for each #3 ;return names of   #3 ;return #2 ,  #6 ; return #7 sorted by #5 in  descending order","[""SELECT['companies']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['employees of #REF', '#1']"", ""PROJECT['years working of #REF', '#3']"", ""GROUP['count', '#4', '#3']"", ""PROJECT['names of #REF', '#3']"", ""UNION['#2', '#6']"", ""SORT['#7', '#5', 'in descending order']""]","['select', 'project', 'project', 'project', 'group', 'project', 'union', 'sort']",train
SPIDER_train_4108,Show the names of employees that work for companies with sales bigger than 200.,return companies ;return sales of  #1 ;return #1 where #2 is  higher than 200 ;return employees of  #3 ;return names of  #4,"[""SELECT['companies']"", ""PROJECT['sales of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 200']"", ""PROJECT['employees of #REF', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_4109,Show the names of companies and the number of employees they have,"return companies ;return name of #1 ;return employees of #1 ;return number of  #3 for each #1 ;return #2 ,  #4","[""SELECT['companies']"", ""PROJECT['name of #REF', '#1']"", ""PROJECT['employees of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_411,What is the aircraft name for the flight with number 99,return flight ;return number of  #1 ;return #1 where #2 is  99 ;return aircraft of  #3 ;return name of  #4,"[""SELECT['flight']"", ""AGGREGATE['count', '#1']"", ""COMPARATIVE['#1', '#2', 'is 99']"", ""PROJECT['aircraft of #REF', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'aggregate', 'comparative', 'project', 'project']",train
SPIDER_train_4110,List the names of people that are not employed by any company,return people ;return #1 that  are  not  employed by any company ;return names of  #2,"[""SELECT['people']"", ""FILTER['#1', 'that are not employed by any company']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4111,list the names of the companies with more than 200 sales in the descending order of sales and profits.,"return companies ;return sales  of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  more than  200 ;return the   names of #4 ;return sales  of #4 ;return number of  #6 for each #4 ;return profits of #4 ;return #7 ,  #8 ;return #5 sorted by #9 in descending order","[""SELECT['companies']"", ""PROJECT['sales of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than 200']"", ""PROJECT['the names of #REF', '#4']"", ""PROJECT['sales of #REF', '#4']"", ""GROUP['count', '#6', '#4']"", ""PROJECT['profits of #REF', '#4']"", ""UNION['#7', '#8']"", ""SORT['#5', '#9', 'in descending order']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'group', 'project', 'union', 'sort']",train
SPIDER_train_4112,How many film are there?,return films ;return number of #1,"[""SELECT['films']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_4113,Count the number of films.,return films ;return number of #1,"[""SELECT['films']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_4114,List the distinct director of all films.,return films ;return directors of  #1 ;return distinct #2,"[""SELECT['films']"", ""PROJECT['directors of #REF', '#1']"", ""PROJECT['distinct #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_4115,What are the different film Directors?,return films ;return Directors of #1 ;return different #2,"[""SELECT['films']"", ""PROJECT['Directors of #REF', '#1']"", ""PROJECT['different #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_4116,What is the average ticket sales gross in dollars of films?,return films ;return ticket sales gross in dollars of  #1 ;return average of  #2,"[""SELECT['films']"", ""PROJECT['ticket sales gross in dollars of #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_4117,Return the average gross sales in dollars across all films.,return films ;return gross sales in dollars of  #1 ;return average of  #2,"[""SELECT['films']"", ""PROJECT['gross sales in dollars of #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_4118,What are the low and high estimates of film markets?,"return film markets ;return estimates of  #1 ;return lowest #2 ;return highest #2 ;return #3 ,  #4","[""SELECT['film markets']"", ""PROJECT['estimates of #REF', '#1']"", ""AGGREGATE['min', '#2']"", ""AGGREGATE['max', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_4119,Return the low and high estimates for all film markets.,return film markets ;return high estimates of  #1 ;return low estimates of  #1 ;return #2 or #3,"[""SELECT['film markets']"", ""PROJECT['high estimates of #REF', '#1']"", ""PROJECT['low estimates of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_412,What is the name of the aircraft that was on flight number 99?,return aircraft ;return flight numbers of  #1 ;return #1 where #2 is  99 ;return name of  #3,"[""SELECT['aircraft']"", ""PROJECT['flight numbers of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 99']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4120,What are the types of film market estimations in year 1995?,return film market estimations ;return years of  #1 ;return #1 where #2 is  1995 ;return types of  #3,"[""SELECT['film market estimations']"", ""PROJECT['years of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 1995']"", ""PROJECT['types of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4121,Return the types of film market estimations in 1995.,return film market estimations ;return #1 in 1995 ;return types of  #2,"[""SELECT['film market estimations']"", ""FILTER['#1', 'in 1995']"", ""PROJECT['types of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4122,What are the maximum and minimum number of cities in all markets.,"return markets ;return cities in #1 ;return number of  #2 ;return maximum of  #3 ;return minimum of  #3 ;return #4 ,  #5","[""SELECT['markets']"", ""PROJECT['cities in #REF', '#1']"", ""AGGREGATE['count', '#2']"", ""AGGREGATE['max', '#3']"", ""AGGREGATE['min', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_4123,Return the maximum and minimum number of cities across all markets.,"return markets ;return cities of  #1 ;return number of #2 for each #1 ;return maximum of  #3 ;return minimum of  #3 ;return #4 ,   #5","[""SELECT['markets']"", ""PROJECT['cities of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['max', '#3']"", ""AGGREGATE['min', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'group', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_4124,How many markets have number of cities smaller than 300?,return markets ;return cities in #1 ;return number of #2 for each #1 ;return #1 where  #3 is  lower than 300 ;return number of #4,"[""SELECT['markets']"", ""PROJECT['cities in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is lower than 300']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'group', 'comparative', 'aggregate']",train
SPIDER_train_4125,Count the number of markets that have a number of cities lower than 300.,return markets ;return cities of  #1 ;return number of #2 ;return #1 where  #3 is  lower than 300 ;return number of #4,"[""SELECT['markets']"", ""PROJECT['cities of #REF', '#1']"", ""AGGREGATE['count', '#2']"", ""COMPARATIVE['#1', '#3', 'is lower than 300']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'aggregate']",train
SPIDER_train_4126,List all countries of markets in ascending alphabetical order.,return markets ;return countries of #1 ;return #2 sorted by ascending alphabetical order,"[""SELECT['markets']"", ""PROJECT['countries of #REF', '#1']"", ""SORT['#2', '#2', 'ascending alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_4127,"What are the countries for each market, ordered alphabetically?",return markets ;return countries of  #1 ;return #2 ordered alphabetically,"[""SELECT['markets']"", ""PROJECT['countries of #REF', '#1']"", ""FILTER['#2', 'ordered alphabetically']""]","['select', 'project', 'filter']",train
SPIDER_train_4128,List all countries of markets in descending order of number of cities.,return markets ;return countries of  #1 ;return cities of  #1 ;return number of  #3 for each  #1 ;return #2 sorted by #4 in descending order,"[""SELECT['markets']"", ""PROJECT['countries of #REF', '#1']"", ""PROJECT['cities of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""SORT['#2', '#4', 'in descending order']""]","['select', 'project', 'project', 'group', 'sort']",train
SPIDER_train_4129,What are the countries for each market ordered by decreasing number of cities?,return markets ;return countries of #1 ;return cities of #2 ;return number of  #3 for each #1 ;return #2 sorted by #4,"[""SELECT['markets']"", ""PROJECT['countries of #REF', '#1']"", ""PROJECT['cities of #REF', '#2']"", ""GROUP['count', '#3', '#1']"", ""SORT['#2', '#4']""]","['select', 'project', 'project', 'group', 'sort']",train
SPIDER_train_413,Show all flight numbers with aircraft Airbus A340-300.,return flight numbers ;return aircraft of  #1 ;return #1 where #2 is  Airbus A340-300,"[""SELECT['flight numbers']"", ""PROJECT['aircraft of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Airbus A340-300']""]","['select', 'project', 'comparative']",train
SPIDER_train_4130,Please show the titles of films and the types of market estimations.,"return films ;return titles of  #1 ;return market estimations of  #1 ;return types of  #3 ;return #2 ,  #4","[""SELECT['films']"", ""PROJECT['titles of #REF', '#1']"", ""PROJECT['market estimations of #REF', '#1']"", ""PROJECT['types of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_4131,What are the titles of films and corresponding types of market estimations?,"return films ;return titles of  #1 ;return market estimations of  #1 ;return types of  #3 ;return #2 ,  #4","[""SELECT['films']"", ""PROJECT['titles of #REF', '#1']"", ""PROJECT['market estimations of #REF', '#1']"", ""PROJECT['types of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_4132,Show the distinct director of films with market estimation in the year of 1995.,"return films ;return director of #1 ;return distinct #2 ;return market estimation of #3 ;return #4 in  the  year of 1995 ;return #3 ,  #5","[""SELECT['films']"", ""PROJECT['director of #REF', '#1']"", ""PROJECT['distinct #REF', '#2']"", ""PROJECT['market estimation of #REF', '#3']"", ""FILTER['#4', 'in the year of 1995']"", ""UNION['#3', '#5']""]","['select', 'project', 'project', 'project', 'filter', 'union']",train
SPIDER_train_4133,Who are the different directors of films which had market estimation in 1995?,return films ;return #1 with market estimation in 1995 ;return different directors of  #2,"[""SELECT['films']"", ""FILTER['#1', 'with market estimation in 1995']"", ""PROJECT['different directors of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4134,What is the average number of cities of markets with low film market estimate bigger than 10000?,return markets ;return low film market estimates of #1 ;return #1 where #2 is higher than 10000 ;return cities of #3 ;return number of  #4 for each #3 ;return the  average of #5,"[""SELECT['markets']"", ""PROJECT['low film market estimates of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 10000']"", ""PROJECT['cities of #REF', '#3']"", ""GROUP['count', '#4', '#3']"", ""AGGREGATE['avg', '#5']""]","['select', 'project', 'comparative', 'project', 'group', 'aggregate']",train
SPIDER_train_4135,Give the average number of cities within markets that had a low market estimation larger than 10000?,return markets ;return low market estimations of #1 ;return #1 where #2 is  larger than 10000 ;return the  cities within #3 ;return the  number of  #4 for each #3 ;return the  average of #5,"[""SELECT['markets']"", ""PROJECT['low market estimations of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is larger than 10000']"", ""PROJECT['the cities within #REF', '#3']"", ""GROUP['count', '#4', '#3']"", ""AGGREGATE['avg', '#5']""]","['select', 'project', 'comparative', 'project', 'group', 'aggregate']",train
SPIDER_train_4136,Please list the countries and years of film market estimations.,"return film market estimations ;return countries of  #1 ;return years of  #1 ;return #2 ,  #3","[""SELECT['film market estimations']"", ""PROJECT['countries of #REF', '#1']"", ""PROJECT['years of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_4137,What are the countries of markets and their corresponding years of market estimation?,"return markets ;return countries of  #1 ;return market estimations of  #1 ;return years of  #3 ;return #2 ,  #4","[""SELECT['markets']"", ""PROJECT['countries of #REF', '#1']"", ""PROJECT['market estimations of #REF', '#1']"", ""PROJECT['years of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_4138,"Please list the years of film market estimations when the market is in country ""Japan"" in descending order.",return film market estimations ;return markets of #1 ;return countries of #2 ;return #1 where #3 is  Japan ;return years of #4 ;return #5 sorted by descending order,"[""SELECT['film market estimations']"", ""PROJECT['markets of #REF', '#1']"", ""PROJECT['countries of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Japan']"", ""PROJECT['years of #REF', '#4']"", ""SORT['#5', '#5', 'descending order']""]","['select', 'project', 'project', 'comparative', 'project', 'sort']",train
SPIDER_train_4139,"What are the years of film market estimation for the market of Japan, ordered by year descending?",return years of  film market  estimation ;return #1 for Japan ;return #2 ordered by #1 descending,"[""SELECT['years of film market estimation']"", ""FILTER['#1', 'for Japan']"", ""SORT['#2', '#1', 'descending']""]","['select', 'filter', 'sort']",train
SPIDER_train_414,What are the flight numbers for the aircraft Airbus A340-300?,return aircraft ;return flight numbers of  #1 ;return #2 where #1 is  Airbus A340-300,"[""SELECT['aircraft']"", ""PROJECT['flight numbers of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Airbus A340-300']""]","['select', 'project', 'comparative']",train
SPIDER_train_4140,List the studios of each film and the number of films produced by that studio.,"return films ;return studios of  #1 ;return films of  #2 ;return number of  #3 for each  #2 ;return #2 ,  #4","[""SELECT['films']"", ""PROJECT['studios of #REF', '#1']"", ""PROJECT['films of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_4141,How films are produced by each studio?,return studios ;return films produced by #1 ;return number of #2 for each #1,"[""SELECT['studios']"", ""PROJECT['films produced by #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_4142,List the name of film studio that have the most number of films.,return film studios ;return films of  #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is highest ;return name of  #4,"[""SELECT['film studios']"", ""PROJECT['films of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_4143,What is the name of teh studio that created the most films?,return studios ;return films created of #1 ;return number of  #2 for each #1 ;return #1 where #3 is highest ;return name of #4,"[""SELECT['studios']"", ""PROJECT['films created of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_4144,List the names of studios that have at least two films.,return studios ;return films of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least two ;return names of  #4,"[""SELECT['studios']"", ""PROJECT['films of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_4145,What are the names of studios that have made two or more films?,return studios ;return films that  #1 have made ;return number of  #2 for each #1 ;return #1 where #3 is  two or  more ;return the  names of #4,"[""SELECT['studios']"", ""PROJECT['films that #REF have made', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is two or more']"", ""PROJECT['the names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_4146,List the title of films that do not have any market estimation.,return films ;return #1 that  have  market estimations ;return #1 besides #2 ;return titles of  #3,"[""SELECT['films']"", ""FILTER['#1', 'that have market estimations']"", ""DISCARD['#1', '#2']"", ""PROJECT['titles of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_4147,What are the titles of films that do not have a film market estimation?,return films ;return #1 that  do not have film market estimation ;return titles of #2,"[""SELECT['films']"", ""FILTER['#1', 'that do not have film market estimation']"", ""PROJECT['titles of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4148,"Show the studios that have produced films with director ""Nicholas Meyer"" and ""Walter Hill"".",return studios ;return films of  #1 ;return directors of  #2 ;return #1 where #3 is  Nicholas Meyer ;return #1 where #3 is  Walter Hill ;return #1 of  both #4 and  #5,"[""SELECT['studios']"", ""PROJECT['films of #REF', '#1']"", ""PROJECT['directors of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Nicholas Meyer']"", ""COMPARATIVE['#1', '#3', 'is Walter Hill']"", ""INTERSECTION['#1', '#4', '#5']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection']",train
SPIDER_train_4149,What are the names of studios that have produced films with both Nicholas Meyer and Walter Hill?,return studios ;return #1 that  produced films with  Nicholas Meyer ;return #1 that  produced films with  Walter Hill ;return #1 in both #2 and #3 ;return the  names of #4,"[""SELECT['studios']"", ""FILTER['#1', 'that produced films with Nicholas Meyer']"", ""FILTER['#1', 'that produced films with Walter Hill']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['the names of #REF', '#4']""]","['select', 'filter', 'filter', 'intersection', 'project']",train
SPIDER_train_415,Show aircraft names and number of flights for each aircraft.,"return aircraft  ;return names of  #1 ;return flights of  #1 ;return number of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['aircraft']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['flights of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_4150,"Find the titles and studios of the films that are produced by some film studios that contained the word ""Universal"".","return film studios  ;return #1 that  contain the word Universal ;return films produced by #2 ;return titles of  #3 ;return studios  of  #3 ;return #4 ,   #5","[""SELECT['film studios']"", ""FILTER['#1', 'that contain the word Universal']"", ""PROJECT['films produced by #REF', '#2']"", ""PROJECT['titles of #REF', '#3']"", ""PROJECT['studios of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_4151,"What are the titles and studios of films that have been produced by a studio whose name contains ""Universal""?","return studios ;return names of #1 ;return #1 where #2 contains Universal ;return films of #3 ;return titles of #4 ;return studios of #4 ;return #5 ,  #6","[""SELECT['studios']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'contains Universal']"", ""PROJECT['films of #REF', '#3']"", ""PROJECT['titles of #REF', '#4']"", ""PROJECT['studios of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_4152,"Show the studios that have not produced films with director ""Walter Hill"".",return studios ;return films of  #1 ;return directors of  #2 ;return #1 where #3 is  Walter Hill ;return #1 besides  #4,"[""SELECT['studios']"", ""PROJECT['films of #REF', '#1']"", ""PROJECT['directors of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Walter Hill']"", ""DISCARD['#1', '#4']""]","['select', 'project', 'project', 'comparative', 'discard']",train
SPIDER_train_4153,Which studios have never worked with the director Walter Hill?,return studios ;return directors #1 worked with ;return #1 where #2 is  not  Walter Hill,"[""SELECT['studios']"", ""PROJECT['directors #REF worked with', '#1']"", ""COMPARATIVE['#1', '#2', 'is not Walter Hill']""]","['select', 'project', 'comparative']",train
SPIDER_train_4154,List the studios which average gross is above 4500000.,return studios ;return gross of  #1 ;return average of  #2 for each  #1 ;return #1 where  #3 is higher than 4500000,"[""SELECT['studios']"", ""PROJECT['gross of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 4500000']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_4155,Which studios have an average gross of over 4500000?,return studios ;return gross of #1 ;return the  average of #2 for each #1 ;return #1 where #3 is  higher than 4500000,"[""SELECT['studios']"", ""PROJECT['gross of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 4500000']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_4156,What is the title of the film that has the highest high market estimation.,return films ;return the  market estimation of  #1 ;return #1 where #2 is  the  highest ;return the  title of  #3,"[""SELECT['films']"", ""PROJECT['the market estimation of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the highest']"", ""PROJECT['the title of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4157,Return the title of the film with the highest high estimate?,return films ;return high estimate of  #1 ;return #1 where #2 is highest ;return title of  #3,"[""SELECT['films']"", ""PROJECT['high estimate of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['title of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_4158,What are the titles and directors of the films were never presented in China?,"return films ;return #1 that  were never presented in China ;return titles of #2 ;return directors of #2 ;return #3 , #4","[""SELECT['films']"", ""FILTER['#1', 'that were never presented in China']"", ""PROJECT['titles of #REF', '#2']"", ""PROJECT['directors of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_4159,Return the titles and directors of films that were never in the market of China.,"return films ;return markets that  #1 were in ;return #1 where China is  in #2 ;return #1 besides #3 ;return titles of #4 ;return directors of #4 ;return #5 ,  #6","[""SELECT['films']"", ""PROJECT['markets that #REF were in', '#1']"", ""COMPARATIVE['#1', '#2', '']"", ""DISCARD['#1', '#3']"", ""PROJECT['titles of #REF', '#4']"", ""PROJECT['directors of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'discard', 'project', 'project', 'union']",train
SPIDER_train_416,What is the name of each aircraft and how many flights does each one complete?,"return aircraft ;return names of  #1 ;return flights #1 complete ;return number of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['aircraft']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['flights #REF complete', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_4160,How many calendar items do we have?,return calendar items ;return number of #1,"[""SELECT['calendar items']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_4161,Count the number of all the calendar items.,return items ;return #1 on  calendar ;return number of #2,"[""SELECT['items']"", ""FILTER['#1', 'on calendar']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_4162,Show all calendar dates and day Numbers.,return calendar dates ;return day Numbers of  #1 ;return #1 or #2,"[""SELECT['calendar dates']"", ""PROJECT['day Numbers of #REF', '#1']"", ""UNION['#1', '#2']""]","['select', 'project', 'union']",train
SPIDER_train_4163,What are all the calendar dates and day Numbers?,"return calendar ;return dates of  #1 ;return day Numbers of  #1 ;return #2 ,  #3","[""SELECT['calendar']"", ""PROJECT['dates of #REF', '#1']"", ""PROJECT['day Numbers of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_4164,Show the number of document types.,return document types ;return number of  #1,"[""SELECT['document types']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_4165,How many document types are there?,return document types ;return number of #1,"[""SELECT['document types']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_4166,List all document type codes and document type names.,return document types ;return codes of #1 ;return names of #1 ;return #2 or #3,"[""SELECT['document types']"", ""PROJECT['codes of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_4167,What are all the document type codes and document type names?,"return document types ;return codes of  #1 ;return names of  #1 ;return #2 ,  #3","[""SELECT['document types']"", ""PROJECT['codes of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_4168,What is the name and description for document type code RV?,"return the  document type code RV ;return the  name of #1 ;return the  description of #1 ;return #2 ,  #3","[""SELECT['the document type code RV']"", ""PROJECT['the name of #REF', '#1']"", ""PROJECT['the description of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_4169,Give me the name and description of the document type code RV.,"return document type codes ;return names of  #1 ;return descriptions of  #1 ;return #2 ,   #3 ;return #4 where  #1 is  RV","[""SELECT['document type codes']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['descriptions of #REF', '#1']"", ""UNION['#2', '#3']"", ""COMPARATIVE['#4', '#1', 'is RV']""]","['select', 'project', 'project', 'union', 'comparative']",train
SPIDER_train_417,Show names for all aircraft with at least two flights.,return aircraft ;return flights of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  at least two,"[""SELECT['aircraft']"", ""PROJECT['flights of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_4170,"What is the document type code for document type ""Paper""?",return document ;return #1 type  Paper ;return type  codes of  #2,"[""SELECT['document']"", ""FILTER['#1', 'type Paper']"", ""PROJECT['type codes of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4171,"Find the code of the document type ""Paper"".",return document ;return #1 type Paper ;return code of  #2,"[""SELECT['document']"", ""FILTER['#1', 'type Paper']"", ""PROJECT['code of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4172,Show the number of documents with document type code CV or BK.,return documents ;return document type codes of  #1 ;return #1 where #2 is  CV ;return #1 where #2 is  BK ;return #3 or  #4,"[""SELECT['documents']"", ""PROJECT['document type codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is CV']"", ""COMPARATIVE['#1', '#2', 'is BK']"", ""UNION['#3', '#4']""]","['select', 'project', 'comparative', 'comparative', 'union']",train
SPIDER_train_4173,How many documents have document type code CV or BK?,return documents ;return document type codes of  #1 ;return #1 where  #2 is  CV ;return #1 where  #2 is  BK ;return #3 or  #4 ;return number of #5,"[""SELECT['documents']"", ""PROJECT['document type codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is CV']"", ""COMPARATIVE['#1', '#2', 'is BK']"", ""UNION['#3', '#4']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'aggregate']",train
SPIDER_train_4174,"What is the date when the document ""Marry CV"" was stored?",return documents ;return date #1 was stored ;return #2 where #1 is  Marry CV,"[""SELECT['documents']"", ""PROJECT['date #REF was stored', '#1']"", ""COMPARATIVE['#2', '#1', 'is Marry CV']""]","['select', 'project', 'comparative']",train
SPIDER_train_4175,"When was the document named ""Marry CV"" stored? Give me the date.",return documents ;return #1 named Marry CV ;return date #2 was stored,"[""SELECT['documents']"", ""FILTER['#1', 'named Marry CV']"", ""PROJECT['date #REF was stored', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4176,What is the day Number and date of all the documents?,"return documents ;return dates of #1 ;return day Number of #1 ;return #3 ,  #2","[""SELECT['documents']"", ""PROJECT['dates of #REF', '#1']"", ""PROJECT['day Number of #REF', '#1']"", ""UNION['#3', '#2']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_4177,Return the day Number and stored date for all the documents.,"return documents ;return day Number of  #1 ;return stored dates of  #1 ;return #2 ,  #3","[""SELECT['documents']"", ""PROJECT['day Number of #REF', '#1']"", ""PROJECT['stored dates of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_4178,"What is the document type name for the document with name ""How to read a book""?",return documents ;return names of  #1 ;return #1 where #2 is  How to read a book ;return document type name  of  #3,"[""SELECT['documents']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is How to read a book']"", ""PROJECT['document type name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4179,"Find the document type name of the document named ""How to read a book"".",return documents ;return #1 named How to  read a book ;return document type name of  #2,"[""SELECT['documents']"", ""FILTER['#1', 'named How to read a book']"", ""PROJECT['document type name of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_418,What are the names for all aircrafts with at least 2 flights?,return aircrafts ;return flights of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least 2 ;return names of  #4,"[""SELECT['aircrafts']"", ""PROJECT['flights of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 2']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_4180,Show the number of locations.,return locations ;return number of  #1,"[""SELECT['locations']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_4181,How many locations are listed in the database?,return locations ;return #1 in database ;return number of #2,"[""SELECT['locations']"", ""FILTER['#1', 'in database']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_4182,List all location codes and location names.,"return locations ;return codes of  #1 ;return names of  #1 ;return #2 ,  #3","[""SELECT['locations']"", ""PROJECT['codes of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_4183,What are all the location codes and location names?,"return locations ;return codes of  #1 ;return names of  #1 ;return #2 ,  #3","[""SELECT['locations']"", ""PROJECT['codes of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_4184,What are the name and description for location code x?,"return locations ;return names of  #1 ;return descriptions of  #1 ;return #2 ,  #3 ;return #4 where #1 is  code x","[""SELECT['locations']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['descriptions of #REF', '#1']"", ""UNION['#2', '#3']"", ""COMPARATIVE['#4', '#1', 'is code x']""]","['select', 'project', 'project', 'union', 'comparative']",train
SPIDER_train_4185,Give me the name and description of the location with code x.,"return locations ;return codes of  locations ;return #1 where  #2 is  x ;return name of  #3 ;return description of  #3 ;return #4 ,   #5","[""SELECT['locations']"", ""SELECT['codes of locations']"", ""COMPARATIVE['#1', '#2', 'is x']"", ""PROJECT['name of #REF', '#3']"", ""PROJECT['description of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'select', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_4186,"What is the location code for the country ""Canada""?",return countries ;return #1 that  are  Canada ;return location code of  #2,"[""SELECT['countries']"", ""FILTER['#1', 'that are Canada']"", ""PROJECT['location code of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4187,"Show the location code of the country ""Canada"".",return countries ;return #1 that  are  Canada ;return location code of  #2,"[""SELECT['countries']"", ""FILTER['#1', 'that are Canada']"", ""PROJECT['location code of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4188,How many roles are there?,return roles ;return number of #1,"[""SELECT['roles']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_4189,Count the total number of roles listed.,return roles listed ;return Count number of #1,"[""SELECT['roles listed']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_419,How many employees have certificate.,return employees ;return #1 that  have  certificates ;return number of #2,"[""SELECT['employees']"", ""FILTER['#1', 'that have certificates']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_4190,"List all role codes, role names, and role descriptions.","return roles ;return role   codes of  #1 ;return role   names of  #1 ;return role   descriptions of  #1 ;return #2 ,  #3 , #4","[""SELECT['roles']"", ""PROJECT['role codes of #REF', '#1']"", ""PROJECT['role names of #REF', '#1']"", ""PROJECT['role descriptions of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_4191,"What are all the role codes, role names, and role descriptions?","return roles ;return codes of  #1 ;return names of  #1 ;return descriptions of  #1 ;return #2 ,  #3 ,   #4","[""SELECT['roles']"", ""PROJECT['codes of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['descriptions of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_4192,"What are the name and description for role code ""MG""?","return role code MG ;return the  name of #1 ;return the  description of #1 ;return #2 ,  #3","[""SELECT['role code MG']"", ""PROJECT['the name of #REF', '#1']"", ""PROJECT['the description of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_4193,"Find the name and description of the role with code ""MG"".","return roles ;return codes of  #1 ;return #1 where  #2 is  MG ;return name of  #3 ;return description of  #3 ;return #4 ,   #5","[""SELECT['roles']"", ""PROJECT['codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is MG']"", ""PROJECT['name of #REF', '#3']"", ""PROJECT['description of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_4194,"Show the description for role name ""Proof Reader"".",return role name ;return #1 that is Proof Reader ;return description of #2,"[""SELECT['role name']"", ""FILTER['#1', 'that is Proof Reader']"", ""PROJECT['description of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4195,"What is the description of the role named ""Proof Reader""?",return roles ;return #1 named Proof Reader ;return description of  #2,"[""SELECT['roles']"", ""FILTER['#1', 'named Proof Reader']"", ""PROJECT['description of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4197,Find the number of employees we have.,return employees we have  ;return number of #1,"[""SELECT['employees we have']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_4198,"Show the name, role code, and date of birth for the employee with name 'Armani'.","return employees ;return names of #1 ;return #1 where #2 is 'Armani ;return name  of #3 ;return role code of #3 ;return date of birth of  #3 ;return #4 ,  #5 ,   #6","[""SELECT['employees']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Armani']"", ""PROJECT['name of #REF', '#3']"", ""PROJECT['role code of #REF', '#3']"", ""PROJECT['date of birth of #REF', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_4199,"What are the name, role code, and date of birth of the employee named 'Armani'?","return the  employee named 'Armani ;return the  name of #1 ;return the  role code of #1 ;return the  date of birth of  #1 ;return #2 ,  #3 ,   #4","[""SELECT['the employee named Armani']"", ""PROJECT['the name of #REF', '#1']"", ""PROJECT['the role code of #REF', '#1']"", ""PROJECT['the date of birth of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_42,Please show the different statuses of cities and the average population of cities with each status.,"return cities ;return statuses of #1 ;return populations of #1 ;return the  average of #3 for each #2 ;return #2 ,  #4","[""SELECT['cities']"", ""PROJECT['statuses of #REF', '#1']"", ""PROJECT['populations of #REF', '#1']"", ""GROUP['avg', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_420,What is the count of distinct employees with certificates?,return employees ;return #1 with  certificates ;return number of  distinct #2,"[""SELECT['employees']"", ""FILTER['#1', 'with certificates']"", ""PROJECT['distinct #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'filter', 'project', 'group', 'union']",train
SPIDER_train_4200,What is the id for the employee called Ebba?,return employees ;return ids of  #1 ;return #2 where #1 is  called Ebba,"[""SELECT['employees']"", ""PROJECT['ids of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is called Ebba']""]","['select', 'project', 'comparative']",train
SPIDER_train_4201,Show the id of the employee named Ebba.,return employees ;return #1 named Ebba ;return id of  #2,"[""SELECT['employees']"", ""FILTER['#1', 'named Ebba']"", ""PROJECT['id of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4202,"Show the names of all the employees with role ""HR"".",return employees ;return roles of  #1 ;return #1 where #2 is  HR ;return names of  #3,"[""SELECT['employees']"", ""PROJECT['roles of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is HR']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4203,"Which employees have the role with code ""HR""? Find their names.",return employees ;return roles of  #1 ;return codes of  #2 ;return #1 where #3 is  HR ;return names of  #4,"[""SELECT['employees']"", ""PROJECT['roles of #REF', '#1']"", ""PROJECT['codes of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is HR']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_4204,Show all role codes and the number of employees in each role.,"return role  ;return codes of  #1 ;return number of  employees for each  #1 ;return #2 , #3","[""SELECT['role']"", ""PROJECT['codes of #REF', '#1']"", ""PROJECT['employees', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_4205,What is the code of each role and the number of employees in each role?,"return roles ;return codes of #1 ;return employees in #1 ;return number of  #3 for each #1 ;return #2 ,  #4","[""SELECT['roles']"", ""PROJECT['codes of #REF', '#1']"", ""PROJECT['employees in #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_4206,What is the role code with the largest number of employees?,return role codes ;return employees with #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['role codes']"", ""PROJECT['employees with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_4207,Find the code of the role that have the most employees.,return roles ;return employees for each role ;return the number of #2 ;return #1 where  #3 is  highest ;return code of  #4,"[""SELECT['roles']"", ""SELECT['employees for each role']"", ""AGGREGATE['count', '#2']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['code of #REF', '#4']""]","['select', 'select', 'aggregate', 'superlative', 'project']",train
SPIDER_train_4208,Show all role codes with at least 3 employees.,return role codes ;return employees of #1 ;return number of #2 for each #2 ;return #1 where  #3 is  at least 3,"[""SELECT['role codes']"", ""PROJECT['employees of #REF', '#1']"", ""GROUP['count', '#2', '#2']"", ""COMPARATIVE['#1', '#3', 'is at least 3']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_4209,What are the roles with three or more employees? Give me the role codes.,return roles ;return employees with #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least three ;return codes of  #4,"[""SELECT['roles']"", ""PROJECT['employees with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least three']"", ""PROJECT['codes of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_421,Show ids for all employees who don't have a certificate.,return employees ;return #1 that  have  certificates ;return #1 besides  #2 ;return ids of #3,"[""SELECT['employees']"", ""FILTER['#1', 'that have certificates']"", ""DISCARD['#1', '#2']"", ""PROJECT['ids of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_4210,Show the role code with the least employees.,return role codes ;return employees with #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  lowest,"[""SELECT['role codes']"", ""PROJECT['employees with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_4211,What is the role with the smallest number of employees? Find the role codes.,return employees ;return roles of #1 ;return number of  #1 for each #2 ;return #2 where #3 is  the   smallest ;return the   role codes of #4,"[""SELECT['employees']"", ""PROJECT['roles of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""COMPARATIVE['#2', '#3', 'is the smallest']"", ""PROJECT['the role codes of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_4212,What is the role name and role description for employee called Ebba?,"return employees ;return #1 called Ebba ;return role name of #2 ;return role description of #2 ;return #3 ,  #4","[""SELECT['employees']"", ""FILTER['#1', 'called Ebba']"", ""PROJECT['role name of #REF', '#2']"", ""PROJECT['role description of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_4213,Show the name and description of the role played by the employee named Ebba.,return roles played by employee with  name Ebba ;return names of  #1 ;return description of  #1 ;return #2 or #3,"[""SELECT['roles played by employee with name Ebba']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['description of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_4214,Show the names of employees with role name Editor.,return employees ;return role names of  #1 ;return #1 where #2 is  Editor ;return names of  #3,"[""SELECT['employees']"", ""PROJECT['role names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Editor']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4215,"Find the names of all the employees whose the role name is ""Editor"".",return employees ;return role names of  #1 ;return #1 where  #2 is  Editor ;return names of  #3,"[""SELECT['employees']"", ""PROJECT['role names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Editor']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4216,"Show the employee ids for all employees with role name ""Human Resource"" or ""Manager"".","return employees ;return roles of #1 ;return names of #2 ;return #1 where #3 is  Human Resource ;return #1 where #3 is  Manager ;return #4 ,  #5 ;return the  employee ids of #6","[""SELECT['employees']"", ""PROJECT['roles of #REF', '#1']"", ""PROJECT['names of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Human Resource']"", ""COMPARATIVE['#1', '#3', 'is Manager']"", ""UNION['#4', '#5']"", ""PROJECT['the employee ids of #REF', '#6']""]","['select', 'project', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_4217,"What are the employee ids of the employees whose role name is ""Human Resource"" or ""Manager""?","return employees ;return roles of #1 ;return names of #2 ;return #1 where #3 is  Human Resource ;return #1 where #3 is  Manager ;return #4 ,  #5 ;return employee ids of #6","[""SELECT['employees']"", ""PROJECT['roles of #REF', '#1']"", ""PROJECT['names of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Human Resource']"", ""COMPARATIVE['#1', '#3', 'is Manager']"", ""UNION['#4', '#5']"", ""PROJECT['employee ids of #REF', '#6']""]","['select', 'project', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_4218,What are the different location codes for documents?,return documents ;return different location codes of  #1,"[""SELECT['documents']"", ""PROJECT['different location codes of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_4219,Give me all the distinct location codes for documents.,return documents ;return location codes of  #1 ;return distinct #2,"[""SELECT['documents']"", ""PROJECT['location codes of #REF', '#1']"", ""PROJECT['distinct #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_422,What are the ids of all employees that don't have certificates?,return employees ;return #1 who  have  certificates ;return #1 besides  #2 ;return ids of  #3,"[""SELECT['employees']"", ""FILTER['#1', 'who have certificates']"", ""DISCARD['#1', '#2']"", ""PROJECT['ids of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_4220,"Show the location name for document ""Robin CV"".",return document ;return #1 Robin CV ;return location of  #2,"[""SELECT['document']"", ""FILTER['#1', 'Robin CV']"", ""PROJECT['location of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4221,"What is the location name of the document ""Robin CV""?",return documents ;return locations of  #1 ;return #2 where #1 is  Robin CV ;return name of  #3,"[""SELECT['documents']"", ""PROJECT['locations of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Robin CV']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4222,"Show the location code, the starting date and ending data in that location for all the documents.",return documents ;return location codes for #1 ;return starting dates of  #1 ;return ending dates of  #1 ;return #3 or #2 or  #4,"[""SELECT['documents']"", ""PROJECT['location codes for #REF', '#1']"", ""PROJECT['starting dates of #REF', '#1']"", ""PROJECT['ending dates of #REF', '#1']"", ""UNION['#3', '#2', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_4223,"What are each document's location code, and starting date and ending data in that location?","return documents ;return locations of  #1 ;return codes of  #2 ;return starting dates in #2 ;return ending dates in #2 ;return #3 ,  #4 ,   #5","[""SELECT['documents']"", ""PROJECT['locations of #REF', '#1']"", ""PROJECT['codes of #REF', '#2']"", ""PROJECT['starting dates in #REF', '#2']"", ""PROJECT['ending dates in #REF', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_4224,"What is ""the date in location from"" and ""the date in location to"" for the document with name ""Robin CV""?","return documents ;return names of  #1 ;return #1 where #2 is  Robin CV ;return date  in location  from  of  #3 ;return date  in location  to of  #3 ;return #4 ,  #5","[""SELECT['documents']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Robin CV']"", ""PROJECT['date in location from of #REF', '#3']"", ""PROJECT['date in location to of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_4225,"Find the starting date and ending data in location for the document named ""Robin CV"".","return documents ;return #1 named Robin CV ;return locations in #2 ;return starting dates of #3 ;return ending dates of #3 ;return #4 ,  #5","[""SELECT['documents']"", ""FILTER['#1', 'named Robin CV']"", ""PROJECT['locations in #REF', '#2']"", ""PROJECT['starting dates of #REF', '#3']"", ""PROJECT['ending dates of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_4226,Show the location codes and the number of documents in each location.,return locations ;return number of  documents of  each #1 ;return location  codes of  #1 ;return #2 or #3,"[""SELECT['locations']"", ""PROJECT['documents of each #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['location codes of #REF', '#1']"", ""UNION['#3', '#4']""]","['select', 'project', 'group', 'project', 'union']",train
SPIDER_train_4227,What is the code of each location and the number of documents in that location?,"return locations ;return codes of  #1 ;return documents in #1 ;return number of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['locations']"", ""PROJECT['codes of #REF', '#1']"", ""PROJECT['documents in #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_4228,What is the location code with the most documents?,return location codes ;return documents of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['location codes']"", ""PROJECT['documents of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_4229,Find the code of the location with the largest number of documents.,return locations ;return documents of #1 ;return number of  #2 for each #1 ;return #1 where #3 is highest ;return code of #4,"[""SELECT['locations']"", ""PROJECT['documents of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['code of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_423,Show names for all aircrafts of which John Williams has certificates.,return aircrafts ;return #1 of  which John Williams has  certificates ;return names of  #2,"[""SELECT['aircrafts']"", ""FILTER['#1', 'of which John Williams has certificates']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4230,Show the location codes with at least 3 documents.,return location codes ;return documents of #1 ;return number of #2 for each #1 ;return #1 where #3 is  at least 3,"[""SELECT['location codes']"", ""PROJECT['documents of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 3']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_4231,What are the codes of the locations with at least three documents?,return locations ;return documents of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least three ;return codes of  #4,"[""SELECT['locations']"", ""PROJECT['documents of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least three']"", ""PROJECT['codes of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_4232,Show the location name and code with the least documents.,"return locations ;return documents of #1 ;return number of  #2 for each #1 ;return #1 where #3 is lowest ;return location name of #4 ;return location code of #4 ;return #5 ,  #6","[""SELECT['locations']"", ""PROJECT['documents of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['location name of #REF', '#4']"", ""PROJECT['location code of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_4233,What are the name and code of the location with the smallest number of documents?,"return locations ;return documents in #1 ;return number of  #2 for each #1 ;return #1 where #3 is  lowest ;return name of #4 ;return code of #4 ;return #5 ,  #6","[""SELECT['locations']"", ""PROJECT['documents in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['code of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_4234,What are the names of the employees who authorised the destruction and the employees who destroyed the corresponding documents?,"return employees  ;return #1 who  authorised the  destruction ;return #1 who  destroyed the  corresponding documents ;return #2 ,  #3","[""SELECT['employees']"", ""FILTER['#1', 'who authorised the destruction']"", ""FILTER['#1', 'who destroyed the corresponding documents']"", ""UNION['#2', '#3']""]","['select', 'filter', 'filter', 'union']",train
SPIDER_train_4235,List the names of the employees who authorized the destruction of documents and the employees who destroyed the corresponding documents.,"return employees  ;return #1 who  authorized the  destruction of documents ;return #1 who  destroyed the  corresponding documents ;return #2 ,  #3 ;return names of #4","[""SELECT['employees']"", ""FILTER['#1', 'who authorized the destruction of documents']"", ""FILTER['#1', 'who destroyed the corresponding documents']"", ""UNION['#2', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_4236,Show the id of each employee and the number of document destruction authorised by that employee.,"return employees ;return ids of #1 ;return document destructions that  #1 authorised ;return the  number of  #3 for each #1 ;return #2 ,  #4","[""SELECT['employees']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['document destructions that #REF authorised', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_4237,What are the id of each employee and the number of document destruction authorised by that employee?,"return employees ;return ids of #1 ;return document destructions authorised by #1 ;return number of  #3 for each #1 ;return #2 ,  #4","[""SELECT['employees']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['document destructions authorised by #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_4238,Show the employee ids and the number of documents destroyed by each employee.,return employees ;return ids of  #1 ;return number of  documents destroyed by each #1 ;return #2 or #3,"[""SELECT['employees']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['documents destroyed by each #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_4239,What are the id of each employee and the number of document destroyed by that employee?,"return employees ;return ids of  #1 ;return document destroyed by #1 ;return number of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['employees']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['document destroyed by #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_424,What are the names of all aircrafts that John Williams have certificates to be able to fly?,return aircrafts ;return #1 that  John Williams have  certificates to be able to  fly ;return names of  #2,"[""SELECT['aircrafts']"", ""FILTER['#1', 'that John Williams have certificates to be able to fly']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4240,Show the ids of the employees who don't authorize destruction for any document.,return employees ;return #1 that authorize destruction of  documents ;return #1 besides #2 ;return ids of  #3,"[""SELECT['employees']"", ""FILTER['#1', 'that authorize destruction of documents']"", ""DISCARD['#1', '#2']"", ""PROJECT['ids of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_4241,Which employees do not authorize destruction for any document? Give me their employee ids.,return employees ;return #1 that  authorize destruction for any document ;return #1 besides  #2 ;return employee ids of  #3,"[""SELECT['employees']"", ""FILTER['#1', 'that authorize destruction for any document']"", ""DISCARD['#1', '#2']"", ""PROJECT['employee ids of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_4242,Show the ids of all employees who have authorized destruction.,return employees ;return #1 that have authorized destruction ;return ids of #2,"[""SELECT['employees']"", ""FILTER['#1', 'that have authorized destruction']"", ""PROJECT['ids of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4243,What are the ids of all the employees who authorize document destruction?,return employees ;return #1 who authorize document destruction ;return ids of #2,"[""SELECT['employees']"", ""FILTER['#1', 'who authorize document destruction']"", ""PROJECT['ids of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4244,Show the ids of all employees who have destroyed a document.,return employees ;return #1 that  have  destroyed a document ;return ids of  #2,"[""SELECT['employees']"", ""FILTER['#1', 'that have destroyed a document']"", ""PROJECT['ids of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4245,What are the ids of all the employees who have destroyed documents?,return employees ;return #1 who  have  destroyed documents ;return ids of  #2,"[""SELECT['employees']"", ""FILTER['#1', 'who have destroyed documents']"", ""PROJECT['ids of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4246,Show the ids of all employees who don't destroy any document.,return employees ;return #1 who  destroy documents ;return #1 besides  #2 ;return ids of  #3,"[""SELECT['employees']"", ""FILTER['#1', 'who destroy documents']"", ""DISCARD['#1', '#2']"", ""PROJECT['ids of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_4247,Which employees do not destroy any document? Find their employee ids.,return employees ;return #1 who  destroy any document ;return #1 besides  #2 ;return the  employee ids of  #3,"[""SELECT['employees']"", ""FILTER['#1', 'who destroy any document']"", ""DISCARD['#1', '#2']"", ""PROJECT['the employee ids of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_4248,Show the ids of all employees who have either destroyed a document or made an authorization to do this.,"return employees ;return #1 who  have destroyed a document ;return #1 who  made an authorization to document this ;return #2 ,  #3 ;return ids of #4","[""SELECT['employees']"", ""FILTER['#1', 'who have destroyed a document']"", ""FILTER['#1', 'who made an authorization to document this']"", ""UNION['#2', '#3']"", ""PROJECT['ids of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_4249,Which employees have either destroyed a document or made an authorization to do so? Return their employee ids.,"return employees ;return #1 that have destroyed a document ;return #1 that made any authorization to do so ;return #2 ,  #3 ;return employee ids of #4","[""SELECT['employees']"", ""FILTER['#1', 'that have destroyed a document']"", ""FILTER['#1', 'that made any authorization to do so']"", ""UNION['#2', '#3']"", ""PROJECT['employee ids of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_425,Show names for all employees who have certificate of Boeing 737-800.,return employees ;return certificates of #1 ;return #1 where #2 is  Boeing 737-800 ;return names of #3,"[""SELECT['employees']"", ""PROJECT['certificates of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Boeing 737-800']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4251,Count the total number of clubs.,return clubs ;return number of #1,"[""SELECT['clubs']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_4252,What are the names of all clubs?,return clubs ;return names of  #1,"[""SELECT['clubs']"", ""PROJECT['names of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_4253,Give me the name of each club.,return clubs ;return names of  #1,"[""SELECT['clubs']"", ""PROJECT['names of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_4255,Count the total number of students.,return students ;return number of  #1,"[""SELECT['students']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_4256,What are the first names of all the students?,return students ;return first names of #1,"[""SELECT['students']"", ""PROJECT['first names of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_4257,Find each student's first name.,return students ;return first name of  #1,"[""SELECT['students']"", ""PROJECT['first name of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_4258,"Find the last names of the members of the club ""Bootup Baltimore"".",return the  club Bootup Baltimore ;return members of #1 ;return the  last names of #2,"[""SELECT['the club Bootup Baltimore']"", ""PROJECT['members of #REF', '#1']"", ""PROJECT['the last names of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_4259,"Who are the members of the club named ""Bootup Baltimore""? Give me their last names.",return clubs ;return #1 named Bootup Baltimore ;return members of  #2 ;return last names of  #3,"[""SELECT['clubs']"", ""FILTER['#1', 'named Bootup Baltimore']"", ""PROJECT['members of #REF', '#2']"", ""PROJECT['last names of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_426,What are the names of all employees who have a certificate to fly Boeing 737-800?,return employees ;return certificates to  fly of #1 ;return #1 where #2 is  Boeing 737-800 ;return names of #3,"[""SELECT['employees']"", ""PROJECT['certificates to fly of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Boeing 737-800']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4260,"Who are the members of the club named ""Hopkins Student Enterprises""? Show the last name.",return clubs ;return #1 named Hopkins Student Enterprises ;return members of  #2 ;return last names of  #3,"[""SELECT['clubs']"", ""FILTER['#1', 'named Hopkins Student Enterprises']"", ""PROJECT['members of #REF', '#2']"", ""PROJECT['last names of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_4261,"Return the last name for the members of the club named ""Hopkins Student Enterprises"".",return clubs ;return members of  #1 ;return #2 where #1 is  Hopkins Student Enterprises ;return last names of  #3,"[""SELECT['clubs']"", ""PROJECT['members of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Hopkins Student Enterprises']"", ""PROJECT['last names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4262,"How many members does the club ""Tennis Club"" has?",return clubs ;return members of  #1 ;return #2 where  #1 is  Tennis Club ;return number of #3,"[""SELECT['clubs']"", ""PROJECT['members of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Tennis Club']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_4263,"Count the members of the club ""Tennis Club"".",return members of the Tennis club ;return Count of  #1,"[""SELECT['members of the Tennis club']"", ""PROJECT['Count of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_4264,"Find the number of members of club ""Pen and Paper Gaming"".",return Pen and Paper Gaming ;return members of #1 ;return number of  #2,"[""SELECT['Pen and Paper Gaming']"", ""PROJECT['members of #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_4265,"How many people have membership in the club ""Pen and Paper Gaming""?",return the  club Pen and Paper Gaming ;return people with  membership in #1 ;return number of  #2,"[""SELECT['the club Pen and Paper Gaming']"", ""PROJECT['people with membership in #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_4266,"How many clubs does ""Linda Smith"" belong to?",return clubs ;return #1 that  Linda Smith belongs to  ;return number of  #2,"[""SELECT['clubs']"", ""FILTER['#1', 'that Linda Smith belongs to']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_4267,"How many clubs does ""Linda Smith"" have membership for?",return Linda Smith ;return clubs #1 has membership in ;return number of  #2,"[""SELECT['Linda Smith']"", ""PROJECT['clubs #REF has membership in', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_4268,"Find the number of clubs where ""Tracy Kim"" is a member.",return clubs ;return members of  #1 ;return #1 where  #2 is  Tracy Kim ;return number of #3,"[""SELECT['clubs']"", ""PROJECT['members of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Tracy Kim']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_4269,"For how many clubs is ""Tracy Kim"" a member?",return clubs ;return members of  #1 ;return #1 where  #2 is  Tracy Kim ;return number of #3,"[""SELECT['clubs']"", ""PROJECT['members of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Tracy Kim']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_427,Show names for all employees who have certificates on both Boeing 737-800 and Airbus A340-300.,return employees ;return #1 that  have  certificates for Boeing 737-800 ;return #1 that  have  certificates for Airbus A340-300 ;return #1 of  both #2 and #3,"[""SELECT['employees']"", ""FILTER['#1', 'that have certificates for Boeing 737-800']"", ""FILTER['#1', 'that have certificates for Airbus A340-300']"", ""INTERSECTION['#1', '#2', '#3']""]","['select', 'filter', 'filter', 'intersection']",train
SPIDER_train_4270,"Find all the female members of club ""Bootup Baltimore"". Show the first name and last name.",return all the members of  club Bootup Baltimore ;return female members from  #1 ;return #2 .  Show the first name  and last name,"[""SELECT['all the members of club Bootup Baltimore']"", ""PROJECT['female members from #REF', '#1']"", ""FILTER['#2', '. Show the first name and last name']""]","['select', 'project', 'filter']",train
SPIDER_train_4271,"Give me the first name and last name for all the female members of the club ""Bootup Baltimore"".","return clubs ;return members of  #1 ;return #2 where  #1 is  Bootup Baltimore ;return female #3 ;return first names of  #4 ;return last names of  #4 ;return #5 ,   #6","[""SELECT['clubs']"", ""PROJECT['members of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Bootup Baltimore']"", ""PROJECT['female #REF', '#3']"", ""PROJECT['first names of #REF', '#4']"", ""PROJECT['last names of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_4272,"Find all the male members of club ""Hopkins Student Enterprises"". Show the first name and last name.","return club Hopkins Student Enterprises ;return members of #1 ;return #2 that are male ;return first names of #3 ;return last names of #3 ;return #4 ,  #5","[""SELECT['club Hopkins Student Enterprises']"", ""PROJECT['members of #REF', '#1']"", ""FILTER['#2', 'that are male']"", ""PROJECT['first names of #REF', '#3']"", ""PROJECT['last names of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'filter', 'project', 'project', 'union']",train
SPIDER_train_4273,"What are the first name and last name of each male member in club ""Hopkins Student Enterprises""?","return clubs ;return members of  #1 ;return #2 where #1 is  Hopkins Student Enterprises ;return male #3 ;return first names of  #4 ;return last names of  #4 ;return #5 ,  #6","[""SELECT['clubs']"", ""PROJECT['members of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Hopkins Student Enterprises']"", ""PROJECT['male #REF', '#3']"", ""PROJECT['first names of #REF', '#4']"", ""PROJECT['last names of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_4274,"Find all members of ""Bootup Baltimore"" whose major is ""600"". Show the first name and last name.","return Bootup Baltimore ;return members of #1 ;return major of #2 ;return #2 where #3 is 600 ;return first names of #4 ;return last names of #4 ;return #5 ,  #6","[""SELECT['Bootup Baltimore']"", ""PROJECT['members of #REF', '#1']"", ""PROJECT['major of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is 600']"", ""PROJECT['first names of #REF', '#4']"", ""PROJECT['last names of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_4275,"Which members of ""Bootup Baltimore"" major in ""600""? Give me their first names and last names.","return members ;return #1 of  Bootup Baltimore ;return #2 major in 600 ;return first names of  #3 ;return last names of  #3 ;return #4 ,  #5","[""SELECT['members']"", ""FILTER['#1', 'of Bootup Baltimore']"", ""FILTER['#2', 'major in 600']"", ""PROJECT['first names of #REF', '#3']"", ""PROJECT['last names of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'filter', 'project', 'project', 'union']",train
SPIDER_train_4276,"Which club has the most members majoring in ""600""?",return clubs ;return members of #1 ;return #2 majoring in 600 ;return number of  #3 for each #1 ;return #1 where #4 is  highest,"[""SELECT['clubs']"", ""PROJECT['members of #REF', '#1']"", ""FILTER['#2', 'majoring in 600']"", ""GROUP['count', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']""]","['select', 'project', 'filter', 'group', 'superlative']",train
SPIDER_train_4277,"Find the club which has the largest number of members majoring in ""600"".",return clubs ;return members of #1 ;return #2 majoring in 600 ;return number of #3 for each #1 ;return #1 where #4 is  largest,"[""SELECT['clubs']"", ""PROJECT['members of #REF', '#1']"", ""FILTER['#2', 'majoring in 600']"", ""GROUP['count', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']""]","['select', 'project', 'filter', 'group', 'superlative']",train
SPIDER_train_4278,Find the name of the club that has the most female students.,return clubs ;return students of  #1 ;return female #2 ;return number of #3 for each #1 ;return #1 where  #4 is  highest ;return name of  #5,"[""SELECT['clubs']"", ""PROJECT['students of #REF', '#1']"", ""PROJECT['female #REF', '#2']"", ""GROUP['count', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']"", ""PROJECT['name of #REF', '#5']""]","['select', 'project', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_4279,Which club has the most female students as their members? Give me the name of the club.,return clubs ;return members of  #1 ;return #2 that  are  female students ;return number of  #3 for each  #1 ;return #1 where #4 is  highest ;return name of  #5,"[""SELECT['clubs']"", ""PROJECT['members of #REF', '#1']"", ""FILTER['#2', 'that are female students']"", ""GROUP['count', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']"", ""PROJECT['name of #REF', '#5']""]","['select', 'project', 'filter', 'group', 'superlative', 'project']",train
SPIDER_train_428,What are the names of all employees who can fly both the Boeing 737-800 and the Airbus A340-300?,return employees ;return #1 who  can fly the  Boeing 737-800 ;return #1 who  can fly the  Airbus A340-300 ;return #1 in both #2 and  #3 ;return names of  #4,"[""SELECT['employees']"", ""FILTER['#1', 'who can fly the Boeing 737-800']"", ""FILTER['#1', 'who can fly the Airbus A340-300']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'filter', 'intersection', 'project']",train
SPIDER_train_4280,"What is the description of the club named ""Tennis Club""?",return clubs ;return #1 named Tennis Club ;return description of #2,"[""SELECT['clubs']"", ""FILTER['#1', 'named Tennis Club']"", ""PROJECT['description of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4281,"Find the description of the club called ""Tennis Club"".",return clubs ;return #1 called Tennis Club ;return description of  #2,"[""SELECT['clubs']"", ""FILTER['#1', 'called Tennis Club']"", ""PROJECT['description of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4282,"Find the description of the club ""Pen and Paper Gaming"".",return club Pen and Paper Gaming ;return the description of  the  #1,"[""SELECT['club Pen and Paper Gaming']"", ""PROJECT['the description of the #REF', '#1']""]","['select', 'project']",train
SPIDER_train_4283,"What is the description of the club ""Pen and Paper Gaming""?",return Pen and Paper Gaming ;return description of #1,"[""SELECT['Pen and Paper Gaming']"", ""PROJECT['description of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_4284,"What is the location of the club named ""Tennis Club""?",return clubs ;return #1 named Tennis Club ;return the  location of #2,"[""SELECT['clubs']"", ""FILTER['#1', 'named Tennis Club']"", ""PROJECT['the location of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4285,"Where us the club named ""Tennis Club"" located?",return Tennis Club ;return where is  #1 located,"[""SELECT['Tennis Club']"", ""PROJECT['where is #REF located', '#1']""]","['select', 'project']",train
SPIDER_train_4286,"Find the location of the club ""Pen and Paper Gaming"".",return clubs ;return locations of  #1 ;return #2 where  #1 is  Pen and Paper Gaming,"[""SELECT['clubs']"", ""PROJECT['locations of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Pen and Paper Gaming']""]","['select', 'project', 'comparative']",train
SPIDER_train_4287,"Where is the club ""Pen and Paper Gaming"" located?",return club Pen and  Paper Gaming ;return where is  #1 located,"[""SELECT['club Pen and Paper Gaming']"", ""PROJECT['where is #REF located', '#1']""]","['select', 'project']",train
SPIDER_train_4288,"Where is the club ""Hopkins Student Enterprises"" located?",return Hopkins Student Enterprises ;return where is  #1 located,"[""SELECT['Hopkins Student Enterprises']"", ""PROJECT['where is #REF located', '#1']""]","['select', 'project']",train
SPIDER_train_4289,"Tell me the location of the club ""Hopkins Student Enterprises"".",return clubs ;return locations of  #1 ;return #2 where #1 is  Hopkins Student Enterprises,"[""SELECT['clubs']"", ""PROJECT['locations of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Hopkins Student Enterprises']""]","['select', 'project', 'comparative']",train
SPIDER_train_429,Show names for all employees who do not have certificate of Boeing 737-800.,return employees ;return certificates of #1 ;return #1 where Boeing 737-800 is  in #2 ;return #1 besides #3 ;return names of #4,"[""SELECT['employees']"", ""PROJECT['certificates of #REF', '#1']"", ""COMPARATIVE['#1', '#2', '']"", ""DISCARD['#1', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'comparative', 'discard', 'project']",train
SPIDER_train_4290,"Find the name of all the clubs at ""AKW"".",return AKW ;return clubs of #1 ;return names of #2,"[""SELECT['AKW']"", ""PROJECT['clubs of #REF', '#1']"", ""PROJECT['names of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_4291,"Which clubs are located at ""AKW""? Return the club names.",return AKW ;return clubs located at #1 ;return names of #2,"[""SELECT['AKW']"", ""PROJECT['clubs located at #REF', '#1']"", ""PROJECT['names of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_4292,"How many clubs are located at ""HHH""?",return clubs ;return #1 located at HHH ;return number of #2,"[""SELECT['clubs']"", ""FILTER['#1', 'located at HHH']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_4293,"Count the number of clubs located at ""HHH"".",return HHH ;return clubs located at #1 ;return number of  #2,"[""SELECT['HHH']"", ""PROJECT['clubs located at #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_4294,"What are the first and last name of the president of the club ""Bootup Baltimore""?","return clubs ;return presidents of  #1 ;return #2 where #1 is  Bootup Baltimore ;return first name of  #3 ;return last name of  #3 ;return #4 ,  #5","[""SELECT['clubs']"", ""PROJECT['presidents of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Bootup Baltimore']"", ""PROJECT['first name of #REF', '#3']"", ""PROJECT['last name of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_4295,"Who is the president of the club ""Bootup Baltimore""? Give me the first and last name.","return the  club Bootup Baltimore ;return the  president of  #1 ;return the  first name of  #2 ;return the  last name of  #2 ;return #3 ,  #4","[""SELECT['the club Bootup Baltimore']"", ""PROJECT['the president of #REF', '#1']"", ""PROJECT['the first name of #REF', '#2']"", ""PROJECT['the last name of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_4296,"Who is the ""CTO"" of club ""Hopkins Student Enterprises""? Show the first name and last name.","return Hopkins Student Enterprises ;return the  CTO of  #1 ;return the  first name  of  #2 ;return the  last name  of  #2 ;return #3 ,  #4","[""SELECT['Hopkins Student Enterprises']"", ""PROJECT['the CTO of #REF', '#1']"", ""PROJECT['the first name of #REF', '#2']"", ""PROJECT['the last name of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_4297,"Find the first name and last name for the ""CTO"" of the club ""Hopkins Student Enterprises""?","return clubs ;return #1 with  name  Hopkins Student Enterprises ;return CTO of  #2 ;return first name  of  #3 ;return last name  of  #3 ;return #4 ,   #5","[""SELECT['clubs']"", ""FILTER['#1', 'with name Hopkins Student Enterprises']"", ""PROJECT['CTO of #REF', '#2']"", ""PROJECT['first name of #REF', '#3']"", ""PROJECT['last name of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_4298,"How many different roles are there in the club ""Bootup Baltimore""?",return clubs ;return different roles of  #1 ;return #2 where  #1 is  Bootup Baltimore ;return number of #3,"[""SELECT['clubs']"", ""PROJECT['different roles of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Bootup Baltimore']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_4299,"Count the number of different positions in the club ""Bootup Baltimore"".",return the  club Bootup Baltimore ;return positions in  #1 ;return number of  different #2,"[""SELECT['the club Bootup Baltimore']"", ""PROJECT['positions in #REF', '#1']"", ""PROJECT['different #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_43,What are the statuses and average populations of each city?,"return cities ;return statuses of  each #1 ;return populations of  each #1 ;return average of  #3 ;return #2 ,  #4","[""SELECT['cities']"", ""PROJECT['statuses of each #REF', '#1']"", ""PROJECT['populations of each #REF', '#1']"", ""AGGREGATE['avg', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'aggregate', 'union']",train
SPIDER_train_430,What are the names of all employees who are not certified to fly Boeing 737-800s?,return employees ;return #1 who are certified to  fly Boeing 737-800s ;return #1 besides #2 ;return the  names of #3,"[""SELECT['employees']"", ""FILTER['#1', 'who are certified to fly Boeing 737-800s']"", ""DISCARD['#1', '#2']"", ""PROJECT['the names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_4300,"How many members of ""Bootup Baltimore"" are older than 18?",return Bootup Baltimore ;return members of  #1 ;return #2 older than  18 ;return number of  #3,"[""SELECT['Bootup Baltimore']"", ""PROJECT['members of #REF', '#1']"", ""FILTER['#2', 'older than 18']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'filter', 'aggregate']",train
SPIDER_train_4301,"Count the number of members in club ""Bootup Baltimore"" whose age is above 18.",return club Bootup Baltimore ;return members of  #1 ;return ages of  #2 ;return #2 where #3 is  higher than 18 ;return number of  #4,"[""SELECT['club Bootup Baltimore']"", ""PROJECT['members of #REF', '#1']"", ""PROJECT['ages of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is higher than 18']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'project', 'comparative', 'aggregate']",train
SPIDER_train_4302,"How many members of club ""Bootup Baltimore"" are younger than 18?",return clubs ;return members of  #1 ;return #2 where  #1 is  Bootup Baltimore ;return #3 who  are  younger than  18 ;return number of #4,"[""SELECT['clubs']"", ""PROJECT['members of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Bootup Baltimore']"", ""FILTER['#3', 'who are younger than 18']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'comparative', 'filter', 'aggregate']",train
SPIDER_train_4303,"Count the number of members in club ""Bootup Baltimore"" whose age is below 18.",return members ;return #1 in club Bootup Baltimore ;return #2 whose age is  below 18 ;return Count the number of  #3,"[""SELECT['members']"", ""FILTER['#1', 'in club Bootup Baltimore']"", ""FILTER['#2', 'whose age is below 18']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'filter', 'aggregate']",train
SPIDER_train_4304,"Find the names of all the clubs that have at least a member from the city with city code ""BAL"".",return clubs ;return members ;return cities of  #2 ;return city codes of  #3 ;return #1 where  #4 is  BAL ;return names of  #5,"[""SELECT['clubs']"", ""SELECT['members']"", ""PROJECT['cities of #REF', '#2']"", ""PROJECT['city codes of #REF', '#3']"", ""COMPARATIVE['#1', '#4', 'is BAL']"", ""PROJECT['names of #REF', '#5']""]","['select', 'select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_4305,"Which clubs have one or more members from the city with code ""BAL""? Give me the names of the clubs.",return clubs ;return members of #1 ;return cities #2 are from ;return codes of #3 ;return #2 where #4 is  BAL ;return number of  #5 for each #1 ;return #1 where #6 is  at least one ;return names of #7,"[""SELECT['clubs']"", ""PROJECT['members of #REF', '#1']"", ""PROJECT['cities #REF are from', '#2']"", ""PROJECT['codes of #REF', '#3']"", ""COMPARATIVE['#2', '#4', 'is BAL']"", ""GROUP['count', '#5', '#1']"", ""COMPARATIVE['#1', '#6', 'is at least one']"", ""PROJECT['names of #REF', '#7']""]","['select', 'project', 'project', 'project', 'comparative', 'group', 'comparative', 'project']",train
SPIDER_train_4306,"Find the names of the clubs that have at least a member from the city with city code ""HOU"".",return clubs ;return members of  #1 ;return cities of  #2 ;return city codes of  #3 ;return #1 where  #4 is  HOU ;return names of  #5,"[""SELECT['clubs']"", ""PROJECT['members of #REF', '#1']"", ""PROJECT['cities of #REF', '#2']"", ""PROJECT['city codes of #REF', '#3']"", ""COMPARATIVE['#1', '#4', 'is HOU']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_4307,"Which clubs have one or more members from the city with code ""HOU""? Give me the names of the clubs.",return clubs  ;return members of #1 ;return cities of #2 ;return codes of #3 ;return #1 where #4 is HOU ;return names of #5,"[""SELECT['clubs']"", ""PROJECT['members of #REF', '#1']"", ""PROJECT['cities of #REF', '#2']"", ""PROJECT['codes of #REF', '#3']"", ""COMPARATIVE['#1', '#4', 'is HOU']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_4308,"How many clubs does the student named ""Eric Tai"" belong to?",return students ;return #1 named Eric Tai ;return clubs of #2 ;return number of  #3,"[""SELECT['students']"", ""FILTER['#1', 'named Eric Tai']"", ""PROJECT['clubs of #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_4309,"Count the number of clubs for which the student named ""Eric Tai"" is a member.",return clubs ;return members of  #1 ;return #2 that  are  students ;return #1 where #3 is  Eric Tai ;return number of  #4,"[""SELECT['clubs']"", ""PROJECT['members of #REF', '#1']"", ""FILTER['#2', 'that are students']"", ""COMPARATIVE['#1', '#3', 'is Eric Tai']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'filter', 'comparative', 'aggregate']",train
SPIDER_train_431,Show the name of aircraft which fewest people have its certificate.,return people ;return certificates of #1 ;return aircraft of #2 ;return number of  #1 for each #3 ;return #3 where #4 is the  lowest ;return name of #5,"[""SELECT['people']"", ""PROJECT['certificates of #REF', '#1']"", ""PROJECT['aircraft of #REF', '#2']"", ""GROUP['count', '#1', '#3']"", ""COMPARATIVE['#3', '#4', 'is the lowest']"", ""PROJECT['name of #REF', '#5']""]","['select', 'project', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_4310,"List the clubs having ""Davis Steven"" as a member.",return clubs ;return members of  #1 ;return #1 where  #2 is Davis Steven,"[""SELECT['clubs']"", ""PROJECT['members of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Davis Steven']""]","['select', 'project', 'comparative']",train
SPIDER_train_4311,"What are the names of the clubs that have ""Davis Steven"" as a member?",return clubs ;return members of  #1 ;return #1 where #2 is  Davis Steven ;return names of  #3,"[""SELECT['clubs']"", ""PROJECT['members of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Davis Steven']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4312,"List the clubs that have at least a member with advisor ""1121"".",return clubs ;return members of  #1 ;return advisors of  #2 ;return #1 where  #3 is 1121,"[""SELECT['clubs']"", ""PROJECT['members of #REF', '#1']"", ""PROJECT['advisors of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is 1121']""]","['select', 'project', 'project', 'comparative']",train
SPIDER_train_4313,"Which clubs have one or more members whose advisor is ""1121""?",return clubs ;return members of  #1 ;return advisors of  #2 ;return #1 where #3 is  1121,"[""SELECT['clubs']"", ""PROJECT['members of #REF', '#1']"", ""PROJECT['advisors of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is 1121']""]","['select', 'project', 'project', 'comparative']",train
SPIDER_train_4314,"What is the average age of the members of the club ""Bootup Baltimore""?",return club ;return #1 that  is  Bootup Baltimore ;return members of  #2 ;return age of  #3 ;return average of  #4,"[""SELECT['club']"", ""FILTER['#1', 'that is Bootup Baltimore']"", ""PROJECT['members of #REF', '#2']"", ""PROJECT['age of #REF', '#3']"", ""AGGREGATE['avg', '#4']""]","['select', 'filter', 'project', 'project', 'aggregate']",train
SPIDER_train_4315,"Find the average age of the members in the club ""Bootup Baltimore"".",return club Bootup Baltimore ;return members of  #1 ;return age of  #2 ;return the average #3,"[""SELECT['club Bootup Baltimore']"", ""PROJECT['members of #REF', '#1']"", ""PROJECT['age of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_4316,"Find the average age of members of the club ""Hopkins Student Enterprises"".",return club Hopkins Student Enterprises ;return members of #1 ;return ages of #2 ;return average of #3,"[""SELECT['club Hopkins Student Enterprises']"", ""PROJECT['members of #REF', '#1']"", ""PROJECT['ages of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_4317,"On average, how old are the members in the club ""Hopkins Student Enterprises""?",return the  club Hopkins Student Enterprises ;return the  members of #1 ;return how old #2 are ;return the  average of #3,"[""SELECT['the club Hopkins Student Enterprises']"", ""PROJECT['the members of #REF', '#1']"", ""PROJECT['how old #REF are', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_4318,"Retrieve the average age of members of the club ""Tennis Club"".",return clubs ;return members of  #1 ;return #2 where  #1 is Tennis Club ;return ages of  #3 ;return average of  #4,"[""SELECT['clubs']"", ""PROJECT['members of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Tennis Club']"", ""PROJECT['ages of #REF', '#3']"", ""AGGREGATE['avg', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_4319,"Compute the average age of the members in the club ""Tennis Club"".",return Tennis Club ;return members of  #1 ;return ages of  #2 ;return average of  #3,"[""SELECT['Tennis Club']"", ""PROJECT['members of #REF', '#1']"", ""PROJECT['ages of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_432,What are the names of the aircraft that the least people are certified to fly?,return aircraft ;return people certified to fly #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  lowest ;return names of  #4,"[""SELECT['aircraft']"", ""PROJECT['people certified to fly #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_4320,What are the distinct grant amount for the grants where the documents were sent before '1986-08-26 20:49:27' and grant were ended after '1989-03-16 18:27:16'?,return grants ;return documents of #1 ;return when  #2 were sent ;return when  #1 ended ;return #1 where #3 is before '1986-08-26 20:49:27 ;return #1 where #4 is after '1989-03-16 18:27:16 ;return #1 in  both #5 and  #6 ;return distinct grant amounts of #7,"[""SELECT['grants']"", ""PROJECT['documents of #REF', '#1']"", ""PROJECT['when #REF were sent', '#2']"", ""PROJECT['when #REF ended', '#1']"", ""COMPARATIVE['#1', '#3', 'is before 1986-08-26 20:49:27']"", ""COMPARATIVE['#1', '#4', 'is after 1989-03-16 18:27:16']"", ""INTERSECTION['#1', '#5', '#6']"", ""PROJECT['distinct grant amounts of #REF', '#7']""]","['select', 'project', 'project', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_4321,What are the different grant amounts for documents sent before '1986-08-26 20:49:27' and after the grant ended on '1989-03-16 18:27:16'?,"return documents ;return #1 sent before '1986-08-26 20:49:27 ;return #1 sent after '1989-03-16 18:27:16 ;return grant amounts of #2 ;return grant amounts of #3 ;return #4 ,  #5","[""SELECT['documents']"", ""FILTER['#1', 'sent before 1986-08-26 20:49:27']"", ""FILTER['#1', 'sent after 1989-03-16 18:27:16']"", ""PROJECT['grant amounts of #REF', '#2']"", ""PROJECT['grant amounts of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'filter', 'project', 'project', 'union']",train
SPIDER_train_4322,List the project details of the project both producing patent and paper as outcomes.,return projects ;return outcomes of  #1 ;return #1 where  #2 is patent ;return #1 where  #2 is paper ;return #1 of  both #3 and #4 ;return project details of  #5,"[""SELECT['projects']"", ""PROJECT['outcomes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is patent']"", ""COMPARATIVE['#1', '#2', 'is paper']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['project details of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_4323,What are the details of the project that is producing both patents and papers as outcomes?,return projects ;return outcomes #1 is  producing ;return #1 where #2 is  patents ;return #1 where #2 is  papers ;return #1 of  both #3 and  #4 ;return details of  #5,"[""SELECT['projects']"", ""PROJECT['outcomes #REF is producing', '#1']"", ""COMPARATIVE['#1', '#2', 'is patents']"", ""COMPARATIVE['#1', '#2', 'is papers']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['details of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_4324,What is the total grant amount of the organisations described as research?,return organisations ;return #1 that  are described as research ;return grants of #2 ;return amounts of #3 ;return the  sum of #4 for each #2 ;return the  sum of #5,"[""SELECT['organisations']"", ""FILTER['#1', 'that are described as research']"", ""PROJECT['grants of #REF', '#2']"", ""PROJECT['amounts of #REF', '#3']"", ""GROUP['sum', '#4', '#2']"", ""AGGREGATE['sum', '#5']""]","['select', 'filter', 'project', 'project', 'group', 'aggregate']",train
SPIDER_train_4325,What is the total amount of grant money for research?,return research ;return grant money for #1 ;return amount of #2 ;return sum of #3,"[""SELECT['research']"", ""PROJECT['grant money for #REF', '#1']"", ""PROJECT['amount of #REF', '#2']"", ""AGGREGATE['sum', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_4326,List from which date and to which date these staff work: project staff of the project which hires the most staffs,"return projects ;return staffs of #1 ;return number of  #2 for each #1 ;return #1 where #3 is the  highest ;return staffs of #4 ;return work dates of #5 ;return the  lowest of #6 ;return the  highest of #6 ;return #7 ,  #8","[""SELECT['projects']"", ""PROJECT['staffs of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']"", ""PROJECT['staffs of #REF', '#4']"", ""PROJECT['work dates of #REF', '#5']"", ""AGGREGATE['min', '#6']"", ""AGGREGATE['max', '#6']"", ""UNION['#7', '#8']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_4328,Find the organisation ids and details of the organisations which are involved in,"return organisations ;return ids of #1 ;return details of #1 ;return #2 ,  #3","[""SELECT['organisations']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['details of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_4329,What are the ids and details for all organizations that have grants of more than 6000 dollars?,"return organizations ;return grants of #1 ;return dollars of #2 ;return #1 where #3 is higher than 6000 ;return ids of #4 ;return details of #4 ;return #5 ,  #6","[""SELECT['organizations']"", ""PROJECT['grants of #REF', '#1']"", ""PROJECT['dollars of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is higher than 6000']"", ""PROJECT['ids of #REF', '#4']"", ""PROJECT['details of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_433,Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.,"return aircrafts ;return distances of #1 ;return #1 where #2 is  higher than 5000 ;return certificates of #1 ;return people with  #4 ;return number of  #5 for each #1 ;return #1 where #6 is  at least 5 ;return names of #1 ;return #8 of both #3 and #7 ;return #2 of both #3 and #7 ;return #9 ,  #10","[""SELECT['aircrafts']"", ""PROJECT['distances of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 5000']"", ""PROJECT['certificates of #REF', '#1']"", ""PROJECT['people with #REF', '#4']"", ""GROUP['count', '#5', '#1']"", ""COMPARATIVE['#1', '#6', 'is at least 5']"", ""PROJECT['names of #REF', '#1']"", ""INTERSECTION['#8', '#3', '#7']"", ""INTERSECTION['#2', '#3', '#7']"", ""UNION['#9', '#10']""]","['select', 'project', 'comparative', 'project', 'project', 'group', 'comparative', 'project', 'intersection', 'intersection', 'union']",train
SPIDER_train_4330,What is the organisation type and id of the organisation which has the most number of research staff?,"return organisations ;return research staff of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return organisation type of  #4 ;return organisation id of  #4 ;return #5 ,  #6","[""SELECT['organisations']"", ""PROJECT['research staff of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['organisation type of #REF', '#4']"", ""PROJECT['organisation id of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_4331,What is the type and id of the organization that has the most research staff?,"return organization ;return research staff of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  most ;return type of  #4 ;return id of  #4 ;return #5 ,  #6","[""SELECT['organization']"", ""PROJECT['research staff of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['type of #REF', '#4']"", ""PROJECT['id of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_4332,Which organisation type hires most research staff?,return organisation types ;return research staff #1 hires ;return number of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['organisation types']"", ""PROJECT['research staff #REF hires', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_4333,What is the type of the organization with the most research staff?,return organizations ;return research staff of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest ;return type of #4,"[""SELECT['organizations']"", ""PROJECT['research staff of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['type of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_4334,Find out the send dates of the documents with the grant amount of more than 5000 were granted by organisation type described,return the  documents ;return grant amounts of #1 ;return #1 where #2 is higher than 5000 ;return organisation type that #3 was  granted by ;return #3 where #4 is equal to described ;return send dates of #5,"[""SELECT['the documents']"", ""PROJECT['grant amounts of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 5000']"", ""PROJECT['organisation type that #REF was granted by', '#3']"", ""COMPARATIVE['#3', '#4', 'is equal to described']"", ""PROJECT['send dates of #REF', '#5']""]","['select', 'project', 'comparative', 'project', 'comparative', 'project']",train
SPIDER_train_4335,What are the send dates for all documents that have a grant amount of more than 5000 and are involved in research?,return documents ;return #1 that  are involved in research ;return grant amounts of #2 ;return #2 where #3 is  higher than 5000 ;return send dates of #4,"[""SELECT['documents']"", ""FILTER['#1', 'that are involved in research']"", ""PROJECT['grant amounts of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is higher than 5000']"", ""PROJECT['send dates of #REF', '#4']""]","['select', 'filter', 'project', 'comparative', 'project']",train
SPIDER_train_4336,What are the response received dates for the documents described as 'Regular' or granted with more than 100?,return documents ;return #1 described as 'Regular ;return #1 granted with  more than  100 ;return #2 or  #3 ;return response received dates of #4,"[""SELECT['documents']"", ""FILTER['#1', 'described as Regular']"", ""FILTER['#1', 'granted with more than 100']"", ""UNION['#2', '#3']"", ""PROJECT['response received dates of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_4337,What is the response received date for the document described as Regular that was granted more than 100 dollars?,return documents ;return #1 described as Regular ;return dollars that  #2 was granted ;return #2 where #3 is  more than  100 ;return response received date for #4,"[""SELECT['documents']"", ""FILTER['#1', 'described as Regular']"", ""PROJECT['dollars that #REF was granted', '#2']"", ""COMPARATIVE['#2', '#3', 'is more than 100']"", ""PROJECT['response received date for #REF', '#4']""]","['select', 'filter', 'project', 'comparative', 'project']",train
SPIDER_train_4338,List the project details of the projects which did not hire any staff for a researcher role.,return projects ;return #1 which hire a researcher ;return #1 besides #2 ;return details of  #3,"[""SELECT['projects']"", ""FILTER['#1', 'which hire a researcher']"", ""DISCARD['#1', '#2']"", ""PROJECT['details of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_4339,What are the details for all projects that did not hire any staff in a research role?,return projects ;return #1 that  did hire any staff in a research role ;return #1 besides  #2 ;return the  details for all #3,"[""SELECT['projects']"", ""FILTER['#1', 'that did hire any staff in a research role']"", ""DISCARD['#1', '#2']"", ""PROJECT['the details for all #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_434,What is the name and distance of every aircraft that can cover a distance of more than 5000 and which at least 5 people can fly?,"return aircraft ;return distances of #1 ;return #1 where #2 larger than 5000 ;return people who can  fly #3 ;return number of  #4 ;return #3 where #5 at least 5 ;return names of #6 ;return distances of #6 ;return #7 ,  #8","[""SELECT['aircraft']"", ""PROJECT['distances of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'larger than 5000']"", ""PROJECT['people who can fly #REF', '#3']"", ""AGGREGATE['count', '#4']"", ""COMPARATIVE['#3', '#5', 'at least 5']"", ""PROJECT['names of #REF', '#6']"", ""PROJECT['distances of #REF', '#6']"", ""UNION['#7', '#8']""]","['select', 'project', 'comparative', 'project', 'aggregate', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_4340,"What are the task details, task id and project id for the projects which are detailed as 'omnis' or  have more than 2 outcomes?","return projects ;return #1 detailed as 'omnis ;return outcomes of  #1 ;return number of  #3 for each  #1 ;return #1 where #4 is  higher than 2 ;return #2 or  #5 ;return task details of  #6 ;return task ids of  #6 ;return project ids of  #6 ;return #7 ,  #8 ,   #9","[""SELECT['projects']"", ""FILTER['#1', 'detailed as omnis']"", ""PROJECT['outcomes of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is higher than 2']"", ""UNION['#2', '#5']"", ""PROJECT['task details of #REF', '#6']"", ""PROJECT['task ids of #REF', '#6']"", ""PROJECT['project ids of #REF', '#6']"", ""UNION['#7', '#8', '#9']""]","['select', 'filter', 'project', 'group', 'comparative', 'union', 'project', 'project', 'project', 'union']",train
SPIDER_train_4341,"What are the task details, task ids, and project ids for the progrects that are detailed as 'omnis' or have at least 3 outcomes?","return projects ;return #1 that are detailed as 'omnis ;return outcomes of #1 ;return number of  #3 for each #1 ;return #1 where #4 is at least 3 ;return #2 ,  #5 ;return task details of #6 ;return task ids  of #6 ;return project ids  of #6 ;return #7 ,  #8 ,   #9","[""SELECT['projects']"", ""FILTER['#1', 'that are detailed as omnis']"", ""PROJECT['outcomes of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is at least 3']"", ""UNION['#2', '#5']"", ""PROJECT['task details of #REF', '#6']"", ""PROJECT['task ids of #REF', '#6']"", ""PROJECT['project ids of #REF', '#6']"", ""UNION['#7', '#8', '#9']""]","['select', 'filter', 'project', 'group', 'comparative', 'union', 'project', 'project', 'project', 'union']",train
SPIDER_train_4342,"When do all the researcher role staff start to work, and when do they stop working?","return staff ;return roles of #1 ;return #1 where #2 is  researcher ;return when  do #3 start working ;return when  do #3 stop working ;return #4 ,  #5","[""SELECT['staff']"", ""PROJECT['roles of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is researcher']"", ""PROJECT['when do #REF start working', '#3']"", ""PROJECT['when do #REF stop working', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_4343,When did researchers start and stop working?,"return researchers ;return When did #1 start working ;return When did #1 stop working ;return #2 ,  #3","[""SELECT['researchers']"", ""PROJECT['When did #REF start working', '#1']"", ""PROJECT['When did #REF stop working', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_4344,How many kinds of roles are there for the staff?,return staff ;return roles of  #1 ;return number of  #2,"[""SELECT['staff']"", ""PROJECT['roles of #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_4345,How many different roles are there on the project staff?,return project staff ;return roles of  #1 ;return different #2 ;return number of #3,"[""SELECT['project staff']"", ""PROJECT['roles of #REF', '#1']"", ""PROJECT['different #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_4346,What is the total amount of grants given by each organisations? Also list the organisation id.,"return organisations ;return grants given by #1 ;return amounts of #2 ;return sum of #3 for each #1 ;return organisation ids of #1 ;return #4 ,  #5","[""SELECT['organisations']"", ""PROJECT['grants given by #REF', '#1']"", ""PROJECT['amounts of #REF', '#2']"", ""GROUP['sum', '#3', '#1']"", ""PROJECT['organisation ids of #REF', '#1']"", ""UNION['#4', '#5']""]","['select', 'project', 'project', 'group', 'project', 'union']",train
SPIDER_train_4347,What is the total amount of grant money given to each organization and what is its id?,"return organizations ;return ids of #1 ;return grant monies given to  #1 ;return the  sum of #3 for each #1 ;return #4 ,  #2","[""SELECT['organizations']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['grant monies given to #REF', '#1']"", ""GROUP['sum', '#3', '#1']"", ""UNION['#4', '#2']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_4348,List the project details of the projects with the research outcome described with the substring 'Published'.,return projects ;return research outcomes of  #1 ;return #1 where  #2 is described with  substring 'Published ;return project details of  #3,"[""SELECT['projects']"", ""PROJECT['research outcomes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is described with substring Published']"", ""PROJECT['project details of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4349,What are the details for the project whose research has been published?,return projects ;return #1 whose research has  been published ;return details of  #2,"[""SELECT['projects']"", ""FILTER['#1', 'whose research has been published']"", ""PROJECT['details of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_435,what is the salary and name of the employee who has the most number of aircraft certificates?,"return employees ;return aircraft certificates of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return salary of  #4 ;return name of  #4 ;return #5 ,  #6","[""SELECT['employees']"", ""PROJECT['aircraft certificates of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['salary of #REF', '#4']"", ""PROJECT['name of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_4350,How many staff does each project has? List the project id and the number in an ascending order.,"return projects ;return staff of  #1 ;return number of #2 for each #1 ;return project ids of  #1 ;return #4 ,   #3 ;return #5 sorted by ascending order","[""SELECT['projects']"", ""PROJECT['staff of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['project ids of #REF', '#1']"", ""UNION['#4', '#3']"", ""SORT['#5', '#5', 'ascending order']""]","['select', 'project', 'group', 'project', 'union', 'sort']",train
SPIDER_train_4351,"For each project id, how many staff does it have? List them in increasing order.",return staff ;return project id ;return number of #1 for each #2 ;return #2 sorted by #3 in increasing orders,"[""SELECT['staff']"", ""SELECT['project id']"", ""GROUP['count', '#1', '#2']"", ""SORT['#2', '#3', 'in increasing orders']""]","['select', 'select', 'group', 'sort']",train
SPIDER_train_4352,What is the complete description of the researcher role.,return roles ;return #1 that  is  same as researcher ;return complete description of  #2,"[""SELECT['roles']"", ""FILTER['#1', 'that is same as researcher']"", ""PROJECT['complete description of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4353,What is the complete description of the job of a researcher?,return jobs ;return #1 of  a researcher ;return complete description of  #2,"[""SELECT['jobs']"", ""FILTER['#1', 'of a researcher']"", ""PROJECT['complete description of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4354,When did the first staff for the projects started working?,return projects ;return staff of #1 ;return when  did #2 started working ;return lowest of #3,"[""SELECT['projects']"", ""PROJECT['staff of #REF', '#1']"", ""PROJECT['when did #REF started working', '#2']"", ""AGGREGATE['min', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_4355,When did the first staff member start working?,return staff members ;return #1 that  was first ;return when  did  #2 start working,"[""SELECT['staff members']"", ""FILTER['#1', 'that was first']"", ""PROJECT['when did #REF start working', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4356,Which project made the most number of outcomes? List the project details and the project id.,"return projects ;return outcomes made of #1 ;return number of  #2 for each #1 ;return #1 where #3 is highest ;return project   details of #4 ;return project   id of #4 ;return #5 ,  #6","[""SELECT['projects']"", ""PROJECT['outcomes made of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['project details of #REF', '#4']"", ""PROJECT['project id of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_4357,What are the details and id of the project with the most outcomes?,"return projects ;return outcomes of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest ;return details of #4 ;return ids of #4 ;return #5 ,  #6","[""SELECT['projects']"", ""PROJECT['outcomes of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['details of #REF', '#4']"", ""PROJECT['ids of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_4358,Which projects have no outcome? List the project details.,return projects ;return #1 which have  outcomes ;return #1 besides  #2 ;return the  project details of  #3,"[""SELECT['projects']"", ""FILTER['#1', 'which have outcomes']"", ""DISCARD['#1', '#2']"", ""PROJECT['the project details of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_4359,What are the details of the project with no outcomes?,return projects ;return #1 with no outcomes ;return details of  #2,"[""SELECT['projects']"", ""FILTER['#1', 'with no outcomes']"", ""PROJECT['details of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_436,What is the salaray and name of the employee that is certified to fly the most planes?,"return employees ;return planes #1 are certified to  fly ;return number of  #2 for each #1 ;return #1 where #3 is  the   highest ;return the   salaray of #4 ;return the   name of #4 ;return #5 ,  #6","[""SELECT['employees']"", ""PROJECT['planes #REF are certified to fly', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']"", ""PROJECT['the salaray of #REF', '#4']"", ""PROJECT['the name of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_4360,"Which organisation hired the most number of research staff? List the organisation id, type and detail.","return organisations ;return research staffs that  #1 hired ;return number of  #2 for each #1 ;return #1 where #3 is  the  highest ;return the  organisation  id of #4 ;return the  organisation  type of #4 ;return organisation  details of #4 ;return #5 ,  #6 ,   #7","[""SELECT['organisations']"", ""PROJECT['research staffs that #REF hired', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']"", ""PROJECT['the organisation id of #REF', '#4']"", ""PROJECT['the organisation type of #REF', '#4']"", ""PROJECT['organisation details of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_4361,"What are the ids, types, and details of the organization with the most research staff?","return organizations ;return research staff of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return ids of  #4 ;return types of  #4 ;return details of  #4 ;return #5 ,  #6 ,   #7","[""SELECT['organizations']"", ""PROJECT['research staff of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['ids of #REF', '#4']"", ""PROJECT['types of #REF', '#4']"", ""PROJECT['details of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'project', 'union']",train
SPIDER_train_4362,Show the role description and the id of the project staff involved in most number of project outcomes?,"return project  staff ;return projects of  #1 ;return outcomes of  #2 ;return number of  #3 for each  #1 ;return #1 where #4 is  highest ;return role description of  #5 ;return id of  #5 ;return #6 ,  #7","[""SELECT['project staff']"", ""PROJECT['projects of #REF', '#1']"", ""PROJECT['outcomes of #REF', '#2']"", ""GROUP['count', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']"", ""PROJECT['role description of #REF', '#5']"", ""PROJECT['id of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_4364,Which document type is described with the prefix 'Initial'?,return document ;return types of  #1 ;return #2 described with prefix 'Initial,"[""SELECT['document']"", ""PROJECT['types of #REF', '#1']"", ""FILTER['#2', 'described with prefix Initial']""]","['select', 'project', 'filter']",train
SPIDER_train_4365,What is the type of the document whose description starts with the word 'Initial'?,return documents ;return #1 whose description starts with the  word 'Initial ;return the  type of  #2,"[""SELECT['documents']"", ""FILTER['#1', 'whose description starts with the word Initial']"", ""PROJECT['the type of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4367,"For grants that have descriptions of Regular and Initial Applications, what are their start dates?",return grants ;return descriptions of  #1 ;return #1 where  #2 is  Regular ;return #1 where  #2 is  Initial Applications ;return #1 in both #3 and #4 ;return start dates of  #5,"[""SELECT['grants']"", ""PROJECT['descriptions of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Regular']"", ""COMPARATIVE['#1', '#2', 'is Initial Applications']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['start dates of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_4368,How many documents can one grant have at most? List the grant id and number.,"return grants ;return documents of  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  highest ;return grant id of  #4 ;return documents of  #4 ;return number of #6 ;return #5 ,   #7","[""SELECT['grants']"", ""PROJECT['documents of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['grant id of #REF', '#4']"", ""PROJECT['documents of #REF', '#4']"", ""AGGREGATE['count', '#6']"", ""UNION['#5', '#7']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'aggregate', 'union']",train
SPIDER_train_4369,"For each grant id, how many documents does it have, and which one has the most?","return grant ids ;return documents of  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  highest ;return #3 ,   #4","[""SELECT['grant ids']"", ""PROJECT['documents of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""UNION['#3', '#4']""]","['select', 'project', 'group', 'superlative', 'union']",train
SPIDER_train_437,What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000?,"return aircrafts ;return distances of #1 ;return #1 where #2 larger than 5000 ;return certificates on #3 ;return number of  #4 for each employee ;return employee where #5 is  highest ;return salary of #6 ;return name of #6 ;return #7 ,  #8","[""SELECT['aircrafts']"", ""PROJECT['distances of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'larger than 5000']"", ""PROJECT['certificates on #REF', '#3']"", ""PROJECT['employee', '#4']"", ""GROUP['count', '#4', '#5']"", ""PROJECT['employee where #REF is highest', '#6']"", ""PROJECT['salary of #REF', '#7']"", ""PROJECT['name of #REF', '#7']"", ""UNION['#8', '#9']""]","['select', 'project', 'comparative', 'project', 'project', 'group', 'project', 'project', 'project', 'union']",train
SPIDER_train_4370,Find the organisation type description of the organisation detailed as 'quo'.,return organisation  detailed as 'quo ;return organisation  type description of  #1,"[""SELECT['organisation detailed as quo']"", ""PROJECT['organisation type description of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_4371,What is the type description of the organization whose detail is listed as 'quo'?,return organization ;return #1 whose detail is  'quo ;return type description of  #2,"[""SELECT['organization']"", ""FILTER['#1', 'whose detail is quo']"", ""PROJECT['type description of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4372,What are all the details of the organisations described as 'Sponsor'? Sort the result in an ascending order.,return organisations ;return details of  #1 ;return #2 where #1 is  described as 'Sponsor ;return #3 sorted by ascending order,"[""SELECT['organisations']"", ""PROJECT['details of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is described as Sponsor']"", ""SORT['#3', '#3', 'ascending order']""]","['select', 'project', 'comparative', 'sort']",train
SPIDER_train_4373,What are the details of all organizations that are described as Sponsors and sort the results in ascending order?,return organizations ;return #1 that  are  described as Sponsor ;return #2 sorted by ascending order ;return details of  all #3,"[""SELECT['organizations']"", ""FILTER['#1', 'that are described as Sponsor']"", ""SORT['#2', '#2', 'ascending order']"", ""PROJECT['details of all #REF', '#3']""]","['select', 'filter', 'sort', 'project']",train
SPIDER_train_4374,How many Patent outcomes are generated from all the projects?,return projects ;return Patent outcomes generated from  #1 ;return number of  #2,"[""SELECT['projects']"", ""PROJECT['Patent outcomes generated from #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_4375,How many patents outcomes were listed for all the projects?,return projects ;return patents of  #1 ;return outcomes of  #2 ;return number of  #3,"[""SELECT['projects']"", ""PROJECT['patents of #REF', '#1']"", ""PROJECT['outcomes of #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_4376,How many project staff worked as leaders or started working before '1989-04-24 23:51:54'?,return project staff ;return #1 that  worked as leaders ;return #1 that  started working before '1989-04-24 ;return #2 or #3 ;return number of  #4,"[""SELECT['project staff']"", ""FILTER['#1', 'that worked as leaders']"", ""FILTER['#1', 'that started working before 1989-04-24']"", ""UNION['#2', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'filter', 'filter', 'union', 'aggregate']",train
SPIDER_train_4377,How many project members were leaders or started working before '1989-04-24 23:51:54'?,return project members ;return #1 that  were leaders ;return #1 that  started working before '1989-04-24 ;return #2 or #3 ;return number of  #4,"[""SELECT['project members']"", ""FILTER['#1', 'that were leaders']"", ""FILTER['#1', 'that started working before 1989-04-24']"", ""UNION['#2', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'filter', 'filter', 'union', 'aggregate']",train
SPIDER_train_4378,What is the last date of the staff leaving the projects?,return the  staff leaving the   projects ;return dates of #1 ;return the  last of #2,"[""SELECT['the staff leaving the projects']"", ""PROJECT['dates of #REF', '#1']"", ""AGGREGATE['max', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_4379,What is the last date that a staff member left a project?,return staff members ;return dates #1 left projects ;return #2 that  is  last,"[""SELECT['staff members']"", ""PROJECT['dates #REF left projects', '#1']"", ""FILTER['#2', 'that is last']""]","['select', 'project', 'filter']",train
SPIDER_train_438,What is the salaray and name of the employee with the most certificates to fly planes more than 5000?,"return planes ;return #1 that  are more than  5000 ;return certificates to  fly #2 ;return employees ;return number of  #3 for each #4 ;return #4 where #5 is  the   highest ;return the   salaray of #6 ;return the   name of #6 ;return #7 ,  #8","[""SELECT['planes']"", ""FILTER['#1', 'that are more than 5000']"", ""PROJECT['certificates to fly #REF', '#2']"", ""SELECT['employees']"", ""GROUP['count', '#3', '#4']"", ""COMPARATIVE['#4', '#5', 'is the highest']"", ""PROJECT['the salaray of #REF', '#6']"", ""PROJECT['the name of #REF', '#6']"", ""UNION['#7', '#8']""]","['select', 'filter', 'project', 'select', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_4380,What are the result description of the project whose detail is 'sint'?,return projects ;return details of  #1 ;return #1 where #2 is  'sint ;return results of  #3 ;return description of  #4,"[""SELECT['projects']"", ""PROJECT['details of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is sint']"", ""PROJECT['results of #REF', '#3']"", ""PROJECT['description of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_4381,What is the description for the results whose project detail is 'sint'?,return projects ;return project details of #1 ;return #1 where #2 is  'sint ;return the  results of #3 ;return the  description of #4,"[""SELECT['projects']"", ""PROJECT['project details of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is sint']"", ""PROJECT['the results of #REF', '#3']"", ""PROJECT['the description of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_4382,"List the organisation id with the maximum outcome count, and the count.","return organisations ;return ids of  #1 ;return outcomes of  #1 ;return number of  #3 for each  #1 ;return #2 where  #4 is highest ;return outcomes of  #5 ;return number of  #6 ;return #5 ,  #7","[""SELECT['organisations']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['outcomes of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""SUPERLATIVE['max', '#2', '#4']"", ""PROJECT['outcomes of #REF', '#5']"", ""AGGREGATE['count', '#6']"", ""UNION['#5', '#7']""]","['select', 'project', 'project', 'group', 'superlative', 'project', 'aggregate', 'union']",train
SPIDER_train_4383,What is the id of the organization with the maximum number of outcomes and how many outcomes are there?,"return organizations ;return outcomes  of #1 ;return the   number of  #2 for each #1 ;return the   highest of #3 ;return #1 where #3 is  #4 ;return the   id of #5 ;return #6 ,  #4","[""SELECT['organizations']"", ""PROJECT['outcomes of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['max', '#3']"", ""COMPARATIVE['#1', '#3', 'is #4']"", ""PROJECT['the id of #REF', '#5']"", ""UNION['#6', '#4']""]","['select', 'project', 'group', 'aggregate', 'comparative', 'project', 'union']",train
SPIDER_train_4384,List the project details of the projects launched by the organisation,return projects ;return #1 launched by the   organisation ;return project details of #2,"[""SELECT['projects']"", ""FILTER['#1', 'launched by the organisation']"", ""PROJECT['project details of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4385,What are the details for the projects which were launched by the organization with the most projects?,return organizations ;return projects of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return projects of  #4 ;return details of  #5,"[""SELECT['organizations']"", ""PROJECT['projects of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['projects of #REF', '#4']"", ""PROJECT['details of #REF', '#5']""]","['select', 'project', 'group', 'superlative', 'project', 'project']",train
SPIDER_train_4386,"List the research staff details, and order in ascending order.",return research staff ;return details of  #1 ;return #2 sorted by ascending order,"[""SELECT['research staff']"", ""PROJECT['details of #REF', '#1']"", ""SORT['#2', '#2', 'ascending order']""]","['select', 'project', 'sort']",train
SPIDER_train_4387,What details are there on the research staff? List the result in ascending alphabetical order.,return research staff ;return details on  #1 ;return #2 sorted by ascending alphabetical order,"[""SELECT['research staff']"", ""PROJECT['details on #REF', '#1']"", ""SORT['#2', '#2', 'ascending alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_4388,How many tasks are there in total?,return tasks ;return number of  #1,"[""SELECT['tasks']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_4389,How many tasks are there?,return tasks ;return number of  #1,"[""SELECT['tasks']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_439,How many allergies are there?,return allergies ;return number of #1,"[""SELECT['allergies']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_4390,How many tasks does each project have? List the task count and the project detail.,"return projects ;return tasks of  #1 ;return number of #2 for each #1 ;return project detail of  #1 ;return #3 ,   #4","[""SELECT['projects']"", ""PROJECT['tasks of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['project detail of #REF', '#1']"", ""UNION['#3', '#4']""]","['select', 'project', 'group', 'project', 'union']",train
SPIDER_train_4391,"For each project id, how many tasks are there?",return project ids ;return tasks of  #1 ;return number of #2 for each #1,"[""SELECT['project ids']"", ""PROJECT['tasks of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_4392,What are the staff roles of the staff who,return staff  ;return roles of  #1,"[""SELECT['staff']"", ""PROJECT['roles of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_4393,What roles did staff members play between '2003-04-19 15:06:20' and '2016-03-15 00:33:18'?,return staff members ;return roles that  #1 play ;return #2 between '2003-04-19 15:06:20 '  and '2016-03-15 00:33:18,"[""SELECT['staff members']"", ""PROJECT['roles that #REF play', '#1']"", ""FILTER['#2', 'betweenleftside 2003-04-19 15:06:20']"", ""FILTER['#3', 'betweenrightside 2016-03-15 00:33:18']""]","['select', 'project', 'filter', 'filter']",train
SPIDER_train_4394,What are the descriptions of all the project outcomes?,return projects ;return outcomes of  #1 ;return descriptions of  #2,"[""SELECT['projects']"", ""PROJECT['outcomes of #REF', '#1']"", ""PROJECT['descriptions of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_4395,List the description of the outcomes for all projects.,return projects ;return outcomes of  #1 ;return descriptions of  #2,"[""SELECT['projects']"", ""PROJECT['outcomes of #REF', '#1']"", ""PROJECT['descriptions of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_4396,Which role is most common for the staff?,return staff ;return role of  #1 ;return number of  #1 for each  #2 ;return #2 where #3 is  highest,"[""SELECT['staff']"", ""PROJECT['role of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""SUPERLATIVE['max', '#2', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_4397,What is the most common role for the staff?,return roles ;return staff with #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['roles']"", ""PROJECT['staff with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_4399,How many friends does Dan have?,return Dan ;return friends of  #1 ;return number of #2,"[""SELECT['Dan']"", ""PROJECT['friends of #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_44,"Please show the different statuses, ordered by the number of cities that have each.",return different statuses ;return cities that  have  #1 ;return number of  #2 for each  #1 ;return #1 sorted by #3,"[""SELECT['different statuses']"", ""PROJECT['cities that have #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SORT['#1', '#3']""]","['select', 'project', 'group', 'sort']",train
SPIDER_train_440,How many allergy entries are there?,return allergy entries ;return number of  #1,"[""SELECT['allergy entries']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_4400,How many females does this network has?,return this network ;return females in  #1 ;return number of  #2,"[""SELECT['this network']"", ""PROJECT['females in #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_4401,How many females are in the network?,return network ;return females in #1 ;return number of #2,"[""SELECT['network']"", ""PROJECT['females in #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_4402,What is the average age for all person?,return people ;return ages of #1 ;return the  average of #2,"[""SELECT['people']"", ""PROJECT['ages of #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_4403,What is the average age for all people in the table?,return people ;return #1 that  are in the table ;return ages of #2 ;return average of #3,"[""SELECT['people']"", ""FILTER['#1', 'that are in the table']"", ""PROJECT['ages of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_4404,How many different cities are they from?,return cities ;return #1 where  they are  from ;return different #2 ;return number of  #3,"[""SELECT['cities']"", ""FILTER['#1', 'where they are from']"", ""PROJECT['different #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_4405,How many different cities do people originate from?,return people ;return cities that  #1 originate from ;return different #2 ;return number of  #3,"[""SELECT['people']"", ""PROJECT['cities that #REF originate from', '#1']"", ""PROJECT['different #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_4406,How many type of jobs do they have?,return jobs ;return types of  #1 ;return number of  #2,"[""SELECT['jobs']"", ""PROJECT['types of #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_4407,How many different jobs are listed?,return different jobs ;return number of  #1,"[""SELECT['different jobs']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_4408,Who is the oldest person?,return people ;return #1 that  is  oldest,"[""SELECT['people']"", ""FILTER['#1', 'that is oldest']""]","['select', 'filter']",train
SPIDER_train_4409,What is the name of the person who is the oldest?,return people ;return #1 who  is  oldest ;return name of  #2,"[""SELECT['people']"", ""FILTER['#1', 'who is oldest']"", ""PROJECT['name of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_441,How many different allergy types exist?,return allergy types ;return number of #1,"[""SELECT['allergy types']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_4410,Who is the oldest person whose job is student?,return people ;return jobs of  #1 ;return #1 where #2 is  student ;return oldest #3,"[""SELECT['people']"", ""PROJECT['jobs of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is student']"", ""PROJECT['oldest #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4411,What is the name of the oldest student?,return students ;return the  oldness of #1 ;return #1 where #2 is  the  highest ;return the  name of #3,"[""SELECT['students']"", ""PROJECT['the oldness of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the highest']"", ""PROJECT['the name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4412,Who is the youngest male?,return males ;return #1 that  is  the  youngest,"[""SELECT['males']"", ""FILTER['#1', 'that is the youngest']""]","['select', 'filter']",train
SPIDER_train_4413,What is the name of the youngest male?,return males ;return the  youngest #1 ;return the  name of #2,"[""SELECT['males']"", ""PROJECT['the youngest #REF', '#1']"", ""PROJECT['the name of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_4414,How old is the doctor named Zach?,return doctors ;return #1 named Zach ;return how old is  #2,"[""SELECT['doctors']"", ""FILTER['#1', 'named Zach']"", ""PROJECT['how old is #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4415,What is the age of the doctor named Zach?,return doctor ;return #1 named Zach ;return age of  #2,"[""SELECT['doctor']"", ""FILTER['#1', 'named Zach']"", ""PROJECT['age of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4416,Who is the person whose age is below 30?,return people ;return ages of  #1 ;return #1 where #2 is  lower than 30,"[""SELECT['people']"", ""PROJECT['ages of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is lower than 30']""]","['select', 'project', 'comparative']",train
SPIDER_train_4417,What is the name of the person whose age is below 30?,return people ;return ages of  #1 ;return #1 where #2 is  lower than 30 ;return name of  #3,"[""SELECT['people']"", ""PROJECT['ages of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is lower than 30']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4418,How many people whose age is greater 30 and job is engineer?,return people ;return ages of  #1 ;return #1 where  #2 is  higher than 30 ;return jobs of  #1 ;return #1 where  #4 is  engineer ;return #1 of  both #3 and #5 ;return number of #6,"[""SELECT['people']"", ""PROJECT['ages of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 30']"", ""PROJECT['jobs of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is engineer']"", ""INTERSECTION['#1', '#3', '#5']"", ""AGGREGATE['count', '#6']""]","['select', 'project', 'comparative', 'project', 'comparative', 'intersection', 'aggregate']",train
SPIDER_train_4419,HOw many engineers are older than 30?,return engineers ;return #1 older than  30 ;return number of #2,"[""SELECT['engineers']"", ""FILTER['#1', 'older than 30']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_442,How many distinct allergies are there?,return allergies ;return distinct #1 ;return number of  #2,"[""SELECT['allergies']"", ""PROJECT['distinct #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_4420,What is the average age for each gender?,return genders ;return ages of #1 ;return average of #2 for each  #1,"[""SELECT['genders']"", ""PROJECT['ages of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_4421,"How old is each gender, on average?",return genders ;return how old #1 are ;return the  average of #2 for each #1,"[""SELECT['genders']"", ""PROJECT['how old #REF are', '#1']"", ""GROUP['avg', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_4422,What is average age for different job title?,return job titles ;return ages of #1 ;return average #2 for each #1,"[""SELECT['job titles']"", ""PROJECT['ages of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_4423,How old is the average person for each job?,return people ;return jobs of #1 ;return how old #1 are ;return the  average of #3 for each #2,"[""SELECT['people']"", ""PROJECT['jobs of #REF', '#1']"", ""PROJECT['how old #REF are', '#1']"", ""GROUP['avg', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_4424,What is average age of male for different job title?,return different job titles ;return males with  #1 ;return ages of #2 ;return average of #3 for each #1,"[""SELECT['different job titles']"", ""PROJECT['males with #REF', '#1']"", ""PROJECT['ages of #REF', '#2']"", ""GROUP['avg', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_4425,What is the average age for a male in each job?,return jobs ;return males in #1 ;return ages of  #2 ;return average of  #3 for each  #1,"[""SELECT['jobs']"", ""PROJECT['males in #REF', '#1']"", ""PROJECT['ages of #REF', '#2']"", ""GROUP['avg', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_4426,What is minimum age for different job title?,return different job titles ;return ages of #1 ;return the  lowest of #2 for each #1,"[""SELECT['different job titles']"", ""PROJECT['ages of #REF', '#1']"", ""GROUP['min', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_4427,How old is the youngest person for each job?,return people ;return jobs of #1 ;return how old are #1 ;return the  lowest of #3 for each #2,"[""SELECT['people']"", ""PROJECT['jobs of #REF', '#1']"", ""PROJECT['how old are #REF', '#1']"", ""GROUP['min', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_4428,Find the number of people who is under 40 for each gender.,return people ;return #1 who are under 40 ;return genders of #2 ;return number of  #2 for each #3,"[""SELECT['people']"", ""FILTER['#1', 'who are under 40']"", ""PROJECT['genders of #REF', '#2']"", ""GROUP['count', '#2', '#3']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'group', 'union']",train
SPIDER_train_4429,How many people are under 40 for each gender?,return genders ;return people of  #1 ;return #2 under 40 ;return number of  #3 for each  #1,"[""SELECT['genders']"", ""PROJECT['people of #REF', '#1']"", ""FILTER['#2', 'under 40']"", ""GROUP['count', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'filter', 'group', 'union']",train
SPIDER_train_443,Show all allergy types.,return allergy ;return types of  #1,"[""SELECT['allergy']"", ""PROJECT['types of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_4430,Find the name of people whose age is greater than any engineer sorted by their age.,return engineers ;return ages of #1 ;return the  lowest of #2 ;return people ;return ages of #4 ;return #4 where #5 is higher than #3 ;return names of #6 ;return #7 sorted by #5,"[""SELECT['engineers']"", ""PROJECT['ages of #REF', '#1']"", ""AGGREGATE['min', '#2']"", ""SELECT['people']"", ""PROJECT['ages of #REF', '#4']"", ""COMPARATIVE['#4', '#5', 'is higher than #3']"", ""PROJECT['names of #REF', '#6']"", ""SORT['#7', '#5']""]","['select', 'project', 'aggregate', 'select', 'project', 'comparative', 'project', 'sort']",train
SPIDER_train_4431,What is the name of all the people who are older than at least one engineer? Order them by age.,return people ;return ages of #1 ;return engineers ;return ages of #3 ;return the  lowest #4 ;return #1 where #2 is  higher than #5 ;return names of #6 ;return ages of #6 ;return #7 sorted by #8,"[""SELECT['people']"", ""PROJECT['ages of #REF', '#1']"", ""SELECT['engineers']"", ""PROJECT['ages of #REF', '#3']"", ""AGGREGATE['min', '#4']"", ""COMPARATIVE['#1', '#2', 'is higher than #5']"", ""PROJECT['names of #REF', '#6']"", ""PROJECT['ages of #REF', '#6']"", ""SORT['#7', '#8']""]","['select', 'project', 'select', 'project', 'aggregate', 'comparative', 'project', 'project', 'sort']",train
SPIDER_train_4432,Find the number of people whose age is greater than all engineers.,return engineers ;return ages of #1 ;return the  highest #2 ;return people ;return ages of #4 ;return #4 where #5 is  greater than  #3 ;return number of  #6,"[""SELECT['engineers']"", ""PROJECT['ages of #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""SELECT['people']"", ""PROJECT['ages of #REF', '#4']"", ""COMPARATIVE['#4', '#5', 'is greater than #3']"", ""AGGREGATE['count', '#6']""]","['select', 'project', 'aggregate', 'select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_4433,How many people are older than every engineer?,return engineers ;return oldness of #1 ;return the  highest #2 ;return people ;return oldness of #4 ;return #4 where #5 is  higher than #3 ;return number of  #6,"[""SELECT['engineers']"", ""PROJECT['oldness of #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""SELECT['people']"", ""PROJECT['oldness of #REF', '#4']"", ""COMPARATIVE['#4', '#5', 'is higher than #3']"", ""AGGREGATE['count', '#6']""]","['select', 'project', 'aggregate', 'select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_4434,"list the name, job title of all people ordered by their names.","return people ;return names of  #1 ;return jobs of  #1 ;return titles of  #3 ;return #2 ,  #4 ;return #5 sorted by #2","[""SELECT['people']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['jobs of #REF', '#1']"", ""PROJECT['titles of #REF', '#3']"", ""UNION['#2', '#4']"", ""SORT['#5', '#2']""]","['select', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_4435,What are the names and job titles of every person ordered alphabetically by name?,"return people ;return names of  #1 ;return job titles of  #1 ;return #2 ,  #3 ;return #4 sorted by #2 alphabetically","[""SELECT['people']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['job titles of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#4', '#2', 'alphabetically']""]","['select', 'project', 'project', 'union', 'sort']",train
SPIDER_train_4436,Find the names of all person sorted in the descending order using age.,return people ;return names of #1 ;return ages of #1 ;return #2 sorted by #3 in  descending order,"[""SELECT['people']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['ages of #REF', '#1']"", ""SORT['#2', '#3', 'in descending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_4437,What are the names of everybody sorted by age in descending order?,return everybody ;return names of  #1 ;return ages of  #1 ;return #2 sorted by #3 in descending order,"[""SELECT['everybody']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['ages of #REF', '#1']"", ""SORT['#2', '#3', 'in descending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_4438,Find the name and age of all males in order of their age.,"return males ;return names of  #1 ;return ages of  #1 ;return #2 ,   #3 ;return #4 sorted by #3","[""SELECT['males']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['ages of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#4', '#3']""]","['select', 'project', 'project', 'union', 'sort']",train
SPIDER_train_4439,What is the name and age of every male? Order the results by age.,return males ;return names of  #1 ;return ages of  #1 ;return #2 sorted by #3,"[""SELECT['males']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['ages of #REF', '#1']"", ""SORT['#2', '#3']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_444,What are the different allergy types?,return allergies ;return different types of  #1,"[""SELECT['allergies']"", ""PROJECT['different types of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_4440,Find the name and age of the person who is a friend of both Dan and Alice.,"return person ;return #1 who  is  a friend of  Dan ;return #1 who  is  a friend of  Alice ;return #1 in both #2 and #3 ;return name of  #4 ;return age of  #4 ;return #5 ,   #6","[""SELECT['person']"", ""FILTER['#1', 'who is a friend of Dan']"", ""FILTER['#1', 'who is a friend of Alice']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['age of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'filter', 'filter', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_4441,What are the names and ages of every person who is a friend of both Dan and Alice?,"return people ;return #1 who are friends with  Dan ;return #1 who are friends with  Alice ;return #1 in both #2 and #3 ;return names of #4 ;return ages of #4 ;return #5 ,  #6","[""SELECT['people']"", ""FILTER['#1', 'who are friends with Dan']"", ""FILTER['#1', 'who are friends with Alice']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['ages of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'filter', 'filter', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_4442,Find the name and age of the person who is a friend of Dan or Alice.,"return person ;return #1 who  is  friend of  Dan ;return #1 who  is  friend of  Alice ;return #2 or  #3 ;return name of  #4 ;return age of  #4 ;return #5 ,   #6","[""SELECT['person']"", ""FILTER['#1', 'who is friend of Dan']"", ""FILTER['#1', 'who is friend of Alice']"", ""UNION['#2', '#3']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['age of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'filter', 'filter', 'union', 'project', 'project', 'union']",train
SPIDER_train_4443,What are the different names and ages of every friend of either Dan or alice?,"return friends ;return #1 of  Dan ;return #1 of  alice ;return #2 ,  #3 ;return names of  #4 ;return ages of  #4 ;return #5 ,  #6","[""SELECT['friends']"", ""FILTER['#1', 'of Dan']"", ""FILTER['#1', 'of alice']"", ""UNION['#2', '#3']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['ages of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'filter', 'filter', 'union', 'project', 'project', 'union']",train
SPIDER_train_4444,Find the name of the person who has friends with age above 40 and under age 30?,return people ;return friends of  #1 ;return ages of  #2 ;return #1 where  #3 are  above 40 ;return #1 where  #3 are  under 30 ;return #1 in both #4 and #5 ;return name of  #6,"[""SELECT['people']"", ""PROJECT['friends of #REF', '#1']"", ""PROJECT['ages of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'are above 40']"", ""COMPARATIVE['#1', '#3', 'are under 30']"", ""INTERSECTION['#1', '#4', '#5']"", ""PROJECT['name of #REF', '#6']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_4445,What are the names of every person who has a friend over 40 and under 30?,return people ;return friends of #1 ;return #1 where #2 is  over 40 ;return #1 where #2 is  under 30 ;return #1 of both #3 and #4 ;return names of #5,"[""SELECT['people']"", ""PROJECT['friends of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is over 40']"", ""COMPARATIVE['#1', '#2', 'is under 30']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_4446,Find the name of the person who has friends with age above 40 but not under age 30?,return people ;return friends of #1 ;return ages of #2 ;return #1 where #3 is  above 40 ;return #1 where #3 is  not under 30 ;return #1 in both #4 and  #5 ;return name of #6,"[""SELECT['people']"", ""PROJECT['friends of #REF', '#1']"", ""PROJECT['ages of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is above 40']"", ""COMPARATIVE['#1', '#3', 'is not under 30']"", ""INTERSECTION['#1', '#4', '#5']"", ""PROJECT['name of #REF', '#6']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_4447,What are the names of the people who are older 40 but no friends under age 30?,return people ;return #1 who  are older than  40 ;return friends of #2 ;return ages of #3 ;return #2 where #4 is  at least 30 ;return names of #5,"[""SELECT['people']"", ""FILTER['#1', 'who are older than 40']"", ""PROJECT['friends of #REF', '#2']"", ""PROJECT['ages of #REF', '#3']"", ""COMPARATIVE['#2', '#4', 'is at least 30']"", ""PROJECT['names of #REF', '#5']""]","['select', 'filter', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_4448,Find the name of the person who has no student friends.,return people ;return friends of #1 ;return #2 who are students ;return number of  #3 for each #1 ;return #1 where #4 is  at least one ;return #1 besides #5 ;return the  name of #6,"[""SELECT['people']"", ""PROJECT['friends of #REF', '#1']"", ""FILTER['#2', 'who are students']"", ""GROUP['count', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is at least one']"", ""DISCARD['#1', '#5']"", ""PROJECT['the name of #REF', '#6']""]","['select', 'project', 'filter', 'group', 'comparative', 'discard', 'project']",train
SPIDER_train_4449,What are the names of the people who have no friends who are students?,return people ;return friends of #1 ;return #2 who are students ;return the  number of  #3 for each #1 ;return #1 where #4 is  zero ;return the  names of #5,"[""SELECT['people']"", ""PROJECT['friends of #REF', '#1']"", ""FILTER['#2', 'who are students']"", ""GROUP['count', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is zero']"", ""PROJECT['the names of #REF', '#5']""]","['select', 'project', 'filter', 'group', 'comparative', 'project']",train
SPIDER_train_445,Show all allergies and their types.,"return allergies ;return types of #1 ;return #1 ,  #2","[""SELECT['allergies']"", ""PROJECT['types of #REF', '#1']"", ""UNION['#1', '#2']""]","['select', 'project', 'union']",train
SPIDER_train_4450,Find the person who has exactly one friend.,return person ;return friends of  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  one,"[""SELECT['person']"", ""PROJECT['friends of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is one']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_4451,What are the names of everybody who has exactly one friend?,return everybody with exactly one friend ;return names of  #1,"[""SELECT['everybody with exactly one friend']"", ""PROJECT['names of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_4452,Who are the friends of Bob?,return friends ;return #1 of  Bob,"[""SELECT['friends']"", ""FILTER['#1', 'of Bob']""]","['select', 'filter']",train
SPIDER_train_4453,Who are Bob's friends?,return Bob ;return friends of  #1,"[""SELECT['Bob']"", ""PROJECT['friends of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_4454,Find the name of persons who are friends with Bob.,return Bob ;return friends of  #1 ;return names of  #2,"[""SELECT['Bob']"", ""PROJECT['friends of #REF', '#1']"", ""PROJECT['names of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_4455,What are the names of all of Bob's friends?,return Bob ;return friends of  #1 ;return names of  #2,"[""SELECT['Bob']"", ""PROJECT['friends of #REF', '#1']"", ""PROJECT['names of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_4456,Find the names of females who are friends with Zach,return females ;return #1 who  are  friends with  Zach ;return names of  #2,"[""SELECT['females']"", ""FILTER['#1', 'who are friends with Zach']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4457,What are the names of all females who are friends with Zach?,return females ;return friends of  #1 ;return #1 where #2 is  Zach ;return names of  #3,"[""SELECT['females']"", ""PROJECT['friends of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Zach']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4458,Find the female friends of Alice.,return friends ;return female #1 ;return #2 of  Alice,"[""SELECT['friends']"", ""PROJECT['female #REF', '#1']"", ""FILTER['#2', 'of Alice']""]","['select', 'project', 'filter']",train
SPIDER_train_4459,What are all the friends of Alice who are female?,return Alice ;return friends of  #1 ;return #2 who  are  female,"[""SELECT['Alice']"", ""PROJECT['friends of #REF', '#1']"", ""FILTER['#2', 'who are female']""]","['select', 'project', 'filter']",train
SPIDER_train_446,What are the allergies and their types?,"return allergies ;return types of  #1 ;return #1 ,  #2","[""SELECT['allergies']"", ""PROJECT['types of #REF', '#1']"", ""UNION['#1', '#2']""]","['select', 'project', 'union']",train
SPIDER_train_4460,Find the male friend of Alice whose job is a doctor?,return Alice ;return male friends of  #1 ;return jobs of  #2 ;return #2 where  #3 is  doctor,"[""SELECT['Alice']"", ""PROJECT['male friends of #REF', '#1']"", ""PROJECT['jobs of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is doctor']""]","['select', 'project', 'project', 'comparative']",train
SPIDER_train_4461,Who are the friends of Alice that are doctors?,return Alice ;return the  friends of #1 ;return #2 that  are doctors,"[""SELECT['Alice']"", ""PROJECT['the friends of #REF', '#1']"", ""FILTER['#2', 'that are doctors']""]","['select', 'project', 'filter']",train
SPIDER_train_4462,Who has a friend that is from new york city?,return new york city ;return friend from #1 ;return Who has #2,"[""SELECT['new york city']"", ""PROJECT['friend from #REF', '#1']"", ""PROJECT['Who has #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_4463,What are the names of all friends who are from New York?,return friends ;return #1 from  New York ;return names of  #2,"[""SELECT['friends']"", ""FILTER['#1', 'from New York']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4464,Who has friends that are younger than the average age?,return friends ;return ages of #1 ;return average of #2 ;return #1 where #2 is lower than #3 ;return who  has #4,"[""SELECT['friends']"", ""PROJECT['ages of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is lower than #3']"", ""PROJECT['who has #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_4465,What are the different names of friends who are younger than the average age for a friend?,return friends ;return ages of  #1 ;return average of  #2 ;return #1 where #2 is  lower than #3 ;return different names of  #4,"[""SELECT['friends']"", ""PROJECT['ages of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is lower than #3']"", ""PROJECT['different names of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_4466,Who has friends that are older than the average age? Print their friends and their ages as well,"return friends  ;return ages of #1 ;return average of #2 ;return #1 where #2 is  higher than #3 ;return ages of #4 ;return #4 ,  #5","[""SELECT['friends']"", ""PROJECT['ages of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['ages of #REF', '#4']"", ""UNION['#4', '#5']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'union']",train
SPIDER_train_4467,"Whare the names, friends, and ages of all people who are older than the average age of a person?","return people ;return the  ages of  #1 ;return the  average of  #2 ;return #1 where #2 are  higher than #3 ;return the  names of  #4 ;return the  friends of  #4 ;return the  ages of  #4 ;return #5 ,  #6 ,   #7","[""SELECT['people']"", ""PROJECT['the ages of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'are higher than #3']"", ""PROJECT['the names of #REF', '#4']"", ""PROJECT['the friends of #REF', '#4']"", ""PROJECT['the ages of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_4468,Who is the friend of Zach with longest year relationship?,return Zach ;return friends of #1 ;return relationship years of #2 ;return the  number of  #3 for each #2 ;return #2 where #4 is  the  highest,"[""SELECT['Zach']"", ""PROJECT['friends of #REF', '#1']"", ""PROJECT['relationship years of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""COMPARATIVE['#2', '#4', 'is the highest']""]","['select', 'project', 'project', 'group', 'comparative']",train
SPIDER_train_4469,Which friend of Zach has the longest-lasting friendship?,return Zach ;return friends of #1 ;return friendships of #2 ;return #2 where #3 is  longest-lasting,"[""SELECT['Zach']"", ""PROJECT['friends of #REF', '#1']"", ""PROJECT['friendships of #REF', '#2']"", ""SUPERLATIVE['max', '#2', '#3']""]","['select', 'project', 'project', 'superlative']",train
SPIDER_train_447,Show all allergies with type food.,return allergies ;return type of  #1 ;return #1 where #2 is  food,"[""SELECT['allergies']"", ""PROJECT['type of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is food']""]","['select', 'project', 'comparative']",train
SPIDER_train_4470,What is the age of the friend of Zach with longest year relationship?,return Zach ;return friends of  #1 ;return years of  relationship of #2 ;return #2 where #3 is  longest ;return age of  #4,"[""SELECT['Zach']"", ""PROJECT['friends of #REF', '#1']"", ""PROJECT['years of relationship of #REF', '#2']"", ""SUPERLATIVE['max', '#2', '#3']"", ""PROJECT['age of #REF', '#4']""]","['select', 'project', 'project', 'superlative', 'project']",train
SPIDER_train_4471,What are the ages of all of Zach's friends who are in the longest relationship?,return Zach ;return friends of #1 ;return relationships of #2 ;return #2 where #3 is  longest ;return ages of #4,"[""SELECT['Zach']"", ""PROJECT['friends of #REF', '#1']"", ""PROJECT['relationships of #REF', '#2']"", ""SUPERLATIVE['max', '#2', '#3']"", ""PROJECT['ages of #REF', '#4']""]","['select', 'project', 'project', 'superlative', 'project']",train
SPIDER_train_4472,Find the name of persons who are friends with Alice for the shortest years.,return Alice ;return friends of #1 ;return years of #2 ;return number of  #3 for each #2 ;return #2 where #4 is  the  shortest ;return names of #5,"[""SELECT['Alice']"", ""PROJECT['friends of #REF', '#1']"", ""PROJECT['years of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""COMPARATIVE['#2', '#4', 'is the shortest']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_4473,What are the names of all people who are friends with Alice for the shortest amount of time?,return Alice ;return friends of #1 ;return amounts of friend time of  #2 ;return #2 where #3 is the  lowest ;return names of #4,"[""SELECT['Alice']"", ""PROJECT['friends of #REF', '#1']"", ""PROJECT['amounts of friend time of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is the lowest']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_4474,"Find the name, age, and job title of persons who are friends with Alice for the longest years.","return Alice ;return friends of #1 ;return years of #2 ;return #2 where #3 is  longest ;return names of #4 ;return ages of #4 ;return job titles of #4 ;return #5 ,  #6 ,   #7","[""SELECT['Alice']"", ""PROJECT['friends of #REF', '#1']"", ""PROJECT['years of #REF', '#2']"", ""SUPERLATIVE['max', '#2', '#3']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['ages of #REF', '#4']"", ""PROJECT['job titles of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'project', 'superlative', 'project', 'project', 'project', 'union']",train
SPIDER_train_4476,Who is the person that has no friend?,return people ;return #1 that  has no friends,"[""SELECT['people']"", ""FILTER['#1', 'that has no friends']""]","['select', 'filter']",train
SPIDER_train_4477,What are the names of all people who do not have friends?,return people ;return #1 with friends ;return #1 besides  #2 ;return names of  #3,"[""SELECT['people']"", ""FILTER['#1', 'with friends']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_4478,Which person whose friends have the oldest average age?,return people ;return friends of #1 ;return ages of #2 ;return average of #3 for each #1 ;return #1 where #4 is highest,"[""SELECT['people']"", ""PROJECT['friends of #REF', '#1']"", ""PROJECT['ages of #REF', '#2']"", ""GROUP['avg', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']""]","['select', 'project', 'project', 'group', 'superlative']",train
SPIDER_train_4479,"What is the name of the person who has the oldest average age for their friends, and what is that average age?","return person ;return friends of  #1 ;return age  of  #2 ;return average  of  #3 ;return #1 where #4 is  oldest ;return name of  #5 ;return oldest of  #4 ;return #6 ,  #7","[""SELECT['person']"", ""PROJECT['friends of #REF', '#1']"", ""PROJECT['age of #REF', '#2']"", ""AGGREGATE['avg', '#3']"", ""COMPARATIVE['#1', '#4', 'is oldest']"", ""PROJECT['name of #REF', '#5']"", ""PROJECT['oldest of #REF', '#4']"", ""UNION['#6', '#7']""]","['select', 'project', 'project', 'aggregate', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_448,What are all the different food allergies?,return allergies ;return #1 of  food ;return number of  #2,"[""SELECT['allergies']"", ""FILTER['#1', 'of food']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_4480,What is the total number of people who has no friend living in the city of Austin.,return people ;return friends of #1 ;return cities #2 are living in ;return #1 where #3 is  not Austin ;return number of  #4,"[""SELECT['people']"", ""PROJECT['friends of #REF', '#1']"", ""PROJECT['cities #REF are living in', '#2']"", ""COMPARATIVE['#1', '#3', 'is not Austin']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'project', 'comparative', 'aggregate']",train
SPIDER_train_4481,What is the total number of people who have no friends living in Austin?,return people ;return friends of  #1 ;return #1 where #2 are  living in Austin ;return #1 besides  #3 ;return number of  #4,"[""SELECT['people']"", ""PROJECT['friends of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'are living in Austin']"", ""DISCARD['#1', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'comparative', 'discard', 'aggregate']",train
SPIDER_train_4482,Find Alice's friends of friends.,return friends  ;return #1 of  Alice ;return friends  of  #2,"[""SELECT['friends']"", ""FILTER['#1', 'of Alice']"", ""PROJECT['friends of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4483,What are the names of all of Alice's friends of friends?,return Alice ;return friends  of   #1 ;return friends  of   #2 ;return names of   #3,"[""SELECT['Alice']"", ""PROJECT['friends of #REF', '#1']"", ""PROJECT['friends of #REF', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'project', 'project']",train
SPIDER_train_4484,How many members are there?,return members ;return number of #1,"[""SELECT['members']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_4485,List the names of members in ascending alphabetical order.,return members ;return names of  #1 ;return #2 sorted by ascending alphabetical order,"[""SELECT['members']"", ""PROJECT['names of #REF', '#1']"", ""SORT['#2', '#2', 'ascending alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_4486,What are the names and countries of members?,"return members ;return names of  #1 ;return countries of  #1 ;return #2 ,  #3","[""SELECT['members']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['countries of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_4487,"Show the names of members whose country is ""United States"" or ""Canada"".",return members ;return countries of  #1 ;return #1 where #2 is  United States ;return #1 where #2 is  Canada ;return #3 or  #4 ;return names of  #5,"[""SELECT['members']"", ""PROJECT['countries of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is United States']"", ""COMPARATIVE['#1', '#2', 'is Canada']"", ""UNION['#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_4488,Show the different countries and the number of members from each.,return countries ;return members of #1 ;return number of  #2 for each #1,"[""SELECT['countries']"", ""PROJECT['members of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_4489,Show the most common country across members.,return countries ;return members in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['countries']"", ""PROJECT['members in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_449,What is the type of allergy Cat?,return allergy ;return #1 that  is  Cat ;return type of  #2,"[""SELECT['allergy']"", ""FILTER['#1', 'that is Cat']"", ""PROJECT['type of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4490,Which countries have more than two members?,return countries ;return members of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than two,"[""SELECT['countries']"", ""PROJECT['members of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than two']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_4491,Show the leader names and locations of colleges.,"return colleges ;return leaders of #1 ;return names of #2 ;return locations of #1 ;return #3 ,  #4","[""SELECT['colleges']"", ""PROJECT['leaders of #REF', '#1']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['locations of #REF', '#1']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_4492,Show the names of members and names of colleges they go to.,"return members ;return colleges of #1 ;return names of  #1 ;return names of #2 ;return #3 , #4","[""SELECT['members']"", ""PROJECT['colleges of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['names of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_4493,Show the names of members and the locations of colleges they go to in ascending alphabetical order of member names.,"return members ;return names of  #1 ;return colleges of  #2 ;return locations of  #3 ;return #2 ,  #4 ;return #5 sorted by #2 in ascending alphabetical order","[""SELECT['members']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['colleges of #REF', '#2']"", ""PROJECT['locations of #REF', '#3']"", ""UNION['#2', '#4']"", ""SORT['#5', '#2', 'in ascending alphabetical order']""]","['select', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_4494,"Show the distinct leader names of colleges associated with members from country ""Canada"".",return members ;return countries of  #1 ;return #1 where #2 is  Canada ;return colleges of  #3 ;return leaders of  #4 ;return names of  #5 ;return distinct #6,"[""SELECT['members']"", ""PROJECT['countries of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Canada']"", ""PROJECT['colleges of #REF', '#3']"", ""PROJECT['leaders of #REF', '#4']"", ""PROJECT['names of #REF', '#5']"", ""PROJECT['distinct #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'project']",train
SPIDER_train_4495,Show the names of members and the decoration themes they have.,"return members ;return names of  #1 ;return decoration themes of  #1 ;return #2 ,  #3","[""SELECT['members']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['decoration themes of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_4496,Show the names of members that have a rank in round higher than 3.,return members ;return rank in  round of #1 ;return #1 where #2 is higher than 3 ;return the  names of #3,"[""SELECT['members']"", ""PROJECT['rank in round of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 3']"", ""PROJECT['the names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4497,Show the names of members in ascending order of their rank in rounds.,return members ;return name of #1 ;return rank in  rounds of #1 ;return #2 sorted by #3,"[""SELECT['members']"", ""PROJECT['name of #REF', '#1']"", ""PROJECT['rank in rounds of #REF', '#1']"", ""SORT['#2', '#3']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_4498,List the names of members who did not participate in any round.,return members ;return rounds of #1 ;return number of  #2 for each #1 ;return #1 where #3 is higher than zero ;return names of #4,"[""SELECT['members']"", ""PROJECT['rounds of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than zero']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_4499,"Find the name and access counts of all documents, in alphabetic order of the document name.","return documents ;return names of  #1 ;return access counts of  #1 ;return #2 ,   #3 ;return #4 sorted by #2 in alphabetic order","[""SELECT['documents']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['access counts of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#4', '#2', 'in alphabetic order']""]","['select', 'project', 'project', 'union', 'sort']",train
SPIDER_train_45,"Return the different statuses of cities, ascending by frequency.",return cities ;return statuses of  #1 ;return different #2 ;return frequency of  #2 ;return #3 sorted by ascending #4,"[""SELECT['cities']"", ""PROJECT['statuses of #REF', '#1']"", ""PROJECT['different #REF', '#2']"", ""PROJECT['frequency of #REF', '#2']"", ""SORT['#3', '#4', 'ascending']""]","['select', 'project', 'project', 'project', 'sort']",train
SPIDER_train_450,What is allergy type of a cat allergy?,return allergies ;return allergy types of  #1 ;return #2 where #1 is  cat,"[""SELECT['allergies']"", ""PROJECT['allergy types of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is cat']""]","['select', 'project', 'comparative']",train
SPIDER_train_4500,"What are the names of all the documents, as well as the access counts of each, ordered alphabetically?","return documents ;return names of  #1 ;return access counts of  #1 ;return #2 ,  #3 ;return #4 ordered alphabetically","[""SELECT['documents']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['access counts of #REF', '#1']"", ""UNION['#2', '#3']"", ""FILTER['#4', 'ordered alphabetically']""]","['select', 'project', 'project', 'union', 'filter']",train
SPIDER_train_4501,"Find the name of the document that has been accessed the greatest number of times, as well as the count of how many times it has been accessed?","return documents ;return times accessed of   #1 ;return number of  #2 for each #1 ;return the  highest of   #3 ;return #1 where #3 is equal to #4 ;return name of   #5 ;return #6 ,  #4","[""SELECT['documents']"", ""PROJECT['times accessed of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['max', '#3']"", ""COMPARATIVE['#1', '#3', 'is equal to #4']"", ""PROJECT['name of #REF', '#5']"", ""UNION['#6', '#4']""]","['select', 'project', 'group', 'aggregate', 'comparative', 'project', 'union']",train
SPIDER_train_4502,"What is the name of the document which has been accessed the most times, as well as the number of times it has been accessed?","return times accessed  ;return number of  #1 for each  document ;return highest of  #2 ;return document where times accessed  equal #3 ;return name of  #4 ;return #5 ,  #3","[""SELECT['times accessed']"", ""PROJECT['document', '#1']"", ""GROUP['count', '#1', '#2']"", ""AGGREGATE['max', '#3']"", ""PROJECT['document where times accessed equal #REF', '#4']"", ""PROJECT['name of #REF', '#5']"", ""UNION['#6', '#4']""]","['select', 'project', 'group', 'aggregate', 'project', 'project', 'union']",train
SPIDER_train_4503,Find the types of documents with more than 4 documents.,return types of  documents  ;return documents  of  #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is higher than 4,"[""SELECT['types of documents']"", ""PROJECT['documents of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 4']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_4504,What are the codes of types of documents of which there are for or more?,return types of   documents ;return documents of   #1 ;return number of  #2 for each #1 ;return #1 where #3 is  at least for ;return codes of   #4,"[""SELECT['types of documents']"", ""PROJECT['documents of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least for']"", ""PROJECT['codes of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_4505,Find the total access count of all documents in the most popular document type.,return documents ;return types of #1 ;return number of  #1 for each #2 ;return #2 where #3 is  the  highest ;return #1 where #2 is  #4 ;return access counts of #5 ;return sum of #6,"[""SELECT['documents']"", ""PROJECT['types of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""COMPARATIVE['#2', '#3', 'is the highest']"", ""COMPARATIVE['#1', '#2', 'is #4']"", ""PROJECT['access counts of #REF', '#5']"", ""AGGREGATE['sum', '#6']""]","['select', 'project', 'group', 'comparative', 'comparative', 'project', 'aggregate']",train
SPIDER_train_4506,What is the total access count of documents that are of the most common document type?,return document types ;return documents of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest ;return documents of #4 ;return access counts of #5 ;return sum of #6,"[""SELECT['document types']"", ""PROJECT['documents of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['documents of #REF', '#4']"", ""PROJECT['access counts of #REF', '#5']"", ""AGGREGATE['sum', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'aggregate']",train
SPIDER_train_4507,What is the average access count of documents?,return documents ;return access counts of  #1 ;return average of  #2,"[""SELECT['documents']"", ""PROJECT['access counts of #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_4508,Find the average access count across all documents?,return documents ;return access counts of #1 ;return average of #2,"[""SELECT['documents']"", ""PROJECT['access counts of #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_4509,What is the structure of the document with the least number of accesses?,return documents ;return accesses of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  lowest ;return structure of #4,"[""SELECT['documents']"", ""PROJECT['accesses of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['structure of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_451,How many allergies have type animal?,return allergies ;return #1 with  type animal ;return number of #2,"[""SELECT['allergies']"", ""FILTER['#1', 'with type animal']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_4510,Return the structure description of the document that has been accessed the fewest number of times.,return documents ;return times #1 has  been accessed ;return #1 where #2 is  lowest ;return structure description of  #3,"[""SELECT['documents']"", ""PROJECT['times #REF has been accessed', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""PROJECT['structure description of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_4511,"What is the type of the document named ""David CV""?",return documents ;return #1 named David CV ;return type of #2,"[""SELECT['documents']"", ""FILTER['#1', 'named David CV']"", ""PROJECT['type of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4512,"Return the type code of the document named ""David CV"".",return documents ;return #1 named David CV ;return type code of  #2,"[""SELECT['documents']"", ""FILTER['#1', 'named David CV']"", ""PROJECT['type code of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4513,Find the list of documents that are both in the most three popular type and have the most three popular structure.,return documents ;return types of #1 ;return structures of #1 ;return how popular  #2 is  ;return how popular  #3 is  ;return three  most of #4 ;return three  most of #5 ;return #1 in both #6 and #7,"[""SELECT['documents']"", ""PROJECT['types of #REF', '#1']"", ""PROJECT['structures of #REF', '#1']"", ""PROJECT['how popular #REF is', '#2']"", ""PROJECT['how popular #REF is', '#3']"", ""PROJECT['three most of #REF', '#4']"", ""PROJECT['three most of #REF', '#5']"", ""INTERSECTION['#1', '#6', '#7']""]","['select', 'project', 'project', 'project', 'project', 'project', 'project', 'intersection']",train
SPIDER_train_4514,What are the names of documents that have both one of the three most common types and one of three most common structures?,return documents ;return type of   #1 ;return structures of   #1 ;return three  most common #2 ;return three  most common #3 ;return #1 in both #4 and #5 ;return names of   #6,"[""SELECT['documents']"", ""PROJECT['type of #REF', '#1']"", ""PROJECT['structures of #REF', '#1']"", ""PROJECT['three most common #REF', '#2']"", ""PROJECT['three most common #REF', '#3']"", ""INTERSECTION['#1', '#4', '#5']"", ""PROJECT['names of #REF', '#6']""]","['select', 'project', 'project', 'project', 'project', 'intersection', 'project']",train
SPIDER_train_4515,What document types do have more than 10000 total access number.,return document types ;return access numbers of  #1 ;return #1 where #2 is  higher than 10000,"[""SELECT['document types']"", ""PROJECT['access numbers of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 10000']""]","['select', 'project', 'comparative']",train
SPIDER_train_4516,Return the codes of the document types that do not have a total access count of over 10000.,return document types ;return access counts of #1 ;return #1 where #2 is  at most 10000 ;return codes of #3,"[""SELECT['document types']"", ""PROJECT['access counts of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at most 10000']"", ""PROJECT['codes of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4517,"What are all the section titles of the document named ""David CV""?",return documents ;return #1 named David CV ;return section titles of  #2,"[""SELECT['documents']"", ""FILTER['#1', 'named David CV']"", ""PROJECT['section titles of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4518,"Give the section titles of the document with the name ""David CV"".",return documents ;return names of  #1 ;return #1 where #2 is  David CV ;return sections of  #3 ;return titles of  #4,"[""SELECT['documents']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is David CV']"", ""PROJECT['sections of #REF', '#3']"", ""PROJECT['titles of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_4519,Find all the name of documents without any sections.,return all the documents ;return #1 without sections ;return all the names of  #2,"[""SELECT['all the documents']"", ""FILTER['#1', 'without sections']"", ""PROJECT['all the names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_452,How many animal type allergies exist?,return allergies ;return types of  #1 ;return #1 where  #2 is  animal ;return number of #3,"[""SELECT['allergies']"", ""PROJECT['types of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is animal']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_4520,What are the names of documents that do not have any sections?,return documents ;return #1 with sections ;return #1 besides  #2 ;return names of  #3,"[""SELECT['documents']"", ""FILTER['#1', 'with sections']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_4521,List all the username and passwords of users with the most popular role.,"return users ;return roles of  #1 ;return #1 where  #2 is most popular ;return usernames of  #3 ;return passwords of  #3 ;return #4 ,  #5","[""SELECT['users']"", ""PROJECT['roles of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['usernames of #REF', '#3']"", ""PROJECT['passwords of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_4522,What are the usernames and passwords of users that have the most common role?,"return roles ;return users of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest ;return users of #4 ;return usernames of #5 ;return passwords of #5 ;return #6 ,  #7","[""SELECT['roles']"", ""PROJECT['users of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['users of #REF', '#4']"", ""PROJECT['usernames of #REF', '#5']"", ""PROJECT['passwords of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'project', 'union']",train
SPIDER_train_4523,"Find the average access counts of documents with functional area ""Acknowledgement"".",return documents ;return functional areas of #1 ;return #1 where #2 is Acknowledgement ;return access counts of #3 ;return average of #4,"[""SELECT['documents']"", ""PROJECT['functional areas of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Acknowledgement']"", ""PROJECT['access counts of #REF', '#3']"", ""AGGREGATE['avg', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_4524,"What are the average access counts of documents that have the functional area description ""Acknowledgement""?",return documents ;return functional area descriptions of  #1 ;return #1 where #2 is  Acknowledgement ;return access counts of  #3 ;return average of  #4,"[""SELECT['documents']"", ""PROJECT['functional area descriptions of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Acknowledgement']"", ""PROJECT['access counts of #REF', '#3']"", ""AGGREGATE['avg', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_4525,Find names of the document without any images.,return document ;return #1 without any images ;return names of  #2,"[""SELECT['document']"", ""FILTER['#1', 'without any images']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4526,What are the names of documents that do not have any images?,return documents ;return #1 that  do not  have  images ;return names of  #2,"[""SELECT['documents']"", ""FILTER['#1', 'that do not have images']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4527,What is the name of the document with the most number of sections?,return documents ;return sections of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return name of  #4,"[""SELECT['documents']"", ""PROJECT['sections of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_4528,Return the name of the document that has the most sections.,return documents ;return sections of #1 ;return number of  #2 for each #1 ;return #1 where #3 is highest ;return name of #4,"[""SELECT['documents']"", ""PROJECT['sections of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_4529,"List all the document names which contains ""CV"".",return documents ;return names of #1 ;return #2 that  contain CV,"[""SELECT['documents']"", ""PROJECT['names of #REF', '#1']"", ""FILTER['#2', 'that contain CV']""]","['select', 'project', 'filter']",train
SPIDER_train_453,Show all allergy types and the number of allergies in each type.,return allergies ;return type of #1 ;return number of  #1 for each  #2,"[""SELECT['allergies']"", ""PROJECT['type of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""UNION['#2', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_4530,"What are the names of documents that contain the substring ""CV""?",return documents ;return #1 that  contain substring CV ;return names of  #2,"[""SELECT['documents']"", ""FILTER['#1', 'that contain substring CV']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4531,How many users are logged in?,return users ;return #1 that  are  logged in ;return number of  #2,"[""SELECT['users']"", ""FILTER['#1', 'that are logged in']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_4532,Count the number of users that are logged in.,return users ;return #1 that  are  logged in ;return number of  #2,"[""SELECT['users']"", ""FILTER['#1', 'that are logged in']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_4533,Find the description of the most popular role among the users that have logged in.,return users ;return #1 that have logged in  ;return roles of #2 ;return number of  #2 for each #3 ;return #3 where #4 is the  highest ;return the  description of #5,"[""SELECT['users']"", ""FILTER['#1', 'that have logged in']"", ""PROJECT['roles of #REF', '#2']"", ""GROUP['count', '#2', '#3']"", ""COMPARATIVE['#3', '#4', 'is the highest']"", ""PROJECT['the description of #REF', '#5']""]","['select', 'filter', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_4534,What is the description of the most popular role among users that have logged in?,return users ;return #1 that  have logged in ;return roles of #2 ;return the  number of  #2 for each #3 ;return #3 where #4 is  the  highest ;return the  description of #5,"[""SELECT['users']"", ""FILTER['#1', 'that have logged in']"", ""PROJECT['roles of #REF', '#2']"", ""GROUP['count', '#2', '#3']"", ""COMPARATIVE['#3', '#4', 'is the highest']"", ""PROJECT['the description of #REF', '#5']""]","['select', 'filter', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_4535,Find the average access count of documents with the least popular structure.,return documents ;return structures of  #1 ;return #1 where #2 is  least popular ;return access counts of  #3 ;return average of  #4,"[""SELECT['documents']"", ""PROJECT['structures of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""PROJECT['access counts of #REF', '#3']"", ""AGGREGATE['avg', '#4']""]","['select', 'project', 'superlative', 'project', 'aggregate']",train
SPIDER_train_4536,What is the average access count of documents that have the least common structure?,return documents ;return structures of  #1 ;return #1 where #2 is  the  least common ;return the  access count of  #3 ;return the  average of  #4,"[""SELECT['documents']"", ""PROJECT['structures of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the least common']"", ""PROJECT['the access count of #REF', '#3']"", ""AGGREGATE['avg', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_4537,List all the image name and URLs in the order of their names.,"return image names ;return URLs of  #1 ;return #1 ,  #2 ;return #3 sorted by #1","[""SELECT['image names']"", ""PROJECT['URLs of #REF', '#1']"", ""UNION['#1', '#2']"", ""SORT['#3', '#1']""]","['select', 'project', 'union', 'sort']",train
SPIDER_train_4538,"What are the names and urls of images, sorted alphabetically?","return images ;return names of  #1 ;return urls of  #1 ;return #2 ,  #3 ;return #4 sorted alphabetically","[""SELECT['images']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['urls of #REF', '#1']"", ""UNION['#2', '#3']"", ""FILTER['#4', 'sorted alphabetically']""]","['select', 'project', 'project', 'union', 'filter']",train
SPIDER_train_4539,Find the number of users in each role.,return roles ;return users of #1 ;return number of  #2 for each #1,"[""SELECT['roles']"", ""PROJECT['users of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_454,What are the allergy types and how many allergies correspond to each one?,"return allergies ;return types of  #1 ;return number of  #1 for each  #2 ;return #2 ,  #3","[""SELECT['allergies']"", ""PROJECT['types of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""UNION['#2', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_4540,"What are the different role codes for users, and how many users have each?","return users ;return different role codes of  #1 ;return users with #2 ;return number of  #3 for each  #2 ;return #2 ,  #4","[""SELECT['users']"", ""PROJECT['different role codes of #REF', '#1']"", ""PROJECT['users with #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_4541,What document types have more than 2 corresponding documents?,return document types ;return documents that  correspond to #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than 2,"[""SELECT['document types']"", ""PROJECT['documents that correspond to #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 2']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_4542,Give the codes of document types that have more than 2 corresponding documents.,return document types ;return documents corresponding to  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  higher than 2 ;return codes of  #4,"[""SELECT['document types']"", ""PROJECT['documents corresponding to #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 2']"", ""PROJECT['codes of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_4543,How many companies are there?,return companies ;return number of #1,"[""SELECT['companies']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_4544,Count the number of companies.,return companies ;return the number of  #1,"[""SELECT['companies']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_4545,List the names of companies in descending order of market value.,return companies ;return names of  #1 ;return market values of  #1 ;return #2 sorted by #3 in descending order,"[""SELECT['companies']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['market values of #REF', '#1']"", ""SORT['#2', '#3', 'in descending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_4546,Sort the company names in descending order of the company's market value.,return companies ;return names of  #1 ;return market values of  #1 ;return #2 sorted by #3 in descending order,"[""SELECT['companies']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['market values of #REF', '#1']"", ""SORT['#2', '#3', 'in descending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_4547,"What are the names of companies whose headquarters are not ""USA""?",return companies ;return headquarters of  #1 ;return #1 where #2 is  not  USA ;return names of  #3,"[""SELECT['companies']"", ""PROJECT['headquarters of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not USA']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4548,"Find the names of the companies whose headquarters are not located in ""USA"".",return companies ;return headquarters of  #1 ;return #1 where  #2 is  not  located in USA ;return names of  #3,"[""SELECT['companies']"", ""PROJECT['headquarters of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not located in USA']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4549,"What are the name and assets of each company, sorted in ascending order of company name?","return companies ;return names of #1 ;return assets of #1 ;return #2 ,  #3 ;return #4 sorted by #2 in  ascending order","[""SELECT['companies']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['assets of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#4', '#2', 'in ascending order']""]","['select', 'project', 'project', 'union', 'sort']",train
SPIDER_train_455,Which allergy type has most number of allergies?,return allergy types ;return allergies of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['allergy types']"", ""PROJECT['allergies of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_4550,List the name and assets of each company in ascending order of company name.,"return companies ;return names of  #1 ;return assets of  #1 ;return #2 ,  #3 ;return #4 sorted by #2 in ascending order","[""SELECT['companies']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['assets of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#4', '#2', 'in ascending order']""]","['select', 'project', 'project', 'union', 'sort']",train
SPIDER_train_4551,What are the average profits of companies?,return companies ;return profits of  #1 ;return average of  #2,"[""SELECT['companies']"", ""PROJECT['profits of #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_4552,Compute the average profits companies make.,return companies ;return #1 profits ;return the average of  #2,"[""SELECT['companies']"", ""FILTER['#1', 'profits']"", ""AGGREGATE['avg', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_4553,"What are the maximum and minimum sales of the companies whose industries are not ""Banking"".","return companies ;return industries of #1 ;return #1 where #2 is  Banking ;return #1 besides #3 ;return sales of #4 ;return the  highest #5 for each #4 ;return the  lowest #5 for each #4 ;return #6 ,  #7","[""SELECT['companies']"", ""PROJECT['industries of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Banking']"", ""DISCARD['#1', '#3']"", ""PROJECT['sales of #REF', '#4']"", ""GROUP['max', '#5', '#4']"", ""GROUP['min', '#5', '#4']"", ""UNION['#6', '#7']""]","['select', 'project', 'comparative', 'discard', 'project', 'group', 'group', 'union']",train
SPIDER_train_4554,"Find the maximum and minimum sales of the companies that are not in the ""Banking"" industry.","return companies ;return industries of #1 ;return #1 where #2 is Banking ;return #1 besides  #3 ;return sales of #4 ;return maximum of #5 ;return minimum of #5 ;return #6 ,  #7","[""SELECT['companies']"", ""PROJECT['industries of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Banking']"", ""DISCARD['#1', '#3']"", ""PROJECT['sales of #REF', '#4']"", ""AGGREGATE['max', '#5']"", ""AGGREGATE['min', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'comparative', 'discard', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_4555,How many different industries are the companies in?,return companies ;return industries of #1 ;return different #2 ;return number of  #3,"[""SELECT['companies']"", ""PROJECT['industries of #REF', '#1']"", ""PROJECT['different #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_4556,Count the number of distinct company industries.,return companies ;return distinct industries of  #1,"[""SELECT['companies']"", ""PROJECT['distinct industries of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_4557,List the names of buildings in descending order of building height.,return buildings ;return names of  #1 ;return building heights of  #1 ;return #2 sorted by #3 in descending order,"[""SELECT['buildings']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['building heights of #REF', '#1']"", ""SORT['#2', '#3', 'in descending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_4558,What are the names of buildings sorted in descending order of building height?,return buildings ;return #1 sorted by descending order of  height ;return names of  #2,"[""SELECT['buildings']"", ""SORT['#1', '#1', 'descending order of height']"", ""PROJECT['names of #REF', '#2']""]","['select', 'sort', 'project']",train
SPIDER_train_4559,Find the stories of the building with the largest height.,return buildings ;return heights of  #1 ;return #1 where  #2 is  highest ;return stories of  #3,"[""SELECT['buildings']"", ""PROJECT['heights of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['stories of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_456,Which allergy type is most common?,return allergy types ;return #1 that  is  the  most common,"[""SELECT['allergy types']"", ""FILTER['#1', 'that is the most common']""]","['select', 'filter']",train
SPIDER_train_4560,What is the stories of highest building?,return buildings ;return #1 that  is  highest ;return stories of #2 ;return number of  #3,"[""SELECT['buildings']"", ""FILTER['#1', 'that is highest']"", ""PROJECT['stories of #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_4561,List the name of a building along with the name of a company whose office is in the building.,"return building ;return company whose office is in the   #1 ;return name  of  #2 ;return name  of  #1 ;return #4 ,  #3","[""SELECT['building']"", ""PROJECT['company whose office is in the #REF', '#1']"", ""PROJECT['name of #REF', '#2']"", ""PROJECT['name of #REF', '#1']"", ""UNION['#4', '#3']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_4562,"For each company, return the company name and the name of the building its office is located in.","return companies ;return names of  #1 ;return offices of  #1 ;return buildings of  #3 ;return names of  #4 ;return #2 ,   #5","[""SELECT['companies']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['offices of #REF', '#1']"", ""PROJECT['buildings of #REF', '#3']"", ""PROJECT['names of #REF', '#4']"", ""UNION['#2', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_4563,Show the names of the buildings that have more than one company offices.,return buildings ;return company offices of #1 ;return the  number of  #2 for each #1 ;return #1 where #3 is  more than  one ;return the  names of  #4,"[""SELECT['buildings']"", ""PROJECT['company offices of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than one']"", ""PROJECT['the names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_4564,Which buildings have more than one company offices? Give me the building names.,return buildings ;return company offices of #1 ;return number of #2 for each #1 ;return #1 where #3 is higher than one ;return names of #4,"[""SELECT['buildings']"", ""PROJECT['company offices of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than one']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_4565,Show the name of the building that has the most company offices.,return buildings ;return company offices in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return name of  #4,"[""SELECT['buildings']"", ""PROJECT['company offices in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_4566,Which building has the largest number of company offices? Give me the building name.,return buildings ;return company offices in #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest ;return name of #4,"[""SELECT['buildings']"", ""PROJECT['company offices in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_4567,"Please show the names of the buildings whose status is ""on-hold"", in ascending order of stories.",return buildings ;return statuses of  #1 ;return #1 where  #2 is on-hold ;return stories of  #3 ;return names of  #3 ;return #5 sorted by #4 in ascending order,"[""SELECT['buildings']"", ""PROJECT['statuses of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is on-hold']"", ""PROJECT['stories of #REF', '#3']"", ""PROJECT['names of #REF', '#3']"", ""SORT['#5', '#4', 'in ascending order']""]","['select', 'project', 'comparative', 'project', 'project', 'sort']",train
SPIDER_train_4568,"Find the names of the buildings in ""on-hold"" status, and sort them in ascending order of building stories.",return buildings ;return statuses of #1 ;return #1 where #2 is on-hold ;return names of #3 ;return stories of #3 ;return number of  #5 for each #3 ;return #4 sorted by #6 in  ascending order,"[""SELECT['buildings']"", ""PROJECT['statuses of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is on-hold']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['stories of #REF', '#3']"", ""GROUP['count', '#5', '#3']"", ""SORT['#4', '#6', 'in ascending order']""]","['select', 'project', 'comparative', 'project', 'project', 'group', 'sort']",train
SPIDER_train_4569,Please show each industry and the corresponding number of companies in that industry.,"return industries ;return companies in #1 ;return number of  #2 for each  #1 ;return #1 ,  #3","[""SELECT['industries']"", ""PROJECT['companies in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_457,Which allergy type has least number of allergies?,return allergies ;return types of #1 ;return number of  #1 for each #2 ;return #2 where #3 is  the  least,"[""SELECT['allergies']"", ""PROJECT['types of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""COMPARATIVE['#2', '#3', 'is the least']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_4570,Whah are the name of each industry and the number of companies in that industry?,"return industries ;return names of  #1 ;return companies in #1 ;return number of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['industries']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['companies in #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_4571,Please show the industries of companies in descending order of the number of companies.,return industries ;return companies  of  #1 ;return number of  #2 for each  #1 ;return #1 sorted by #3 in descending order,"[""SELECT['industries']"", ""PROJECT['companies of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SORT['#1', '#3', 'in descending order']""]","['select', 'project', 'group', 'sort']",train
SPIDER_train_4572,Sort all the industries in descending order of the count of companies in each industry,return industries ;return companies in #1 ;return number of  #2 for each  #1 ;return #1 sorted by #3 in descending order,"[""SELECT['industries']"", ""PROJECT['companies in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SORT['#1', '#3', 'in descending order']""]","['select', 'project', 'group', 'sort']",train
SPIDER_train_4573,List the industry shared by the most companies.,return industries ;return companies in #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is highest,"[""SELECT['industries']"", ""PROJECT['companies in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_4574,Which industry has the most companies?,return industries ;return companies of #1 ;return the  number of  #2 for each #1 ;return #1 where #3 is  the  highest,"[""SELECT['industries']"", ""PROJECT['companies of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_4575,List the names of buildings that have no company office.,return buildings ;return #1 with  no company office ;return names of #2,"[""SELECT['buildings']"", ""FILTER['#1', 'with no company office']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4576,Which buildings do not have any company office? Give me the building names.,return buildings ;return #1 not  have  company office ;return names of  #2,"[""SELECT['buildings']"", ""FILTER['#1', 'not have company office']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4577,"Show the industries shared by companies whose headquarters are ""USA"" and companies whose headquarters are ""China"".",return companies  ;return #1 whose headquarters are  USA ;return #1 whose headquarters are  China ;return industries of #1 ;return #4 of both #2 and  #3,"[""SELECT['companies']"", ""FILTER['#1', 'whose headquarters are USA']"", ""FILTER['#1', 'whose headquarters are China']"", ""PROJECT['industries of #REF', '#1']"", ""INTERSECTION['#4', '#2', '#3']""]","['select', 'filter', 'filter', 'project', 'intersection']",train
SPIDER_train_4578,"Which industries have both companies with headquarter in ""USA"" and companies with headquarter in ""China""?",return industries ;return companies of #1 ;return headquarters of #2 ;return #1 where #3 is in  USA ;return #1 where #3 is in  China ;return #1 in  both #4 and  #5,"[""SELECT['industries']"", ""PROJECT['companies of #REF', '#1']"", ""PROJECT['headquarters of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is in USA']"", ""COMPARATIVE['#1', '#3', 'is in China']"", ""INTERSECTION['#1', '#4', '#5']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection']",train
SPIDER_train_4579,"Find the number of companies whose industry is ""Banking"" or ""Conglomerate"",",return companies ;return industry of  #1 ;return #1 where  #2 is  Banking or  Conglomerate ;return number of #3,"[""SELECT['companies']"", ""PROJECT['industry of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Banking or Conglomerate']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_458,Which allergy type is the least common?,return allergy types ;return the  least common #1,"[""SELECT['allergy types']"", ""PROJECT['the least common #REF', '#1']""]","['select', 'project']",train
SPIDER_train_4580,"How many companies are in either ""Banking"" industry or ""Conglomerate"" industry?",return companies ;return industries of  #1 ;return #1 where  #2 is  Banking ;return #1 where  #2 is  Conglomerate ;return #3 or  #4 ;return number of #5,"[""SELECT['companies']"", ""PROJECT['industries of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Banking']"", ""COMPARATIVE['#1', '#2', 'is Conglomerate']"", ""UNION['#3', '#4']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'aggregate']",train
SPIDER_train_4581,Show the headquarters shared by more than two companies.,return headquarters ;return companies in #1 ;return number of #2 for each #1 ;return #1 where #3 is  higher than two,"[""SELECT['headquarters']"", ""PROJECT['companies in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than two']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_4582,Which headquarter locations are used by more than 2 companies?,return headquarters ;return companies that  #1 are used by ;return the  number of  #2 for each #1 ;return #1 where #3 is  more than  2 ;return the  locations of #4,"[""SELECT['headquarters']"", ""PROJECT['companies that #REF are used by', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than 2']"", ""PROJECT['the locations of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_4584,List the name of products in ascending order of price.,return products ;return names of  #1 ;return prices of  #1 ;return #2 sorted by #3 in ascending order,"[""SELECT['products']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['prices of #REF', '#1']"", ""SORT['#2', '#3', 'in ascending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_4585,What are the names and type codes of products?,"return products ;return names of #1 ;return type codes of #1 ;return #2 ,  #3","[""SELECT['products']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['type codes of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_4586,"Show the prices of the products named ""Dining"" or ""Trading Policy"".",return products ;return #1 named Dining ;return #1 named Trading Policy ;return #2 or  #3 ;return the  prices of  #4,"[""SELECT['products']"", ""FILTER['#1', 'named Dining']"", ""FILTER['#1', 'named Trading Policy']"", ""UNION['#2', '#3']"", ""PROJECT['the prices of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_4587,What is the average price for products?,return products ;return prices of  #1 ;return average of  #2,"[""SELECT['products']"", ""PROJECT['prices of #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_4588,What is the name of the product with the highest price?,return products ;return prices of #1 ;return #1 where #2 is  the   highest ;return the   name of #3,"[""SELECT['products']"", ""PROJECT['prices of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the highest']"", ""PROJECT['the name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4589,Show different type codes of products and the number of products with each type code.,"return type  codes ;return different #1 ;return products  with #2 ;return number of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['type codes']"", ""PROJECT['different #REF', '#1']"", ""PROJECT['products with #REF', '#2']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_459,How many students are there?,return students ;return number of  #1,"[""SELECT['students']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_4590,Show the most common type code across products.,return type codes ;return products of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['type codes']"", ""PROJECT['products of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_4591,Show the product type codes that have at least two products.,return product type codes ;return products with #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least two,"[""SELECT['product type codes']"", ""PROJECT['products with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_4592,Show the product type codes that have both products with price higher than 4500 and products with price lower than 3000.,return products ;return #1 with  price higher than 4500 ;return #1 with price lower than 3000 ;return the  product type codes of #1 ;return #4 of both #2 and  #3,"[""SELECT['products']"", ""FILTER['#1', 'with price higher than 4500']"", ""FILTER['#1', 'with price lower than 3000']"", ""PROJECT['the product type codes of #REF', '#1']"", ""INTERSECTION['#4', '#2', '#3']""]","['select', 'filter', 'filter', 'project', 'intersection']",train
SPIDER_train_4593,Show the names of products and the number of events they are in.,"return products ;return names of  #1 ;return events #1 are  in ;return number of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['products']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['events #REF are in', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_4594,"Show the names of products and the number of events they are in, sorted by the number of events in descending order.","return products ;return names of  #1 ;return the  number of  events  #1 are  in ;return #2 ,  #3 ;return #4 sorted by descending order","[""SELECT['products']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['events #REF are in', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']"", ""SORT['#5', '#5', 'descending order']""]","['select', 'project', 'project', 'group', 'union', 'sort']",train
SPIDER_train_4595,Show the names of products that are in at least two events.,return products ;return events ;return number of  #2 for each  #1 ;return #1 where #3 is  at least two ;return names of #4,"[""SELECT['products']"", ""SELECT['events']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""PROJECT['names of #REF', '#4']""]","['select', 'select', 'group', 'comparative', 'project']",train
SPIDER_train_4596,Show the names of products that are in at least two events in ascending alphabetical order of product name.,return products ;return events #1 are  in ;return number of  #2 for each  #1 ;return #1 where #3 is  at least two ;return names of  #4 ;return #5 sorted by alphabetical order,"[""SELECT['products']"", ""PROJECT['events #REF are in', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""PROJECT['names of #REF', '#4']"", ""SORT['#5', '#5', 'alphabetical order']""]","['select', 'project', 'group', 'comparative', 'project', 'sort']",train
SPIDER_train_4597,List the names of products that are not in any event.,return events ;return products of #1 ;return products besides  #2 ;return names of #3,"[""SELECT['events']"", ""PROJECT['products of #REF', '#1']"", ""SELECT['products']"", ""DISCARD['#3', '#2']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'select', 'discard', 'project']",train
SPIDER_train_4598,How many artworks are there?,return artworks ;return number of #1,"[""SELECT['artworks']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_4599,List the name of artworks in ascending alphabetical order.,return artworks ;return names of  #1 ;return #2 sorted by alphabetical order,"[""SELECT['artworks']"", ""PROJECT['names of #REF', '#1']"", ""SORT['#2', '#2', 'alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_46,List the most common type of Status across cities.,return cities ;return Status of #1 ;return types of #2 ;return number of  #1 for each #3 ;return #3 where #4 is  the  highest,"[""SELECT['cities']"", ""PROJECT['Status of #REF', '#1']"", ""PROJECT['types of #REF', '#2']"", ""GROUP['count', '#1', '#3']"", ""COMPARATIVE['#3', '#4', 'is the highest']""]","['select', 'project', 'project', 'group', 'comparative']",train
SPIDER_train_460,What is the total number of students?,return students ;return number of  #1,"[""SELECT['students']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_4600,"List the name of artworks whose type is not ""Program Talent Show"".",return artworks ;return types of  #1 ;return #1 where  #2 is Program Talent Show ;return #1 besides #3 ;return names of  #4,"[""SELECT['artworks']"", ""PROJECT['types of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Program Talent Show']"", ""DISCARD['#1', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'comparative', 'discard', 'project']",train
SPIDER_train_4601,What are the names and locations of festivals?,"return festivals ;return names of  #1 ;return locations of  #1 ;return #2 ,  #3","[""SELECT['festivals']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['locations of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_4602,"What are the names of the chairs of festivals, sorted in ascending order of the year held?",return chairs of  festivals ;return the  names of  #1 ;return the  years held of  #1 ;return #2 sorted by #3,"[""SELECT['chairs of festivals']"", ""PROJECT['the names of #REF', '#1']"", ""PROJECT['the years held of #REF', '#1']"", ""SORT['#2', '#3']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_4603,What is the location of the festival with the largest number of audience?,return festivals ;return audiences of #1 ;return number of #2 for each #1 ;return #1 where #3 is  highest ;return location of #4,"[""SELECT['festivals']"", ""PROJECT['audiences of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['location of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_4604,What are the names of festivals held in year 2007?,return festivals ;return years held of  #1 ;return #1 where #2 is  2007 ;return names of  #3,"[""SELECT['festivals']"", ""PROJECT['years held of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 2007']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4605,What is the average number of audience for festivals?,return festivals ;return audiences of #1 ;return number of  #2 for each #1 ;return average of #3,"[""SELECT['festivals']"", ""PROJECT['audiences of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['avg', '#3']""]","['select', 'project', 'group', 'aggregate']",train
SPIDER_train_4606,Show the names of the three most recent festivals.,return festivals ;return the  three most recent of  #1 ;return the  names of  #2,"[""SELECT['festivals']"", ""PROJECT['the three most recent of #REF', '#1']"", ""PROJECT['the names of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_4607,"For each nomination, show the name of the artwork and name of the festival where it is nominated.","return nominations ;return artworks of  #1 ;return names of  #2 ;return festivals where #1 are  nominated ;return names of  #4 ;return #3 ,  #5","[""SELECT['nominations']"", ""PROJECT['artworks of #REF', '#1']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['festivals where #REF are nominated', '#1']"", ""PROJECT['names of #REF', '#4']"", ""UNION['#3', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_4608,Show distinct types of artworks that are nominated in festivals in 2007.,return artworks ;return #1 nominated in festivals ;return #2 in 2007 ;return types of  #3,"[""SELECT['artworks']"", ""FILTER['#1', 'nominated in festivals']"", ""FILTER['#2', 'in 2007']"", ""PROJECT['types of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_4609,Show the names of artworks in ascending order of the year they are nominated in.,return artworks ;return year they are  nominated of  #1 ;return #1 sorted by #2 in ascending order,"[""SELECT['artworks']"", ""PROJECT['year they are nominated of #REF', '#1']"", ""SORT['#1', '#2', 'in ascending order']""]","['select', 'project', 'sort']",train
SPIDER_train_461,Show first name and last name for all students.,"return students ;return first names of #1 ;return last names of #1 ;return #2 , #3","[""SELECT['students']"", ""PROJECT['first names of #REF', '#1']"", ""PROJECT['last names of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_4610,"Show the names of festivals that have nominated artworks of type ""Program Talent Show"".",return festivals ;return #1 that have nominated artworks ;return type of #2 ;return #2 where #3 is Program Talent Show ;return names of #4,"[""SELECT['festivals']"", ""FILTER['#1', 'that have nominated artworks']"", ""PROJECT['type of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is Program Talent Show']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'project', 'comparative', 'project']",train
SPIDER_train_4611,Show the ids and names of festivals that have at least two nominations for artworks.,"return festivals ;return nominations of #1 ;return #2 for artworks ;return number of  #3 for each #1 ;return #1 where #4 is  at least two ;return ids of #5 ;return names of #5 ;return #6 ,  #7","[""SELECT['festivals']"", ""PROJECT['nominations of #REF', '#1']"", ""FILTER['#2', 'for artworks']"", ""GROUP['count', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is at least two']"", ""PROJECT['ids of #REF', '#5']"", ""PROJECT['names of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'filter', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_4612,"Show the id, name of each festival and the number of artworks it has nominated.","return festivals ;return ids of #1 ;return names of #1 ;return artworks nominated of #1 ;return number of  #4 for each #1 ;return #2 ,  #3 ,   #5","[""SELECT['festivals']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['artworks nominated of #REF', '#1']"", ""GROUP['count', '#4', '#1']"", ""UNION['#2', '#3', '#5']""]","['select', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_4613,Please show different types of artworks with the corresponding number of artworks of each type.,"return types of  artworks  ;return different #1 ;return artworks  of  #1 ;return number of  #3 for each  #2 ;return #2 ,  #4","[""SELECT['types of artworks']"", ""PROJECT['different #REF', '#1']"", ""PROJECT['artworks of #REF', '#1']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_4614,List the most common type of artworks.,return artworks ;return types of #1 ;return number of  #1 for each #2 ;return #2 where #3 is  the  highest,"[""SELECT['artworks']"", ""PROJECT['types of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""COMPARATIVE['#2', '#3', 'is the highest']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_4615,List the year in which there are more than one festivals.,return years ;return festivals in #1 ;return number of  #2 for each #1 ;return #1 where #3 is  higher than one,"[""SELECT['years']"", ""PROJECT['festivals in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than one']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_4616,List the name of artworks that are not nominated.,return artworks ;return #1 that  are  not  nominated ;return names of  #2,"[""SELECT['artworks']"", ""FILTER['#1', 'that are not nominated']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4617,Show the number of audience in year 2008 or 2010.,return audience ;return year of #1 ;return #1 where #2 is  2008 ;return #1 where #2 is  2010 ;return #3 or  #4 ;return number of  #5,"[""SELECT['audience']"", ""PROJECT['year of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 2008']"", ""COMPARATIVE['#1', '#2', 'is 2010']"", ""UNION['#3', '#4']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'aggregate']",train
SPIDER_train_4618,What are the total number of the audiences who visited any of the festivals?,return festivals ;return audiences of  #1 ;return sum of  #2,"[""SELECT['festivals']"", ""PROJECT['audiences of #REF', '#1']"", ""AGGREGATE['sum', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_4619,In which year are there festivals both inside the 'United States' and outside the 'United States'?,return festivals ;return #1 inside the  'United States ;return #1 outside the  'United States ;return #1 of  both #2 and  #3 ;return year there are  #4,"[""SELECT['festivals']"", ""FILTER['#1', 'inside the United States']"", ""FILTER['#1', 'outside the United States']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['year there are #REF', '#4']""]","['select', 'filter', 'filter', 'intersection', 'project']",train
SPIDER_train_462,What are the full names of all students,return students ;return full names of  #1,"[""SELECT['students']"", ""PROJECT['full names of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_4620,How many premises are there?,return premises ;return number of #1,"[""SELECT['premises']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_4621,What are all the distinct premise types?,return premises ;return types of  #1 ;return distinct #2,"[""SELECT['premises']"", ""PROJECT['types of #REF', '#1']"", ""PROJECT['distinct #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_4622,Find the types and details for all premises and order by the premise type.,"return premises ;return types of  #1 ;return details of  #1 ;return #2 ,   #3 ;return #4 sorted by #2","[""SELECT['premises']"", ""PROJECT['types of #REF', '#1']"", ""PROJECT['details of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#4', '#2']""]","['select', 'project', 'project', 'union', 'sort']",train
SPIDER_train_4623,Show each premise type and the number of premises in that type.,"return premise types ;return premises of #1 ;return number of  #2 for each #1 ;return #1 ,  #3","[""SELECT['premise types']"", ""PROJECT['premises of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_4624,Show all distinct product categories along with the number of mailshots in each category.,return distinct product categories ;return mailshots of #1 ;return number of  #2 for each #1,"[""SELECT['distinct product categories']"", ""PROJECT['mailshots of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_4625,Show the name and phone of the customer without any mailshot.,"return customers ;return mailshots of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  at least one ;return #1 besides #4 ;return names of #5 ;return phones of #5 ;return #6 ,  #7","[""SELECT['customers']"", ""PROJECT['mailshots of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least one']"", ""DISCARD['#1', '#4']"", ""PROJECT['names of #REF', '#5']"", ""PROJECT['phones of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'group', 'comparative', 'discard', 'project', 'project', 'union']",train
SPIDER_train_4626,Show the name and phone for customers with a mailshot with outcome code 'No Response'.,"return customers ;return mailshots of  #1 ;return outcome codes of  #2 ;return #1 where #3 is  'No Response ;return names of  #4 ;return phones of  #4 ;return #5 ,  #6","[""SELECT['customers']"", ""PROJECT['mailshots of #REF', '#1']"", ""PROJECT['outcome codes of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is No Response']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['phones of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_4627,Show the outcome code of mailshots along with the number of mailshots in each outcome code.,"return mailshots ;return outcome codes of #1 ;return the  number of  #1 for each #2 ;return #2 ,  #3","[""SELECT['mailshots']"", ""PROJECT['outcome codes of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""UNION['#2', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_4629,Show the names of customers who have the most mailshots.,return customers ;return mailshots of #1 ;return number of  #2 for each #1 ;return #1 where #3 is highest ;return names of #4,"[""SELECT['customers']"", ""PROJECT['mailshots of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_463,How many different advisors are listed?,return advisors ;return different #1 ;return number of #2,"[""SELECT['advisors']"", ""PROJECT['different #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_4630,What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome.,"return customers ;return mailshots of  #1 ;return outcomes of  #2 ;return #1 where #3 is  'Order ;return #1 where #3 is  'No Response ;return #1 of  both #4 and  #5 ;return names of  #6 ;return payment methods of  #6 ;return #7 ,  #8","[""SELECT['customers']"", ""PROJECT['mailshots of #REF', '#1']"", ""PROJECT['outcomes of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Order']"", ""COMPARATIVE['#1', '#3', 'is No Response']"", ""INTERSECTION['#1', '#4', '#5']"", ""PROJECT['names of #REF', '#6']"", ""PROJECT['payment methods of #REF', '#6']"", ""UNION['#7', '#8']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_4631,Show the premise type and address type code for all customer addresses.,"return customers ;return addresses of  #1 ;return premise types of  #2 ;return address type  codes of  #2 ;return #3 ,  #4","[""SELECT['customers']"", ""PROJECT['addresses of #REF', '#1']"", ""PROJECT['premise types of #REF', '#2']"", ""PROJECT['address type codes of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_4632,What are the distinct address type codes for all customer addresses?,return customers ;return addresses of  #1 ;return distinct address type codes of  #2,"[""SELECT['customers']"", ""PROJECT['addresses of #REF', '#1']"", ""PROJECT['distinct address type codes of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_4633,Show the shipping charge and customer id for customer orders with order status Cancelled or Paid.,"return customers ;return orders of #1 ;return order statuses of #2 ;return #2 where #3 is  Cancelled ;return #2 where #3 is  Paid ;return #4 ,  #5 ;return the  shipping charges of #6 ;return the  customer  ids of #6 ;return #7 ,  #8","[""SELECT['customers']"", ""PROJECT['orders of #REF', '#1']"", ""PROJECT['order statuses of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is Cancelled']"", ""COMPARATIVE['#2', '#3', 'is Paid']"", ""UNION['#4', '#5']"", ""PROJECT['the shipping charges of #REF', '#6']"", ""PROJECT['the customer ids of #REF', '#6']"", ""UNION['#7', '#8']""]","['select', 'project', 'project', 'comparative', 'comparative', 'union', 'project', 'project', 'union']",train
SPIDER_train_4634,Show the names of customers having an order with shipping method FedEx and order status Paid.,return customers ;return orders of #1 ;return statuses of #2 ;return shipping methods of #2 ;return #1 where #3 is  Paid ;return #1 where #4 is  FedEx ;return #1 in both #5 and #6 ;return the  names of #7,"[""SELECT['customers']"", ""PROJECT['orders of #REF', '#1']"", ""PROJECT['statuses of #REF', '#2']"", ""PROJECT['shipping methods of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Paid']"", ""COMPARATIVE['#1', '#4', 'is FedEx']"", ""INTERSECTION['#1', '#5', '#6']"", ""PROJECT['the names of #REF', '#7']""]","['select', 'project', 'project', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_4636,Count the number of courses.,return courses ;return the number of #1,"[""SELECT['courses']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_4637,How many courses have more than 2 credits?,return courses ;return credits of  #1 ;return #1 where  #2 is higher than 2 ;return number of  #3,"[""SELECT['courses']"", ""PROJECT['credits of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_4638,Count the number of courses with more than 2 credits.,return courses ;return credits of  #1 ;return #1 where #2 is  higher than 2 ;return number of  #3,"[""SELECT['courses']"", ""PROJECT['credits of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_4639,List all names of courses with 1 credit?,return courses ;return credits of  #1 ;return #1 where  #2 is 1 ;return names of  #3,"[""SELECT['courses']"", ""PROJECT['credits of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 1']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_464,How many advisors are there?,return advisors ;return number of #1,"[""SELECT['advisors']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_4640,What are the names of courses with 1 credit?,return courses ;return credits of  #1 ;return #1 where #2 is  1 ;return names of  #3,"[""SELECT['courses']"", ""PROJECT['credits of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 1']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4641,Which courses are taught on days MTW?,return courses ;return days #1 taught ;return #1 where #2 is  MTW,"[""SELECT['courses']"", ""PROJECT['days #REF taught', '#1']"", ""COMPARATIVE['#1', '#2', 'is MTW']""]","['select', 'project', 'comparative']",train
SPIDER_train_4642,What are the course names for courses taught on MTW?,return courses ;return #1 taught on  MTW ;return course names of  #2,"[""SELECT['courses']"", ""FILTER['#1', 'taught on MTW']"", ""PROJECT['course names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4643,"What is the number of departments in Division ""AS""?",return Division AS ;return departments in #1 ;return number of  #2,"[""SELECT['Division AS']"", ""PROJECT['departments in #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_4644,How many departments are in the division AS?,return divisions ;return departments of  #1 ;return #2 where  #1 is  AS ;return number of #3,"[""SELECT['divisions']"", ""PROJECT['departments of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is AS']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_4645,What are the phones of departments in Room 268?,return departments ;return #1 in Room 268 ;return phones of  #2,"[""SELECT['departments']"", ""FILTER['#1', 'in Room 268']"", ""PROJECT['phones of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4646,Give the phones for departments in room 268.,return room 268 ;return departments in #1 ;return phones of  #2,"[""SELECT['room 268']"", ""PROJECT['departments in #REF', '#1']"", ""PROJECT['phones of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_4647,"Find the number of students that have at least one grade ""B"".",return students ;return grades of #1 ;return #1 where #2 is  B ;return number of  #3,"[""SELECT['students']"", ""PROJECT['grades of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is B']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_4648,"How many students have had at least one ""B"" grade?",return students ;return #1 that  have  had at least one B grade ;return number of  #2,"[""SELECT['students']"", ""FILTER['#1', 'that have had at least one B grade']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_4649,Find the max and min grade point for all letter grade.,"return letter grades ;return max grade  point of  #1 ;return min grade  point of  #1 ;return #2 ,   #3","[""SELECT['letter grades']"", ""PROJECT['max grade point of #REF', '#1']"", ""PROJECT['min grade point of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_465,Show all majors.,return all majors,"[""SELECT['all majors']""]",['select'],train
SPIDER_train_4650,What are the maximum and minumum grade points?,"return grades ;return points of  #1 ;return maximum of  #2 ;return minumum of  #2 ;return #3 ,  #4","[""SELECT['grades']"", ""PROJECT['points of #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""PROJECT['minumum of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'aggregate', 'project', 'union']",train
SPIDER_train_4651,"Find the first names of students whose first names contain letter ""a"".",return students ;return first  names  of  #1 ;return #2 that  contain letter a,"[""SELECT['students']"", ""PROJECT['first names of #REF', '#1']"", ""FILTER['#2', 'that contain letter a']""]","['select', 'project', 'filter']",train
SPIDER_train_4652,"What are the first names for students who have an ""a"" in their first name?",return students ;return first  names of #1 ;return #1 where #2 has an a ;return first  names of #3,"[""SELECT['students']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'has an a']"", ""PROJECT['first names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4653,Find the first names and last names of male (sex is M) faculties who live in building NEB.,"return faculties ;return sex of  #1 ;return #1 where #2 is  M ;return buildings #3 live in ;return #3 where #4 is  NEB ;return first names of  #5 ;return last names of  #5 ;return #6 ,  #7","[""SELECT['faculties']"", ""PROJECT['sex of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is M']"", ""PROJECT['buildings #REF live in', '#3']"", ""COMPARATIVE['#3', '#4', 'is NEB']"", ""PROJECT['first names of #REF', '#5']"", ""PROJECT['last names of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'comparative', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_4654,What are the full names of faculties with sex M and who live in building NEB?,return faculties ;return #1 with sex M ;return #1 who  live in building NEB ;return full names of #1 ;return #4 of both #2 and  #3,"[""SELECT['faculties']"", ""FILTER['#1', 'with sex M']"", ""FILTER['#1', 'who live in building NEB']"", ""PROJECT['full names of #REF', '#3']"", ""INTERSECTION['#4', '#2', '#3']""]","['select', 'filter', 'filter', 'project', 'intersection']",train
SPIDER_train_4656,What are the rooms for members of the faculty who are professors and who live in building NEB?,return the  faculty ;return members of #1 ;return #2 who  are professors ;return #2 who  live in  buildings NEB ;return #2 in  both #3 and  #4 ;return rooms of #5,"[""SELECT['the faculty']"", ""PROJECT['members of #REF', '#1']"", ""FILTER['#2', 'who are professors']"", ""FILTER['#2', 'who live in buildings NEB']"", ""INTERSECTION['#2', '#3', '#4']"", ""PROJECT['rooms of #REF', '#5']""]","['select', 'project', 'filter', 'filter', 'intersection', 'project']",train
SPIDER_train_4657,"Find the department name that is in Building ""Mergenthaler"".",return departments ;return #1 in Building Mergenthaler ;return name of  #2,"[""SELECT['departments']"", ""FILTER['#1', 'in Building Mergenthaler']"", ""PROJECT['name of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4658,What is the name of the department in the Building Mergenthaler?,return departments ;return Building of #1 ;return #1 where #2 is  Mergenthaler ;return name of #3,"[""SELECT['departments']"", ""PROJECT['Building of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Mergenthaler']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4659,List all information about courses sorted by credits in the ascending order.,return courses ;return information about #1 ;return credits of  #1 ;return #2 sorted by #3 in ascending order,"[""SELECT['courses']"", ""PROJECT['information about #REF', '#1']"", ""PROJECT['credits of #REF', '#1']"", ""SORT['#2', '#3', 'in ascending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_466,What are the different majors?,return majors ;return different #1,"[""SELECT['majors']"", ""PROJECT['different #REF', '#1']""]","['select', 'project']",train
SPIDER_train_4660,"What is all the information about courses, ordered by credits ascending?",return courses ;return all information about #1 ;return credits of  #1 ;return #2 sorted by #3 ascending,"[""SELECT['courses']"", ""PROJECT['all information about #REF', '#1']"", ""PROJECT['credits of #REF', '#1']"", ""SORT['#2', '#3', 'ascending']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_4661,List the course name of courses sorted by credits.,return courses ;return course names of  #1 ;return credits of  #1 ;return #2 sorted by #3,"[""SELECT['courses']"", ""PROJECT['course names of #REF', '#1']"", ""PROJECT['credits of #REF', '#1']"", ""SORT['#2', '#3']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_4662,"What are the course names, ordered by credits?",return course names ;return credits of  #1 ;return #1 sorted by #2,"[""SELECT['course names']"", ""PROJECT['credits of #REF', '#1']"", ""SORT['#1', '#2']""]","['select', 'project', 'sort']",train
SPIDER_train_4663,Find the first name of students in the descending order of age.,return students ;return ages of  #1 ;return first names of  #1 ;return #3 sorted by #2 in descending order,"[""SELECT['students']"", ""PROJECT['ages of #REF', '#1']"", ""PROJECT['first names of #REF', '#1']"", ""SORT['#3', '#2', 'in descending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_4664,"What are the first names of students, ordered by age from greatest to least?",return students ;return ages of  #1 ;return first names of  #1 ;return first names of  #1 sorted by #2 from  greatest to least,"[""SELECT['students']"", ""PROJECT['ages of #REF', '#1']"", ""PROJECT['first names of #REF', '#1']"", ""SORT['#3', '#2', 'from greatest to least']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_4665,Find the last name of female (sex is F) students in the descending order of age.,return students ;return sex of  #1 ;return #1 where  #2 is  female ;return ages of  #3 ;return last names of  #3 ;return #5 sorted by #4 in descending order,"[""SELECT['students']"", ""PROJECT['sex of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is female']"", ""PROJECT['ages of #REF', '#3']"", ""PROJECT['last names of #REF', '#3']"", ""SORT['#5', '#4', 'in descending order']""]","['select', 'project', 'comparative', 'project', 'project', 'sort']",train
SPIDER_train_4666,"What are the last names of female students, ordered by age descending?",return female students ;return last names of  #1 ;return ages of  #1 ;return #2 sorted by descending #3,"[""SELECT['female students']"", ""PROJECT['last names of #REF', '#1']"", ""PROJECT['ages of #REF', '#1']"", ""SORT['#2', '#3', 'descending']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_4667,Find the last names of faculties in building Barton in alphabetic order.,return faculties ;return building of  #1 ;return #1 where  #2 is  Barton ;return last names of  #3 ;return #4 sorted by alphabetic order,"[""SELECT['faculties']"", ""PROJECT['building of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Barton']"", ""PROJECT['last names of #REF', '#3']"", ""SORT['#4', '#4', 'alphabetic order']""]","['select', 'project', 'comparative', 'project', 'sort']",train
SPIDER_train_4668,"What are the last names of faculty in building Barton, sorted by last name?",return faculty ;return #1 in building Barton ;return last  names of  #2 ;return #3 sorted by #3,"[""SELECT['faculty']"", ""FILTER['#1', 'in building Barton']"", ""PROJECT['last names of #REF', '#2']"", ""SORT['#3', '#3']""]","['select', 'filter', 'project', 'sort']",train
SPIDER_train_4669,Find the first names of faculties of rank Professor in alphabetic order.,return faculty ;return #1 of  rank Professor ;return first name of  #2 ;return #3 sorted by alphabetic order,"[""SELECT['faculty']"", ""FILTER['#1', 'of rank Professor']"", ""PROJECT['first name of #REF', '#2']"", ""SORT['#3', '#3', 'alphabetic order']""]","['select', 'filter', 'project', 'sort']",train
SPIDER_train_467,Show all cities where students live.,return cities ;return #1 where  students live,"[""SELECT['cities']"", ""FILTER['#1', 'where students live']""]","['select', 'filter']",train
SPIDER_train_4670,"What are the first names for all faculty professors, ordered by first name?",return faculty professors ;return first  names of  #1 ;return #2 sorted by #2,"[""SELECT['faculty professors']"", ""PROJECT['first names of #REF', '#1']"", ""SORT['#2', '#2']""]","['select', 'project', 'sort']",train
SPIDER_train_4671,Find the name of the department that has the biggest number of students minored in?,return departments ;return students minored in #1 ;return number of #2 for each #1 ;return #1 where  #3 is  highest ;return name of  #4,"[""SELECT['departments']"", ""PROJECT['students minored in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_4672,What is the name of the department with the most students minoring in it?,return departments ;return students minoring in #1 ;return the   number of  #2 for each #1 ;return #1 where #3 is  the   highest ;return the   name of #4,"[""SELECT['departments']"", ""PROJECT['students minoring in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']"", ""PROJECT['the name of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_4673,Find the name of the department that has no students minored in?,return departments ;return #1 that  no students minored in ;return name of #2,"[""SELECT['departments']"", ""FILTER['#1', 'that no students minored in']"", ""PROJECT['name of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4674,What is the name of the department htat has no students minoring in it?,return departments ;return students minoring of #1 ;return number of  #2 for each #1 ;return #1 where #3 is zero ;return name of #4,"[""SELECT['departments']"", ""PROJECT['students minoring of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is zero']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_4675,Find the name of the department that has the fewest members.,return departments ;return members of  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  lowest ;return name of  #4,"[""SELECT['departments']"", ""PROJECT['members of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_4676,What is the name of the department with the fewest members?,return departments ;return members of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  lowest ;return name of #4,"[""SELECT['departments']"", ""PROJECT['members of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_4677,Find the rank of the faculty that the fewest faculties belong to.,return ranks ;return faculties that  belong to  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  lowest,"[""SELECT['ranks']"", ""PROJECT['faculties that belong to #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_4678,What is the least common faculty rank?,return faculty ranks ;return faculty with #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  lowest,"[""SELECT['faculty ranks']"", ""PROJECT['faculty with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_4679,What are the first and last names of the instructors who teach the top 3 number of courses?,"return instructors ;return courses of #1 ;return number of  #2 for each #1 ;return the  3 highest of #3 ;return #1 where #3 is equal to any of #4 ;return first names of #5 ;return last names of #5 ;return #6 ,  #7","[""SELECT['instructors']"", ""PROJECT['courses of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['max', '#3']"", ""COMPARATIVE['#1', '#3', 'is equal to any of #4']"", ""PROJECT['first names of #REF', '#5']"", ""PROJECT['last names of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'group', 'aggregate', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_468,What cities do students live in?,return students ;return the  cities of  #1,"[""SELECT['students']"", ""PROJECT['the cities of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_4680,What are the full names of the 3 instructors who teach the most courses?,return instructors ;return courses #1 teach ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return full names of  #4,"[""SELECT['instructors']"", ""PROJECT['courses #REF teach', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['full names of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_4681,Which building does the instructor who teaches the most number of courses live in?,return instructors ;return courses #1 teaches ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return building of  #4,"[""SELECT['instructors']"", ""PROJECT['courses #REF teaches', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['building of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_4682,Give the building that the instructor who teaches the greatest number of courses lives in.,return instructors ;return courses of  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  highest ;return building of  #4,"[""SELECT['instructors']"", ""PROJECT['courses of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['building of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_4683,What are the name of courses that have at least five enrollments?,return courses ;return enrollments in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least five ;return names of  #4,"[""SELECT['courses']"", ""PROJECT['enrollments in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least five']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_4684,Give the names of the courses with at least five enrollments.,return courses ;return enrollments of  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  at least five ;return names of  #4,"[""SELECT['courses']"", ""PROJECT['enrollments of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least five']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_4685,Find the first name and last name of the instructor of course that has course name,"return courses ;return instructors of #1 ;return first names of #2 ;return last names of #2 ;return #3 ,  #4","[""SELECT['courses']"", ""PROJECT['instructors of #REF', '#1']"", ""PROJECT['first names of #REF', '#2']"", ""PROJECT['last names of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_4686,What is the full name of the instructor who has a course named COMPUTER LITERACY?,return instructors ;return courses of  #1 ;return #1 where #2 is  named COMPUTER LITERACY ;return full name of  #3,"[""SELECT['instructors']"", ""PROJECT['courses of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is named COMPUTER LITERACY']"", ""PROJECT['full name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4687,Find the department name and room of the course INTRODUCTION TO COMPUTER SCIENCE.,"return courses ;return #1 with  name INTRODUCTION TO COMPUTER SCIENCE ;return department name of  #2 ;return rooms of  #2 ;return #3 ,   #4","[""SELECT['courses']"", ""FILTER['#1', 'with name INTRODUCTION TO COMPUTER SCIENCE']"", ""PROJECT['department name of #REF', '#2']"", ""PROJECT['rooms of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_4688,What are the department name and room for the course INTRODUCTION TO COMPUTER SCIENCE?,"return the  course INTRODUCTION TO COMPUTER SCIENCE ;return the  department of #1 ;return the  name of #2 ;return the  room of #1 ;return #3 ,  #4","[""SELECT['the course INTRODUCTION TO COMPUTER SCIENCE']"", ""PROJECT['the department of #REF', '#1']"", ""PROJECT['the name of #REF', '#2']"", ""PROJECT['the room of #REF', '#1']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_4689,Find the student first and last names and grade points of all enrollments.,"return enrollments ;return students of  #1 ;return first names of  #2 ;return last names of  #2 ;return grade points of  #1 ;return #3 ,   #4 , #5","[""SELECT['enrollments']"", ""PROJECT['students of #REF', '#1']"", ""PROJECT['first names of #REF', '#2']"", ""PROJECT['last names of #REF', '#2']"", ""PROJECT['grade points of #REF', '#1']"", ""UNION['#3', '#4', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_469,"Show first name, last name, age for all female students. Their sex is F.","return students ;return sex of #1 ;return #1 where #2 is F ;return first names of #3 ;return last names of #3 ;return ages of #3 ;return #4 ,  #5 ,   #6","[""SELECT['students']"", ""PROJECT['sex of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is F']"", ""PROJECT['first names of #REF', '#3']"", ""PROJECT['last names of #REF', '#3']"", ""PROJECT['ages of #REF', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_4690,What are the full names and gradepoints for all enrollments?,"return enrollments ;return full names of  #1 ;return gradepoints of  #1 ;return #2 ,  #3","[""SELECT['enrollments']"", ""PROJECT['full names of #REF', '#1']"", ""PROJECT['gradepoints of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_4691,Find the distinct student first names of all students that have grade point at least 3.8 in one course.,return students ;return grade points of #1 ;return #2 that are at least 3.8 ;return number of  #3 for each #1 ;return #1 where #4 is one ;return distinct first names of #5,"[""SELECT['students']"", ""PROJECT['grade points of #REF', '#1']"", ""FILTER['#2', 'that are at least 3.8']"", ""GROUP['count', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is one']"", ""PROJECT['distinct first names of #REF', '#5']""]","['select', 'project', 'filter', 'group', 'comparative', 'project']",train
SPIDER_train_4692,What are the distinct first names for students with a grade point of 3.8 or above in at least one course?,return students ;return #1 with grade points of  3.8 or  above in at least least one course ;return distinct first names of  #2,"[""SELECT['students']"", ""FILTER['#1', 'with grade points of 3.8 or above in at least least one course']"", ""PROJECT['distinct first names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4693,Find the full names of faculties who are members of department with department number 520.,return departments ;return #1 with  department number 520 ;return members of  #2 ;return #3 who  are  faculties ;return full names of  #4,"[""SELECT['departments']"", ""FILTER['#1', 'with department number 520']"", ""PROJECT['members of #REF', '#2']"", ""FILTER['#3', 'who are faculties']"", ""PROJECT['full names of #REF', '#4']""]","['select', 'filter', 'project', 'filter', 'project']",train
SPIDER_train_4694,What are the full names of faculty members who are a part of department 520?,return faculty members ;return departments of  #1 ;return #1 where #2 is  520 ;return full names of  #3,"[""SELECT['faculty members']"", ""PROJECT['departments of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 520']"", ""PROJECT['full names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4695,What are the first names and last names of the students that minor in the department with DNO 140.,"return students ;return #1 that  minor in the  department with DNO 140 ;return first names of  #2 ;return last names of  #2 ;return #3 ,  #4","[""SELECT['students']"", ""FILTER['#1', 'that minor in the department with DNO 140']"", ""PROJECT['first names of #REF', '#2']"", ""PROJECT['last names of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_4696,What are the full names of students minoring in department 140?,return students ;return departments #1 are  minoring in ;return #1 where #2 is  140 ;return full names of  #3,"[""SELECT['students']"", ""PROJECT['departments #REF are minoring in', '#1']"", ""COMPARATIVE['#1', '#2', 'is 140']"", ""PROJECT['full names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4697,Find the last names of faculties who are members of computer science department.,return faculties ;return departments of  #1 ;return #1 where  #2 is  computer science ;return last names of  #3,"[""SELECT['faculties']"", ""PROJECT['departments of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is computer science']"", ""PROJECT['last names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4698,What are the last names of faculty who are part of the computer science department?,return faculty ;return #1 that are in computer science department ;return last names of  #2,"[""SELECT['faculty']"", ""FILTER['#1', 'that are in computer science department']"", ""PROJECT['last names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4699,Find the average grade point of student whose last name is Smith.,return students ;return #1 with  last name Smith ;return grade point of  #2 ;return average of  #3,"[""SELECT['students']"", ""FILTER['#1', 'with last name Smith']"", ""PROJECT['grade point of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_47,What is the most common status across all cities?,return cities ;return the  status of  #1 ;return the  most common of  #2,"[""SELECT['cities']"", ""PROJECT['the status of #REF', '#1']"", ""PROJECT['the most common of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_470,What are the full names and ages for all female students whose sex is F?,"return students ;return #1 whose sex is  F ;return the  full names of  #2 ;return the  ages of  #2 ;return #3 ,  #4","[""SELECT['students']"", ""FILTER['#1', 'whose sex is F']"", ""PROJECT['the full names of #REF', '#2']"", ""PROJECT['the ages of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_4700,What is the average gradepoint for students with the last name Smith?,return students ;return last names of  #1 ;return #1 where #2 is  Smith ;return gradepoints of  #3 ;return average of  #4,"[""SELECT['students']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Smith']"", ""PROJECT['gradepoints of #REF', '#3']"", ""AGGREGATE['avg', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_4701,What is the maximum and minimum grade point of students who live in NYC?,"return students ;return #1 who live in NYC ;return grade points of #2 ;return the  highest #3 ;return the  lowest #3 ;return #4 ,  #5","[""SELECT['students']"", ""FILTER['#1', 'who live in NYC']"", ""PROJECT['grade points of #REF', '#2']"", ""AGGREGATE['max', '#3']"", ""AGGREGATE['min', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_4702,Give the maximum and minimum gradepoints for students living in NYC?,"return students ;return #1 living in NYC ;return gradepoints of  #2 ;return maximum of  #3 ;return minimum of  #3 ;return #4 ,   #5","[""SELECT['students']"", ""FILTER['#1', 'living in NYC']"", ""PROJECT['gradepoints of #REF', '#2']"", ""AGGREGATE['max', '#3']"", ""AGGREGATE['min', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_4703,Find the names of courses that have either 3 credits or 1 credit but 4 hours.,"return courses ;return credits of #1 ;return hours of #1 ;return #1 where #2 is  3 ;return #1 where #2 is  1 ;return #1 where #3 is  4 ;return #1 of both #5 and #6 ;return #4 ,  #7 ;return names of #8","[""SELECT['courses']"", ""PROJECT['credits of #REF', '#1']"", ""PROJECT['hours of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 3']"", ""COMPARATIVE['#1', '#2', 'is 1']"", ""COMPARATIVE['#1', '#3', 'is 4']"", ""INTERSECTION['#1', '#5', '#6']"", ""UNION['#4', '#7']"", ""PROJECT['names of #REF', '#8']""]","['select', 'project', 'project', 'comparative', 'comparative', 'comparative', 'intersection', 'union', 'project']",train
SPIDER_train_4704,"What are the names of courses that give either 3 credits, or 1 credit and 4 hours?","return courses ;return credits that  #1 give ;return hours that  #1 give ;return #1 where #2 is  3 ;return #1 where #2 is  1 ;return #1 where #3 is  4 ;return #1 in both #5 and #6 ;return #4 ,  #7 ;return the  names of #8","[""SELECT['courses']"", ""PROJECT['credits that #REF give', '#1']"", ""PROJECT['hours that #REF give', '#1']"", ""COMPARATIVE['#1', '#2', 'is 3']"", ""COMPARATIVE['#1', '#2', 'is 1']"", ""COMPARATIVE['#1', '#3', 'is 4']"", ""INTERSECTION['#1', '#5', '#6']"", ""UNION['#4', '#7']"", ""PROJECT['the names of #REF', '#8']""]","['select', 'project', 'project', 'comparative', 'comparative', 'comparative', 'intersection', 'union', 'project']",train
SPIDER_train_4705,Find the names of departments that are either in division AS or in division EN and in Building NEB.,return departments ;return divisions of #1 ;return #1 where #2 is AS ;return #1 where #2 is EN ;return #3 or  #4 ;return Building of #5 ;return #5 where #6 is NEB,"[""SELECT['departments']"", ""PROJECT['divisions of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is AS']"", ""COMPARATIVE['#1', '#2', 'is EN']"", ""UNION['#3', '#4']"", ""PROJECT['Building of #REF', '#5']"", ""COMPARATIVE['#5', '#6', 'is NEB']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project', 'comparative']",train
SPIDER_train_4706,"What are the names of departments either in division AS, or in division EN and in building NEB?",return departments ;return #1 in division EN ;return #1 in division AS ;return #1 in building NEB ;return #1 of  both #2 and  #4 ;return #3 or  #5,"[""SELECT['departments']"", ""FILTER['#1', 'in division EN']"", ""FILTER['#1', 'in division AS']"", ""FILTER['#1', 'in building NEB']"", ""INTERSECTION['#1', '#2', '#4']"", ""UNION['#3', '#5']""]","['select', 'filter', 'filter', 'filter', 'intersection', 'union']",train
SPIDER_train_4707,Find the first name of students not enrolled in any course.,return students ;return #1 not  enrolled in courses ;return first names of  #2,"[""SELECT['students']"", ""FILTER['#1', 'not enrolled in courses']"", ""PROJECT['first names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4708,What are the first names of all students that are not enrolled in courses?,return courses ;return the  students enrolled in #1 ;return students besides #2 ;return the  first names of #3,"[""SELECT['courses']"", ""PROJECT['the students enrolled in #REF', '#1']"", ""SELECT['students']"", ""DISCARD['#3', '#2']"", ""PROJECT['the first names of #REF', '#4']""]","['select', 'project', 'select', 'discard', 'project']",train
SPIDER_train_4709,What are the ids of the top three products that were purchased in the largest amount?,return products ;return #1 that  were purchased in the  largest amount ;return top three of  #2 ;return ids of  #3,"[""SELECT['products']"", ""FILTER['#1', 'that were purchased in the largest amount']"", ""PROJECT['top three of #REF', '#2']"", ""PROJECT['ids of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_471,Show student ids for all male students.,return students ;return #1 who  are  male ;return student ids for #2,"[""SELECT['students']"", ""FILTER['#1', 'who are male']"", ""PROJECT['student ids for #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4710,Give the ids of the three products purchased in the largest amounts.,return products ;return amounts purchased of #1 ;return the  three highest of #2 ;return #1 where #2 is equal to any of #3 ;return ids of #4,"[""SELECT['products']"", ""PROJECT['amounts purchased of #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""COMPARATIVE['#1', '#2', 'is equal to any of #3']"", ""PROJECT['ids of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_4711,What are the product id and product type of the cheapest product?,"return products ;return #1 that  is  cheapest ;return product  id of #2 ;return product  type of #2 ;return #3 ,  #4","[""SELECT['products']"", ""FILTER['#1', 'that is cheapest']"", ""PROJECT['product id of #REF', '#2']"", ""PROJECT['product type of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_4712,Give the id and product type of the product with the lowest price.,"return products ;return prices of  #1 ;return #1 where  #2 is  lowest ;return id of  #3 ;return product type of  #3 ;return #4 ,   #5","[""SELECT['products']"", ""PROJECT['prices of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""PROJECT['id of #REF', '#3']"", ""PROJECT['product type of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_4713,Find the number of different product types.,return product types ;return the  number of  different #1,"[""SELECT['product types']"", ""PROJECT['different #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_4714,Count the number of distinct product types.,return product types ;return #1 that  are  distinct ;return Count of  #2,"[""SELECT['product types']"", ""FILTER['#1', 'that are distinct']"", ""PROJECT['Count of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4715,Return the address of customer 10.,return customer 10 ;return address of  #1,"[""SELECT['customer 10']"", ""PROJECT['address of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_4716,What is the address for the customer with id 10?,return customers ;return ids of  #1 ;return #1 where #2 is  10 ;return address of  #3,"[""SELECT['customers']"", ""PROJECT['ids of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 10']"", ""PROJECT['address of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4717,What are the staff ids and genders of all staffs whose job title is Department Manager?,"return staffs ;return job titles of #1 ;return #1 where #2 is Department Manager ;return staff id of #3 ;return gender of #3 ;return #4 ,  #5","[""SELECT['staffs']"", ""PROJECT['job titles of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Department Manager']"", ""PROJECT['staff id of #REF', '#3']"", ""PROJECT['gender of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_4718,Return the staff ids and genders for any staff with the title Department Manager.,"return staff  ;return titles of  #1 ;return #1 where #2 is  Department Manager ;return staff  ids of  #3 ;return genders of  #3 ;return #4 ,  #5","[""SELECT['staff']"", ""PROJECT['titles of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Department Manager']"", ""PROJECT['staff ids of #REF', '#3']"", ""PROJECT['genders of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_4719,"For each payment method, return how many customers use it.",return payment methods ;return customers that  use #1 ;return number of #2 for each #1,"[""SELECT['payment methods']"", ""PROJECT['customers that use #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_472,What are the student ids for all male students?,return students ;return #1 who  are  male ;return ids of,"[""SELECT['students']"", ""FILTER['#1', 'who are male']"", ""SELECT['ids of']""]","['select', 'filter', 'select']",train
SPIDER_train_4720,How many customers use each payment method?,return payment methods ;return customers that  use #1 ;return number of  #2 for each  #1,"[""SELECT['payment methods']"", ""PROJECT['customers that use #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_4721,What is the id of the product that was ordered the most often?,return products ;return orders of #1 ;return number of  #2 for each #1 ;return #1 where #3 is the  highest ;return id of #4,"[""SELECT['products']"", ""PROJECT['orders of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']"", ""PROJECT['id of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_4722,Give the product id for the product that was ordered most frequently.,return products ;return #1 that  was ordered most frequently ;return product  id of #2,"[""SELECT['products']"", ""FILTER['#1', 'that was ordered most frequently']"", ""PROJECT['product id of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4723,"What are the name, phone number and email address of the customer who made the largest number of orders?","return customers ;return orders of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return name of  #4 ;return phone number of  #4 ;return email address of  #4 ;return #5 ,  #6 ,   #7","[""SELECT['customers']"", ""PROJECT['orders of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']"", ""AGGREGATE['count', '#4']"", ""PROJECT['email address of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'group', 'superlative', 'project', 'aggregate', 'project', 'union']",train
SPIDER_train_4724,"Return the name, phone number and email address for the customer with the most orders.","return customers ;return orders of #1 ;return number of  #2 for each #1 ;return #1 where #3 is highest ;return name of #4 ;return phone number of #4 ;return email address of #4 ;return #5 ,  #6 ,   #7","[""SELECT['customers']"", ""PROJECT['orders of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']"", ""AGGREGATE['count', '#4']"", ""PROJECT['email address of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'group', 'superlative', 'project', 'aggregate', 'project', 'union']",train
SPIDER_train_4725,What is the average price for each type of product?,return types of  products ;return products with #1 ;return prices of  #2 ;return average of  #3 for each  #1,"[""SELECT['types of products']"", ""PROJECT['products with #REF', '#1']"", ""PROJECT['prices of #REF', '#2']"", ""GROUP['avg', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_4726,Return the average price for each product type.,return product types ;return prices of  #1 ;return average of  #2 for each  #1,"[""SELECT['product types']"", ""PROJECT['prices of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_4727,How many department stores does the store chain South have?,return store chains ;return department stores of  #1 ;return #2 where  #1 is  South ;return number of #3,"[""SELECT['store chains']"", ""PROJECT['department stores of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is South']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_4728,Count the number of stores the chain South has.,return stores ;return #1 of the chain South ;return number of #2,"[""SELECT['stores']"", ""FILTER['#1', 'of the chain South']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_4729,What is the name and job title of the staff who was assigned the latest?,"return staffs ;return when  was  #1 assigned ;return #1 where #2 is the  highest ;return name of #3 ;return job title of #3 ;return #4 ,  #5","[""SELECT['staffs']"", ""PROJECT['when was #REF assigned', '#1']"", ""COMPARATIVE['#1', '#2', 'is the highest']"", ""PROJECT['name of #REF', '#3']"", ""PROJECT['job title of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_473,How many students are age 18?,return students ;return ages of  #1 ;return #1 where  #2 are  18 ;return number of  #3,"[""SELECT['students']"", ""PROJECT['ages of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'are 18']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_4730,Return the name and job title of the staff with the latest date assigned.,"return staffs ;return dates that  #1 was assigned ;return #1 where #2 is  the   latest ;return name of #3 ;return job title of #3 ;return #4 ,  #5","[""SELECT['staffs']"", ""PROJECT['dates that #REF was assigned', '#1']"", ""COMPARATIVE['#1', '#2', 'is the latest']"", ""PROJECT['name of #REF', '#3']"", ""PROJECT['job title of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_4731,"Give me the product type, name and price for all the products supplied by supplier id 3.","return products ;return suppliers of  #1 ;return ids of  #2 ;return #1 where  #3 is  3 ;return product types of  #4 ;return names of  #4 ;return prices of  #4 ;return #5 ,   #6 , #7","[""SELECT['products']"", ""PROJECT['suppliers of #REF', '#1']"", ""PROJECT['ids of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is 3']"", ""PROJECT['product types of #REF', '#4']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['prices of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_4732,"Return the product type, name, and price for products supplied by supplier 3.","return products ;return suppliers of  #1 ;return #1 where #2 is  3 ;return product types of  #3 ;return names of  #3 ;return prices of  #3 ;return #4 ,  #5 ,   #6","[""SELECT['products']"", ""PROJECT['suppliers of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 3']"", ""PROJECT['product types of #REF', '#3']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['prices of #REF', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_4733,"Return the distinct name of customers whose order status is Pending, in the order of customer id.",return customers ;return order  statuses of  #1 ;return #1 where  #2 is Pending ;return distinct #3 ;return names of  #4 ;return customer ids of  #4 ;return #5 sorted by #6,"[""SELECT['customers']"", ""PROJECT['order statuses of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Pending']"", ""PROJECT['distinct #REF', '#3']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['customer ids of #REF', '#4']"", ""SORT['#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'sort']",train
SPIDER_train_4734,"What are the distinct names of customers with an order status of Pending, sorted by customer id?",return customers ;return orders of #1 ;return statuses of #2 ;return #2 where #3 is  Pending ;return the  number of  #4 for each #1 ;return #1 where #5 is  at least one ;return the  distinct names of #6 ;return the  customer ids of #6 ;return #7 sorted by #8,"[""SELECT['customers']"", ""PROJECT['orders of #REF', '#1']"", ""PROJECT['statuses of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is Pending']"", ""GROUP['count', '#4', '#1']"", ""COMPARATIVE['#1', '#5', 'is at least one']"", ""PROJECT['the distinct names of #REF', '#6']"", ""PROJECT['the customer ids of #REF', '#6']"", ""SORT['#7', '#8']""]","['select', 'project', 'project', 'comparative', 'group', 'comparative', 'project', 'project', 'sort']",train
SPIDER_train_4735,Find the name and address of the customers who have both New and Pending orders.,"return customers ;return orders of  #1 ;return #1 where #2 is  New ;return #1 where #2 is  Pending ;return #1 of  both #3 and  #4 ;return names of  #5 ;return addresses of  #5 ;return #6 ,  #7","[""SELECT['customers']"", ""PROJECT['orders of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is New']"", ""COMPARATIVE['#1', '#2', 'is Pending']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['names of #REF', '#5']"", ""PROJECT['addresses of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_4736,What are the names and addressed of customers who have both New and Pending orders?,"return customers ;return New orders of #1 ;return Pending orders of #1 ;return number of  #2 for each #1 ;return number of  #3 for each #1 ;return #1 where #4 is at least one ;return #1 where #5 is at least one ;return #1 in  both #6 and  #7 ;return names of #8 ;return address of #8 ;return #9 ,  #10","[""SELECT['customers']"", ""PROJECT['New orders of #REF', '#1']"", ""PROJECT['Pending orders of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""GROUP['count', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is at least one']"", ""COMPARATIVE['#1', '#5', 'is at least one']"", ""INTERSECTION['#1', '#6', '#7']"", ""PROJECT['names of #REF', '#8']"", ""PROJECT['address of #REF', '#8']"", ""UNION['#9', '#10']""]","['select', 'project', 'project', 'group', 'group', 'comparative', 'comparative', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_4737,Return ids of all the products that are supplied by supplier id 2 and are more expensive than the average price of all products.,return products ;return prices of #1 ;return the  average of #2 ;return #1 where #2 is  higher than #3 ;return suppliers of #1 ;return ids of #5 ;return #1 where #6 is  2 ;return #1 in both #4 and #7 ;return the  ids of #8,"[""SELECT['products']"", ""PROJECT['prices of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['suppliers of #REF', '#1']"", ""PROJECT['ids of #REF', '#5']"", ""COMPARATIVE['#1', '#6', 'is 2']"", ""INTERSECTION['#1', '#4', '#7']"", ""PROJECT['the ids of #REF', '#8']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'project', 'comparative', 'intersection', 'project']",train
SPIDER_train_4738,"What are the ids of products from the supplier with id 2, which are more expensive than the average price across all products?",return products ;return prices of #1 ;return average of #2 ;return suppliers of #2 ;return ids of #4 ;return #1 where #5 is  2 ;return prices of #6 ;return #6 where #7 is  higher than #3 ;return ids of #8,"[""SELECT['products']"", ""PROJECT['prices of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""PROJECT['suppliers of #REF', '#2']"", ""PROJECT['ids of #REF', '#4']"", ""COMPARATIVE['#1', '#5', 'is 2']"", ""PROJECT['prices of #REF', '#6']"", ""COMPARATIVE['#6', '#7', 'is higher than #3']"", ""PROJECT['ids of #REF', '#8']""]","['select', 'project', 'aggregate', 'project', 'project', 'comparative', 'project', 'comparative', 'project']",train
SPIDER_train_4739,What is the id and name of the department store that has both marketing and managing department?,"return department  stores ;return #1 that  have marketing departments ;return #1 that  have managing departments ;return #1 in both #2 and #3 ;return the  ids of #4 ;return the  names of #4 ;return #5 ,  #6","[""SELECT['department stores']"", ""FILTER['#1', 'that have marketing departments']"", ""FILTER['#1', 'that have managing departments']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['the ids of #REF', '#4']"", ""PROJECT['the names of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'filter', 'filter', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_474,How many students are 18 years old?,return students ;return #1 that  are 18 years old ;return number of  #2,"[""SELECT['students']"", ""FILTER['#1', 'that are 18 years old']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_4740,What are the ids and names of department stores with both marketing and managing departments?,"return department stores ;return departments of  #1 ;return #1 where #2 is  marketing ;return #1 where #2 is  managing ;return #1 of  both #3 and  #4 ;return ids of  #5 ;return names of  #5 ;return #6 ,  #7","[""SELECT['department stores']"", ""PROJECT['departments of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is marketing']"", ""COMPARATIVE['#1', '#2', 'is managing']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['ids of #REF', '#5']"", ""PROJECT['names of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_4741,What are the ids of the two department store chains with the largest number of department stores?,return department store chains ;return department stores of #1 ;return number of  #2 for each #1 ;return the  two highest of #3 ;return #1 where #3 is equal to any of #4 ;return ids of #5,"[""SELECT['department store chains']"", ""PROJECT['department stores of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['max', '#3']"", ""COMPARATIVE['#1', '#3', 'is equal to any of #4']"", ""PROJECT['ids of #REF', '#5']""]","['select', 'project', 'group', 'aggregate', 'comparative', 'project']",train
SPIDER_train_4742,Return the ids of the two department store chains with the most department stores.,return department  store chains ;return department  stores of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  the   highest ;return the   ids of #4,"[""SELECT['department store chains']"", ""PROJECT['department stores of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']"", ""PROJECT['the ids of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_4743,What is the id of the department with the least number of staff?,return departments ;return staff of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  lowest ;return id of  #4,"[""SELECT['departments']"", ""PROJECT['staff of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['id of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_4744,Return the id of the department with the fewest staff assignments.,return departments ;return staff assignments of  #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is lowest ;return id of  #4,"[""SELECT['departments']"", ""PROJECT['staff assignments of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['id of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_4745,"For each product type, return the maximum and minimum price.","return product types ;return prices of  #1 ;return maximum of  #2 for each #1 ;return minimum of  #2 for each #1 ;return #3 ,   #4","[""SELECT['product types']"", ""PROJECT['prices of #REF', '#1']"", ""GROUP['max', '#2', '#1']"", ""GROUP['min', '#2', '#1']"", ""UNION['#3', '#4']""]","['select', 'project', 'group', 'group', 'union']",train
SPIDER_train_4746,What are the maximum and minimum product prices for each product type?,"return product types ;return products of  #1 ;return prices of  #2 ;return maximum of  #3 for each  #1 ;return minimum of  #3 for each  #1 ;return #4 ,  #5","[""SELECT['product types']"", ""PROJECT['products of #REF', '#1']"", ""PROJECT['prices of #REF', '#2']"", ""GROUP['max', '#3', '#1']"", ""GROUP['min', '#3', '#1']"", ""UNION['#4', '#5']""]","['select', 'project', 'project', 'group', 'group', 'union']",train
SPIDER_train_4747,Find the product type whose average price is higher than the average price of all products.,return products ;return prices of  #1 ;return average of  #2 ;return average of  #2 for each #1 ;return #1 where  #4 is  higher than #3 ;return product type of  #5,"[""SELECT['products']"", ""PROJECT['prices of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""GROUP['avg', '#2', '#1']"", ""COMPARATIVE['#1', '#4', 'is higher than #3']"", ""PROJECT['product type of #REF', '#5']""]","['select', 'project', 'aggregate', 'group', 'comparative', 'project']",train
SPIDER_train_4748,What is the code of the product type with an average price higher than the average price of all products?,return product types ;return products of #1 ;return prices of #2 ;return average of #3 ;return average of #3 for each #1 ;return #1 where #5 is  higher than #4 ;return code of #6,"[""SELECT['product types']"", ""PROJECT['products of #REF', '#1']"", ""PROJECT['prices of #REF', '#2']"", ""AGGREGATE['avg', '#3']"", ""GROUP['avg', '#3', '#1']"", ""COMPARATIVE['#1', '#5', 'is higher than #4']"", ""PROJECT['code of #REF', '#6']""]","['select', 'project', 'project', 'aggregate', 'group', 'comparative', 'project']",train
SPIDER_train_4749,Find the id and name of the staff who has been assigned for the shortest period.,"return staff ;return #1 who  are  assigned ;return period of  #2 ;return #2 where  #3 is  shortest ;return id of  #4 ;return name of  #4 ;return #5 ,   #6","[""SELECT['staff']"", ""FILTER['#1', 'who are assigned']"", ""PROJECT['period of #REF', '#2']"", ""SUPERLATIVE['min', '#2', '#3']"", ""PROJECT['id of #REF', '#4']"", ""PROJECT['name of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'filter', 'project', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_475,Show all student ids who are older than 20.,return student ids ;return oldness of  #1 ;return #2 that  are  more than  20,"[""SELECT['student ids']"", ""PROJECT['oldness of #REF', '#1']"", ""FILTER['#2', 'that are more than 20']""]","['select', 'project', 'filter']",train
SPIDER_train_4750,What is the id and name of the staff who has been assigned for the least amount of time?,"return staff ;return amount of time assigned of  #1 ;return #1 where #2 is  the   lowest ;return id of #3 ;return name of #3 ;return #4 ,  #5","[""SELECT['staff']"", ""PROJECT['amount of time assigned of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the lowest']"", ""PROJECT['id of #REF', '#3']"", ""PROJECT['name of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_4751,Return the names and ids of all products whose price is between 600 and 700.,"return products ;return prices of #1 ;return #1 where #2 is at least 600 ;return #1 where #2 is at most 700 ;return #1 in  both #3 and  #4 ;return names of #5 ;return ids of #5 ;return #6 ,  #7","[""SELECT['products']"", ""PROJECT['prices of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least 600']"", ""COMPARATIVE['#1', '#2', 'is at most 700']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['names of #REF', '#5']"", ""PROJECT['ids of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_4752,What are the names and ids of products costing between 600 and 700?,"return products ;return cost of  #1 ;return #1 where #2 is  at least 600 ;return #1 where #2 is  at most 700 ;return #1 of  both #3 and  #4 ;return names of  #5 ;return ids of  #5 ;return #6 ,  #7","[""SELECT['products']"", ""PROJECT['cost of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least 600']"", ""COMPARATIVE['#1', '#2', 'is at most 700']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['names of #REF', '#5']"", ""PROJECT['ids of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_4754,What are the distinct ids of customers who made an order after any order that was Cancelled?,return customers ;return #1 who  made an order  after any order that  was Cancelled ;return the  distinct ids of  #2,"[""SELECT['customers']"", ""FILTER['#1', 'who made an order after any order that was Cancelled']"", ""PROJECT['the distinct ids of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4755,What is id of the staff who had a Staff Department Assignment earlier than any Clerical Staff?,return Clerical Staff ;return Staff Department Assignment of #1 ;return when  was  #2 ;return the  lowest of #3 ;return staff besides  #1 ;return Staff Department Assignment of #5 ;return when  was  #6 ;return #5 where #7 is lower than #4 ;return id of #8,"[""SELECT['Clerical Staff']"", ""PROJECT['Staff Department Assignment of #REF', '#1']"", ""PROJECT['when was #REF', '#2']"", ""AGGREGATE['min', '#3']"", ""SELECT['staff']"", ""DISCARD['#5', '#1']"", ""PROJECT['Staff Department Assignment of #REF', '#6']"", ""PROJECT['when was #REF', '#7']"", ""COMPARATIVE['#6', '#8', 'is lower than #4']"", ""PROJECT['id of #REF', '#9']""]","['select', 'project', 'project', 'aggregate', 'select', 'discard', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_4756,Return the id of the staff whose Staff Department Assignment was earlier than that of any Clerical Staff.,return staffs ;return Clerical Staff ;return Staff Department Assignment of #1 ;return Staff Department Assignment of #2 ;return #1 where #3 is  earlier than  any  #4 ;return the  ids of #5,"[""SELECT['staffs']"", ""SELECT['Clerical Staff']"", ""PROJECT['Staff Department Assignment of #REF', '#1']"", ""PROJECT['Staff Department Assignment of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is earlier than any #4']"", ""PROJECT['the ids of #REF', '#5']""]","['select', 'select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_4757,What are the names and ids of customers whose address contains TN?,"return customers ;return addresses of #1 ;return #1 where #2 contains TN ;return names of #3 ;return ids of #3 ;return #4 ,  #5","[""SELECT['customers']"", ""PROJECT['addresses of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'contains TN']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['ids of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_4758,Return the names and ids of customers who have TN in their address.,"return customers ;return addresses of #1 ;return #1 where #2 has TN ;return names of #3 ;return ids of #3 ;return #4 ,  #5","[""SELECT['customers']"", ""PROJECT['addresses of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'has TN']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['ids of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_4759,Return the name and gender of the staff who was assigned in 2016.,"return staff ;return #1 assigned in 2016 ;return name of #2 ;return gender of #2 ;return #3 ,  #4","[""SELECT['staff']"", ""FILTER['#1', 'assigned in 2016']"", ""PROJECT['name of #REF', '#2']"", ""PROJECT['gender of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_476,What are the student ids for students over 20 years old?,return students ;return #1 over 20 years old ;return student ids of  #2,"[""SELECT['students']"", ""FILTER['#1', 'over 20 years old']"", ""PROJECT['student ids of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4760,What are the names and genders of staff who were assigned in 2016?,"return staff ;return #1 who  were assigned in 2016 ;return names of  #2 ;return genders of  #2 ;return #3 ,  #4","[""SELECT['staff']"", ""FILTER['#1', 'who were assigned in 2016']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['genders of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_4761,List the name of staff who has been assigned multiple jobs.,return staff ;return jobs assigned of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  multiple ;return names of #4,"[""SELECT['staff']"", ""PROJECT['jobs assigned of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is multiple']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_4762,What are the names of staff who have been assigned multiple jobs?,return staff ;return jobs of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  multiple ;return names of  #4,"[""SELECT['staff']"", ""PROJECT['jobs of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is multiple']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_4763,List the name and phone number of all suppliers in the alphabetical order of their addresses.,"return suppliers ;return names of  #1 ;return phone numbers of  #1 ;return addresses of  #1 ;return #2 ,  #3 ;return #5 sorted by #4 in alphabetical order","[""SELECT['suppliers']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['phone numbers of #REF', '#1']"", ""PROJECT['addresses of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#5', '#4', 'in alphabetical order']""]","['select', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_4764,"What are the names and phone numbers for all suppliers, sorted in alphabetical order of their addressed?","return suppliers ;return names of  #1 ;return phone numbers of  #1 ;return addressed of  #1 ;return #2 ,  #3 ;return #5 sorted by #4 in alphabetical order","[""SELECT['suppliers']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['phone numbers of #REF', '#1']"", ""PROJECT['addressed of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#5', '#4', 'in alphabetical order']""]","['select', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_4765,What are the phone numbers of all customers and suppliers.,"return customers ;return suppliers ;return #1 ,  #2 ;return phone numbers of  #3","[""SELECT['customers']"", ""SELECT['suppliers']"", ""UNION['#1', '#2']"", ""PROJECT['phone numbers of #REF', '#3']""]","['select', 'select', 'union', 'project']",train
SPIDER_train_4766,Return the phone numbers for all customers and suppliers.,"return customers ;return suppliers ;return #1 ,  #2 ;return phone numbers of #3","[""SELECT['customers']"", ""SELECT['suppliers']"", ""UNION['#1', '#2']"", ""PROJECT['phone numbers of #REF', '#3']""]","['select', 'select', 'union', 'project']",train
SPIDER_train_4767,Return the ids of all products that were ordered more than three times or supplied more than 80000.,"return products ;return times ordered of #1 ;return #1 where #2 is  higher than three ;return times supplied of #1 ;return #1 where #4 is  higher than 80000 ;return #3 ,  #5 ;return ids of #6","[""SELECT['products']"", ""PROJECT['times ordered of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than three']"", ""PROJECT['times supplied of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is higher than 80000']"", ""UNION['#3', '#5']"", ""PROJECT['ids of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'comparative', 'union', 'project']",train
SPIDER_train_4768,What are the ids of all products that were either ordered more than 3 times or have a cumulative amount purchased of above 80000?,"return products ;return #1 ordered more than 3 times ;return #1 that  have  a cumulative amount purchased of  above 80000 ;return ids of  #2 ;return ids of  #3 ;return #4 ,  #5","[""SELECT['products']"", ""FILTER['#1', 'ordered more than 3 times']"", ""FILTER['#1', 'that have a cumulative amount purchased of above 80000']"", ""PROJECT['ids of #REF', '#2']"", ""PROJECT['ids of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'filter', 'project', 'project', 'union']",train
SPIDER_train_4769,What are id and name of the products whose price is lower than 600 or higher than 900?,"return products ;return prices of  #1 ;return #1 where #2 is  lower than 600 ;return #1 where #2 is  higher than 900 ;return #3 or  #4 ;return id of  #5 ;return names of  #5 ;return #6 ,  #7","[""SELECT['products']"", ""PROJECT['prices of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is lower than 600']"", ""COMPARATIVE['#1', '#2', 'is higher than 900']"", ""UNION['#3', '#4']"", ""PROJECT['id of #REF', '#5']"", ""PROJECT['names of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project', 'project', 'union']",train
SPIDER_train_477,"Which city does the student whose last name is ""Kim"" live in?",return students ;return last names of #1 ;return #1 where #2 is  Kim ;return city of #3,"[""SELECT['students']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Kim']"", ""PROJECT['city of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4770,Give the ids and names of products with price lower than 600 or higher than 900.,"return products ;return prices of  #1 ;return #1 where  #2 is  lower than 600 ;return #1 where  #2 is  higher than 900 ;return #3 or  #4 ;return ids of  #5 ;return names of  #5 ;return #6 ,   #7","[""SELECT['products']"", ""PROJECT['prices of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is lower than 600']"", ""COMPARATIVE['#1', '#2', 'is higher than 900']"", ""UNION['#3', '#4']"", ""PROJECT['ids of #REF', '#5']"", ""PROJECT['names of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project', 'project', 'union']",train
SPIDER_train_4771,Find the id of suppliers whose average amount purchased for each product is above 50000 or below 30000.,"return suppliers ;return products of #1 ;return amounts of #2 purchased ;return the  average of #3 for each #1 ;return #1 where #4 is  above 50000 ;return #1 where #4 is  below 30000 ;return #5 ,  #6 ;return the  ids of #7","[""SELECT['suppliers']"", ""PROJECT['products of #REF', '#1']"", ""PROJECT['amounts of #REF purchased', '#2']"", ""GROUP['avg', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is above 50000']"", ""COMPARATIVE['#1', '#4', 'is below 30000']"", ""UNION['#5', '#6']"", ""PROJECT['the ids of #REF', '#7']""]","['select', 'project', 'project', 'group', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_4772,What are the ids of suppliers which have an average amount purchased of above 50000 or below 30000?,return suppliers ;return amounts purchased of  #1 ;return average of  #2 for each  #1 ;return #1 where #3 is  higher than 50000 ;return #1 where #3 is  lower than 30000 ;return #4 or  #5 ;return ids of  #6,"[""SELECT['suppliers']"", ""PROJECT['amounts purchased of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 50000']"", ""COMPARATIVE['#1', '#3', 'is lower than 30000']"", ""UNION['#4', '#5']"", ""PROJECT['ids of #REF', '#6']""]","['select', 'project', 'group', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_4773,What are the average amount purchased and value purchased for the supplier who supplies the most products.,"return suppliers ;return products of #1 ;return number of #2 for each #1 ;return #1 where #3 is  highest ;return amounts purchased  of #4 ;return average of #5 ;return value purchased  of #4 ;return average of #5 ;return #6 , #8","[""SELECT['suppliers']"", ""PROJECT['products of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['amounts purchased of #REF', '#4']"", ""AGGREGATE['avg', '#5']"", ""PROJECT['value purchased of #REF', '#4']"", ""AGGREGATE['avg', '#5']"", ""UNION['#6', '#8']""]","['select', 'project', 'group', 'superlative', 'project', 'aggregate', 'project', 'aggregate', 'union']",train
SPIDER_train_4774,Return the average total amount purchased and total value purchased for the supplier who supplies the greatest number of products.,"return suppliers ;return products that  #1 supply ;return number of  #2 for each #1 ;return #1 where #3 is  the   greatest ;return total  amounts purchased from #4 ;return total  values purchased from #4 ;return the   average of #5 ;return the   average of #6 ;return #7 ,  #8","[""SELECT['suppliers']"", ""PROJECT['products that #REF supply', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the greatest']"", ""PROJECT['amounts purchased from #REF', '#4']"", ""GROUP['sum', '#5', '#4']"", ""PROJECT['values purchased from #REF', '#4']"", ""GROUP['sum', '#7', '#4']"", ""AGGREGATE['avg', '#6']"", ""AGGREGATE['avg', '#8']"", ""UNION['#9', '#10']""]","['select', 'project', 'group', 'comparative', 'project', 'group', 'project', 'group', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_4775,What is the largest and smallest customer codes?,"return customer codes ;return #1 that  is  largest ;return #1 that  is  smallest ;return #2 ,  #3","[""SELECT['customer codes']"", ""FILTER['#1', 'that is largest']"", ""FILTER['#1', 'that is smallest']"", ""UNION['#2', '#3']""]","['select', 'filter', 'filter', 'union']",train
SPIDER_train_4776,Return the maximum and minimum customer codes.,"return customer codes ;return maximum of  #1 ;return minimum of  #1 ;return #2, #3","[""SELECT['customer codes']"", ""AGGREGATE['max', '#1']"", ""AGGREGATE['min', '#1']"", ""UNION['#2', '#3']""]","['select', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_4777,List the names of all the distinct customers who bought a keyboard.,return customers ;return #1 who  bought keyboards ;return distinct #2 ;return number of  #3,"[""SELECT['customers']"", ""FILTER['#1', 'who bought keyboards']"", ""PROJECT['distinct #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_4778,What are the distinct names of customers who have purchased a keyboard?,return customers ;return the  #1 who  purchased a keyboard ;return the  distinct names of  #2,"[""SELECT['customers']"", ""PROJECT['the #REF who purchased a keyboard', '#1']"", ""PROJECT['the distinct names of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_4779,List the names and phone numbers of all the distinct suppliers who supply red jeans.,"return suppliers ;return #1 who  supply red jeans ;return distinct #2 ;return names of  #3 ;return phone numbers of  #3 ;return #4 ,  #5","[""SELECT['suppliers']"", ""FILTER['#1', 'who supply red jeans']"", ""PROJECT['distinct #REF', '#2']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['phone numbers of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_478,Give the city that the student whose family name is Kim lives in.,return students ;return #1 with  family name Kim ;return the  city that  #2 lives in,"[""SELECT['students']"", ""FILTER['#1', 'with family name Kim']"", ""PROJECT['the city that #REF lives in', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4780,What are the distinct names and phone numbers for suppliers who have red jeans?,"return suppliers ;return #1 who  have  red jeans ;return distinct names of  #2 ;return phone numbers of  #2 ;return #3 ,  #4","[""SELECT['suppliers']"", ""FILTER['#1', 'who have red jeans']"", ""PROJECT['distinct names of #REF', '#2']"", ""PROJECT['phone numbers of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_4781,"What are the highest and lowest prices of products, grouped by and alphabetically ordered by product type?","return products ;return types of #1 ;return prices of #1 ;return highest #3 for each #2 ;return lowest #3 for each #2 ;return #4 ,  #5 ; return #6 sorted by #2 alphabetically","[""SELECT['products']"", ""PROJECT['types of #REF', '#1']"", ""PROJECT['prices of #REF', '#1']"", ""GROUP['max', '#3', '#2']"", ""GROUP['min', '#3', '#2']"", ""UNION['#4', '#5']"", ""SORT['#6', '#2', 'alphabetically']""]","['select', 'project', 'project', 'group', 'group', 'union', 'sort']",train
SPIDER_train_4782,"Give the maximum and minimum product prices for each product type, grouped and ordered by product type.","return product types ;return product prices of  #1 ;return maximum #2 for each #1 ;return minimum #2 for each #1 ;return #3 ,   #4 ;return #5 sorted by #1","[""SELECT['product types']"", ""PROJECT['product prices of #REF', '#1']"", ""GROUP['max', '#2', '#1']"", ""GROUP['min', '#2', '#1']"", ""UNION['#3', '#4']"", ""SORT['#5', '#1']""]","['select', 'project', 'group', 'group', 'union', 'sort']",train
SPIDER_train_4783,"List the order id, customer id for orders in Cancelled status, ordered by their order dates.","return orders ;return statuses of  #1 ;return #1 where  #2 is Cancelled ;return order  ids of  #3 ;return customer ids of  #3 ;return order  dates of  #3 ;return #4 ,  #5 ;return #7 sorted by #6","[""SELECT['orders']"", ""PROJECT['statuses of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Cancelled']"", ""PROJECT['order ids of #REF', '#3']"", ""PROJECT['customer ids of #REF', '#3']"", ""PROJECT['order dates of #REF', '#3']"", ""UNION['#4', '#5']"", ""SORT['#7', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_4784,"What are the order ids and customer ids for orders that have been Cancelled, sorted by their order dates?","return orders ;return #1 that  have  been Cancelled ;return order  ids of  #2 ;return customer ids of  #2 ;return order  dates of  #2 ;return #3 ,  #4 ;return #6 sorted by #5","[""SELECT['orders']"", ""FILTER['#1', 'that have been Cancelled']"", ""PROJECT['order ids of #REF', '#2']"", ""PROJECT['customer ids of #REF', '#2']"", ""PROJECT['order dates of #REF', '#2']"", ""UNION['#3', '#4']"", ""SORT['#6', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_4785,Find the names of products that were bought by at least two distinct customers.,return products ;return customers who  bought #1 ;return distinct #2 ;return number of #3 for each #1 ;return #1 where  #4 is  two or  more ;return names of  #5,"[""SELECT['products']"", ""PROJECT['customers who bought #REF', '#1']"", ""PROJECT['distinct #REF', '#2']"", ""GROUP['count', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is two or more']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_4786,What are the distinct names of products purchased by at least two different customers?,return products ;return different customers who  purchased #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least two ;return distinct names of  #4,"[""SELECT['products']"", ""PROJECT['different customers who purchased #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""PROJECT['distinct names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_4788,What are the distinct names of customers who have purchased at least three different products?,return customers ;return products #1 purchased ;return number of  #2 for each  #1 ;return #1 where #3 is  at least three ;return distinct names of  #4,"[""SELECT['customers']"", ""PROJECT['products #REF purchased', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least three']"", ""PROJECT['distinct names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_4789,Find the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff.,"return staffs ;return jobs assigned to  #1 ;return #1 where at least one #2 is  Sales Person ;return #1 where at least one #2 is  Clerical Staff ;return #1 in both #3 and #4 ;return #3 besides #5 ;return the   names of #6 ;return the   genders of #6 ;return #7 ,  #8","[""SELECT['staffs']"", ""PROJECT['jobs assigned to #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Sales Person']"", ""COMPARATIVE['#1', '#2', 'is Clerical Staff']"", ""INTERSECTION['#1', '#3', '#4']"", ""DISCARD['#3', '#5']"", ""PROJECT['the names of #REF', '#6']"", ""PROJECT['the genders of #REF', '#6']"", ""UNION['#7', '#8']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'discard', 'project', 'project', 'union']",train
SPIDER_train_479,Who is the advisor of student with ID 1004?,return students ;return #1 with ID 1004 ;return the  advisor of  #2,"[""SELECT['students']"", ""FILTER['#1', 'with ID 1004']"", ""PROJECT['the advisor of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4790,"What are the names and genders of staff who have held the title Sales Person, but never Clerical Staff?","return Staff ;return #1 held the  title Sales Person ;return #1 held the  title Clerical Staff ;return #2 besides  #3 ;return names of  #4 ;return genders of  #4 ;return #5 ,  #6","[""SELECT['Staff']"", ""FILTER['#1', 'held the title Sales Person']"", ""FILTER['#1', 'held the title Clerical Staff']"", ""DISCARD['#2', '#3']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['genders of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'filter', 'filter', 'discard', 'project', 'project', 'union']",train
SPIDER_train_4791,Find the id and name of customers whose address contains WY state and do not use credit card for payment.,"return customers ;return addresses of #1 ;return #1 where #2 contains WY state ;return payments used of #3 ;return #3 where #4 is credit card ;return #3 besides  #5 ;return ids of #6 ;return names of #6 ;return #7 ,  #8","[""SELECT['customers']"", ""PROJECT['addresses of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'contains WY state']"", ""PROJECT['payments used of #REF', '#3']"", ""COMPARATIVE['#3', '#4', 'is credit card']"", ""DISCARD['#3', '#5']"", ""PROJECT['ids of #REF', '#6']"", ""PROJECT['names of #REF', '#6']"", ""UNION['#7', '#8']""]","['select', 'project', 'comparative', 'project', 'comparative', 'discard', 'project', 'project', 'union']",train
SPIDER_train_4792,What are the ids and names of customers with addressed that contain WY and who do not use a credit card for payment?,"return customers ;return #1 who  do not  use a credit card for payment ;return #2 with addressed that  contain WY ;return ids of  #3 ;return names of  #3 ;return #4 ,  #5","[""SELECT['customers']"", ""FILTER['#1', 'who do not use a credit card for payment']"", ""FILTER['#2', 'with addressed that contain WY']"", ""PROJECT['ids of #REF', '#3']"", ""PROJECT['names of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'filter', 'project', 'project', 'union']",train
SPIDER_train_4793,Find the average price of all product clothes.,return product clothes ;return price of  all #1 ;return average of  #2,"[""SELECT['product clothes']"", ""PROJECT['price of all #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_4794,What is the average price of clothes?,return clothes ;return prices of  #1 ;return average of  #2,"[""SELECT['clothes']"", ""PROJECT['prices of #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_4795,Find the name of the most expensive hardware product.,return hardware products ;return most expensive #1 ;return name of  #2,"[""SELECT['hardware products']"", ""PROJECT['most expensive #REF', '#1']"", ""PROJECT['name of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_4796,What is the name of the hardware product with the greatest price?,return hardware products ;return prices of #1 ;return #1 where #2 is  the   greatest ;return the   name of #3,"[""SELECT['hardware products']"", ""PROJECT['prices of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the greatest']"", ""PROJECT['the name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4797,How many aircrafts are there?,return aircraft ;return number of #1,"[""SELECT['aircraft']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_4798,What is the number of aircraft?,return aircraft ;return number of  #1,"[""SELECT['aircraft']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_4799,List the description of all aircrafts.,return aircrafts ;return descriptions of  #1,"[""SELECT['aircrafts']"", ""PROJECT['descriptions of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_48,List the official names of cities that have not held any competition.,return cities ;return #1 that  have  held competitions ;return #1 besides  #2 ;return official names of  #3,"[""SELECT['cities']"", ""FILTER['#1', 'that have held competitions']"", ""DISCARD['#1', '#2']"", ""PROJECT['official names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_480,Who advises student 1004?,return who  advises student 1004,"[""SELECT['who advises student 1004']""]",['select'],train
SPIDER_train_4800,What are the descriptions for the aircrafts?,return aircrafts ;return descriptions for #1,"[""SELECT['aircrafts']"", ""PROJECT['descriptions for #REF', '#1']""]","['select', 'project']",train
SPIDER_train_4801,What is the average number of international passengers of all airports?,return airports ;return passengers of #1 ;return #2 that  are international ;return number of  #3 ;return average of #4,"[""SELECT['airports']"", ""PROJECT['passengers of #REF', '#1']"", ""FILTER['#2', 'that are international']"", ""AGGREGATE['count', '#3']"", ""AGGREGATE['avg', '#4']""]","['select', 'project', 'filter', 'aggregate', 'aggregate']",train
SPIDER_train_4802,What is the average number of international passengers for an airport?,return airports ;return number of  international passengers for #1 ;return average #2,"[""SELECT['airports']"", ""PROJECT['international passengers for #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['avg', '#3']""]","['select', 'project', 'group', 'aggregate']",train
SPIDER_train_4803,"What are the number of international and domestic passengers of the airport named London ""Heathrow""?","return airports ;return #1 named London Heathrow ;return international passengers of #2 ;return number of  #3 ;return domestic passengers of #2 ;return number of  #5 ;return #4 ,  #6","[""SELECT['airports']"", ""FILTER['#1', 'named London Heathrow']"", ""PROJECT['international passengers of #REF', '#2']"", ""AGGREGATE['count', '#3']"", ""PROJECT['domestic passengers of #REF', '#2']"", ""AGGREGATE['count', '#5']"", ""UNION['#4', '#6']""]","['select', 'filter', 'project', 'aggregate', 'project', 'aggregate', 'union']",train
SPIDER_train_4804,How many international and domestic passengers are there in the airport London Heathrow?,return airports ;return passengers of  #1 ;return #2 where  #1 is London Heathrow ;return #3 that  are  international ;return number of  #4 ;return #3 that  are  domestic ;return number of  #6 ;return sum of  #5 and #6,"[""SELECT['airports']"", ""PROJECT['passengers of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is London Heathrow']"", ""FILTER['#3', 'that are international']"", ""AGGREGATE['count', '#4']"", ""FILTER['#3', 'that are domestic']"", ""AGGREGATE['count', '#6']"", ""ARITHMETIC['sum', '#5', '#6']""]","['select', 'project', 'comparative', 'filter', 'aggregate', 'filter', 'aggregate', 'arithmetic']",train
SPIDER_train_4805,"What are the total number of Domestic Passengers of airports that contain the word ""London"".",return airports ;return #1 that  contain the  word London ;return Domestic Passengers of  #2 ;return total number of  #3,"[""SELECT['airports']"", ""FILTER['#1', 'that contain the word London']"", ""PROJECT['Domestic Passengers of #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_4806,What are the total number of domestic passengers at all London airports?,return London airports ;return domestic passengers at #1 ;return sum of  #2,"[""SELECT['London airports']"", ""PROJECT['domestic passengers at #REF', '#1']"", ""AGGREGATE['sum', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_4807,What are the maximum and minimum number of transit passengers of all aiports.,"return aiports ;return transit passengers of  #1 ;return number of  #2 ;return maximum of  #3 ;return minimum of  #3 ;return #4 ,  #5","[""SELECT['aiports']"", ""PROJECT['transit passengers of #REF', '#1']"", ""AGGREGATE['count', '#2']"", ""AGGREGATE['max', '#3']"", ""AGGREGATE['min', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_4808,What is the maximum and mininum number of transit passengers for all airports?,"return airports ;return transit passengers of  #1 ;return number of  #2 for each  #1 ;return maximum of  #3 ;return mininum of  #3 ;return #4 ,  #5","[""SELECT['airports']"", ""PROJECT['transit passengers of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['max', '#3']"", ""PROJECT['mininum of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'group', 'aggregate', 'project', 'union']",train
SPIDER_train_4809,What are the name of pilots aged 25 or older?,"return pilots ;return #1 aged 25 ;return #1 aged larger than 25 ;return names of  #2 ;return names of  #3 ;return #4 ,  #5","[""SELECT['pilots']"", ""FILTER['#1', 'aged 25']"", ""FILTER['#1', 'aged larger than 25']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['names of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'filter', 'project', 'project', 'union']",train
SPIDER_train_481,How many students live in HKG or CHI?,return students ;return #1 that  live in HKG ;return #1 that  live in CHI ;return #2 or #3 ;return number of  #4,"[""SELECT['students']"", ""FILTER['#1', 'that live in HKG']"", ""FILTER['#1', 'that live in CHI']"", ""UNION['#2', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'filter', 'filter', 'union', 'aggregate']",train
SPIDER_train_4810,what is the name of every pilot who is at least 25 years old?,return pilots ;return #1 who  are  at least 25 years old ;return names of  #2,"[""SELECT['pilots']"", ""FILTER['#1', 'who are at least 25 years old']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4811,List all pilot names in ascending alphabetical order.,return pilots ;return names of  #1 ;return #2 sorted by ascending alphabetical order,"[""SELECT['pilots']"", ""PROJECT['names of #REF', '#1']"", ""SORT['#2', '#2', 'ascending alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_4812,What are the names of the pilots in alphabetical order?,return pilots ;return names of  #1 ;return #2 sorted by alphabetical order,"[""SELECT['pilots']"", ""PROJECT['names of #REF', '#1']"", ""SORT['#2', '#2', 'alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_4813,List names of all pilot aged 30 or younger in descending alphabetical order.,return pilots ;return age of  #1 ;return #1 where  #2 is at most 30 ;return names of  #3 ;return #4 sorted by descending alphabetical order,"[""SELECT['pilots']"", ""PROJECT['age of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at most 30']"", ""PROJECT['names of #REF', '#3']"", ""SORT['#4', '#4', 'descending alphabetical order']""]","['select', 'project', 'comparative', 'project', 'sort']",train
SPIDER_train_4814,What are the names of all pilots 30 years old or young in descending alphabetical order?,return pilots ;return #1 who are 30 years old ;return names of #2 ;return #3 sorted by descending alphabetical order,"[""SELECT['pilots']"", ""FILTER['#1', 'who are 30 years old']"", ""PROJECT['names of #REF', '#2']"", ""SORT['#3', '#3', 'descending alphabetical order']""]","['select', 'filter', 'project', 'sort']",train
SPIDER_train_4815,"Please show the names of aircrafts associated with airport with name ""London Gatwick"".",return airports ;return names of  #1 ;return #1 where  #2 is London Gatwick ;return aircrafts associated with  #3 ;return names of  #4,"[""SELECT['airports']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is London Gatwick']"", ""PROJECT['aircrafts associated with #REF', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_4816,What are the names of all the aircrafts associated with London Gatwick airport?,return aircrafts ;return #1 associated with  London Gatwick airport ;return the  names of #2,"[""SELECT['aircrafts']"", ""FILTER['#1', 'associated with London Gatwick airport']"", ""PROJECT['the names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4817,Please show the names and descriptions of aircrafts associated with airports that have a total number of passengers bigger than 10000000.,"return airports ;return passengers of #1 ;return number of  #2 for each #1 ;return sum of #3 for each #1 ;return #1 where #4 is  bigger than  10000000 ;return aircrafts of #5 ;return the  names of #6 ;return the  descriptions of #6 ;return #7 ,  #8","[""SELECT['airports']"", ""PROJECT['passengers of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""GROUP['sum', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is bigger than 10000000']"", ""PROJECT['aircrafts of #REF', '#5']"", ""PROJECT['the names of #REF', '#6']"", ""PROJECT['the descriptions of #REF', '#6']"", ""UNION['#7', '#8']""]","['select', 'project', 'group', 'group', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_4818,What are the names and descriptions of aircrafts associated with an airport that has more total passengers than 10000000?,"return airports ;return passengers of #1 ;return sum of #2 for each #1 ;return #1 where #3 is  more than  10000000 ;return aircrafts of #4 ;return names of #5 ;return descriptions of #5 ;return #6 ,  #7","[""SELECT['airports']"", ""PROJECT['passengers of #REF', '#1']"", ""GROUP['sum', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than 10000000']"", ""PROJECT['aircrafts of #REF', '#4']"", ""PROJECT['names of #REF', '#5']"", ""PROJECT['descriptions of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_4819,"What is the average total number of passengers of airports that are associated with aircraft ""Robinson R-22""?",return airports ;return aircraft #1 are associated with  ;return #1 where #2 is  Robinson R-22 ;return passengers of #3 ;return number of  #4 ;return sum of #5 for each #3 ;return average of #6,"[""SELECT['airports']"", ""PROJECT['aircraft #REF are associated with', '#1']"", ""COMPARATIVE['#1', '#2', 'is Robinson R-22']"", ""PROJECT['passengers of #REF', '#3']"", ""AGGREGATE['count', '#4']"", ""GROUP['sum', '#5', '#3']"", ""AGGREGATE['avg', '#6']""]","['select', 'project', 'comparative', 'project', 'aggregate', 'group', 'aggregate']",train
SPIDER_train_482,Give the number of students living in either HKG or CHI.,return students ;return #1 living in HKG ;return #1 living in CHI ;return #2 or  #3 ;return number of #4,"[""SELECT['students']"", ""FILTER['#1', 'living in HKG']"", ""FILTER['#1', 'living in CHI']"", ""UNION['#2', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'filter', 'filter', 'union', 'aggregate']",train
SPIDER_train_4820,"What is the average total number of passengers for all airports that the aircraft ""Robinson R-22"" visits?",return airports ;return aircraft that  visits #1 ;return #1 where #2 is  Robinson R-22 ;return passengers of #3 ;return number of  #4 ;return average of #5,"[""SELECT['airports']"", ""PROJECT['aircraft that visits #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Robinson R-22']"", ""PROJECT['passengers of #REF', '#3']"", ""AGGREGATE['count', '#4']"", ""AGGREGATE['avg', '#5']""]","['select', 'project', 'comparative', 'project', 'aggregate', 'aggregate']",train
SPIDER_train_4821,Please list the location and the winning aircraft name.,"return location ;return winning aircraft ;return name of #2 ;return #1 ,  #3","[""SELECT['location']"", ""SELECT['winning aircraft']"", ""PROJECT['name of #REF', '#2']"", ""UNION['#1', '#3']""]","['select', 'select', 'project', 'union']",train
SPIDER_train_4822,What is the location and name of the winning aircraft?,"return winning aircraft ;return location of  #1 ;return name of  #1 ;return #2 ,  #3","[""SELECT['winning aircraft']"", ""PROJECT['location of #REF', '#1']"", ""PROJECT['name of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_4823,List the name of the aircraft that has been named winning aircraft the most number of times.,return aircraft ;return winning aircraft ;return number of  #2 for each  #1 ;return #1 where #3 is highest ;return name in #4,"[""SELECT['aircraft']"", ""SELECT['winning aircraft']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name in #REF', '#4']""]","['select', 'select', 'group', 'superlative', 'project']",train
SPIDER_train_4824,What is the name of the aircraft that has won an award the most?,return aircraft ;return awards won of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest ;return name of #4,"[""SELECT['aircraft']"", ""PROJECT['awards won of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_4825,List the names of aircrafts and the number of times it won matches.,"return aircrafts ;return names of  #1 ;return matches won of  #1 ;return number of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['aircrafts']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['matches won of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_4826,"For each aircraft that has won an award, what is its name and how many time has it won?","return aircraft ;return awards that  #1 won ;return number of  #2 for each #1 ;return #1 where #3 is  at least one ;return names of #4 ;return awards that  #4 won ;return number of  #6 for each #4 ;return #5 ,  #7","[""SELECT['aircraft']"", ""PROJECT['awards that #REF won', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least one']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['awards that #REF won', '#4']"", ""GROUP['count', '#6', '#4']"", ""UNION['#5', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'group', 'union']",train
SPIDER_train_4827,List names of all pilot in descending order of age.,return pilots ;return names of  #1 ;return ages of  #1 ;return #2 sorted by #3 in descending order,"[""SELECT['pilots']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['ages of #REF', '#1']"", ""SORT['#2', '#3', 'in descending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_4828,What are the names of all pilots listed by descending age?,return pilots ;return names of #1 ;return ages of #1 ;return #2 sorted by #3 descending,"[""SELECT['pilots']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['ages of #REF', '#1']"", ""SORT['#2', '#3', 'descending']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_4829,List the names of aircrafts and that won matches at least twice.,return aircrafts ;return matches won of  #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is at least twice ;return names of  #4,"[""SELECT['aircrafts']"", ""PROJECT['matches won of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least twice']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_483,"Show the minimum, average, and maximum age of all students.","return students ;return ages of  #1 ;return minimum of  #2 ;return average of  #2 ;return maximum of  #2 ;return #3 ,  #4 ,   #5","[""SELECT['students']"", ""PROJECT['ages of #REF', '#1']"", ""AGGREGATE['min', '#2']"", ""AGGREGATE['avg', '#2']"", ""AGGREGATE['max', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'project', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_4830,What are the names of all aircrafts that have won a match at least twice?,return aircrafts ;return matches won of #1 ;return number of #2 for each #1 ;return #1 where #3 is  at least twice ;return names of #4,"[""SELECT['aircrafts']"", ""PROJECT['matches won of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least twice']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_4831,List the names of aircrafts and that did not win any match.,return aircrafts ;return #1 that  did  not win any  match ;return names of #2,"[""SELECT['aircrafts']"", ""FILTER['#1', 'that did not win any match']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4832,What are the names of all aicrafts that have never won any match?,return aicrafts ;return #1 that  have  never won any match ;return names of  #2,"[""SELECT['aicrafts']"", ""FILTER['#1', 'that have never won any match']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4833,"Show the names of aircrafts that are associated with both an airport named ""London Heathrow"" and an airport named ""London Gatwick""",return aircrafts ;return #1 associated with  London  Heathrow ;return #1 associated with  London Gatwick ;return #1 of  both #2 and #3,"[""SELECT['aircrafts']"", ""FILTER['#1', 'associated with London Heathrow']"", ""FILTER['#1', 'associated with London Gatwick']"", ""INTERSECTION['#1', '#2', '#3']""]","['select', 'filter', 'filter', 'intersection']",train
SPIDER_train_4834,What are the names of all aircrafts that are associated with both London Heathrow and Gatwick airports?,return aircrafts ;return airports #1 are  associated with ;return #1 where #2 is  London Heathrow ;return #1 where #2 is  Gatwick ;return #1 of  both #3 and  #4 ;return names of  #5,"[""SELECT['aircrafts']"", ""PROJECT['airports #REF are associated with', '#1']"", ""COMPARATIVE['#1', '#2', 'is London Heathrow']"", ""COMPARATIVE['#1', '#2', 'is Gatwick']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_4835,Show all information on the airport that has the largest number of international passengers.,return airports ;return passengers of #1 ;return #2 that  are international ;return number of #3 for each #1 ;return #1 where #4 is  highest ;return all information on  #5,"[""SELECT['airports']"", ""PROJECT['passengers of #REF', '#1']"", ""FILTER['#2', 'that are international']"", ""GROUP['count', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']"", ""PROJECT['all information on #REF', '#5']""]","['select', 'project', 'filter', 'group', 'superlative', 'project']",train
SPIDER_train_4836,What is all the information on the airport with the largest number of international passengers?,return airports ;return passengers of #1 ;return #2 that  are international ;return number of #3 for each #1 ;return all the information on  #4,"[""SELECT['airports']"", ""PROJECT['passengers of #REF', '#1']"", ""FILTER['#2', 'that are international']"", ""GROUP['count', '#3', '#1']"", ""PROJECT['all the information on #REF', '#4']""]","['select', 'project', 'filter', 'group', 'project']",train
SPIDER_train_4837,find the name and age of the pilot who has won the most number of times among the pilots who are younger than 30.,"return pilots ;return #1 who  are  younger than 30 ;return #2 who  has  won the  most number of  times ;return the  name of  #3 ;return the  age of  #3 ;return #4 ,  #5","[""SELECT['pilots']"", ""FILTER['#1', 'who are younger than 30']"", ""FILTER['#2', 'who has won the most number of times']"", ""PROJECT['the name of #REF', '#3']"", ""PROJECT['the age of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'filter', 'project', 'project', 'union']",train
SPIDER_train_4838,What is the name and age of the pilot younger than 30 who has won the most number of times?,"return pilots ;return ages of #1 ;return #1 where #2 is  lower than 30 ;return times #3 have won ;return number of  #4 for each #3 ;return #3 where #5 is  the   highest ;return the   name of #6 ;return the   age of #6 ;return #7 ,  #8","[""SELECT['pilots']"", ""PROJECT['ages of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is lower than 30']"", ""PROJECT['times #REF have won', '#3']"", ""GROUP['count', '#4', '#3']"", ""COMPARATIVE['#3', '#5', 'is the highest']"", ""PROJECT['the name of #REF', '#6']"", ""PROJECT['the age of #REF', '#6']"", ""UNION['#7', '#8']""]","['select', 'project', 'comparative', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_4839,what is the name and age of the youngest winning pilot?,"return winning pilots ;return ages of #1 ;return #1 where #2 is  the lowest ;return name of #3 ;return age of #3 ;return #4 , #5","[""SELECT['winning pilots']"", ""PROJECT['ages of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the lowest']"", ""PROJECT['name of #REF', '#3']"", ""PROJECT['age of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_484,"What is the minimum, mean, and maximum age across all students?","return students ;return ages of  #1 ;return minimum of  #2 ;return mean of  #2 ;return maximum of  #2 ;return #3 ,  #4 ,   #5","[""SELECT['students']"", ""PROJECT['ages of #REF', '#1']"", ""AGGREGATE['min', '#2']"", ""AGGREGATE['avg', '#2']"", ""AGGREGATE['max', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'project', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_4840,How old is the youngest winning pilot and what is their name?,"return winning pilots ;return the  youngest #1 ;return the  name of #2 ;return how old #2 is  ;return #4 ,  #3","[""SELECT['winning pilots']"", ""PROJECT['the youngest #REF', '#1']"", ""PROJECT['the name of #REF', '#2']"", ""PROJECT['how old #REF is', '#2']"", ""UNION['#4', '#3']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_4841,find the name of pilots who did not win the matches held in the country of Australia.,return matches ;return countries of #1 ;return #1 where #2 is Australia ;return pilots of #3 ;return #4 that win the  matches ;return #4 besides  #5 ;return names of #6,"[""SELECT['matches']"", ""PROJECT['countries of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Australia']"", ""PROJECT['pilots of #REF', '#3']"", ""FILTER['#4', 'that win the matches']"", ""DISCARD['#4', '#5']"", ""PROJECT['names of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'filter', 'discard', 'project']",train
SPIDER_train_4842,What are the names of the pilots that have not won any matches in Australia?,return pilots ;return #1 that  have  won matches in Australia ;return #1 besides  #2 ;return the  names of  #3,"[""SELECT['pilots']"", ""FILTER['#1', 'that have won matches in Australia']"", ""DISCARD['#1', '#2']"", ""PROJECT['the names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_4843,How many residents does each property have? List property id and resident count.,"return properties ;return residents of  #1 ;return number of  #2 for each  #1 ;return property ids of  #1 ;return #4 ,  #3","[""SELECT['properties']"", ""PROJECT['residents of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['property ids of #REF', '#1']"", ""UNION['#4', '#3']""]","['select', 'project', 'group', 'project', 'union']",train
SPIDER_train_4844,What is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'?,return organizations ;return details of  #1 ;return #1 where #2 is  'Denesik and  Sons Party ;return distinct service types provided by #3,"[""SELECT['organizations']"", ""PROJECT['details of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Denesik and Sons Party']"", ""PROJECT['distinct service types provided by #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4845,"How many services has each resident requested? List the resident id, details, and the count in descending order of the count.","return residents ;return services requested of  #1 ;return number of  #2 for each  #1 ;return resident ids of  #1 ;return details of  #1 ;return #4 ,  #5 , #3 ;return #6 sorted by #3 in descending order","[""SELECT['residents']"", ""PROJECT['services requested of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['resident ids of #REF', '#1']"", ""PROJECT['details of #REF', '#1']"", ""UNION['#4', '#5', '#3']"", ""SORT['#6', '#3', 'in descending order']""]","['select', 'project', 'group', 'project', 'project', 'union', 'sort']",train
SPIDER_train_4846,"What is the maximum number that a certain service is provided? List the service id, details and number.","return services provided ;return number of  #1 for each service ;return the  highest of #2 ;return #1 where #2 is equal to #3 ;return service id of #4 ;return details of #4 ;return #5 ,  #6 ,   #3","[""SELECT['services provided']"", ""PROJECT['service', '#1']"", ""GROUP['count', '#1', '#2']"", ""AGGREGATE['max', '#3']"", ""COMPARATIVE['#1', '#3', 'is equal to #4']"", ""PROJECT['service id of #REF', '#5']"", ""PROJECT['details of #REF', '#5']"", ""UNION['#6', '#7', '#4']""]","['select', 'project', 'group', 'aggregate', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_4847,"List the id and type of each thing, and the details of the organization that owns it.","return things ;return ids of  #1 ;return types of  #1 ;return organizations that  own #1 ;return details of  #4 ;return #2 ,  #3 , #5","[""SELECT['things']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['types of #REF', '#1']"", ""PROJECT['organizations that own #REF', '#1']"", ""PROJECT['details of #REF', '#4']"", ""UNION['#2', '#3', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_4848,What are the id and details of the customers who have at least 3 events?,"return customers ;return events that  #1 have ;return the  number of  #2 for each #1 ;return #1 where #3 is  at least 3 ;return the  ids of #4 ;return the  details of #4 ;return #5 ,  #6","[""SELECT['customers']"", ""PROJECT['events that #REF have', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 3']"", ""PROJECT['the ids of #REF', '#4']"", ""PROJECT['the details of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_4849,"What is each customer's move in date, and the corresponding customer id and details?","return customers ;return move in  dates of #1 ;return customer  ids of #1 ;return details of #1 ;return #2 ,  #3 ,   #4","[""SELECT['customers']"", ""PROJECT['move in dates of #REF', '#1']"", ""PROJECT['customer ids of #REF', '#1']"", ""PROJECT['details of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_485,What is the last name of the youngest student?,return students ;return #1 that  is  youngest ;return last names of  #2,"[""SELECT['students']"", ""FILTER['#1', 'that is youngest']"", ""PROJECT['last names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4850,Which events have the number of notes between one and three? List the event id and the property id.,"return events ;return notes of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least one ;return #1 where #3 is  at most three ;return #1 of  both #4 and  #5 ;return event ids of  #6 ;return property ids of  #6 ;return #7 ,  #8","[""SELECT['events']"", ""PROJECT['notes of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least one']"", ""COMPARATIVE['#1', '#3', 'is at most three']"", ""INTERSECTION['#1', '#4', '#5']"", ""PROJECT['event ids of #REF', '#6']"", ""PROJECT['property ids of #REF', '#6']"", ""UNION['#7', '#8']""]","['select', 'project', 'group', 'comparative', 'comparative', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_4851,What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21',"return things ;return statuses of #1 ;return #1 where #2 is  'Close ;return status  records of #1 ;return dates of #4 ;return #1 where #5 is  before '2017-06-19 02:59:21 ;return #3 or  #6 ;return distinct id of #7 ;return type of #7 ;return #8 ,  #9","[""SELECT['things']"", ""PROJECT['statuses of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Close']"", ""PROJECT['status records of #REF', '#1']"", ""PROJECT['dates of #REF', '#4']"", ""COMPARATIVE['#1', '#5', 'is before 2017-06-19 02:59:21']"", ""UNION['#3', '#6']"", ""PROJECT['distinct id of #REF', '#7']"", ""PROJECT['type of #REF', '#7']"", ""UNION['#8', '#9']""]","['select', 'project', 'comparative', 'project', 'project', 'comparative', 'union', 'project', 'project', 'union']",train
SPIDER_train_4852,How many distinct locations have the things with service detail 'Unsatisfied' been located in?,return locations ;return things of  #1 ;return service details of  #2 ;return #1 where  #3 is  'Unsatisfied ;return distinct #4 ;return number of #5,"[""SELECT['locations']"", ""PROJECT['things of #REF', '#1']"", ""PROJECT['service details of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Unsatisfied']"", ""PROJECT['distinct #REF', '#4']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_4853,How many different status codes of things are there?,return things ;return status codes of  #1 ;return different #2 ;return number of  #3,"[""SELECT['things']"", ""PROJECT['status codes of #REF', '#1']"", ""PROJECT['different #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_4854,Which organizations are not a parent organization of others? List the organization id.,return organizations ;return #1 that  are parent organizations ;return #1 besides #2 ;return the  organization ids of #3,"[""SELECT['organizations']"", ""FILTER['#1', 'that are parent organizations']"", ""DISCARD['#1', '#2']"", ""PROJECT['the organization ids of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_4855,When is the last day any resident moved in?,return residents ;return days #1 moved in ;return #2 that  is  the  last,"[""SELECT['residents']"", ""PROJECT['days #REF moved in', '#1']"", ""FILTER['#2', 'that is the last']""]","['select', 'project', 'filter']",train
SPIDER_train_4856,What are the resident details containing the substring 'Miss'?,return residents ;return resident details of  #1 ;return #1 where #2 contain substring 'Miss ;return resident details of  #3,"[""SELECT['residents']"", ""PROJECT['resident details of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'contain substring Miss']"", ""PROJECT['resident details of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4857,List the customer event id and the corresponding move in date and property id.,"return customer event ids ;return move in dates of  #1 ;return property ids of  #1 ;return #1 ,  #2 , #3","[""SELECT['customer event ids']"", ""PROJECT['move in dates of #REF', '#1']"", ""PROJECT['property ids of #REF', '#1']"", ""UNION['#1', '#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_4858,How many customers did not have any event?,return customers ;return #1 with  events ;return #1 besides #2 ;return number of #3,"[""SELECT['customers']"", ""FILTER['#1', 'with events']"", ""DISCARD['#1', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'discard', 'aggregate']",train
SPIDER_train_4859,What are the distinct move in dates of the residents?,return residents ;return distinct move in dates of  #1,"[""SELECT['residents']"", ""PROJECT['distinct move in dates of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_486,Provide the last name of the youngest student.,return students ;return youngest #1 ;return last name of  #2,"[""SELECT['students']"", ""PROJECT['youngest #REF', '#1']"", ""PROJECT['last name of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_4861,Count the number of schools.,return schools ;return number of #1,"[""SELECT['schools']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_4862,List the locations of schools in ascending order of enrollment.,return schools ;return locations of  #1 ;return enrollments of  #1 ;return #2 sorted by #3 in ascending order,"[""SELECT['schools']"", ""PROJECT['locations of #REF', '#1']"", ""PROJECT['enrollments of #REF', '#1']"", ""SORT['#2', '#3', 'in ascending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_4863,What is the list of school locations sorted in ascending order of school enrollment?,return schools ;return locations of #1 ;return enrollments of #1 ;return #2 sorted by #3,"[""SELECT['schools']"", ""PROJECT['locations of #REF', '#1']"", ""PROJECT['enrollments of #REF', '#1']"", ""SORT['#2', '#3']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_4864,List the locations of schools in descending order of founded year.,return schools ;return locations of  #1 ;return founded years of  #1 ;return #2 sorted by #3 in descending order,"[""SELECT['schools']"", ""PROJECT['locations of #REF', '#1']"", ""PROJECT['founded years of #REF', '#1']"", ""SORT['#2', '#3', 'in descending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_4865,What is the list of school locations sorted in descending order of school foundation year?,return schools ;return locations of  #1 ;return foundation years of  #1 ;return #2 sorted by #3 in descending order,"[""SELECT['schools']"", ""PROJECT['locations of #REF', '#1']"", ""PROJECT['foundation years of #REF', '#1']"", ""SORT['#2', '#3', 'in descending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_4866,"What are the enrollments of schools whose denomination is not ""Catholic""?",return schools ;return denominations of  #1 ;return #1 where #2 is  not  Catholic ;return enrollments of  #3,"[""SELECT['schools']"", ""PROJECT['denominations of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not Catholic']"", ""PROJECT['enrollments of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4867,"List the enrollment for each school that does not have ""Catholic"" as denomination.",return schools ;return denominations of  #1 ;return #1 where  #2 is not  Catholic ;return enrollments of  #3,"[""SELECT['schools']"", ""PROJECT['denominations of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not Catholic']"", ""PROJECT['enrollments of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4868,What is the average enrollment of schools?,return schools ;return enrollment of  #1 ;return average of  #2,"[""SELECT['schools']"", ""PROJECT['enrollment of #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_4869,Take the average of the school enrollment.,return school ;return enrollments of  #1 ;return average of  #2,"[""SELECT['school']"", ""PROJECT['enrollments of #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_487,Show the student id of the oldest student.,return students ;return oldest #1 ;return student  id of  #2,"[""SELECT['students']"", ""PROJECT['oldest #REF', '#1']"", ""PROJECT['student id of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_4870,"What are the teams of the players, sorted in ascending alphabetical order?",return players ;return the  teams of  #1 ;return #2 sorted by ascending alphabetical order,"[""SELECT['players']"", ""PROJECT['the teams of #REF', '#1']"", ""SORT['#2', '#2', 'ascending alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_4871,Find the team of each player and sort them in ascending alphabetical order.,return players ;return teams of  #1 ;return #2 sorted by ascending alphabetical order,"[""SELECT['players']"", ""PROJECT['teams of #REF', '#1']"", ""SORT['#2', '#2', 'ascending alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_4872,How many different positions of players are there?,return players ;return positions of #1 ;return different #2 ;return number of  #3,"[""SELECT['players']"", ""PROJECT['positions of #REF', '#1']"", ""PROJECT['different #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_4873,Count the number of distinct player positions.,return player positions ;return #1 which  are  distinct ;return number of  #2,"[""SELECT['player positions']"", ""FILTER['#1', 'which are distinct']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_4874,Find the team of the player of the highest age.,return players ;return ages of  #1 ;return #1 where  #2 is  highest ;return team of  #3,"[""SELECT['players']"", ""PROJECT['ages of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['team of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_4875,Which team has the oldest player?,return players ;return how old are #1 ;return #1 where #2 is the  highest ;return team of #3,"[""SELECT['players']"", ""PROJECT['how old are #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the highest']"", ""PROJECT['team of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4876,List the teams of the players with the top 5 largest ages.,return players ;return ages of  #1 ;return top 5 largest #2 ;return #1 where #2 is #3 ;return teams of #4,"[""SELECT['players']"", ""PROJECT['ages of #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""COMPARATIVE['#1', '#2', 'is #3']"", ""PROJECT['teams of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_4877,What are the teams that have the 5 oldest players?,return players ;return 5 oldest of  #1 ;return teams that  have  #2,"[""SELECT['players']"", ""PROJECT['5 oldest of #REF', '#1']"", ""PROJECT['teams that have #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_4878,"For each player, show the team and the location of school they belong to.","return players ;return teams of #1 ;return schools of #1 ;return locations of #3 ;return #2 ,  #4","[""SELECT['players']"", ""PROJECT['teams of #REF', '#1']"", ""PROJECT['schools of #REF', '#1']"", ""PROJECT['locations of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_4879,What are the team and the location of school each player belongs to?,"return players ;return teams of  #1 ;return schools of  #1 ;return locations of  #3 ;return #2 ,  #4","[""SELECT['players']"", ""PROJECT['teams of #REF', '#1']"", ""PROJECT['schools of #REF', '#1']"", ""PROJECT['locations of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_488,What student id corresponds to the oldest student?,return students ;return #1 that  is  the  oldest ;return student  id of #2,"[""SELECT['students']"", ""FILTER['#1', 'that is the oldest']"", ""PROJECT['student id of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4880,Show the locations of schools that have more than 1 player.,return schools ;return number of  players for each #1 ;return #1 where #2 is  at least 1 ;return locations of  #3,"[""SELECT['schools']"", ""PROJECT['players', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 1']"", ""PROJECT['locations of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_4881,Which schools have more than 1 player? Give me the school locations.,return schools ;return players of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  higher than 1 ;return locations of #4,"[""SELECT['schools']"", ""PROJECT['players of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 1']"", ""PROJECT['locations of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_4882,Show the denomination of the school that has the most players.,return schools ;return players of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return denomination of  #4,"[""SELECT['schools']"", ""PROJECT['players of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['denomination of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_4883,What is the denomination of the school the most players belong to?,return players ;return school of #1 ;return number of  #1 for each #2 ;return #2 where #3 is highest ;return denomination of #4,"[""SELECT['players']"", ""PROJECT['school of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""SUPERLATIVE['max', '#2', '#3']"", ""PROJECT['denomination of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_4884,Show locations and nicknames of schools.,"return schools ;return nicknames of  #1 ;return locations of  #1 ;return #2 ,  #3","[""SELECT['schools']"", ""PROJECT['nicknames of #REF', '#1']"", ""PROJECT['locations of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_4885,What are the location and nickname of each school?,"return schools ;return locations of  #1 ;return nicknames of  #1 ;return #2 ,  #3","[""SELECT['schools']"", ""PROJECT['locations of #REF', '#1']"", ""PROJECT['nicknames of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_4886,Please show different denominations and the corresponding number of schools.,"return denominations ;return different #1 ;return schools of  #2 ;return number of  #3 for each  #2 ;return #2 ,  #4","[""SELECT['denominations']"", ""PROJECT['different #REF', '#1']"", ""PROJECT['schools of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_4887,"For each denomination, return the denomination and the count of schools with that denomination.","return denominations ;return schools with  #1 ;return number of #2 for each #1 ;return #1 ,   #3","[""SELECT['denominations']"", ""PROJECT['schools with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_4888,Please show different denominations and the corresponding number of schools in descending order.,"return different denominations ;return schools of  #1 ;return number of  #2 for each  #1 ;return #1 ,  #3 ;return #4 sorted by #3 in descending order","[""SELECT['different denominations']"", ""PROJECT['schools of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']"", ""SORT['#4', '#3', 'in descending order']""]","['select', 'project', 'group', 'union', 'sort']",train
SPIDER_train_4889,Order denominations in descending order of the count of schools with the denomination. Return each denomination with the count of schools.,return schools ;return denominations of #1 ;return number of  #1 for each  #2 ;return #3 sorted by #3 descending,"[""SELECT['schools']"", ""PROJECT['denominations of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""SORT['#3', '#3', 'descending']""]","['select', 'project', 'group', 'sort']",train
SPIDER_train_489,Show all majors and corresponding number of students.,"return majors ;return students of #1 ;return number of #2 for each #1 ;return #1 , #3","[""SELECT['majors']"", ""PROJECT['students of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_4890,List the school color of the school that has the largest enrollment.,return schools ;return enrollment of #1 ;return #1 where #2 is highest ;return school  color of #3,"[""SELECT['schools']"", ""PROJECT['enrollment of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['school color of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_4891,What is the school color of the school with the largest enrollment?,return schools ;return enrollments of #1 ;return #1 where #2 is  the   largest ;return the   school  colors of #3,"[""SELECT['schools']"", ""PROJECT['enrollments of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the largest']"", ""PROJECT['the school colors of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4892,List the locations of schools that do not have any player.,return schools ;return #1 that  do not  have  any player ;return locations of  #2,"[""SELECT['schools']"", ""FILTER['#1', 'that do not have any player']"", ""PROJECT['locations of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4893,Which schools do not have any player? Give me the school locations.,return schools ;return #1 with players ;return #1 besides  #2 ;return the  locations of  #3,"[""SELECT['schools']"", ""FILTER['#1', 'with players']"", ""DISCARD['#1', '#2']"", ""PROJECT['the locations of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_4894,Show the denomination shared by schools founded before 1890 and schools founded after 1900,return schools ;return #1 founded  before 1890 ;return #1 founded  after 1900 ;return denomination of #1 ; return #4 of both #2 and #3,"[""SELECT['schools']"", ""FILTER['#1', 'founded before 1890']"", ""FILTER['#1', 'founded after 1900']"", ""PROJECT['denomination of #REF', '#1']"", ""INTERSECTION['#4', '#2', '#3']""]","['select', 'filter', 'filter', 'project', 'intersection']",train
SPIDER_train_4895,What are the denominations used by both schools founded before 1890 and schools founded  after 1900?,return schools ;return #1 founded  before 1890 ;return #1 founded  after 1900 ;return denominations of #1 ;return #4 of both #2 and  #3,"[""SELECT['schools']"", ""FILTER['#1', 'founded before 1890']"", ""FILTER['#1', 'founded after 1900']"", ""PROJECT['denominations of #REF', '#1']"", ""INTERSECTION['#4', '#2', '#3']""]","['select', 'filter', 'filter', 'project', 'intersection']",train
SPIDER_train_4896,Show the nicknames of schools that are not in division 1.,return schools ;return #1 in division 1 ;return #1 besides #2 ;return nicknames of  #3,"[""SELECT['schools']"", ""FILTER['#1', 'in division 1']"", ""DISCARD['#1', '#2']"", ""PROJECT['nicknames of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_4897,What are the nicknames of schools whose division is not 1?,return schools ;return division of #1 ;return #1 where #2 is 1 ;return #1 besides  #3 ;return nicknames of #4,"[""SELECT['schools']"", ""PROJECT['division of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 1']"", ""DISCARD['#1', '#3']"", ""PROJECT['nicknames of #REF', '#4']""]","['select', 'project', 'comparative', 'discard', 'project']",train
SPIDER_train_4898,Show the denomination shared by more than one school.,return denominations ;return schools of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  higher than one,"[""SELECT['denominations']"", ""PROJECT['schools of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than one']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_4899,What are the denomination more than one school have?,return denominations ;return schools of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than one,"[""SELECT['denominations']"", ""PROJECT['schools of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than one']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_49,What are the official names of cities that have not hosted a farm competition?,return cities ;return farm competitions of #1 ;return number of  #2 for each #1 ;return #1 where #3 is higher than zero ;return #1 besides  #4 ;return official names of #5,"[""SELECT['cities']"", ""PROJECT['farm competitions of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than zero']"", ""DISCARD['#1', '#4']"", ""PROJECT['official names of #REF', '#5']""]","['select', 'project', 'group', 'comparative', 'discard', 'project']",train
SPIDER_train_490,How many students are there for each major?,return major ;return students of #1 ;return number of  #2 for each #1,"[""SELECT['major']"", ""PROJECT['students of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_4900,Find all the distinct district names ordered by city area in descending.,return districts ;return distinct names of  #1 ;return city areas of  #1 ;return #2 sorted by #3 in descending,"[""SELECT['districts']"", ""PROJECT['distinct names of #REF', '#1']"", ""PROJECT['city areas of #REF', '#1']"", ""SORT['#2', '#3', 'in descending']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_4901,What are the different district names in order of descending city area?,return districts ;return different names of  #1 ;return city area of  #2 ;return #2 sorted by #3 in descending order,"[""SELECT['districts']"", ""PROJECT['different names of #REF', '#1']"", ""PROJECT['city area of #REF', '#2']"", ""SORT['#2', '#3', 'in descending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_4902,Find the list of page size which have more than 3 product listed,return page sizes ;return products with #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than 3,"[""SELECT['page sizes']"", ""PROJECT['products with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 3']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_4903,What is the maximum page size for everything that has more than 3 products listed?,return pages ;return products ;return the number of #2 for each page ;return #1 where #3 is  more than  3 ;return page sizes for #4 ;return the maximum of #5,"[""SELECT['pages']"", ""SELECT['products']"", ""PROJECT['page', '#2']"", ""GROUP['count', '#2', '#3']"", ""COMPARATIVE['#1', '#4', 'is more than 3']"", ""PROJECT['page sizes for #REF', '#5']"", ""AGGREGATE['max', '#6']""]","['select', 'select', 'project', 'group', 'comparative', 'project', 'aggregate']",train
SPIDER_train_4904,Find the name and population of district with population between 200000 and 2000000,"return districts ;return population of #1 ;return #1 where #2 is at least 200000 ;return #1 where #2 is at most 2000000 ;return #1 in  both #3 and  #4 ;return name of #5 ;return population of #5 ;return #6 ,  #7","[""SELECT['districts']"", ""PROJECT['population of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least 200000']"", ""COMPARATIVE['#1', '#2', 'is at most 2000000']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['name of #REF', '#5']"", ""PROJECT['population of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_4905,"What are the district names and city populations for all districts that between 200,000 and 2,000,000 residents?","return districts ;return residents of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least 200,000 ;return #1 where #3 is  at most 2,000,000 ;return #1 of  both #4 and  #5 ;return district names of  #6 ;return city populations of  #6 ;return #7 ,  #8","[""SELECT['districts']"", ""PROJECT['residents of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 200 , 000']"", ""COMPARATIVE['#1', '#3', 'is at most 2 , 000 , 000']"", ""INTERSECTION['#1', '#4', '#5']"", ""PROJECT['district names of #REF', '#6']"", ""PROJECT['city populations of #REF', '#6']"", ""UNION['#7', '#8']""]","['select', 'project', 'group', 'comparative', 'comparative', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_4906,Find the name all districts with city area greater than 10 or population larger than 100000,return districts ;return city area of  #1 ;return #1 where  #2 is  greater than  10 ;return population of  #1 ;return #1 where  #4 is  greater than  100000 ;return #3 or  #5 ;return names of  #6,"[""SELECT['districts']"", ""PROJECT['city area of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is greater than 10']"", ""PROJECT['population of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is greater than 100000']"", ""UNION['#3', '#5']"", ""PROJECT['names of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'comparative', 'union', 'project']",train
SPIDER_train_4907,What are the names of all districts with a city area greater than 10 or have more than 100000 people living there?,"return districts ;return city area of #1 ;return population of #1 ;return #1 where #2 is higher than 10 ;return #1 where #3 is higher than 100000 people ;return #4 ,  #5 ;return names of #6","[""SELECT['districts']"", ""PROJECT['city area of #REF', '#1']"", ""PROJECT['population of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 10']"", ""COMPARATIVE['#1', '#3', 'is higher than 100000 people']"", ""UNION['#4', '#5']"", ""PROJECT['names of #REF', '#6']""]","['select', 'project', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_4908,Which district has the largest population?,return districts ;return populations of  #1 ;return #1 where #2 is  highest,"[""SELECT['districts']"", ""PROJECT['populations of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']""]","['select', 'project', 'superlative']",train
SPIDER_train_4909,What is the name of the district with the most residents?,return districts ;return residents of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return name of  #4,"[""SELECT['districts']"", ""PROJECT['residents of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_491,Which major has most number of students?,return major ;return students of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['major']"", ""PROJECT['students of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_4910,Which district has the least area?,return districts ;return areas of  #1 ;return #1 where #2 is  lowest,"[""SELECT['districts']"", ""PROJECT['areas of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']""]","['select', 'project', 'superlative']",train
SPIDER_train_4911,What is the name of the district with the smallest area?,return district ;return area of  #1 ;return #1 where #2 is  smallest ;return names of  #3,"[""SELECT['district']"", ""PROJECT['area of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_4912,Find the total population of the top 3 districts with the largest area.,return districts ;return areas of #1 ;return the   top 3 largest #2 ;;return #1 where #2 is  in #3 ;return the   populations of #5 ;return the   sum of #6,"[""SELECT['districts']"", ""PROJECT['areas of #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""SELECT['']"", ""COMPARATIVE['#1', '#2', 'is in #3']"", ""PROJECT['the populations of #REF', '#5']"", ""AGGREGATE['sum', '#6']""]","['select', 'project', 'aggregate', 'select', 'comparative', 'project', 'aggregate']",train
SPIDER_train_4913,What is the total number of residents for the districts with the 3 largest areas?,return districts ;return areas of #1 ;return #1 where #2 are the   3 largest ;return residents of #3 ;return number of  #4,"[""SELECT['districts']"", ""PROJECT['areas of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'are the 3 largest']"", ""PROJECT['residents of #REF', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_4914,Find all types of store and number of them.,"return stores ;return type of  #1 ;return number of #2 ;return #2 ,   #3","[""SELECT['stores']"", ""PROJECT['type of #REF', '#1']"", ""AGGREGATE['count', '#2']"", ""UNION['#2', '#3']""]","['select', 'project', 'aggregate', 'union']",train
SPIDER_train_4915,"For each type of store, how many of them are there?",return types of  stores ;return stores of  #1 ;return number of #2 for each #1,"[""SELECT['types of stores']"", ""PROJECT['stores of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_4916,Find the names of all stores in Khanewal District.,return stores ;return #1 in Khanewal District ;return names of  #2,"[""SELECT['stores']"", ""FILTER['#1', 'in Khanewal District']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4917,What are the names of all the stores located in Khanewal District?,return stores ;return District #1 are  located in ;return #1 where #2 is  Khanewal ;return names of  #3,"[""SELECT['stores']"", ""PROJECT['District #REF are located in', '#1']"", ""COMPARATIVE['#1', '#2', 'is Khanewal']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_4918,Find all the stores in the district with the most population.,return districts ;return populations of  #1 ;return #1 where #2 is  highest ;return stores in #3,"[""SELECT['districts']"", ""PROJECT['populations of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['stores in #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_4919,What are the names of all the stores in the largest district by population?,return stores ;return districts of  #1 ;return populations of  #2 ;return #1 where #3 is  largest ;return names of  #4,"[""SELECT['stores']"", ""PROJECT['districts of #REF', '#1']"", ""PROJECT['populations of #REF', '#2']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'project', 'superlative', 'project']",train
SPIDER_train_492,What is the largest major?,return major ;return size of  #1 ;return #1 where #2 is  largest,"[""SELECT['major']"", ""PROJECT['size of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']""]","['select', 'project', 'superlative']",train
SPIDER_train_4920,"Which city is the headquarter of the store named ""Blackville"" in?",return stores ;return #1 named Blackville ;return headquarters of  #2 ;return city of  #3,"[""SELECT['stores']"", ""FILTER['#1', 'named Blackville']"", ""PROJECT['headquarters of #REF', '#2']"", ""PROJECT['city of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_4921,What city is the headquarter of the store Blackville?,return Blackville ;return headquarter of #1 ;return city of #2,"[""SELECT['Blackville']"", ""PROJECT['headquarter of #REF', '#1']"", ""PROJECT['city of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_4922,Find the number of stores in each city.,return cities ;return stores in #1 ;return number of  #2 for each #1,"[""SELECT['cities']"", ""PROJECT['stores in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_4923,How many stores are headquarted in each city?,return cities ;return stores headquarted in #1 ;return number of  #2 for each  #1,"[""SELECT['cities']"", ""PROJECT['stores headquarted in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_4924,Find the city with the most number of stores.,return cities ;return stores of #1 ;return number of  #2 for each #1 ;return #1 where #3 is highest,"[""SELECT['cities']"", ""PROJECT['stores of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_4925,What is the city with the most number of flagship stores?,return city ;return flagship stores of #1 ;return the  number of  #2 ;return the #1 where #3 is the  highest,"[""SELECT['city']"", ""PROJECT['flagship stores of #REF', '#1']"", ""AGGREGATE['count', '#2']"", ""COMPARATIVE['#1', '#3', 'is the highest']""]","['select', 'project', 'aggregate', 'comparative']",train
SPIDER_train_4926,What is the average pages per minute color?,return pages per minute ;return #1 in color ;return average of #2,"[""SELECT['pages per minute']"", ""FILTER['#1', 'in color']"", ""AGGREGATE['avg', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_4927,What is the average number of pages per minute color?,return pages per minute color ;return number of  #1 ;return average of #2,"[""SELECT['pages per minute color']"", ""AGGREGATE['count', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'aggregate', 'aggregate']",train
SPIDER_train_4928,"What products are available at store named ""Miramichi""?",return stores ;return #1 named Miramichi ;return products available at #2,"[""SELECT['stores']"", ""FILTER['#1', 'named Miramichi']"", ""PROJECT['products available at #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_4929,What products are sold at the store named Miramichi?,return stores ;return #1 named Miramichi ;return the  products sold at #2,"[""SELECT['stores']"", ""FILTER['#1', 'named Miramichi']"", ""PROJECT['the products sold at #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_493,Show all ages and corresponding number of students.,"return ages ;return students of  #1 ;return number of  #2 for each  #1 ;return #1 ,  #3","[""SELECT['ages']"", ""PROJECT['students of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_4930,"Find products with max page size as ""A4"" and pages per minute color smaller than 5.",return products ;return max page size of #1 ;return pages per minute color of #1 ;return #1 where #2 is equal to A4 ;return #1 where #3 is less than 5 ;return #1 in  both #4 and  #5,"[""SELECT['products']"", ""PROJECT['max page size of #REF', '#1']"", ""PROJECT['pages per minute color of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is equal to A4']"", ""COMPARATIVE['#1', '#3', 'is less than 5']"", ""INTERSECTION['#1', '#4', '#5']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection']",train
SPIDER_train_4931,What are the products with the maximum page size A4 that also have a pages per minute color smaller than 5?,return products ;return page sizes of #1 ;return maximum of #2 for each #1 ;return #1 where #3 is A4 ;return pages per minute color of #4 ;return #4 where #5 is lower than 5,"[""SELECT['products']"", ""PROJECT['page sizes of #REF', '#1']"", ""GROUP['max', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is A4']"", ""PROJECT['pages per minute color of #REF', '#4']"", ""COMPARATIVE['#4', '#5', 'is lower than 5']""]","['select', 'project', 'group', 'comparative', 'project', 'comparative']",train
SPIDER_train_4932,"Find products with max page size as ""A4"" or pages per minute color smaller than 5.","return products ;return #1 with  max page size as A4 ;return #1 with  pages per minute color smaller than 5 ;return #2 ,   #3","[""SELECT['products']"", ""FILTER['#1', 'with max page size as A4']"", ""FILTER['#1', 'with pages per minute color smaller than 5']"", ""UNION['#2', '#3']""]","['select', 'filter', 'filter', 'union']",train
SPIDER_train_4933,What are the products with the maximum page size eqal to A4 or a pages per minute color less than 5?,return products ;return maximum page sizes of #1 ;return #1 where #2 is  A4 ;return pages per minute color of #1 ;return #1 where #4 is  lower than 5 ;return #3 or  #5,"[""SELECT['products']"", ""PROJECT['page sizes of #REF', '#1']"", ""GROUP['max', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is A4']"", ""PROJECT['pages per minute color of #REF', '#1']"", ""COMPARATIVE['#1', '#5', 'is lower than 5']"", ""UNION['#4', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'comparative', 'union']",train
SPIDER_train_4934,"Find all the product whose name contains the word ""Scanner"".",return products ;return names of #1 ;return #1 where #2 contains the  word Scanner,"[""SELECT['products']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'contains the word Scanner']""]","['select', 'project', 'comparative']",train
SPIDER_train_4935,"What are all of the products whose name includes the substring ""Scanner""?",return products ;return #1 whose name includes the  substring Scanner,"[""SELECT['products']"", ""FILTER['#1', 'whose name includes the substring Scanner']""]","['select', 'filter']",train
SPIDER_train_4936,Find the most prominent max page size among all the products.,return products ;return max page sizes of #1 ;return number of  #1 for each #2 ;return #2 where #3 is  the  highest,"[""SELECT['products']"", ""PROJECT['max page sizes of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""COMPARATIVE['#2', '#3', 'is the highest']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_4937,What is the most common maximum page size?,return pages ;return sizes of  #1 ;return most common #2,"[""SELECT['pages']"", ""PROJECT['sizes of #REF', '#1']"", ""PROJECT['most common #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_4938,Find the name of the products that are not using the most frequently-used max page size.,return products ;return max page sizes that  #1 are using ;return number of  #1 for each #2 ;return #2 where #3 is  the   highest ;return #1 where #2 is  #4 ;return #1 besides #5 ;return the   names of #6,"[""SELECT['products']"", ""PROJECT['max page sizes that #REF are using', '#1']"", ""GROUP['count', '#1', '#2']"", ""COMPARATIVE['#2', '#3', 'is the highest']"", ""COMPARATIVE['#1', '#2', 'is #4']"", ""DISCARD['#1', '#5']"", ""PROJECT['the names of #REF', '#6']""]","['select', 'project', 'group', 'comparative', 'comparative', 'discard', 'project']",train
SPIDER_train_4939,What are the names of all products that are not the most frequently-used maximum page size?,return products ;return maximum page sizes of #1 ;return number of  #1 for each #2 ;return #2 where #3 is  the  highest ;return #1 where #2 is  #4 ;return #1 besides #5 ;return the  names of #6,"[""SELECT['products']"", ""PROJECT['page sizes of #REF', '#1']"", ""GROUP['max', '#2', '#1']"", ""GROUP['count', '#1', '#3']"", ""COMPARATIVE['#3', '#4', 'is the highest']"", ""COMPARATIVE['#1', '#3', 'is #5']"", ""DISCARD['#1', '#6']"", ""PROJECT['the names of #REF', '#7']""]","['select', 'project', 'group', 'group', 'comparative', 'comparative', 'discard', 'project']",train
SPIDER_train_494,How old is each student and how many students are each age?,"return students ;return ages of  #1 ;return number of  #1 for each  #2 ;return #2 ,  #3","[""SELECT['students']"", ""PROJECT['ages of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""UNION['#2', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_4940,Find the total population of the districts where the area is bigger than the average city area.,return cities ;return areas of #1 ;return the   average of #2 ;return districts ;return areas of #4 ;return #4 where #5 is  bigger than  #3 ;return the   populations of #6 ;return the   sum of #7,"[""SELECT['cities']"", ""PROJECT['areas of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""SELECT['districts']"", ""PROJECT['areas of #REF', '#4']"", ""COMPARATIVE['#4', '#5', 'is bigger than #3']"", ""PROJECT['the populations of #REF', '#6']"", ""AGGREGATE['sum', '#7']""]","['select', 'project', 'aggregate', 'select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_4941,What is the total population for all the districts that have an area larger tahn the average city area?,return cities ;return areas of #1 ;return the  average of #2 ;return districts ;return areas of #4 ;return #4 where #5 is higher than #3 ;return populations of #6 ;return sum of #7,"[""SELECT['cities']"", ""PROJECT['areas of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""SELECT['districts']"", ""PROJECT['areas of #REF', '#4']"", ""COMPARATIVE['#4', '#5', 'is higher than #3']"", ""PROJECT['populations of #REF', '#6']"", ""AGGREGATE['sum', '#7']""]","['select', 'project', 'aggregate', 'select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_4942,Find the names of districts where have both city mall and village store type stores.,return districts ;return stores of #1 ;return types of #2 ;return #1 where #3 is city mall ;return #1 where #3 is village store ;return #1 in  both #4 and  #5 ;return names of #6,"[""SELECT['districts']"", ""PROJECT['stores of #REF', '#1']"", ""PROJECT['types of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is city mall']"", ""COMPARATIVE['#1', '#3', 'is village store']"", ""INTERSECTION['#1', '#4', '#5']"", ""PROJECT['names of #REF', '#6']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_4943,What are the names of the districts that have both mall and village store style shops?,return districts ;return shops of #1 ;return styles of #2 ;return #1 where #3 is mall ;return #1 where #3 is village store ;return #1 in  both #4 and  #5 ;return names of #6,"[""SELECT['districts']"", ""PROJECT['shops of #REF', '#1']"", ""PROJECT['styles of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is mall']"", ""COMPARATIVE['#1', '#3', 'is village store']"", ""INTERSECTION['#1', '#4', '#5']"", ""PROJECT['names of #REF', '#6']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_4944,What is the total enrollment number of all colleges?,return colleges ;return enrollment number of  #1 ;return sum of  #2,"[""SELECT['colleges']"", ""AGGREGATE['count', '#1']"", ""AGGREGATE['sum', '#2']""]","['select', 'aggregate', 'aggregate']",train
SPIDER_train_4945,How many students are enrolled in college?,return colleges ;return students enrolled in #1 ;return number of  #2 for each #1 ;return sum of #3,"[""SELECT['colleges']"", ""PROJECT['students enrolled in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['sum', '#3']""]","['select', 'project', 'group', 'aggregate']",train
SPIDER_train_4946,What is the average enrollment number?,return enrollments ;return number of  #1 ;return average of  #2,"[""SELECT['enrollments']"", ""AGGREGATE['count', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'aggregate', 'aggregate']",train
SPIDER_train_4947,"How many students, on average, does each college have enrolled?",return colleges ;return students enrolled in #1 ;return number of  #2 for each  #1 ;return average of  #3,"[""SELECT['colleges']"", ""PROJECT['students enrolled in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['avg', '#3']""]","['select', 'project', 'group', 'aggregate']",train
SPIDER_train_4948,How many colleges in total?,return colleges ;return number of #1,"[""SELECT['colleges']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_4949,How many different colleges are there?,return colleges ;return different #1 ;return number of #2,"[""SELECT['colleges']"", ""PROJECT['different #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_495,Show the average age for male and female students.,"return students ;return #1 who are male ;return #1 who are female ;return #2 ,  #3 ;return ages of #4 ;return average of #5","[""SELECT['students']"", ""FILTER['#1', 'who are male']"", ""FILTER['#1', 'who are female']"", ""UNION['#2', '#3']"", ""PROJECT['ages of #REF', '#4']"", ""AGGREGATE['avg', '#5']""]","['select', 'filter', 'filter', 'union', 'project', 'aggregate']",train
SPIDER_train_4950,How many players have more than 1000 hours of training?,return players ;return hours of  training of #1 ;return #1 where  #2 is  higher than 1000 ;return number of #3,"[""SELECT['players']"", ""PROJECT['hours of training of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 1000']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_4951,How many different players trained for more than 1000 hours?,return players ;return hours #1 trained ;return #1 where #2 is  higher than 1000 ;return different #3 ;return number of  #4,"[""SELECT['players']"", ""PROJECT['hours #REF trained', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 1000']"", ""PROJECT['different #REF', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_4952,How many colleges has more than 15000 students?,return colleges ;return students of  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  higher than 15000 ;return number of #4,"[""SELECT['colleges']"", ""PROJECT['students of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 15000']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'group', 'comparative', 'aggregate']",train
SPIDER_train_4953,What is the number of colleges with a student population greater than 15000?,return colleges ;return student populations of  #1 ;return #1 where #2 is  higher than 15000 ;return number of  #3,"[""SELECT['colleges']"", ""PROJECT['student populations of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 15000']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_4954,What is the average training hours of all players?,return players ;return training hours of  #1 ;return average of  #2,"[""SELECT['players']"", ""PROJECT['training hours of #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_4955,How many hours do the players train on average?,return players ;return hours #1 train ;return average of  #2,"[""SELECT['players']"", ""PROJECT['hours #REF train', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_4956,Find the name and training hours of players whose hours are below 1500.,"return players ;return hours  of #1 ;return number of  #2 for each #1 ;return #1 where #3 is lower than 1500 ;return names of #4 ;return training hours  of #4 ;return number of  #6 for each #4 ;return #5 ,  #7","[""SELECT['players']"", ""PROJECT['hours of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is lower than 1500']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['training hours of #REF', '#4']"", ""GROUP['count', '#6', '#4']"", ""UNION['#5', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'group', 'union']",train
SPIDER_train_4957,What are the names and number of hours spent training for each player who trains for less than 1500 hours?,"return players ;return hours  spent training of #1 ;return #1 where #2 is lower than 1500 ;return names of #3 ;return hours  spent training of #3 ;return #4 ,  #5","[""SELECT['players']"", ""PROJECT['hours spent training of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is lower than 1500']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['hours spent training of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_4958,How many different colleges do attend the tryout test?,return colleges ;return #1 that  attend tryout test ;return #2 that  are  different ;return number of  #3,"[""SELECT['colleges']"", ""FILTER['#1', 'that attend tryout test']"", ""FILTER['#2', 'that are different']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'filter', 'aggregate']",train
SPIDER_train_4959,How many different colleges were represented at tryouts?,return tryouts ;return colleges at #1 ;return different #2 ;return number of #3,"[""SELECT['tryouts']"", ""PROJECT['colleges at #REF', '#1']"", ""PROJECT['different #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_496,What are the average ages for male and female students?,"return students ;return #1 that  are male ;return #1 that  are female ;return ages of #2 ;return ages of #3 ;return the  average of #4 ;return the  average of #5 ;return #6 ,  #7","[""SELECT['students']"", ""FILTER['#1', 'that are male']"", ""FILTER['#1', 'that are female']"", ""PROJECT['ages of #REF', '#2']"", ""PROJECT['ages of #REF', '#3']"", ""AGGREGATE['avg', '#4']"", ""AGGREGATE['avg', '#5']"", ""UNION['#6', '#7']""]","['select', 'filter', 'filter', 'project', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_4960,What are the unique types of player positions in the tryout?,return players ;return positions of #1 ;return #2 in the  tryout ;return unique types of #3,"[""SELECT['players']"", ""PROJECT['positions of #REF', '#1']"", ""FILTER['#2', 'in the tryout']"", ""PROJECT['unique types of #REF', '#3']""]","['select', 'project', 'filter', 'project']",train
SPIDER_train_4961,What are the different types of player positions?,return players ;return positions of  #1 ;return different types of  #2,"[""SELECT['players']"", ""PROJECT['positions of #REF', '#1']"", ""PROJECT['different types of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_4962,How many students got accepted after the tryout?,return students ;return #1 who  got accepted after the  tryout ;return number of  #2,"[""SELECT['students']"", ""FILTER['#1', 'who got accepted after the tryout']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_4963,How many students received a yes from tryouts?,return students ;return #1 who  received a yes from tryouts ;return number of  #2,"[""SELECT['students']"", ""FILTER['#1', 'who received a yes from tryouts']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_4964,How many students whose are playing the role of goalie?,return students ;return role of  #1 ;return #1 where  #2 is goalie ;return the  number of  #3,"[""SELECT['students']"", ""PROJECT['role of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is goalie']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_4965,What is the number of students playing as a goalie?,return students ;return #1 playing as goalie ;return number of  #2,"[""SELECT['students']"", ""FILTER['#1', 'playing as goalie']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_4966,"Find the max, average and min training hours of all players.","return players ;return training hours of  #1 ;return average #2 for each #1 ;return max #2 for each #1 ;return min #2 for each #1 ;return #3 ,   #4 , #5","[""SELECT['players']"", ""PROJECT['training hours of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""GROUP['max', '#2', '#1']"", ""GROUP['min', '#2', '#1']"", ""UNION['#3', '#4', '#5']""]","['select', 'project', 'group', 'group', 'group', 'union']",train
SPIDER_train_4967,"What is the average, maximum, and minimum for the number of hours spent training?","return hours spent training ;return number of  #1 ;return average of #2 ;return maximum of #2 ;return minimum of #2 ;return #3 ,  #4 ,   #5","[""SELECT['hours spent training']"", ""AGGREGATE['count', '#1']"", ""AGGREGATE['avg', '#2']"", ""AGGREGATE['max', '#2']"", ""AGGREGATE['min', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'aggregate', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_4968,What is average enrollment of colleges in the state FL?,return colleges ;return states of  #1 ;return #1 where #2 is  FL ;return enrollments of  #3 ;return average of  #4,"[""SELECT['colleges']"", ""PROJECT['states of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is FL']"", ""PROJECT['enrollments of #REF', '#3']"", ""AGGREGATE['avg', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_4969,What is average number of students enrolled in Florida colleges?,return students ;return #1 enrolled in Florida colleges ;return average number of  #2,"[""SELECT['students']"", ""FILTER['#1', 'enrolled in Florida colleges']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_497,Show all cities and corresponding number of students.,"return cities ;return number of students for each #1 ;return #1 , #2","[""SELECT['cities']"", ""PROJECT['students', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_4970,What are the names of players whose training hours is between 500 and 1500?,return players ;return training hours of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  between 500 and  1500 ;return names of  #4,"[""SELECT['players']"", ""PROJECT['training hours of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is  betweenleftside 500']"", ""COMPARATIVE['#4', '#3', 'is  betweenrightside 1500']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'group', 'comparative', 'comparative', 'project']",train
SPIDER_train_4971,What are the names of players who train between 500 and 1500 hours?,return players ;return #1 who  train between 500 and  1500 hours ;return names of  #2,"[""SELECT['players']"", ""FILTER['#1', 'who train betweenleftside 500']"", ""FILTER['#2', 'who train betweenrightside 1500 hours']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_4972,Find the players whose names contain letter 'a'.,return players ;return names of  #1 ;return #1 where  #2 contain 'a,"[""SELECT['players']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'contain a']""]","['select', 'project', 'comparative']",train
SPIDER_train_4973,Who are the players that have names containing the letter a?,return players ;return names of  #1 ;return #1 where #2 contain the  letter a,"[""SELECT['players']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'contain the letter a']""]","['select', 'project', 'comparative']",train
SPIDER_train_4974,"Find the name, enrollment of the colleges whose size is bigger than 10000 and location is in state LA.","return colleges ;return sizes of #1 ;return #1 where #2 is  higher than 10000 ;return locations of #1 ;return #1 where #4 is  state LA ;return #1 of both #3 and #5 ;return name of #6 ;return enrollment of #6 ;return #7 ,  #8","[""SELECT['colleges']"", ""PROJECT['sizes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 10000']"", ""PROJECT['locations of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is state LA']"", ""INTERSECTION['#1', '#3', '#5']"", ""PROJECT['name of #REF', '#6']"", ""PROJECT['enrollment of #REF', '#6']"", ""UNION['#7', '#8']""]","['select', 'project', 'comparative', 'project', 'comparative', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_4975,What are the names and enrollment numbers for colleges that have more than 10000 enrolled and are located in Louisiana?,"return colleges ;return enrollment of  #1 ;return #1 located in Louisiana ;return #3 where #2 is  more than 10000 ;return the  names of  #4 ;return the  enrollment numbers of  #4 ;return #5 ,  #6","[""SELECT['colleges']"", ""PROJECT['enrollment of #REF', '#1']"", ""FILTER['#1', 'located in Louisiana']"", ""COMPARATIVE['#3', '#2', 'is more than 10000']"", ""PROJECT['the names of #REF', '#4']"", ""PROJECT['the enrollment numbers of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'filter', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_4976,List all information about college sorted by enrollment number in the ascending order.,return colleges ;return information about #1 ;return enrollment number of  #1 ;return #2 sorted by #3 in ascending order,"[""SELECT['colleges']"", ""PROJECT['information about #REF', '#1']"", ""AGGREGATE['count', '#1']"", ""SORT['#2', '#3', 'in ascending order']""]","['select', 'project', 'aggregate', 'sort']",train
SPIDER_train_4977,What information do you have on colleges sorted by increasing enrollment numbers?,return colleges ;return enrollment of  #1 ;return number of  #2 ;return information on  #1 ;return #4 sorted by #3 increasing,"[""SELECT['colleges']"", ""PROJECT['enrollment of #REF', '#1']"", ""AGGREGATE['count', '#2']"", ""PROJECT['information on #REF', '#1']"", ""SORT['#4', '#3', 'increasing']""]","['select', 'project', 'aggregate', 'project', 'sort']",train
SPIDER_train_4978,List the name of the colleges whose enrollment is greater 18000 sorted by the college's name.,return colleges ;return enrollments of  #1 ;return #1 where  #2 is higher than 18000 ;return names of  #3 ;return #4 ;return #5 sorted by #4,"[""SELECT['colleges']"", ""PROJECT['enrollments of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 18000']"", ""PROJECT['names of #REF', '#3']"", ""FILTER['#4', '']"", ""SORT['#5', '#4']""]","['select', 'project', 'comparative', 'project', 'filter', 'sort']",train
SPIDER_train_4979,What is the name of every college in alphabetical order that has more than 18000 students enrolled?,return colleges ;return students enrolled in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than 18000 ;return names of  #4 ;return #5 sorted by alphabetical order,"[""SELECT['colleges']"", ""PROJECT['students enrolled in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 18000']"", ""PROJECT['names of #REF', '#4']"", ""SORT['#5', '#5', 'alphabetical order']""]","['select', 'project', 'group', 'comparative', 'project', 'sort']",train
SPIDER_train_498,How many students live in each city?,return cities ;return students that  live in #1 ;return number of  #2 for each #1,"[""SELECT['cities']"", ""PROJECT['students that live in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_4980,Find the name of players whose card is yes in the descending order of training hours.,return players ;return cards of  #1 ;return #1 where  #2 is  yes ;return training hours of  #3 ;return names of  #3 ;return #5 sorted by #4 in descending order,"[""SELECT['players']"", ""PROJECT['cards of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is yes']"", ""PROJECT['training hours of #REF', '#3']"", ""PROJECT['names of #REF', '#3']"", ""SORT['#5', '#4', 'in descending order']""]","['select', 'project', 'comparative', 'project', 'project', 'sort']",train
SPIDER_train_4981,What are the name of the players who received a card in descending order of the hours of training?,return players ;return #1 who  received a card ;return names of  #2 ;return hours of  training of   #2 ;return #3 sorted by #4 in descending order,"[""SELECT['players']"", ""FILTER['#1', 'who received a card']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['hours of training of #REF', '#2']"", ""SORT['#3', '#4', 'in descending order']""]","['select', 'filter', 'project', 'project', 'sort']",train
SPIDER_train_4982,Find the name of different colleges involved in the tryout in alphabetical order.,return colleges ;return #1 involved in  the  tryout ;return different #2 ;return names of #3 ;return #4 sorted by alphabetical order,"[""SELECT['colleges']"", ""FILTER['#1', 'involved in the tryout']"", ""PROJECT['different #REF', '#2']"", ""PROJECT['names of #REF', '#3']"", ""SORT['#4', '#4', 'alphabetical order']""]","['select', 'filter', 'project', 'project', 'sort']",train
SPIDER_train_4983,What are the different names of the colleges involved in the tryout in alphabetical order?,return tryout ;return colleges involved in the  #1 ;return names of  #2 ; return #3 sorted by alphabetical order,"[""SELECT['tryout']"", ""PROJECT['colleges involved in the #REF', '#1']"", ""PROJECT['different names of #REF', '#2']"", ""SORT['#3', '#3', 'alphabetical order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_4984,Which position is most popular among players in the tryout?,return positions ;return players with  #1 ;return #2 in the  tryout ;return number of  #3 for each #1 ;return #1 where #4 is  highest,"[""SELECT['positions']"", ""PROJECT['players with #REF', '#1']"", ""FILTER['#2', 'in the tryout']"", ""GROUP['count', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']""]","['select', 'project', 'filter', 'group', 'superlative']",train
SPIDER_train_4985,What was the most popular position at tryouts?,return tryouts ;return positions at #1 ;return #2 that  is  the  most popular,"[""SELECT['tryouts']"", ""PROJECT['positions at #REF', '#1']"", ""FILTER['#2', 'that is the most popular']""]","['select', 'project', 'filter']",train
SPIDER_train_4986,Find the number of students who participate in the tryout for each college ordered by descending count.,return colleges ;return students of  #1 ;return #2 in the tryout ;return number of #3 for each #1 ;return #4 sorted by #4 descending,"[""SELECT['colleges']"", ""PROJECT['students of #REF', '#1']"", ""FILTER['#2', 'in the tryout']"", ""GROUP['count', '#3', '#1']"", ""SORT['#4', '#4', 'descending']""]","['select', 'project', 'filter', 'group', 'sort']",train
SPIDER_train_4987,How many students participated in tryouts for each college by descending count?,return colleges ;return students of  #1 ;return #2 that  participated in tryouts ;return number of  of  #3 for each  #1 ;return #4 sorted by #4 descending,"[""SELECT['colleges']"", ""PROJECT['students of #REF', '#1']"", ""FILTER['#2', 'that participated in tryouts']"", ""GROUP['count', '#3', '#1']"", ""SORT['#4', '#4', 'descending']""]","['select', 'project', 'filter', 'group', 'sort']",train
SPIDER_train_4988,What is minimum hours of the students playing in different position?,return students ;return #1 playing in different position ;return the  hours of  #2 ;return the  minimum of  #3,"[""SELECT['students']"", ""FILTER['#1', 'playing in different position']"", ""PROJECT['the hours of #REF', '#2']"", ""AGGREGATE['min', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_4989,"For each position, what is the minimum time students spent practicing?",return positions ;return students of  #1 ;return time spent practicing of  #2 ;return minimum #3 for each #1,"[""SELECT['positions']"", ""PROJECT['students of #REF', '#1']"", ""PROJECT['time spent practicing of #REF', '#2']"", ""GROUP['min', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_499,Show all advisors and corresponding number of students.,"return students ;return advisors ;return number of  #1 for each  #2 ;return #2 ,  #3","[""SELECT['students']"", ""SELECT['advisors']"", ""GROUP['count', '#1', '#2']"", ""UNION['#2', '#3']""]","['select', 'select', 'group', 'union']",train
SPIDER_train_4990,What are the names of schools with the top 3 largest size?,"return schools ;return size of #1 ;return #1 where #2 is highest ;return #1 besides  #3 ;return #4 where #2 is highest ;return #4 besides  #5 ;return #5 where #2 is highest ;return #3 ,  #5 ,   #7","[""SELECT['schools']"", ""PROJECT['size of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""DISCARD['#1', '#3']"", ""SUPERLATIVE['max', '#4', '#2']"", ""DISCARD['#4', '#5']"", ""SUPERLATIVE['max', '#5', '#2']"", ""UNION['#3', '#5', '#7']""]","['select', 'project', 'superlative', 'discard', 'superlative', 'discard', 'superlative', 'union']",train
SPIDER_train_4991,What are the names of the schools with the top 3 largest class sizes?,return schools ;return class sizes of #1 ;return the  3 highest of #2 ;return #1 where #2 is equal to any of #3 ;return names of #4,"[""SELECT['schools']"", ""PROJECT['class sizes of #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""COMPARATIVE['#1', '#2', 'is equal to any of #3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_4992,What is the name of school that has the smallest enrollment in each state?,return states ;return schools of #1 ;return enrollments of #2 ;return #2 where #3 is lowest for each #1 ;return name of #4,"[""SELECT['states']"", ""PROJECT['schools of #REF', '#1']"", ""PROJECT['enrollments of #REF', '#2']"", ""GROUP['min', '#2', '#1']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'project', 'group', 'project']",train
SPIDER_train_4993,What is the name of the school with smallest enrollment size per state?,return states ;return schools of #1 ;return enrollment sizes of #2 ;return #2 where #3 is  the  smallest for each #1 ;return the  names of #4,"[""SELECT['states']"", ""PROJECT['schools of #REF', '#1']"", ""PROJECT['enrollment sizes of #REF', '#2']"", ""GROUP['min', '#2', '#1']"", ""PROJECT['the names of #REF', '#4']""]","['select', 'project', 'project', 'group', 'project']",train
SPIDER_train_4994,Find the states where have some college students in tryout.,return tryouts ;return students in #1 ;return colleges of #2 ;return the  states of #3,"[""SELECT['tryouts']"", ""PROJECT['students in #REF', '#1']"", ""PROJECT['colleges of #REF', '#2']"", ""PROJECT['the states of #REF', '#3']""]","['select', 'project', 'project', 'project']",train
SPIDER_train_4995,What are the different states that have students trying out?,return students ;return #1 that  are trying out ;return states with  #2 ;return #3 that  are different,"[""SELECT['students']"", ""FILTER['#1', 'that are trying out']"", ""PROJECT['states with #REF', '#2']"", ""FILTER['#3', 'that are different']""]","['select', 'filter', 'project', 'filter']",train
SPIDER_train_4996,Find the states where have some college students in tryout and their decisions are yes.,return states ;return college students in #1 ;return #2 in tryout ;return decisions of #3 ;return #1 where #4 is  yes,"[""SELECT['states']"", ""PROJECT['college students in #REF', '#1']"", ""FILTER['#2', 'in tryout']"", ""PROJECT['decisions of #REF', '#3']"", ""COMPARATIVE['#1', '#4', 'is yes']""]","['select', 'project', 'filter', 'project', 'comparative']",train
SPIDER_train_4997,What are the different states that had students successfully try out?,return states ;return #1 that  had students successfully try out,"[""SELECT['states']"", ""FILTER['#1', 'that had students successfully try out']""]","['select', 'filter']",train
SPIDER_train_4998,Find the name and college of students whose decisions are yes in the tryout.,"return students ;return tryout decisions of  #1 ;return #1 where  #2 is  yes ;return names of  #3 ;return colleges of  #3 ;return #4 ,   #5","[""SELECT['students']"", ""PROJECT['tryout decisions of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is yes']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['colleges of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_4999,"What are the names of all the players who received a yes during tryouts, and also what are the names of their colleges?","return players ;return #1 who  received yes during tryouts ;return names of  #2 ;return colleges of  #2 ;return #3 ,  #4","[""SELECT['players']"", ""FILTER['#1', 'who received yes during tryouts']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['colleges of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_5,What are the names of the heads who are born outside the California state?,return heads ;return #1 who  are  born outside the  state of  California ;return names of  #2,"[""SELECT['heads']"", ""FILTER['#1', 'who are born outside the state of California']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_50,Show the status shared by cities with population bigger than 1500 and smaller than 500.,return cities ;return population of  #1 ;return #1 where #2 is  more than 1500 ;return #1 where #2 is  less than 500 ;return status of #1 ;return #5 of both #3 and  #4,"[""SELECT['cities']"", ""PROJECT['population of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is more than 1500']"", ""COMPARATIVE['#1', '#2', 'is less than 500']"", ""PROJECT['status of #REF', '#1']"", ""INTERSECTION['#5', '#3', '#4']""]","['select', 'project', 'comparative', 'comparative', 'project', 'intersection']",train
SPIDER_train_500,How many students does each advisor have?,return advisors ;return students of  #1 ;return number of  #2 for each  #1,"[""SELECT['advisors']"", ""PROJECT['students of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_5000,Find the name of all students who were in the tryout sorted in alphabetic order.,return students ;return #1 who  were in the tryout ;return names of  #2 ;return #3 sorted by alphabetic order,"[""SELECT['students']"", ""FILTER['#1', 'who were in the tryout']"", ""PROJECT['names of #REF', '#2']"", ""SORT['#3', '#3', 'alphabetic order']""]","['select', 'filter', 'project', 'sort']",train
SPIDER_train_5001,What are the names of all students who tried out in alphabetical order?,return students ;return #1 who  tried out ;return names of  #2 ;return #3 sorted by alphabetical order,"[""SELECT['students']"", ""FILTER['#1', 'who tried out']"", ""PROJECT['names of #REF', '#2']"", ""SORT['#3', '#3', 'alphabetical order']""]","['select', 'filter', 'project', 'sort']",train
SPIDER_train_5002,Find the name and hours of the students whose tryout decision is yes.,"return students ;return tryout decisions of  #1 ;return #1 where  #2 is  yes ;return names of  #3 ;return hours of  #3 ;return #4 ,   #5","[""SELECT['students']"", ""PROJECT['tryout decisions of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is yes']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['hours of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_5003,What are the names and hours spent practicing of every student who received a yes at tryouts?,"return students ;return #1 who  received yes at tryouts ;return names of  #2 ;return hours spent practicing of  #2 ;return #3 ,  #4","[""SELECT['students']"", ""FILTER['#1', 'who received yes at tryouts']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['hours spent practicing of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_5004,Find the states of the colleges that have students in the tryout who played in striker position.,return students ;return #1 in the tryout ;return positions of  #2 ;return #1 where  #3 is  striker ;return colleges of  #4 ;return states of  #5,"[""SELECT['students']"", ""FILTER['#1', 'in the tryout']"", ""PROJECT['positions of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is striker']"", ""PROJECT['colleges of #REF', '#4']"", ""PROJECT['states of #REF', '#5']""]","['select', 'filter', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_5005,What are the states of the colleges where students who tried out for the striker position attend?,return students ;return #1 who  tried out for striker position ;return colleges of  #2 ;return states of  #3,"[""SELECT['students']"", ""FILTER['#1', 'who tried out for striker position']"", ""PROJECT['colleges of #REF', '#2']"", ""PROJECT['states of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_5006,Find the names of the students who are in the position of striker and got a yes tryout decision.,return students ;return positions of  #1 ;return #1 where  #2 is  striker ;return tryout decisions of  #1 ;return #1 where  #4 is  yes ;return #1 of  both #3 and #5 ;return names of  #6,"[""SELECT['students']"", ""PROJECT['positions of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is striker']"", ""PROJECT['tryout decisions of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is yes']"", ""INTERSECTION['#1', '#3', '#5']"", ""PROJECT['names of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'comparative', 'intersection', 'project']",train
SPIDER_train_5007,What are the names of all students who successfully tried out for the position of striker?,return students ;return positions #1 successfully tried out for ;return #1 where #2 is  striker ;return the  names of #3,"[""SELECT['students']"", ""PROJECT['positions #REF successfully tried out for', '#1']"", ""COMPARATIVE['#1', '#2', 'is striker']"", ""PROJECT['the names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5008,Find the state of the college which player Charles is attending.,return colleges ;return players of  #1 ;return #1 where  #2 is  Charles ;return state of  #3,"[""SELECT['colleges']"", ""PROJECT['players of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Charles']"", ""PROJECT['state of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5009,In which state is the college that Charles attends?,return colleges ;return #1 that  Charles attends ;return state of  #2,"[""SELECT['colleges']"", ""FILTER['#1', 'that Charles attends']"", ""PROJECT['state of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_501,Which advisor has most number of students?,return advisors ;return students of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['advisors']"", ""PROJECT['students of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_5010,Find the average and maximum hours for the students whose tryout decision is yes.,return students ;return #1 whose tryout decision is  yes ;return maximum hours for the #2 ;return average for the #2 ;return #3 and #4,"[""SELECT['students']"", ""FILTER['#1', 'whose tryout decision is yes']"", ""PROJECT['hours for the #REF', '#2']"", ""GROUP['max', '#3', '#2']"", ""PROJECT['for the #REF', '#2']"", ""GROUP['avg', '#5', '#2']"", ""UNION['#4', '#6']""]","['select', 'filter', 'project', 'group', 'project', 'group', 'union']",train
SPIDER_train_5011,What is the average and maximum number of hours students who made the team practiced?,"return students ;return #1 who  made the  team ;return hours #2 practiced ;return average of  #3 ;return maximum of  #3 ;return #4 ,  #5","[""SELECT['students']"", ""FILTER['#1', 'who made the team']"", ""PROJECT['hours #REF practiced', '#2']"", ""AGGREGATE['avg', '#3']"", ""AGGREGATE['max', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_5012,Find the average hours for the students whose tryout decision is no.,return students ;return #1 whose tryout decisions is  no ;return average hours for #2,"[""SELECT['students']"", ""FILTER['#1', 'whose tryout decisions is no']"", ""PROJECT['hours for #REF', '#2']"", ""GROUP['avg', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'filter', 'project', 'group', 'union']",train
SPIDER_train_5013,What is the average number of hours spent practicing for students who got rejected?,return students ;return #1 who  got rejected ;return hours spent practicing for #2 ;return average number of  #3,"[""SELECT['students']"", ""FILTER['#1', 'who got rejected']"", ""PROJECT['hours spent practicing for #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_5014,What is the maximum training hours for the students whose training hours is greater than 1000 in different positions?,return the  students ;return training hours  of #1 ;return #1 where #2 is higher than 1000 ;return #3 in  different positions ;return #2 where #1 is equal to #4 ;return maximum of #5,"[""SELECT['the students']"", ""PROJECT['training hours of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 1000']"", ""FILTER['#3', 'in different positions']"", ""COMPARATIVE['#2', '#1', 'is equal to #4']"", ""AGGREGATE['max', '#5']""]","['select', 'project', 'comparative', 'filter', 'comparative', 'aggregate']",train
SPIDER_train_5015,"For each position, what is the maximum number of  hours for students who spent more than 1000 hours training?",return students ;return positions of #1 ;return hours  spent training of #1 ;return #1 where #3 is higher than 1000 ;return hours  spent training of #4 ;return the  highest of #5 for each  #2,"[""SELECT['students']"", ""PROJECT['positions of #REF', '#1']"", ""PROJECT['hours spent training of #REF', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 1000']"", ""PROJECT['hours spent training of #REF', '#4']"", ""GROUP['max', '#5', '#2']"", ""UNION['#2', '#6']""]","['select', 'project', 'project', 'comparative', 'project', 'group', 'union']",train
SPIDER_train_5016,Which colleges do the tryout players whose name starts with letter D go to?,return tryout players ;return names of #1 ;return #1 where #2 start with  the  letter D ;return the  colleges that  #3 go to,"[""SELECT['tryout players']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'start with the letter D']"", ""PROJECT['the colleges that #REF go to', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5017,Which colleges does each player with a name that starts with the letter D  who tried out go to?,return players ;return #1 with a name that  starts with  the  D ;return #2 who  tried out ;return the  colleges of  each #3,"[""SELECT['players']"", ""FILTER['#1', 'with a name that starts with the D']"", ""FILTER['#2', 'who tried out']"", ""PROJECT['the colleges of each #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_5018,Which college has any student who is a goalie and succeeded in the tryout.,return students ;return #1 who are goalies ;return #1 who succeeded in the  tryout ;return #1 in both #2 and #3 ;return the  colleges of #4,"[""SELECT['students']"", ""FILTER['#1', 'who are goalies']"", ""FILTER['#1', 'who succeeded in the tryout']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['the colleges of #REF', '#4']""]","['select', 'filter', 'filter', 'intersection', 'project']",train
SPIDER_train_5019,What college has a student who successfully made the team in the role of a goalie?,return students ;return #1 who successfully made the  team ;return #2 in the  role of a  goalie ;return the  colleges of #3,"[""SELECT['students']"", ""FILTER['#1', 'who successfully made the team']"", ""FILTER['#2', 'in the role of a goalie']"", ""PROJECT['the colleges of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_502,Give the advisor with the most students.,return advisors ;return students of  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  highest,"[""SELECT['advisors']"", ""PROJECT['students of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_5020,Find the name of the tryout players who are from the college with largest size.,return colleges ;return sizes of  #1 ;return #1 where  #2 is  largest ;return tryout players from  #3 ;return names of  #4,"[""SELECT['colleges']"", ""PROJECT['sizes of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['tryout players from #REF', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'superlative', 'project', 'project']",train
SPIDER_train_5021,What are the names of all tryout participants who are from the largest college?,return tryout participants ;return colleges of #1 ;return #1 where #2 is largest ;return names of #3,"[""SELECT['tryout participants']"", ""PROJECT['colleges of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_5022,What is the state and enrollment of the colleges where have any students who got accepted in the tryout decision.,"return colleges ;return students of  #1 ;return tryout decisions of  #2 ;return #1 where #3 is  accepted ;return states of  #4 ;return enrollments of  #4 ;return #5 ,  #6","[""SELECT['colleges']"", ""PROJECT['students of #REF', '#1']"", ""PROJECT['tryout decisions of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is accepted']"", ""PROJECT['states of #REF', '#4']"", ""PROJECT['enrollments of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_5023,"How many students are enrolled in colleges that have student accepted during tryouts, and in which states are those colleges?","return colleges ;return #1 that  have students accepted during tryouts ;return students enrolled in #2 ;return number of  #3 ;return states of #2 ;return #2 ,  #4 ,   #5","[""SELECT['colleges']"", ""FILTER['#1', 'that have students accepted during tryouts']"", ""PROJECT['students enrolled in #REF', '#2']"", ""AGGREGATE['count', '#3']"", ""PROJECT['states of #REF', '#2']"", ""UNION['#2', '#4', '#5']""]","['select', 'filter', 'project', 'aggregate', 'project', 'union']",train
SPIDER_train_5024,Find the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment.,return colleges ;return #1 that  are  in LA ;return #1 that  are  in AZ ;return enrollment of  #2 ;return enrollment of  #3 ;return #2 where  #4 is  greater than  15000 ;return #3 where  #5 is  less than  13000 ;return #6 or  #7,"[""SELECT['colleges']"", ""FILTER['#1', 'that are in LA']"", ""FILTER['#1', 'that are in AZ']"", ""PROJECT['enrollment of #REF', '#2']"", ""PROJECT['enrollment of #REF', '#3']"", ""COMPARATIVE['#2', '#4', 'is greater than 15000']"", ""COMPARATIVE['#3', '#5', 'is less than 13000']"", ""UNION['#6', '#7']""]","['select', 'filter', 'filter', 'project', 'project', 'comparative', 'comparative', 'union']",train
SPIDER_train_5025,"What are the names of colleges in LA that have more than 15,000 students and of colleges in AZ with less than 13,000 students?","return colleges  ;return #1 in LA ;return students  in #2 ;return number of  #3 for each #2 ;return #2 where #4 is  more than 15,000 ;return #1 in AZ ;return students  in #6 ;return number of #7 for each #6 ;return #6 where #8 is  less than 13,000 ;return #5 ,  #9 ;return names of  #10","[""SELECT['colleges']"", ""FILTER['#1', 'in LA']"", ""PROJECT['students in #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""COMPARATIVE['#2', '#4', 'is more than 15 , 000']"", ""FILTER['#1', 'in AZ']"", ""PROJECT['students in #REF', '#6']"", ""GROUP['count', '#7', '#6']"", ""COMPARATIVE['#6', '#8', 'is less than 13 , 000']"", ""UNION['#5', '#9']"", ""PROJECT['names of #REF', '#10']""]","['select', 'filter', 'project', 'group', 'comparative', 'filter', 'project', 'group', 'comparative', 'union', 'project']",train
SPIDER_train_5026,Find the names of schools that have some students playing in goalie and mid positions.,return schools ;return students of  #1 ;return positions of  #2 ;return #1 where  #3 is  goalie ;return #1 where  #3 is  mid ;return #1 of  both #4 and #5 ;return names of  #6,"[""SELECT['schools']"", ""PROJECT['students of #REF', '#1']"", ""PROJECT['positions of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is goalie']"", ""COMPARATIVE['#1', '#3', 'is mid']"", ""INTERSECTION['#1', '#4', '#5']"", ""PROJECT['names of #REF', '#6']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_5027,What are the names of all schools that have students trying out for the position of goal and 'mid'-field.,return schools ;return students of  #1 ;return positions #2 are  trying out for ;return #1 where #3 is  goal ;return #1 where #3 is  'mid'-field ;return #1 of  both #4 and  #5 ;return names of  #6,"[""SELECT['schools']"", ""PROJECT['students of #REF', '#1']"", ""PROJECT['positions #REF are trying out for', '#2']"", ""COMPARATIVE['#1', '#3', 'is goal']"", ""COMPARATIVE['#1', '#3', 'is mid-field']"", ""INTERSECTION['#1', '#4', '#5']"", ""PROJECT['names of #REF', '#6']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_5028,Find the names of states that have some college students playing in goalie and mid positions.,return colleges ;return students of #1 ;return positions of #2 ;return #1 where #3 is  goalie ;return #1 where #3 is  mid ;return names of states of #1 ;return #6 of both #4 and #5,"[""SELECT['colleges']"", ""PROJECT['students of #REF', '#1']"", ""PROJECT['positions of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is goalie']"", ""COMPARATIVE['#1', '#3', 'is mid']"", ""PROJECT['names of states of #REF', '#1']"", ""INTERSECTION['#6', '#4', '#5']""]","['select', 'project', 'project', 'comparative', 'comparative', 'project', 'intersection']",train
SPIDER_train_5029,What are the names of the states that have some college students playing in the positions of goalie and mid-field?,return states ;return colleges of #1 ;return students of #2 ;return positions of #3 ;return #1 where #4 is goalie ;return #1 where #4 is mid-field ;return #1 in  both #5 and  #6 ;return names of #7,"[""SELECT['states']"", ""PROJECT['colleges of #REF', '#1']"", ""PROJECT['students of #REF', '#2']"", ""PROJECT['positions of #REF', '#3']"", ""COMPARATIVE['#1', '#4', 'is goalie']"", ""COMPARATIVE['#1', '#4', 'is mid-field']"", ""INTERSECTION['#1', '#5', '#6']"", ""PROJECT['names of #REF', '#7']""]","['select', 'project', 'project', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_503,How many students have cat allergies?,return students ;return allergies of  #1 ;return #1 where  #2 is cat ;return number of  #3,"[""SELECT['students']"", ""PROJECT['allergies of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is cat']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_5030,How many schools have some students playing in goalie and mid positions.,return schools ;return students of  #1 ;return positions of  #2 ;return #1 where #3 is  goalie ;return #1 where #3 is  mid ;return #1 of  both #4 and  #5 ;return number of  #6,"[""SELECT['schools']"", ""PROJECT['students of #REF', '#1']"", ""PROJECT['positions of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is goalie']"", ""COMPARATIVE['#1', '#3', 'is mid']"", ""INTERSECTION['#1', '#4', '#5']"", ""AGGREGATE['count', '#6']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection', 'aggregate']",train
SPIDER_train_5031,How many schools have students playing in goalie and mid-field positions?,return schools ;return students of  #1 ;return positions of  #2 ;return #2 where  #3 is goalie ;return #2 where  #3 is mid-field ;return #1 of  both #4 and #5 ;return number of  #6,"[""SELECT['schools']"", ""PROJECT['students of #REF', '#1']"", ""PROJECT['positions of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is goalie']"", ""COMPARATIVE['#2', '#3', 'is mid-field']"", ""INTERSECTION['#1', '#4', '#5']"", ""AGGREGATE['count', '#6']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection', 'aggregate']",train
SPIDER_train_5032,Find the names of schools that have some players in the mid position but not in the goalie position.,return schools ;return players of #1 ;return positions of #2 ;return #1 where #3 is  mid ;return #1 where #3 is  not goalie ;return names of #1 ;return #6 of both #4 and #5,"[""SELECT['schools']"", ""PROJECT['players of #REF', '#1']"", ""PROJECT['positions of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is mid']"", ""COMPARATIVE['#1', '#3', 'is not goalie']"", ""PROJECT['names of #REF', '#1']"", ""INTERSECTION['#6', '#4', '#5']""]","['select', 'project', 'project', 'comparative', 'comparative', 'project', 'intersection']",train
SPIDER_train_5033,What are the names of the schools with some players in the mid position but no goalies?,return schools ;return players of #1 ;return #2 that are in  the  mid position ;return #2 that are in  the  goalie position ;return number of  #3 for each #1 ;return number of  #4 for each #1 ;return #1 where #5 is at least one ;return #1 where #6 is zero ;return #1 in  both #7 and  #8 ;return names of #9,"[""SELECT['schools']"", ""PROJECT['players of #REF', '#1']"", ""FILTER['#2', 'that are in the mid position']"", ""FILTER['#2', 'that are in the goalie position']"", ""GROUP['count', '#3', '#1']"", ""GROUP['count', '#4', '#1']"", ""COMPARATIVE['#1', '#5', 'is at least one']"", ""COMPARATIVE['#1', '#6', 'is zero']"", ""INTERSECTION['#1', '#7', '#8']"", ""PROJECT['names of #REF', '#9']""]","['select', 'project', 'filter', 'filter', 'group', 'group', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_5034,Find the names of states that have some college students playing in the mid position but not in the goalie position.,return states ;return college students of #1 ;return positions of #2 ;return #1 where #3 is  mid ;return #1 where #3 is  not goalie ;return names of #1 ;return #6 of both #4 and #5,"[""SELECT['states']"", ""PROJECT['college students of #REF', '#1']"", ""PROJECT['positions of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is mid']"", ""COMPARATIVE['#1', '#3', 'is not goalie']"", ""PROJECT['names of #REF', '#1']"", ""INTERSECTION['#6', '#4', '#5']""]","['select', 'project', 'project', 'comparative', 'comparative', 'project', 'intersection']",train
SPIDER_train_5035,What are the names of all the states with college students playing in the mid position but no goalies?,return states ;return college students of #1 ;return positions of #2 ;return #2 where #3 is  mid ;return #2 where #3 is  not goalie ;return #1 of both #4 and #5 ;return names of #6,"[""SELECT['states']"", ""PROJECT['college students of #REF', '#1']"", ""PROJECT['positions of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is mid']"", ""COMPARATIVE['#2', '#3', 'is not goalie']"", ""INTERSECTION['#1', '#4', '#5']"", ""PROJECT['names of #REF', '#6']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_5036,How many states that have some college students playing in the mid position but not in the goalie position.,return college students ;return positions of  #1 ;return #1 where  #2 is mid ;return #1 where  #2 is not  goalie ;return #1 of  both #3 and #4 ;return states of  #5,"[""SELECT['college students']"", ""PROJECT['positions of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is mid']"", ""COMPARATIVE['#1', '#2', 'is not goalie']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['states of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_5037,What is the count of states with college students playing in the mid position but not as goalies?,return college students ;return #1 that are playing in  the  mid position ;return #1 that are playing in  the  goalie position ;return states of #2 ;return states of #3 ;return states of #1 ;return #6 of both #4 and  #5 ;return #4 besides  #7 ;return number of  #6,"[""SELECT['college students']"", ""FILTER['#1', 'that are playing in the mid position']"", ""FILTER['#1', 'that are playing in the goalie position']"", ""PROJECT['states of #REF', '#2']"", ""PROJECT['states of #REF', '#3']"", ""PROJECT['states of #REF', '#1']"", ""INTERSECTION['#6', '#4', '#5']"", ""DISCARD['#4', '#7']"", ""AGGREGATE['count', '#8']""]","['select', 'filter', 'filter', 'project', 'project', 'project', 'intersection', 'discard', 'aggregate']",train
SPIDER_train_5038,Find the states where have the colleges whose enrollments are less than the largest size.,return colleges ;return enrollments of  #1 ;return largest #2 ;return #1 where #2 is  lower than #3 ;return states of  #4,"[""SELECT['colleges']"", ""PROJECT['enrollments of #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""COMPARATIVE['#1', '#2', 'is lower than #3']"", ""PROJECT['states of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_5039,What are the states with colleges that have enrollments less than the some other college?,return colleges ;return enrollments of #1 ;return #1 where #2 is  highest ;return #1 besides #3 ;return states of #4,"[""SELECT['colleges']"", ""PROJECT['enrollments of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""DISCARD['#1', '#3']"", ""PROJECT['states of #REF', '#4']""]","['select', 'project', 'superlative', 'discard', 'project']",train
SPIDER_train_504,How many students are affected by cat allergies?,return students ;return allergies of  #1 ;return #1 where  #2 is cat ;return number of  #3,"[""SELECT['students']"", ""PROJECT['allergies of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is cat']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_5040,Find names of colleges with enrollment greater than that of some (at least one) college in the FL state.,return colleges ;return #1 in  FL state ;return enrollment of #2 ;return enrollment of #1 ;return #1 where #4 is higher than #3,"[""SELECT['colleges']"", ""FILTER['#1', 'in FL state']"", ""PROJECT['enrollment of #REF', '#2']"", ""PROJECT['enrollment of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is higher than #3']""]","['select', 'filter', 'project', 'project', 'comparative']",train
SPIDER_train_5041,What are the names of the colleges that are larger than at least one college in Florida?,return colleges ;return #1 in  Florida ;return largeness of #2 ;return #2 where #3 is lowest ;return largeness of #1 ;return #1 where #5 is higher than #4,"[""SELECT['colleges']"", ""FILTER['#1', 'in Florida']"", ""PROJECT['largeness of #REF', '#2']"", ""SUPERLATIVE['min', '#2', '#3']"", ""PROJECT['largeness of #REF', '#1']"", ""COMPARATIVE['#1', '#5', 'is higher than #4']""]","['select', 'filter', 'project', 'superlative', 'project', 'comparative']",train
SPIDER_train_5042,Find names of all colleges whose enrollment is greater than that of all colleges in the FL state.,return colleges ;return enrollment number of  #1 ;return #1 in FL state ;return enrollment number of #3 ;return #1 where  #2 is  greater than  #4 ;return names of  #5,"[""SELECT['colleges']"", ""AGGREGATE['count', '#1']"", ""FILTER['#1', 'in FL state']"", ""AGGREGATE['count', '#3']"", ""COMPARATIVE['#1', '#2', 'is greater than #4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'aggregate', 'filter', 'aggregate', 'comparative', 'project']",train
SPIDER_train_5043,What are the names of all colleges with a larger enrollment than the largest college in Florida?,return Florida ;return colleges of #1 ;return size of #2 ;return #2 where #3 is the  highest ;return enrollment of #4 ;return colleges ;return enrollments of #6 ;return #6 where #7 is higher than #5 ;return names of #8,"[""SELECT['Florida']"", ""PROJECT['colleges of #REF', '#1']"", ""PROJECT['size of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is the highest']"", ""PROJECT['enrollment of #REF', '#4']"", ""SELECT['colleges']"", ""PROJECT['enrollments of #REF', '#6']"", ""COMPARATIVE['#6', '#7', 'is higher than #5']"", ""PROJECT['names of #REF', '#8']""]","['select', 'project', 'project', 'comparative', 'project', 'select', 'project', 'comparative', 'project']",train
SPIDER_train_5044,What is the total number of enrollment of schools that do not have any goalie player?,return schools ;return players of #1 ;return #1 where #2 is  not goalie ;return enrollments of #3 ;return sum of #4,"[""SELECT['schools']"", ""PROJECT['players of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not goalie']"", ""PROJECT['enrollments of #REF', '#3']"", ""AGGREGATE['sum', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_5045,What is the total number of students enrolled in schools without any goalies?,return schools ;return #1 without goalies ;return students enrolled in #2 ;return number of  #3,"[""SELECT['schools']"", ""FILTER['#1', 'without goalies']"", ""PROJECT['students enrolled in #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_5046,What is the number of states that has some college whose enrollment is larger than the average enrollment?,return colleges ;return enrollments of  #1 ;return average of  #2 ;return #1 where #2 is  higher than #3 ;return states of  #4 ;return number of  #5,"[""SELECT['colleges']"", ""PROJECT['enrollments of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['states of #REF', '#4']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'aggregate']",train
SPIDER_train_5047,How many states have a college with more students than average?,return colleges ;return students of  #1 ;return average of  #2 ;return number of  #2 for each  #1 ;return #1 where #4 is  higher than #3 ;return states of  #5 ;return number of  #6,"[""SELECT['colleges']"", ""PROJECT['students of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#4', 'is higher than #3']"", ""PROJECT['states of #REF', '#5']"", ""AGGREGATE['count', '#6']""]","['select', 'project', 'aggregate', 'group', 'comparative', 'project', 'aggregate']",train
SPIDER_train_5048,What is the number of states that has some colleges whose enrollment is smaller than the average enrollment?,return colleges ;return enrollments of  #1 ;return average of  #2 ;return #1 where #2 is  lower than #3 ;return states of  #4 ;return number of  #5,"[""SELECT['colleges']"", ""PROJECT['enrollments of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is lower than #3']"", ""PROJECT['states of #REF', '#4']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'aggregate']",train
SPIDER_train_5049,How many states have smaller colleges than average?,return states ;return colleges of  #1 ;return #1 where #2 are  smaller than average ;return number of  #3,"[""SELECT['states']"", ""PROJECT['colleges of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'are smaller than average']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_505,Show all student IDs who have at least two allergies.,return students ;return allergies of #1 ;return the  number of  #2 for each #1 ;return #1 where #3 is  at least two ;return the  student IDs of #4,"[""SELECT['students']"", ""PROJECT['allergies of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""PROJECT['the student IDs of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_5050,How many devices are there?,return devices ;return number of  #1,"[""SELECT['devices']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_5051,Count the number of devices.,return devices ;return number of #1,"[""SELECT['devices']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_5052,List the carriers of devices in ascending alphabetical order.,return devices ;return carriers of  #1 ;return #2 sorted by ascending alphabetical order,"[""SELECT['devices']"", ""PROJECT['carriers of #REF', '#1']"", ""SORT['#2', '#2', 'ascending alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_5053,"What are the different carriers for devices, listed in alphabetical order?",return devices ;return different carriers for #1 ;return #2 sorted by alphabetical order,"[""SELECT['devices']"", ""PROJECT['different carriers for #REF', '#1']"", ""SORT['#2', '#2', 'alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_5054,"What are the carriers of devices whose software platforms are not ""Android""?",return devices ;return #1 whose software platforms are  Android ;return #1 besides  #2 ;return carriers of  #3,"[""SELECT['devices']"", ""FILTER['#1', 'whose software platforms are Android']"", ""DISCARD['#1', '#2']"", ""PROJECT['carriers of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_5055,Return the device carriers that do not have Android as their software platform.,return device carriers ;return software platforms of  #1 ;return #1 where #2 is  not  Android,"[""SELECT['device carriers']"", ""PROJECT['software platforms of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not Android']""]","['select', 'project', 'comparative']",train
SPIDER_train_5056,What are the names of shops in ascending order of open year?,return shops ;return open years of  #1 ;return names of  #1 ; return #3 sorted by ascending order of #2,"[""SELECT['shops']"", ""PROJECT['open years of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""SORT['#3', '#2', 'ascending order of']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_5057,"Return the names of shops, ordered by year of opening ascending.",return shops ;return years of opening of  #1 ;return the  names of #1 ;return #3 sorted by #2 ascending,"[""SELECT['shops']"", ""PROJECT['years of opening of #REF', '#1']"", ""PROJECT['the names of #REF', '#1']"", ""SORT['#3', '#2', 'ascending']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_5058,What is the average quantity of stocks?,return stocks ;return quantity of  #1 ;return average #2,"[""SELECT['stocks']"", ""PROJECT['quantity of #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_5059,Give the average quantity of stocks.,return stocks ;return quantities of  #1 ;return average of  #2,"[""SELECT['stocks']"", ""PROJECT['quantities of #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_506,What are the students ids of students who have more than one allergy?,return students  ;return allergies of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  more than one ;return students ids of  #4,"[""SELECT['students']"", ""PROJECT['allergies of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than one']"", ""PROJECT['students ids of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_5060,What are the names and location of the shops in ascending alphabetical order of name.,"return shops ;return names of #1 ;return locations of #1 ;return #2 ,  #3 ;return #4 sorted by #2 in alphabetical order","[""SELECT['shops']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['locations of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#4', '#2', 'in alphabetical order']""]","['select', 'project', 'project', 'union', 'sort']",train
SPIDER_train_5061,"Return the names and locations of shops, ordered by name in alphabetical order.","return shops ;return names of  #1 ;return locations of  #1 ;return #2 ,  #3 ;return #4 sorted by #2 in alphabetical order","[""SELECT['shops']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['locations of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#4', '#2', 'in alphabetical order']""]","['select', 'project', 'project', 'union', 'sort']",train
SPIDER_train_5062,How many different software platforms are there for devices?,return devices ;return software platforms for #1 ;return different #2 ;return number of #3,"[""SELECT['devices']"", ""PROJECT['software platforms for #REF', '#1']"", ""PROJECT['different #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_5063,Count the number of different software platforms.,return software platforms ;return #1 that  are  different ;return number of #2,"[""SELECT['software platforms']"", ""FILTER['#1', 'that are different']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_5064,"List the open date of open year of the shop named ""Apple"".",return shops ;return #1 named Apple ;return the  open  year of #2 ;return the  open  date of #3,"[""SELECT['shops']"", ""FILTER['#1', 'named Apple']"", ""PROJECT['the open year of #REF', '#2']"", ""PROJECT['the open date of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_5065,What are the open dates and years for the shop named Apple?,"return shops ;return #1 named Apple ;return open dates of #2 ;return years of #2 ;return #3 ,  #4","[""SELECT['shops']"", ""FILTER['#1', 'named Apple']"", ""PROJECT['open dates of #REF', '#2']"", ""PROJECT['years of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_5066,List the name of the shop with the latest open year.,return shops ;return open years of  #1 ;return #1 where  #2 is latest ;return name of  #3,"[""SELECT['shops']"", ""PROJECT['open years of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is latest']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5067,What is the shop name corresponding to the shop that opened in the most recent year?,return shops ;return years #1 opened ;return #1 where #2 is  most recent ;return shop name of #3,"[""SELECT['shops']"", ""PROJECT['years #REF opened', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['shop name of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_5068,Show names of shops and the carriers of devices they have in stock.,"return shops ;return names of #1 ;return devices that  #1 have  in stock ;return carriers of #3 ;return #2 , #4","[""SELECT['shops']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['devices that #REF have in stock', '#1']"", ""PROJECT['carriers of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_5069,"What are the names of device shops, and what are the carriers that they carry devices in stock for?","return device shops ;return names of  #1 ;return carriers #1 carry devices for ;return #2 ,  #3","[""SELECT['device shops']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['carriers #REF carry devices for', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_507,What are the student ids of students who don't have any allergies?,return students ;return allergies of #1 ;return number of  #2 for each #1 ;return #1 where #3 is zero ;return student ids of #4,"[""SELECT['students']"", ""PROJECT['allergies of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is zero']"", ""PROJECT['student ids of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_5070,Show names of shops that have more than one kind of device in stock.,return shops ;return devices of #1 ;return #2 that  are in stock ;return kinds of #3 ;return number of  #4 for each #1 ;return #1 where #5 is  higher than one ;return names of #6,"[""SELECT['shops']"", ""PROJECT['devices of #REF', '#1']"", ""FILTER['#2', 'that are in stock']"", ""PROJECT['kinds of #REF', '#3']"", ""GROUP['count', '#4', '#1']"", ""COMPARATIVE['#1', '#5', 'is higher than one']"", ""PROJECT['names of #REF', '#6']""]","['select', 'project', 'filter', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_5071,What are the names of shops that have more than a single kind of device in stock?,return shops ;return devices of #1 ;return #2 that  are in stock ;return kinds of #3 ;return number of  #4 ;return #1 where #5 is  higher than one ;return names of #6,"[""SELECT['shops']"", ""PROJECT['devices of #REF', '#1']"", ""FILTER['#2', 'that are in stock']"", ""PROJECT['kinds of #REF', '#3']"", ""AGGREGATE['count', '#4']"", ""COMPARATIVE['#1', '#5', 'is higher than one']"", ""PROJECT['names of #REF', '#6']""]","['select', 'project', 'filter', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_5072,Show the name of the shop that has the most kind of devices in stock.,return shops ;return kinds of  devices of #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return name of  #4,"[""SELECT['shops']"", ""PROJECT['kinds of devices of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_5073,What is the name of the shop that has the most different kinds of devices in stock?,return shops ;return different devices in stock of #1 ;return number of #2 for each #1 ;return #1 where #3 is  highest ;return name of #4,"[""SELECT['shops']"", ""PROJECT['different devices in stock of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_5074,Show the name of the shop that have the largest quantity of devices in stock.,return shops ;return devices in stock of  #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is highest ;return name of  #4,"[""SELECT['shops']"", ""PROJECT['devices in stock of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_5075,What is the name of the shop that has the greatest quantity of devices in stock?,return shops ;return devices #1 have  in stock ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return name of  #4,"[""SELECT['shops']"", ""PROJECT['devices #REF have in stock', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_5076,Please show different software platforms and the corresponding number of devices using each.,"return different software platforms ;return devices using #1 ;return number of  #2 for each  #1 ;return #1 ,  #3","[""SELECT['different software platforms']"", ""PROJECT['devices using #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_5077,"What are the different software platforms for devices, and how many devices have each?","return devices ;return different software platforms of  #1 ;return number of  #1 for each  #2 ;return #2 ,  #3","[""SELECT['devices']"", ""PROJECT['different software platforms of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""UNION['#2', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_5078,Please show the software platforms of devices in descending order of the count.,return devices ;return software platforms of  #1 ;return number of  #2 for each  #1 ;return #2 sorted by #3 in descending order,"[""SELECT['devices']"", ""PROJECT['software platforms of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SORT['#2', '#3', 'in descending order']""]","['select', 'project', 'group', 'sort']",train
SPIDER_train_5079,"What are the different software platforms for devices, ordered by frequency descending?",return software platforms for devices ;return frequency of  #1 ;return #1 sorted by #2 descending,"[""SELECT['software platforms for devices']"", ""PROJECT['frequency of #REF', '#1']"", ""SORT['#1', '#2', 'descending']""]","['select', 'project', 'sort']",train
SPIDER_train_508,Which students are unaffected by allergies?,return students ;return #1 who  have  allergies ;return #1 besides  #2,"[""SELECT['students']"", ""FILTER['#1', 'who have allergies']"", ""DISCARD['#1', '#2']""]","['select', 'filter', 'discard']",train
SPIDER_train_5080,List the software platform shared by the greatest number of devices.,return software platforms ;return devices with  #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is highest,"[""SELECT['software platforms']"", ""PROJECT['devices with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_5081,What is the software platform that is most common amongst all devices?,return software platforms ;return devices that  have  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['software platforms']"", ""PROJECT['devices that have #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_5082,List the names of shops that have no devices in stock.,return shops ;return #1 that  have  devices in stock ;return #1 besides #2 ;return names of  #3,"[""SELECT['shops']"", ""FILTER['#1', 'that have devices in stock']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_5083,What are the names of shops that do not have any devices in stock?,return shops ;return devices of #1 ;return #2 that  are in stock ;return the  number of  #3 for each #1 ;return #1 where #4 is  zero ;return the  names of #5,"[""SELECT['shops']"", ""PROJECT['devices of #REF', '#1']"", ""FILTER['#2', 'that are in stock']"", ""GROUP['count', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is zero']"", ""PROJECT['the names of #REF', '#5']""]","['select', 'project', 'filter', 'group', 'comparative', 'project']",train
SPIDER_train_5084,Show the locations shared by shops with open year later than 2012 and shops with open year before 2008.,return shops  ;return open year  of #1 ;return #1 where #2 is  later than  2012 ;return #1 where #2 is  before 2008 ;return locations of #3 ;return locations of #4 ;return locations of #1 ;return #7 in both #5 and  #6,"[""SELECT['shops']"", ""PROJECT['open year of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is later than 2012']"", ""COMPARATIVE['#1', '#2', 'is before 2008']"", ""PROJECT['locations of #REF', '#3']"", ""PROJECT['locations of #REF', '#4']"", ""PROJECT['locations of #REF', '#1']"", ""INTERSECTION['#7', '#5', '#6']""]","['select', 'project', 'comparative', 'comparative', 'project', 'project', 'project', 'intersection']",train
SPIDER_train_5085,Which locations contains both shops that opened after the year 2012 and shops that opened before 2008?,return locations ;return shops  in #1 ;return #2 that  opened after 2012 ;return #2 that  opened before 2008 ;return #1 of  both #3 and  #4,"[""SELECT['locations']"", ""PROJECT['shops in #REF', '#1']"", ""FILTER['#2', 'that opened after 2012']"", ""FILTER['#2', 'that opened before 2008']"", ""INTERSECTION['#1', '#3', '#4']""]","['select', 'project', 'filter', 'filter', 'intersection']",train
SPIDER_train_5086,List the carriers of devices that have no devices in stock.,return devices ;return #1 that are in  stock ;return #1 besides  #2 ;return carriers of #3,"[""SELECT['devices']"", ""FILTER['#1', 'that are in stock']"", ""DISCARD['#1', '#2']"", ""PROJECT['carriers of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_5087,What are the carriers of devices that are not in stock anywhere?,return devices ;return #1 that  are  in stock ;return #1 besides  #2 ;return carriers of  #3,"[""SELECT['devices']"", ""FILTER['#1', 'that are in stock']"", ""DISCARD['#1', '#2']"", ""PROJECT['carriers of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_5088,Show the carriers of devices in stock at more than one shop.,return devices ;return shops #1 are in stock at ;return number of  #2 for each #1 ;return #1 where #3 is  higher than one ;return carriers of #4,"[""SELECT['devices']"", ""PROJECT['shops #REF are in stock at', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than one']"", ""PROJECT['carriers of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_5089,What are the carriers of devices that are in stock in more than a single shop?,return devices ;return shops #1 are in stock in  ;return number of  #2 for each #1 ;return #1 where #3 is  higher than one ;return carriers of #4,"[""SELECT['devices']"", ""PROJECT['shops #REF are in stock in', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than one']"", ""PROJECT['carriers of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_509,How many female students have milk or egg allergies?,return female students ;return allergies of  #1 ;return #1 where  #2 is  milk ;return #1 where  #2 is  egg ;return #3 or  #4,"[""SELECT['female students']"", ""PROJECT['allergies of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is milk']"", ""COMPARATIVE['#1', '#2', 'is egg']"", ""UNION['#3', '#4']""]","['select', 'project', 'comparative', 'comparative', 'union']",train
SPIDER_train_5090,How many bookings do we have?,return bookings ;return number of  #1,"[""SELECT['bookings']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_5091,Count the total number of bookings made.,return bookings ;return total number of #1,"[""SELECT['bookings']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_5092,List the order dates of all the bookings.,return bookings ;return order dates of  #1,"[""SELECT['bookings']"", ""PROJECT['order dates of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_5093,What is the order date of each booking?,return bookings ;return order dates of  #1,"[""SELECT['bookings']"", ""PROJECT['order dates of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_5094,Show all the planned delivery dates and actual delivery dates of bookings.,"return bookings ;return planned delivery  dates  of #1 ;return actual delivery dates  of #1 ;return #2 ,  #3","[""SELECT['bookings']"", ""PROJECT['planned delivery dates of #REF', '#1']"", ""PROJECT['actual delivery dates of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_5095,What are the planned delivery date and actual delivery date for each booking?,"return bookings ;return planned delivery  dates of  #1 ;return actual delivery  dates of  #1 ;return #2 ,  #3","[""SELECT['bookings']"", ""PROJECT['planned delivery dates of #REF', '#1']"", ""PROJECT['actual delivery dates of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_5096,How many customers do we have?,return customers ;return number of #1,"[""SELECT['customers']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_5097,Count the number of customers recorded.,return customers ;return number of  #1,"[""SELECT['customers']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_5098,What are the phone and email for customer Harold?,"return customer Harold ;return phone for #1 ;return email for #1 ;return #2 ,  #3","[""SELECT['customer Harold']"", ""PROJECT['phone for #REF', '#1']"", ""PROJECT['email for #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_5099,"Find the phone number and email address of customer ""Harold"".","return the  customer Harold ;return the  phone number of #1 ;return the  email address of #1 ;return #2 ,  #3","[""SELECT['the customer Harold']"", ""AGGREGATE['count', '#1']"", ""PROJECT['the email address of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'aggregate', 'project', 'union']",train
SPIDER_train_51,Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500?,return cities  ;return populations of #1 ;return #1 where #2 is higher than 1500 ;return #1 where #2 is lower than 500 ;return statuses of #1 ;return #5 of both #3 and  #4,"[""SELECT['cities']"", ""PROJECT['populations of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 1500']"", ""COMPARATIVE['#1', '#2', 'is lower than 500']"", ""PROJECT['statuses of #REF', '#1']"", ""INTERSECTION['#5', '#3', '#4']""]","['select', 'project', 'comparative', 'comparative', 'project', 'intersection']",train
SPIDER_train_510,How many students who are female are allergic to milk or eggs?,return students ;return #1 who  are  female ;return #2 who  are  allergic to  milk ;return #2 who  are  allergic to  eggs ;return #3 or #4 ;return number of  #5,"[""SELECT['students']"", ""FILTER['#1', 'who are female']"", ""FILTER['#2', 'who are allergic to milk']"", ""FILTER['#2', 'who are allergic to eggs']"", ""UNION['#3', '#4']"", ""AGGREGATE['count', '#5']""]","['select', 'filter', 'filter', 'filter', 'union', 'aggregate']",train
SPIDER_train_5100,Show all the Store_Name of drama workshop groups.,return drama workshop groups ;return the  Store_Name of #1,"[""SELECT['drama workshop groups']"", ""PROJECT['the Store_Name of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_5101,What are the store names of drama workshop groups?,return drama workshop groups ;return store names of #1,"[""SELECT['drama workshop groups']"", ""PROJECT['store names of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_5102,"Show the minimum, average, maximum order quantity of all invoices.","return all invoices ;return order quantities of  #1 ;return minimum of  #2 ;return maximum of  #2 ;return average of  #2 ;return #3 ,   #4 ,  #5","[""SELECT['all invoices']"", ""PROJECT['order quantities of #REF', '#1']"", ""AGGREGATE['min', '#2']"", ""AGGREGATE['max', '#2']"", ""AGGREGATE['avg', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'project', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_5103,"What are the minimum, average, and maximum quantities ordered? Check all the invoices.","return invoices ;return quantities ordered of #1 ;return minimum of #2 ;return average of #2 ;return maximum of #2 ;return #3 ,  #4 ,   #5","[""SELECT['invoices']"", ""PROJECT['quantities ordered of #REF', '#1']"", ""AGGREGATE['min', '#2']"", ""AGGREGATE['avg', '#2']"", ""AGGREGATE['max', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'project', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_5104,What are the distinct payment method codes in all the invoices?,return invoices ;return payment methods of  #1 ;return distinct codes of  #2,"[""SELECT['invoices']"", ""PROJECT['payment methods of #REF', '#1']"", ""PROJECT['distinct codes of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_5105,Show me the distinct payment method codes from the invoice record.,return invoices ;return payment methods of #1 ;return codes of #2 ;return the  distinct #3,"[""SELECT['invoices']"", ""PROJECT['payment methods of #REF', '#1']"", ""PROJECT['codes of #REF', '#2']"", ""PROJECT['the distinct #REF', '#3']""]","['select', 'project', 'project', 'project']",train
SPIDER_train_5106,What is the description of the marketing region China?,return China ;return marketing region of #1 ;return description of #2,"[""SELECT['China']"", ""PROJECT['marketing region of #REF', '#1']"", ""PROJECT['description of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_5107,Find the marketing region description of China?,return marketing regions ;return the #1 in China ;return the description of  #2,"[""SELECT['marketing regions']"", ""PROJECT['the #REF in China', '#1']"", ""PROJECT['the description of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_5108,Show all the distinct product names with price higher than the average.,return products ;return prices of  #1 ;return average of  #2 ;return #1 where #2 is higher than #3 ;return distinct product names of  #4,"[""SELECT['products']"", ""PROJECT['prices of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['distinct product names of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_5109,What are the distinct names of the products that cost more than the average?,return products ;return cost of  #1 ;return average of  #2 ;return #1 where #2 is  higher than #3 ;return distinct names of  #4,"[""SELECT['products']"", ""PROJECT['cost of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['distinct names of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_511,How many students have a food allergy?,return students ;return allergies of  #1 ;return #1 where  #2 is  food ;return number of #3,"[""SELECT['students']"", ""PROJECT['allergies of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is food']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_5110,What is the name of the most expensive product?,return products ;return most expensive #1 ;return name of  #2,"[""SELECT['products']"", ""PROJECT['most expensive #REF', '#1']"", ""PROJECT['name of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_5111,Tell me the name of the most pricy product.,return products ;return #1 that  is  most pricy ;return name of #2,"[""SELECT['products']"", ""FILTER['#1', 'that is most pricy']"", ""PROJECT['name of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5112,List all product names in ascending order of price.,return products ;return product names of  #1 ;return prices of  #1 ;return #2 sorted by #3 in ascending order,"[""SELECT['products']"", ""PROJECT['product names of #REF', '#1']"", ""PROJECT['prices of #REF', '#1']"", ""SORT['#2', '#3', 'in ascending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_5113,Sort the names of products in ascending order of their price.,return products ;return names of  #1 ;return prices of  #1 ;return #2 sorted by #3 in ascending order,"[""SELECT['products']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['prices of #REF', '#1']"", ""SORT['#2', '#3', 'in ascending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_5114,What is the phone number of the performer Ashley?,return performer Ashley ;return phone number of  #1,"[""SELECT['performer Ashley']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_5115,"Find the phone number of performer ""Ashley"".",return performer Ashley ;return phone number of  #1,"[""SELECT['performer Ashley']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_5116,Show all payment method codes and the number of orders for each code.,"return payment methods ;return codes of  #1 ;return orders for #2 ;return number of  #3 for each  #2 ;return #2 ,  #4","[""SELECT['payment methods']"", ""PROJECT['codes of #REF', '#1']"", ""PROJECT['orders for #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_5117,List the distinct payment method codes with the number of orders made,"return payment method codes ;return distinct #1 ;return orders of  #2 ;return number of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['payment method codes']"", ""PROJECT['distinct #REF', '#1']"", ""PROJECT['orders of #REF', '#2']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_5118,What is the payment method code used by the most orders?,return payment methods ;return codes of  #1 ;return orders that  used #2 ;return number of  #3 for each  #2 ;return #2 where #4 is  highest,"[""SELECT['payment methods']"", ""PROJECT['codes of #REF', '#1']"", ""PROJECT['orders that used #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""SUPERLATIVE['max', '#2', '#4']""]","['select', 'project', 'project', 'group', 'superlative']",train
SPIDER_train_5119,Find the payment method that is used the most often in all the invoices. Give me its code.,return invoices ;return payment methods of #1 ;return number of  #1 for each #2 ;return #2 where #3 is highest ;return code of #4,"[""SELECT['invoices']"", ""PROJECT['payment methods of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""SUPERLATIVE['max', '#2', '#3']"", ""PROJECT['code of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_512,How many students are affected by food related allergies?,return students ;return allergies of  #1 ;return #1 where  #2 is  food related ;return number of #3,"[""SELECT['students']"", ""PROJECT['allergies of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is food related']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_5120,"Which city is the address of the store named ""FJA Filming"" located in?",return stores ;return #1 named FJA Filming ;return address of  #2 ;return city of  #3,"[""SELECT['stores']"", ""FILTER['#1', 'named FJA Filming']"", ""PROJECT['address of #REF', '#2']"", ""PROJECT['city of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_5121,"Find the city the store named ""FJA Filming"" is in.",return store ;return #1 named FJA Filming ;return city of  #2,"[""SELECT['store']"", ""FILTER['#1', 'named FJA Filming']"", ""PROJECT['city of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5122,"What are the states or counties of the address of the stores with marketing region code ""CA""?",return stores ;return #1 with marketing region code CA ;return addresses of  #2 ;return states of  #3 ;return counties of  #3 ;return #4 or  #5,"[""SELECT['stores']"", ""FILTER['#1', 'with marketing region code CA']"", ""PROJECT['addresses of #REF', '#2']"", ""PROJECT['states of #REF', '#3']"", ""PROJECT['counties of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_5123,"Find the states or counties where the stores with marketing region code ""CA"" are located.",return stores ;return marketing region codes of #1 ;return #1 where #2 is  CA ;return states of #3 ;return counties of #3 ;return #4 or  #5,"[""SELECT['stores']"", ""PROJECT['marketing region codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is CA']"", ""PROJECT['states of #REF', '#3']"", ""PROJECT['counties of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_5124,What is the name of the marketing region that the store Rob Dinning belongs to?,return the  store Rob Dinning ;return marketing region of #1 ;return name of #2,"[""SELECT['the store Rob Dinning']"", ""PROJECT['marketing region of #REF', '#1']"", ""PROJECT['name of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_5125,Return the name of the marketing region the store Rob Dinning is located in.,return store ;return #1 that is Rob Dinning ;return marketing region of #2 ;return name of #3,"[""SELECT['store']"", ""FILTER['#1', 'that is Rob Dinning']"", ""PROJECT['marketing region of #REF', '#2']"", ""PROJECT['name of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_5126,What are the descriptions of the service types with product price above 100?,return services ;return types of  #1 ;return products of  #2 ;return prices of  #3 ;return #2 where #4 is  higher than 100 ;return descriptions of  #5,"[""SELECT['services']"", ""PROJECT['types of #REF', '#1']"", ""PROJECT['products of #REF', '#2']"", ""PROJECT['prices of #REF', '#3']"", ""COMPARATIVE['#2', '#4', 'is higher than 100']"", ""PROJECT['descriptions of #REF', '#5']""]","['select', 'project', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_5127,Give me the descriptions of the service types that cost more than 100.,return service types ;return cost of  #1 ;return #1 where  #2 is  higher than 100 ;return descriptions of  #3,"[""SELECT['service types']"", ""PROJECT['cost of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 100']"", ""PROJECT['descriptions of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5128,"What is the description, code and the corresponding count of each service type?","return service types ;return descriptions of #1 ;return codes of #1 ;return corresponding counts of #1 ;return #2 ,  #3 ,   #4","[""SELECT['service types']"", ""PROJECT['descriptions of #REF', '#1']"", ""PROJECT['codes of #REF', '#1']"", ""PROJECT['corresponding counts of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_5129,"List the description, code and the number of services for each service type.","return service types ;return descriptions of #1 ;return codes of #1 ;return services of #1 ;return number of  #4 for each  #1 ;return #2 ,  #3 ,   #5","[""SELECT['service types']"", ""PROJECT['descriptions of #REF', '#1']"", ""PROJECT['codes of #REF', '#1']"", ""PROJECT['services of #REF', '#1']"", ""GROUP['count', '#4', '#1']"", ""UNION['#2', '#3', '#5']""]","['select', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_513,Which allergy has most number of students affected?,return allergies ;return students affected of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['allergies']"", ""PROJECT['students affected of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_5130,What is the description and code of the type of service that is performed the most often?,"return services ;return how often #1 are performed ;return #1 where #2 is  the   most often ;return the   type of #3 ;return the   description of #4 ;return the   code of #4 ;return #5 ,  #6","[""SELECT['services']"", ""PROJECT['how often #REF are performed', '#1']"", ""COMPARATIVE['#1', '#2', 'is the most often']"", ""PROJECT['the type of #REF', '#3']"", ""PROJECT['the description of #REF', '#4']"", ""PROJECT['the code of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_5131,Find the description and code of the service type that is performed the most times.,"return service types ;return #1 performed most times ;return description of  #2 ;return code of  #2 ;return #3 ,   #4","[""SELECT['service types']"", ""FILTER['#1', 'performed most times']"", ""PROJECT['description of #REF', '#2']"", ""PROJECT['code of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_5132,What are the phones and emails of workshop groups in which services are performed?,"return workshop groups ;return #1 in which services are  performed ;return phones of  #2 ;return emails of  #2 ;return #3 ,  #4","[""SELECT['workshop groups']"", ""FILTER['#1', 'in which services are performed']"", ""PROJECT['phones of #REF', '#2']"", ""PROJECT['emails of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_5133,Give me all the phone numbers and email addresses of the workshop groups where services are performed.,"return workshop groups ;return #1 where  services are  performed ;return phone numbers of  #2 ;return email addresses of  #2 ;return #3 ,   #4","[""SELECT['workshop groups']"", ""FILTER['#1', 'where services are performed']"", ""PROJECT['phone numbers of #REF', '#2']"", ""PROJECT['email addresses of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_5134,"What are the names of workshop groups in which services with product name ""film"" are performed?",return workshop groups ;return services performed in #1 ;return product names of  #2 ;return #1 where #3 is  film ;return names of  #4,"[""SELECT['workshop groups']"", ""PROJECT['services performed in #REF', '#1']"", ""PROJECT['product names of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is film']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_5135,"Find the names of the workshop groups where services with product name ""film"" are performed.",return workshop groups ;return services performed of  #1 ;return product names of  #2 ;return #1 where  #3 is  film ;return names of  #4,"[""SELECT['workshop groups']"", ""PROJECT['services performed of #REF', '#1']"", ""PROJECT['product names of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is film']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_5136,What are the different product names? What is the average product price for each of them?,"return products ;return different names of  #1 ;return prices of  #1 ;return average of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['products']"", ""PROJECT['different names of #REF', '#1']"", ""PROJECT['prices of #REF', '#1']"", ""GROUP['avg', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_5137,"For each distinct product name, show its average product price.",return products ;return product names of  #1 ;return distinct #2 ;return prices of  #1 ;return average of  #4 for each #3,"[""SELECT['products']"", ""PROJECT['product names of #REF', '#1']"", ""PROJECT['distinct #REF', '#2']"", ""PROJECT['prices of #REF', '#1']"", ""GROUP['avg', '#4', '#3']"", ""UNION['#3', '#5']""]","['select', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_5138,What are the product names with average product price smaller than 1000000?,return products ;return prices of #1 ;return average of #2 for each #1 ;return #1 where #3 is lower than 1000000 ;return names of #4,"[""SELECT['products']"", ""PROJECT['prices of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is lower than 1000000']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_5139,Find the product names whose average product price is below 1000000.,return products ;return prices of  #1 ;return average #2 for each #1 ;return #1 where  #3 is  lower than 1000000 ;return names of  #4,"[""SELECT['products']"", ""PROJECT['prices of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is lower than 1000000']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_514,Which allergy is the most common?,return allergies ;return #1 that  is  the  most common,"[""SELECT['allergies']"", ""FILTER['#1', 'that is the most common']""]","['select', 'filter']",train
SPIDER_train_5140,What are the total order quantities of photo products?,return photo products ;return order quantities of  #1 ;return sum of  #2,"[""SELECT['photo products']"", ""PROJECT['order quantities of #REF', '#1']"", ""AGGREGATE['sum', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_5141,"Compute the total order quantities of the product ""photo"".",return order quantities ;return #1 of  the product photo ;return sum of  #2,"[""SELECT['order quantities']"", ""FILTER['#1', 'of the product photo']"", ""AGGREGATE['sum', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_5142,What are the order details of the products with price higher than 2000?,return products ;return prices of  #1 ;return #1 where #2 is  higher than 2000 ;return order details of  #3,"[""SELECT['products']"", ""PROJECT['prices of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 2000']"", ""PROJECT['order details of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5143,Find the order detail for the products with price above 2000.,return products ;return prices of  #1 ;return #1 where  #2 is  higher than 2000 ;return order detail of  #3,"[""SELECT['products']"", ""PROJECT['prices of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 2000']"", ""PROJECT['order detail of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5144,What are the actual delivery dates of orders with quantity 1?,return orders ;return quantities of  #1 ;return #1 where #2 is  1 ;return actual delivery dates of  #3,"[""SELECT['orders']"", ""PROJECT['quantities of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 1']"", ""PROJECT['actual delivery dates of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5145,List the actual delivery date for all the orders with quantity 1,return orders ;return #1 with  quantity 1 ;return actual delivery for #2,"[""SELECT['orders']"", ""FILTER['#1', 'with quantity 1']"", ""PROJECT['actual delivery for #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5146,What are the order dates of orders with price higher than 1000?,return orders ;return #1 with price higher than 1000 ;return order dates of  #2,"[""SELECT['orders']"", ""FILTER['#1', 'with price higher than 1000']"", ""PROJECT['order dates of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5147,Find the order dates of the orders with price above 1000.,return orders ;return order dates of  #1 ;return price of  #1 ;return #2 where  #3 is  above 1000,"[""SELECT['orders']"", ""PROJECT['order dates of #REF', '#1']"", ""PROJECT['price of #REF', '#1']"", ""COMPARATIVE['#2', '#3', 'is above 1000']""]","['select', 'project', 'project', 'comparative']",train
SPIDER_train_5148,How many distinct currency codes are there for all drama workshop groups?,return drama workshop groups ;return currency codes of #1 ;return number of  distinct #2,"[""SELECT['drama workshop groups']"", ""PROJECT['currency codes of #REF', '#1']"", ""PROJECT['distinct #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_5149,Find the number of distinct currency codes used in drama workshop groups.,return drama workshop groups ;return currency codes used in #1 ;return distinct #2 ;return number of #3,"[""SELECT['drama workshop groups']"", ""PROJECT['currency codes used in #REF', '#1']"", ""PROJECT['distinct #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_515,Show all allergies with number of students affected.,"return allergies ;return students affected of #1 ;return number of  #2 for each #1 ;return #1 ,  #3","[""SELECT['allergies']"", ""PROJECT['students affected of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_5150,What are the names of the drama workshop groups with address in Feliciaberg city?,return drama workshop groups ;return addresses of  #1 ;return #1 where #2 is  in Feliciaberg city ;return names of  #3,"[""SELECT['drama workshop groups']"", ""PROJECT['addresses of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is in Feliciaberg city']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5151,Return the the names of the drama workshop groups that are located in Feliciaberg city.,return drama workshop groups ;return cities of  #1 ;return #1 where #2 is  Feliciaberg ;return names of  #3,"[""SELECT['drama workshop groups']"", ""PROJECT['cities of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Feliciaberg']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5152,What are the email addresses of the drama workshop groups with address in Alaska state?,return drama workshop groups ;return addresses of  #1 ;return states of  #2 ;return #1 where #3 is  Alaska ;return email addresses of  #4,"[""SELECT['drama workshop groups']"", ""PROJECT['addresses of #REF', '#1']"", ""PROJECT['states of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Alaska']"", ""PROJECT['email addresses of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_5153,List the email addresses of the drama workshop groups located in Alaska state.,return drama workshop groups ;return states of  #1 ;return #1 where  #2 is Alaska ;return email addresses of  #3,"[""SELECT['drama workshop groups']"", ""PROJECT['states of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Alaska']"", ""PROJECT['email addresses of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5154,Show all cities along with the number of drama workshop groups in each city.,"return cities ;return drama workshop groups ;return number of  #2 for each  #1 ;return #1 , #3","[""SELECT['cities']"", ""SELECT['drama workshop groups']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'select', 'group', 'union']",train
SPIDER_train_5155,How many drama workshop groups are there in each city? Return both the city and the count.,"return cities ;return drama workshops in #1 ;return number of #2 for each #1 ;return #1 ,   #3","[""SELECT['cities']"", ""PROJECT['drama workshops in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_5156,What is the marketing region code that has the most drama workshop groups?,return marketing region codes ;return drama workshop groups of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['marketing region codes']"", ""PROJECT['drama workshop groups of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_5157,Which marketing region has the most drama workshop groups? Give me the region code.,return marketing regions ;return drama workshop groups in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return region code of  #4,"[""SELECT['marketing regions']"", ""PROJECT['drama workshop groups in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['region code of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_5158,Show all cities where at least one customer lives in but no performer lives in.,return cities ;return customers that  live in #1 ;return the  number of  #2 for each #1 ;return #1 where #3 is  at least one ;return performer who lives in #4 ;return the  number of  #5 for each #4 ;return #4 where #6 is  zero,"[""SELECT['cities']"", ""PROJECT['customers that live in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least one']"", ""PROJECT['performer who lives in #REF', '#4']"", ""GROUP['count', '#5', '#4']"", ""COMPARATIVE['#4', '#6', 'is zero']""]","['select', 'project', 'group', 'comparative', 'project', 'group', 'comparative']",train
SPIDER_train_5159,Which cities have at least one customer but no performer?,return cities ;return customers of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  at least one ;return #1 with  no performers ;return #1 of both #4 and #5,"[""SELECT['cities']"", ""PROJECT['customers of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least one']"", ""FILTER['#1', 'with no performers']"", ""INTERSECTION['#1', '#4', '#5']""]","['select', 'project', 'group', 'comparative', 'filter', 'intersection']",train
SPIDER_train_516,How many students have each different allergy?,return allergies ;return different #1 ;return students who  have  #2 ;return number of  #3 for each  #2,"[""SELECT['allergies']"", ""PROJECT['different #REF', '#1']"", ""PROJECT['students who have #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_5160,What is the most frequent status of bookings?,return statuses ;return bookings with  #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['statuses']"", ""PROJECT['bookings with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_5161,Which status code is the most common of all the bookings?,return status codes ;return bookings with  #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['status codes']"", ""PROJECT['bookings with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_5162,"What are the names of the workshop groups that have bookings with status code ""stop""?",return workshop groups ;return bookings of  #1 ;return status codes of  #2 ;return #1 where #3 is  stop ;return names of  #4,"[""SELECT['workshop groups']"", ""PROJECT['bookings of #REF', '#1']"", ""PROJECT['status codes of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is stop']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_5163,"Which workshop groups have bookings with status code ""stop""? Give me the names.",return workshop groups ;return #1 that  have  bookings ;return #2 with status code stop ;return the  names of  #3,"[""SELECT['workshop groups']"", ""FILTER['#1', 'that have bookings']"", ""FILTER['#2', 'with status code stop']"", ""PROJECT['the names of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_5164,Show the names of all the clients with no booking.,return clients ;return #1 with bookings ;return #1 besides  #2 ;return names of  #3,"[""SELECT['clients']"", ""FILTER['#1', 'with bookings']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_5165,What are the names of the clients who do not have any booking?,return clients ;return booking of #1 ;return number of  #2 for each #1 ;return #1 where #3 equal to zero ;return name of #4,"[""SELECT['clients']"", ""PROJECT['booking of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'equal to zero']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_5166,"What is the average quantities ordered with payment method code ""MasterCard"" on invoices?",return invoices ;return payment methods of  #1 ;return codes of  #2 ;return #1 where #3 is  MasterCard ;return quantities ordered on  #4 ;return average of  #5,"[""SELECT['invoices']"", ""PROJECT['payment methods of #REF', '#1']"", ""PROJECT['codes of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is MasterCard']"", ""PROJECT['quantities ordered on #REF', '#4']"", ""AGGREGATE['avg', '#5']""]","['select', 'project', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_5167,"Check the invoices record and compute the average quantities ordered with the payment method ""MasterCard"".",return invoices ;return payment methods of  #1 ;return #1 where #2 is  MasterCard ;return quantities ordered of  #3 ;return average of  #4,"[""SELECT['invoices']"", ""PROJECT['payment methods of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is MasterCard']"", ""PROJECT['quantities ordered of #REF', '#3']"", ""AGGREGATE['avg', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_5168,What is the product ID of the most frequently ordered item on invoices?,return item ;return #1 on invoices ;return #2 that  is  most frequently ordered ;return product ID of #3,"[""SELECT['item']"", ""FILTER['#1', 'on invoices']"", ""FILTER['#2', 'that is most frequently ordered']"", ""PROJECT['product ID of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_5169,Find the id of the product ordered the most often on invoices.,return invoices ;return products of #1 ;return number of  #1 for each #2 ;return #2 where #3 is the  highest ;return id of #4,"[""SELECT['invoices']"", ""PROJECT['products of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""COMPARATIVE['#2', '#3', 'is the highest']"", ""PROJECT['id of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_517,Show all allergy type with number of students affected.,return allergy types ;return students #1 affected ;return number of  #2 for each  #1,"[""SELECT['allergy types']"", ""PROJECT['students #REF affected', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_5170,What is the description of the service type which offers both the photo product and the film product?,return service types ;return products of #1 ;return #1 where #2 is photo ;return #1 where #2 is film ;return #1 in  both #3 and  #4 ;return description of #5,"[""SELECT['service types']"", ""PROJECT['products of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is photo']"", ""COMPARATIVE['#1', '#2', 'is film']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['description of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_5171,Give me the description of the service type that offers not only the photo product but also the film product.,return service types ;return products of #1 ;return #1 where #2 is photo ;return #1 where #2 is film ;return #1 in  both #3 and  #4 ;return description of #5,"[""SELECT['service types']"", ""PROJECT['products of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is photo']"", ""COMPARATIVE['#1', '#2', 'is film']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['description of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_5172,How many bands are there?,return bands ;return number of  #1,"[""SELECT['bands']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_5173,Find the number of bands.,return bands ;return the number of #1,"[""SELECT['bands']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_5174,What are all the labels?,return labels,"[""SELECT['labels']""]",['select'],train
SPIDER_train_5175,What are the different album labels listed?,return albums ;return labels of #1 ;return different #2,"[""SELECT['albums']"", ""PROJECT['labels of #REF', '#1']"", ""PROJECT['different #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_5176,Find all the albums in 2012.,return albums ;return #1 in  2012,"[""SELECT['albums']"", ""FILTER['#1', 'in 2012']""]","['select', 'filter']",train
SPIDER_train_5177,return all columns of the albums created in the year of 2012.,return albums ;return years created of  #1 ;return #1 where #2 is  2012 ;return all columns of  #3,"[""SELECT['albums']"", ""PROJECT['years created of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 2012']"", ""PROJECT['all columns of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5178,"Find all the stage positions of the musicians with first name ""Solveig""",return musicians ;return #1 where  first name is  Solveig ;return stage position of  #2,"[""SELECT['musicians']"", ""FILTER['#1', 'where first name is Solveig']"", ""PROJECT['stage position of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5179,"What are the different stage positions for all musicians whose first name is ""Solveig""?",return musicians ;return first names of  #1 ;return #1 where #2 is  Solveig ;return different stage positions of  #3,"[""SELECT['musicians']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Solveig']"", ""PROJECT['different stage positions of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_518,How many students are affected by each allergy type?,return allergy types ;return students affected by #1 ;return number of  #2 for each  #1,"[""SELECT['allergy types']"", ""PROJECT['students affected by #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_5180,How many songs are there?,return songs ;return number of  #1,"[""SELECT['songs']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_5181,Count the number of songs.,return songs ;return number of  #1,"[""SELECT['songs']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_5182,"Find all the songs performed by artist with last name ""Heilo""",return artists ;return #1 with  last name Heilo ;return songs performed by #2,"[""SELECT['artists']"", ""FILTER['#1', 'with last name Heilo']"", ""PROJECT['songs performed by #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5183,"What are the names of the songs by the artist whose last name is ""Heilo""?",return artists ;return #1 whose last name is  Heilo ;return songs by #2 ;return names of  #3,"[""SELECT['artists']"", ""FILTER['#1', 'whose last name is Heilo']"", ""PROJECT['songs by #REF', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_5184,"Hom many musicians performed in the song ""Flash""?",return musicians ;return songs #1 performed in ;return #1 where  #2 is  Flash ;return number of #3,"[""SELECT['musicians']"", ""PROJECT['songs #REF performed in', '#1']"", ""COMPARATIVE['#1', '#2', 'is Flash']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_5185,"How many musicians play in the song ""Flash""?",return songs ;return musicians that  play in #1 ;return #2 where  #1 is  Flash ;return number of #3,"[""SELECT['songs']"", ""PROJECT['musicians that play in #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Flash']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_5186,"Find all the songs produced by artists with first name ""Marianne"".",return artists ;return first names of  #1 ;return #1 where #2 is  Marianne ;return songs produced by #3,"[""SELECT['artists']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Marianne']"", ""PROJECT['songs produced by #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5187,"What are the names of all songs produced by the artist with the first name ""Marianne""?",return artists ;return first names of  #1 ;return #1 where #2 is  Marianne ;return songs produced by #3 ;return names of  #4,"[""SELECT['artists']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Marianne']"", ""PROJECT['songs produced by #REF', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_5188,"Who performed the song named ""Badlands""? Show the first name and the last name.","return song ;return #1 that is Badlands ;return who  performed #2 ;return first name  of #3 ;return last name  of #3 ;return #4 ,  #5","[""SELECT['song']"", ""FILTER['#1', 'that is Badlands']"", ""PROJECT['who performed #REF', '#2']"", ""PROJECT['first name of #REF', '#3']"", ""PROJECT['last name of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_5189,"What are the first and last names of the artist who perfomed the song ""Badlands""?","return artists ;return songs of #1 ;return #1 where #2 is  Badlands ;return first name of #3 ;return last name of #3 ;return #4 ,  #5","[""SELECT['artists']"", ""PROJECT['songs of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Badlands']"", ""PROJECT['first name of #REF', '#3']"", ""PROJECT['last name of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_519,Find the last name and age of the student who has allergy to both milk and cat.,"return students ;return allergy of  #1 ;return #1 where  #2 is  milk and cat ;return age of  #3 ;return last name of  #3 ;return #4 ,   #5","[""SELECT['students']"", ""PROJECT['allergy of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is milk and cat']"", ""PROJECT['age of #REF', '#3']"", ""PROJECT['last name of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_5190,"Who is performing in the back stage position for the song ""Badlands""? Show the first name and the last name.","return song ;return #1 that  is  Badlands ;return performing in the  back stage position for #2 ;return first name  of  #3 ;return last name  of  #3 ;return #4 ,  #5","[""SELECT['song']"", ""FILTER['#1', 'that is Badlands']"", ""PROJECT['performing in the back stage position for #REF', '#2']"", ""PROJECT['first name of #REF', '#3']"", ""PROJECT['last name of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_5191,"What are the first and last names of the performer who was in the back stage position for the song ""Badlands""?","return performers ;return #1 for the  song Badlands ;return #2 who  was in the  back stage position ;return first name of  #3 ;return last name of  #3 ;return #4 ,  #5","[""SELECT['performers']"", ""FILTER['#1', 'for the song Badlands']"", ""FILTER['#2', 'who was in the back stage position']"", ""PROJECT['first name of #REF', '#3']"", ""PROJECT['last name of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'filter', 'project', 'project', 'union']",train
SPIDER_train_5192,How many unique labels are there for albums?,return albums ;return labels of  #1 ;return unique #2 ;return number of  #3,"[""SELECT['albums']"", ""PROJECT['labels of #REF', '#1']"", ""PROJECT['unique #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_5193,What are the unique labels for the albums?,return albums ;return unique labels for #1,"[""SELECT['albums']"", ""PROJECT['unique labels for #REF', '#1']""]","['select', 'project']",train
SPIDER_train_5194,What is the label that has the most albums?,return labels ;return albums of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['labels']"", ""PROJECT['albums of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_5195,What is the label with the most albums?,return labels ;return albums of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['labels']"", ""PROJECT['albums of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_5196,What is the last name of the musician that have produced the most number of songs?,return musicians ;return songs #1 produced ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return last name of  #4,"[""SELECT['musicians']"", ""PROJECT['songs #REF produced', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['last name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_5197,What is the last name of the musician who was in the most songs?,return musicians ;return songs #1 was in ;return number of  #2 for each #1 ;return #1 where #3 is  highest ;return last name of #4,"[""SELECT['musicians']"", ""PROJECT['songs #REF was in', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['last name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_5198,What is the last name of the musician that has been at the back position the most?,return musicians ;return positions of #1 ;return #2 that are in  the  back ;return number of  #3 for each #1 ;return #1 where #4 is the  highest ;return last name of #5,"[""SELECT['musicians']"", ""PROJECT['positions of #REF', '#1']"", ""FILTER['#2', 'that are in the back']"", ""GROUP['count', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is the highest']"", ""PROJECT['last name of #REF', '#5']""]","['select', 'project', 'filter', 'group', 'comparative', 'project']",train
SPIDER_train_5199,What is the last name of the musicians who has played back position the most?,return musicians ;return positions of #1 ;return #2 that are in  the  back ;return number of  #3 for each #1 ;return #1 where #4 is the  highest ;return last names of #5,"[""SELECT['musicians']"", ""PROJECT['positions of #REF', '#1']"", ""FILTER['#2', 'that are in the back']"", ""GROUP['count', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is the highest']"", ""PROJECT['last names of #REF', '#5']""]","['select', 'project', 'filter', 'group', 'comparative', 'project']",train
SPIDER_train_52,Find the official names of cities with population bigger than 1500 or smaller than 500.,return cities ;return populations of  #1 ;return #1 where  #2 is  higher than 1500 ;return #1 where  #2 is  lower than 500 ;return #3 or  #4 ;return official names of  #5,"[""SELECT['cities']"", ""PROJECT['populations of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 1500']"", ""COMPARATIVE['#1', '#2', 'is lower than 500']"", ""UNION['#3', '#4']"", ""PROJECT['official names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_520,What are the last names and ages of the students who are allergic to milk and cat?,"return students ;return #1 who  are  allergic to milk ;return #1 who  are  allergic to cat ;return #1 of  both #2 and  #3 ;return last names of  #4 ;return ages of  #4 ;return #5 ,  #6","[""SELECT['students']"", ""FILTER['#1', 'who are allergic to milk']"", ""FILTER['#1', 'who are allergic to cat']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['last names of #REF', '#4']"", ""PROJECT['ages of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'filter', 'filter', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_5200,"Find all the songs whose name contains the word ""the"".",return songs ;return names of  #1 ;return #1 where #2 contains the  word the,"[""SELECT['songs']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'contains the word the']""]","['select', 'project', 'comparative']",train
SPIDER_train_5201,"What are the names of the songs whose title has the word ""the""?",return songs ;return titles of #1 ;return #1 where #2 has the  word the   ;return names of #3,"[""SELECT['songs']"", ""PROJECT['titles of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'has the word the']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5202,What are all the instruments used?,return instruments used,"[""SELECT['instruments used']""]",['select'],train
SPIDER_train_5203,What are the different instruments listed in the database?,return instruments ;return #1 listed in the  database ;return different #2,"[""SELECT['instruments']"", ""FILTER['#1', 'listed in the database']"", ""PROJECT['different #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5204,"What instrument did the musician with last name ""Heilo"" use in the song ""Le Pop""?",return musicians ;return last names of #1 ;return #1 where #2 is Heilo ;return instruments used of #3 ;return #4 in  the  song Le Pop,"[""SELECT['musicians']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Heilo']"", ""PROJECT['instruments used of #REF', '#3']"", ""FILTER['#4', 'in the song Le Pop']""]","['select', 'project', 'comparative', 'project', 'filter']",train
SPIDER_train_5205,"What instruments did the musician with the last name ""Heilo"" play in the song ""Le Pop""?",return musicians ;return #1 with  the   last name Heilo ;return the   instruments that  #2 plays ;return #3 in the   song Le Pop,"[""SELECT['musicians']"", ""FILTER['#1', 'with the last name Heilo']"", ""PROJECT['the instruments that #REF plays', '#2']"", ""FILTER['#3', 'in the song Le Pop']""]","['select', 'filter', 'project', 'filter']",train
SPIDER_train_5206,What is the most used instrument?,return instrument ;return number of  used #1 ;return #1 where #2 is  most,"[""SELECT['instrument']"", ""PROJECT['used #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_5207,What instrument is used the most?,return instrument ;return #1 used the  most,"[""SELECT['instrument']"", ""FILTER['#1', 'used the most']""]","['select', 'filter']",train
SPIDER_train_5208,"How many songs have used the instrument ""drums""?",return songs ;return instruments used in #1 ;return #1 where  #2 is drums ;return number of  #3,"[""SELECT['songs']"", ""PROJECT['instruments used in #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is drums']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_5209,How many songs use drums as an instrument?,return songs ;return instruments of  #1 ;return #1 where  #2 is drums ;return number of  #3,"[""SELECT['songs']"", ""PROJECT['instruments of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is drums']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_521,What are the allergies and their types that the student with first name Lisa has? And order the result by name of allergies.,"return students ;return first names of #1 ;return #1 where #2 is Lisa ;return allergies of #3 ;return types of #4 ;return names of #4 ;return #4 ,  #5 ; return #7 sorted by #6","[""SELECT['students']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Lisa']"", ""PROJECT['allergies of #REF', '#3']"", ""PROJECT['types of #REF', '#4']"", ""PROJECT['names of #REF', '#4']"", ""UNION['#4', '#5']"", ""SORT['#7', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_5210,"What instruments does the the song ""Le Pop"" use?",return songs ;return instruments #1 use ;return #2 where #1 is  Le Pop,"[""SELECT['songs']"", ""PROJECT['instruments #REF use', '#1']"", ""COMPARATIVE['#2', '#1', 'is Le Pop']""]","['select', 'project', 'comparative']",train
SPIDER_train_5211,"What are the instruments are used in the song ""Le Pop""?",return instruments ;return #1 in song Le Pop,"[""SELECT['instruments']"", ""FILTER['#1', 'in song Le Pop']""]","['select', 'filter']",train
SPIDER_train_5212,"How many instruments does the song ""Le Pop"" use?",return instruments ;return #1 from the  song Le Pop ;return number of  #2,"[""SELECT['instruments']"", ""FILTER['#1', 'from the song Le Pop']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_5213,"How many different instruments are used in the song ""Le Pop""?",return songs ;return instruments used in #1 ;return #2 where  #1 is  Le Pop ;return different #3 ;return number of #4,"[""SELECT['songs']"", ""PROJECT['instruments used in #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Le Pop']"", ""PROJECT['different #REF', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_5214,"How many instrument does the musician with last name ""Heilo"" use?",return musicians ;return last names of  #1 ;return #1 where #2 is  Heilo ;return instruments #3 uses ;return number of  #4,"[""SELECT['musicians']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Heilo']"", ""PROJECT['instruments #REF uses', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_5215,"How many different instruments does the musician with the last name ""Heilo"" use?",return musicians ;return last names of  #1 ;return #1 where  #2 is Heilo ;return instruments #3 uses ;return different #4 ;return number of  #5,"[""SELECT['musicians']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Heilo']"", ""PROJECT['instruments #REF uses', '#3']"", ""PROJECT['different #REF', '#4']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'aggregate']",train
SPIDER_train_5216,"Find all the instruments ever used by the musician with last name ""Heilo""?",return musicians with  last name Heilo ;return instruments used by #1,"[""SELECT['musicians with last name Heilo']"", ""PROJECT['instruments used by #REF', '#1']""]","['select', 'project']",train
SPIDER_train_5217,"What are all the instruments used by the musician with the last name ""Heilo""?",return musicians ;return last names of  #1 ;return #1 where #2 is  Heilo ;return instruments used by #3,"[""SELECT['musicians']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Heilo']"", ""PROJECT['instruments used by #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5218,Which song has the most vocals?,return songs ;return vocals ;return number of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['songs']"", ""SELECT['vocals']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'select', 'group', 'superlative']",train
SPIDER_train_5219,What is the song with the most vocals?,return songs ;return vocals of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  the  highest,"[""SELECT['songs']"", ""PROJECT['vocals of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_522,What are the allergies the girl named Lisa has? And what are the types of them? Order the result by allergy names.,"return girl ;return #1 that is named Lisa ;return allergies of #2 ;return types of #3 ;return names of #3 ;return #3 ,  #4 ;return #6 sorted by #5","[""SELECT['girl']"", ""FILTER['#1', 'that is named Lisa']"", ""PROJECT['allergies of #REF', '#2']"", ""PROJECT['types of #REF', '#3']"", ""PROJECT['names of #REF', '#3']"", ""UNION['#3', '#4']"", ""SORT['#6', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_5220,Which vocal type is the most frequently appearring type?,return vocal types ;return #1 that  is  most frequently appearring,"[""SELECT['vocal types']"", ""FILTER['#1', 'that is most frequently appearring']""]","['select', 'filter']",train
SPIDER_train_5221,What is the type of vocables that appears most frequently?,return vocables ;return types of #1 ;return how frequently #2 appear ;return #2 where #3 is  the  most frequently,"[""SELECT['vocables']"", ""PROJECT['types of #REF', '#1']"", ""PROJECT['how frequently #REF appear', '#2']"", ""COMPARATIVE['#2', '#3', 'is the most frequently']""]","['select', 'project', 'project', 'comparative']",train
SPIDER_train_5222,"Which vocal type has the band mate with last name ""Heilo"" played the most?",return band mates ;return last names of #1 ;return #1 where #2 is Heilo ;return vocal types of #3 ;return most played of #4,"[""SELECT['band mates']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Heilo']"", ""PROJECT['vocal types of #REF', '#3']"", ""PROJECT['most played of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_5223,"What is the type of vocals that the band member with the last name ""Heilo"" played the most?",return band members ;return #1 with the  last name Heilo ;return the  type of  vocals #2 played ;return #3 played the  most,"[""SELECT['band members']"", ""FILTER['#1', 'with the last name Heilo']"", ""PROJECT['the type of vocals #REF played', '#2']"", ""FILTER['#3', 'played the most']""]","['select', 'filter', 'project', 'filter']",train
SPIDER_train_5224,"What are the vocal types used in song ""Le Pop""?",return songs ;return vocal types of  #1 ;return #2 where #1 is  Le Pop,"[""SELECT['songs']"", ""PROJECT['vocal types of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Le Pop']""]","['select', 'project', 'comparative']",train
SPIDER_train_5225,"What are the types of vocals used in the song ""Le Pop""?",return song ;return #1 that  is  Le Pop ;return vocals of  #2 ;return types of  #3,"[""SELECT['song']"", ""FILTER['#1', 'that is Le Pop']"", ""PROJECT['vocals of #REF', '#2']"", ""PROJECT['types of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_5226,"Find the number of vocal types used in song ""Demon Kitty Rag""?",return songs ;return vocal types used in #1 ;return #2 where  #1 is  Demon Kitty Rag ;return number of #3,"[""SELECT['songs']"", ""PROJECT['vocal types used in #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Demon Kitty Rag']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_5227,"What are the types of vocals used in the song ""Demon Kitty Rag""?",return song Demon Kitty Rag ;return vocals used in #1 ;return types of  #2,"[""SELECT['song Demon Kitty Rag']"", ""PROJECT['vocals used in #REF', '#1']"", ""PROJECT['types of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_5228,How many songs have a lead vocal?,return songs ;return vocals of  #1 ;return #1 where  #2 is  lead ;return number of #3,"[""SELECT['songs']"", ""PROJECT['vocals of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is lead']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_5229,How many songs have vocals of type lead?,return songs ;return vocals of #1 ;return type of #2 ;return #1 where #3 is lead ;return number of  #4,"[""SELECT['songs']"", ""PROJECT['vocals of #REF', '#1']"", ""PROJECT['type of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is lead']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'project', 'comparative', 'aggregate']",train
SPIDER_train_523,Find the first name and gender of the student who has allergy to milk but not cat.,"return students ;return #1 with  milk allergy ;return #1 with  cat allergy ;return #1 of  both #2 and not  #3 ;return first name of  #4 ;return gender of  #4 ;return #5 ,   #6","[""SELECT['students']"", ""FILTER['#1', 'with milk allergy']"", ""FILTER['#1', 'with cat allergy']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['first name of #REF', '#4']"", ""PROJECT['gender of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'filter', 'filter', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_5230,"Which vocal type did the musician with first name ""Solveig"" played in the song with title ""A Bar in Amsterdam""?",return musicians ;return #1 with  first name Solveig ;return vocal types that  #2 played ;return #3 in the  song with  title A Bar in  Amsterdam,"[""SELECT['musicians']"", ""FILTER['#1', 'with first name Solveig']"", ""PROJECT['vocal types that #REF played', '#2']"", ""FILTER['#3', 'in the song with title A Bar in Amsterdam']""]","['select', 'filter', 'project', 'filter']",train
SPIDER_train_5231,"What are the types of vocals that the musician with the first name ""Solveig"" played in the song ""A Bar in Amsterdam""?",return musicians ;return #1 with the  first names Solveig ;return #2 that  played in the  song A Bar in  Amsterdam ;return vocals of  #3 ;return types of  #4,"[""SELECT['musicians']"", ""FILTER['#1', 'with the first names Solveig']"", ""FILTER['#2', 'that played in the song A Bar in Amsterdam']"", ""PROJECT['vocals of #REF', '#3']"", ""PROJECT['types of #REF', '#4']""]","['select', 'filter', 'filter', 'project', 'project']",train
SPIDER_train_5232,Find all the songs that do not have a lead vocal.,return songs ;return #1 that  have  a lead vocal ;return #1 besides #2,"[""SELECT['songs']"", ""FILTER['#1', 'that have a lead vocal']"", ""DISCARD['#1', '#2']""]","['select', 'filter', 'discard']",train
SPIDER_train_5233,What are the names of the songs without a lead vocal?,return songs ;return #1 with a lead vocal ;return #1 besides  #2 ;return names of  #3,"[""SELECT['songs']"", ""FILTER['#1', 'with a lead vocal']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_5234,Find all the vocal types.,return vocal types ;return all #1,"[""SELECT['vocal types']"", ""PROJECT['all #REF', '#1']""]","['select', 'project']",train
SPIDER_train_5235,What are the different types of vocals?,return vocals ;return different types of  #1,"[""SELECT['vocals']"", ""PROJECT['different types of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_5236,What are the albums produced in year 2010?,return albums ;return years produced of  #1 ;return #1 where #2 is  2010,"[""SELECT['albums']"", ""PROJECT['years produced of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 2010']""]","['select', 'project', 'comparative']",train
SPIDER_train_5237,What information is there on albums from 2010?,return albums ;return #1 from  2010 ;return information on  #2,"[""SELECT['albums']"", ""FILTER['#1', 'from 2010']"", ""PROJECT['information on #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5238,"Who performed the song named ""Le Pop""?",return the  song named Le Pop ;return who performed #1,"[""SELECT['the song named Le Pop']"", ""PROJECT['who performed #REF', '#1']""]","['select', 'project']",train
SPIDER_train_5239,"What is the first and last name of artist who performed ""Le Pop""?","return artists ;return #1 who  performed Le Pop ;return first name of  #2 ;return last name of  #2 ;return #3 ,  #4","[""SELECT['artists']"", ""FILTER['#1', 'who performed Le Pop']"", ""PROJECT['first name of #REF', '#2']"", ""PROJECT['last name of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_524,What are the first name and gender of the students who have allergy to milk but can put up with cats?,"return students ;return allergy of  #1 ;return #1 where #2 is  milk ;return #1 where #2 is  not  cats ;return #1 of  both #3 and  #4 ;return first names of  #5 ;return gender of  #5 ;return #6 ,  #7","[""SELECT['students']"", ""PROJECT['allergy of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is milk']"", ""COMPARATIVE['#1', '#2', 'is not cats']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['first names of #REF', '#5']"", ""PROJECT['gender of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_5240,What is the last name of the musician that have produced the most songs?,return musicians ;return songs #1 produced ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return last name of  #4,"[""SELECT['musicians']"", ""PROJECT['songs #REF produced', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['last name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_5241,What is the last name of the artist who sang the most songs?,return artists ;return songs #1 sang ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return last name of  #4,"[""SELECT['artists']"", ""PROJECT['songs #REF sang', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['last name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_5242,"What instrument did the musician with last name ""Heilo"" use in the song ""Badlands""?",return musicians ;return #1 with  last name Heilo ;return instruments that  #2 uses ;return #3 in the  song Badlands,"[""SELECT['musicians']"", ""FILTER['#1', 'with last name Heilo']"", ""PROJECT['instruments that #REF uses', '#2']"", ""FILTER['#3', 'in the song Badlands']""]","['select', 'filter', 'project', 'filter']",train
SPIDER_train_5243,"What instruments did the musician with the last name ""Heilo"" play in ""Badlands""?",return musicians ;return #1 with  the  last name Heilo ;return instruments that  #2 play ;return #3 in Badlands,"[""SELECT['musicians']"", ""FILTER['#1', 'with the last name Heilo']"", ""PROJECT['instruments that #REF play', '#2']"", ""FILTER['#3', 'in Badlands']""]","['select', 'filter', 'project', 'filter']",train
SPIDER_train_5244,"How many instruments does the song ""Badlands"" use?",return songs ;return instruments of  #1 ;return #2 where  #1 is  Badlands ;return number of #3,"[""SELECT['songs']"", ""PROJECT['instruments of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Badlands']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_5245,"How many different instruments are used in the song ""Badlands""?",return songs ;return instruments used in #1 ;return #2 where  #1 is  Badlands ;return different #3 ;return number of #4,"[""SELECT['songs']"", ""PROJECT['instruments used in #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Badlands']"", ""PROJECT['different #REF', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_5246,"What are the vocal types used in song ""Badlands""?",return vocal types ;return #1 used in song Badlands,"[""SELECT['vocal types']"", ""FILTER['#1', 'used in song Badlands']""]","['select', 'filter']",train
SPIDER_train_5247,"What types of vocals are used in the song ""Badlands""?",return the  song Badlands ;return vocals used in #1 ;return the  types of #2,"[""SELECT['the song Badlands']"", ""PROJECT['vocals used in #REF', '#1']"", ""PROJECT['the types of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_5248,"Find the number of vocal types used in song ""Le Pop""",return vocal types ;return #1 used in song Le Pop ;return number of  #2,"[""SELECT['vocal types']"", ""FILTER['#1', 'used in song Le Pop']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_5249,"How many vocal types are used in the song ""Le Pop""?",return songs ;return vocal types of  #1 ;return #2 where  #1 is  Le Pop ;return number of #3,"[""SELECT['songs']"", ""PROJECT['vocal types of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Le Pop']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_525,Find the average age of the students who have allergies with food and animal types.,"return students ;return #1 who  have  allergies ;return #2 with  food ;return #2 with  animals ;return #3 ,   #4 ;return the ages of  #5 ;return the average of  #6","[""SELECT['students']"", ""FILTER['#1', 'who have allergies']"", ""FILTER['#2', 'with food']"", ""FILTER['#2', 'with animals']"", ""UNION['#3', '#4']"", ""PROJECT['the ages of #REF', '#5']"", ""AGGREGATE['avg', '#6']""]","['select', 'filter', 'filter', 'filter', 'union', 'project', 'aggregate']",train
SPIDER_train_5250,How many songs have a shared vocal?,return songs ;return vocals of  #1 ;return #1 where  #2 are  shared ;return number of  #3,"[""SELECT['songs']"", ""PROJECT['vocals of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'are shared']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_5251,How many different songs have shared vocals?,return songs ;return #1 that  have  shared vocals ;return different #2 ;return number of #3,"[""SELECT['songs']"", ""FILTER['#1', 'that have shared vocals']"", ""PROJECT['different #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_5252,Find all the songs that do not have a back vocal.,return songs ;return #1 that  have  a back vocal ;return #1 besides #2,"[""SELECT['songs']"", ""FILTER['#1', 'that have a back vocal']"", ""DISCARD['#1', '#2']""]","['select', 'filter', 'discard']",train
SPIDER_train_5253,What are the different names of all songs without back vocals?,return songs ;return #1 without back vocals ;return different names of  #2,"[""SELECT['songs']"", ""FILTER['#1', 'without back vocals']"", ""PROJECT['different names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5254,"Which vocal type has the band mate with first name ""Solveig"" played the most?",return band mates ;return first names of #1 ;return #1 where #2 is Solveig ;return vocal types of #3 ;return play of #4 ;return number of  #5 for each #4 ;return #4 where #6 is the  highest,"[""SELECT['band mates']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Solveig']"", ""PROJECT['vocal types of #REF', '#3']"", ""PROJECT['play of #REF', '#4']"", ""GROUP['count', '#5', '#4']"", ""COMPARATIVE['#4', '#6', 'is the highest']""]","['select', 'project', 'comparative', 'project', 'project', 'group', 'comparative']",train
SPIDER_train_5255,"What are the types of vocals that the band member with the first name ""Solveig"" played the most?",return band members ;return #1 with  the   first name Solveig ;return vocals that  #2 played the   most ;return the   types of #3,"[""SELECT['band members']"", ""FILTER['#1', 'with the first name Solveig']"", ""PROJECT['vocals that #REF played the most', '#2']"", ""PROJECT['the types of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_5256,"Which vocal type did the musician with last name ""Heilo"" played in the song with title ""Der Kapitan""?",return musicians ;return #1 with  last name Heilo ;return vocal types that  #2 played ;return #3 in the  song with  the title Der Kapitan,"[""SELECT['musicians']"", ""FILTER['#1', 'with last name Heilo']"", ""PROJECT['vocal types that #REF played', '#2']"", ""FILTER['#3', 'in the song with the title Der Kapitan']""]","['select', 'filter', 'project', 'filter']",train
SPIDER_train_5257,"What are the types of vocals that the musician with the last name ""Heilo"" played in ""Der Kapitan""?",return musicians ;return #1 with  the   last name Heilo ;return vocals that  #2 played ;return #3 in Der Kapitan ;return the   types of #4,"[""SELECT['musicians']"", ""FILTER['#1', 'with the last name Heilo']"", ""PROJECT['vocals that #REF played', '#2']"", ""FILTER['#3', 'in Der Kapitan']"", ""PROJECT['the types of #REF', '#4']""]","['select', 'filter', 'project', 'filter', 'project']",train
SPIDER_train_5258,Find the first name of the band mate that has performed in most songs.,return band mates ;return songs that #1 performed in  ;return number of  #2 for each #1 ;return #1 where #3 is highest ;return first name of #4,"[""SELECT['band mates']"", ""PROJECT['songs that #REF performed in', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['first name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_5259,What is the first name of the band mate who perfomed in the most songs?,return band mates ;return songs perfomed in of #1 ;return number of #2 for each #1 ;return #1 where #3 is  highest ;return first name of #4,"[""SELECT['band mates']"", ""PROJECT['songs perfomed in of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['first name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_526,How old are the students with allergies to food and animal types on average?,return students ;return #1 with  allergies to food types ;return #1 with  allergies to animal types ;return #1 in both #2 and  #3 ;return how  old are #4 ;return average of #5,"[""SELECT['students']"", ""FILTER['#1', 'with allergies to food types']"", ""FILTER['#1', 'with allergies to animal types']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['how old are #REF', '#4']"", ""AGGREGATE['avg', '#5']""]","['select', 'filter', 'filter', 'intersection', 'project', 'aggregate']",train
SPIDER_train_5260,"Which vocal type has the band mate with first name ""Marianne"" played the most?",return band mate ;return #1 with first names Marianne ;return vocal type of  #2 ;return number of  #3 played ;return #3 where #4 is  highest,"[""SELECT['band mate']"", ""FILTER['#1', 'with first names Marianne']"", ""PROJECT['vocal type of #REF', '#2']"", ""AGGREGATE['count', '#3']"", ""SUPERLATIVE['max', '#3', '#4']""]","['select', 'filter', 'project', 'aggregate', 'superlative']",train
SPIDER_train_5261,"What is the vocal type of the band mate whose first name is ""Marianne"" played the most?",return band mates ;return first names of #1 ;return #1 where #2 is  Marianne ;return vocal types of #3 ;return the   most played #4,"[""SELECT['band mates']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Marianne']"", ""PROJECT['vocal types of #REF', '#3']"", ""PROJECT['the most played #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_5262,"Who is performing in the back stage position for the song ""Der Kapitan""? Show the first name and last name.","return the  song Der Kapitan ;return Who is  performing in #1 ;return #2 in the  back stage position ;return the  first name  of  #3 ;return the  last name  of  #3 ;return #4 ,  #5","[""SELECT['the song Der Kapitan']"", ""PROJECT['Who is performing in #REF', '#1']"", ""FILTER['#2', 'in the back stage position']"", ""PROJECT['the first name of #REF', '#3']"", ""PROJECT['the last name of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'filter', 'project', 'project', 'union']",train
SPIDER_train_5263,"What is the first and last name of the artist who performed back stage for the song ""Der Kapitan""?","return Der Kapitan ;return artist who  performed back stage for #1 ;return the  first name of #2 ;return the  last name of #2 ;return #3 ,  #4","[""SELECT['Der Kapitan']"", ""PROJECT['artist who performed back stage for #REF', '#1']"", ""PROJECT['the first name of #REF', '#2']"", ""PROJECT['the last name of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_5264,Find the name of songs that does not have a back vocal.,return songs ;return back vocals of #1 ;return number of  #2 for each #1 ;return #1 where #3 is zero ;return names of #4,"[""SELECT['songs']"", ""PROJECT['back vocals of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is zero']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_5265,What are the names of the songs that do not have back vocals?,return songs ;return #1 that  have  back vocals ;return #1 besides  #2 ;return names of  #3,"[""SELECT['songs']"", ""FILTER['#1', 'that have back vocals']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_5266,"What are the songs in album ""A Kiss Before You Go: Live in Hamburg""?",return the  album A Kiss Before You Go Live in Hamburg ;return the  songs in #1,"[""SELECT['the album A Kiss Before You Go Live in Hamburg']"", ""PROJECT['the songs in #REF', '#1']""]","['select', 'project']",train
SPIDER_train_5267,"What are the song titles on the album ""A Kiss Before You Go: Live in Hamburg""?",return songs ;return #1 on  the  album A Kiss Before You Go Live in Hamburg ;return song titles of  #2,"[""SELECT['songs']"", ""FILTER['#1', 'on the album A Kiss Before You Go Live in Hamburg']"", ""PROJECT['song titles of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5268,"What are all the songs in albums under label ""Universal Music Group""?",return albums ;return labels of  #1 ;return #1 where #2 is  Universal Music Group ;return songs in #3,"[""SELECT['albums']"", ""PROJECT['labels of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Universal Music Group']"", ""PROJECT['songs in #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5269,"What are the names of all the songs whose album is under the label of ""Universal Music Group""?",return albums ;return labels of  #1 ;return #1 where #2 is  Universal Music Group ;return songs of  #3 ;return names of  #4,"[""SELECT['albums']"", ""PROJECT['labels of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Universal Music Group']"", ""PROJECT['songs of #REF', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_527,List the first and last name of the students who do not have any food type allergy.,"return students ;return allergies of  #1 ;return types of  #2 ;return #1 where  #3 is not  food ;return first names of  #4 ;return last names of  #4 ;return #5 ,  #6","[""SELECT['students']"", ""PROJECT['allergies of #REF', '#1']"", ""PROJECT['types of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is not food']"", ""PROJECT['first names of #REF', '#4']"", ""PROJECT['last names of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_5270,Find the number of songs in all the studio albums.,return studio albums ;return songs in #1 ;return number of #2,"[""SELECT['studio albums']"", ""PROJECT['songs in #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_5271,How many songs appear in studio albums?,return studio albums ;return songs that  appear in #1 ;return number of  #2,"[""SELECT['studio albums']"", ""PROJECT['songs that appear in #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_5272,Who is the founder of Sony?,return founder of  Sony,"[""SELECT['founder of Sony']""]",['select'],train
SPIDER_train_5273,Return the founder of Sony.,return Sony ;return founder of  #1,"[""SELECT['Sony']"", ""PROJECT['founder of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_5274,Where is the headquarter of the company founded by James?,return companies ;return #1 founded by James ;return the  headquarter of  #2 ;return Where is  #3,"[""SELECT['companies']"", ""FILTER['#1', 'founded by James']"", ""PROJECT['the headquarter of #REF', '#2']"", ""PROJECT['Where is #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_5275,What is the headquarter of the company whose founder is James?,return companies ;return founders of  #1 ;return #2 that  is  James ;return company with #3 ;return headquarters of  #4,"[""SELECT['companies']"", ""PROJECT['founders of #REF', '#1']"", ""FILTER['#2', 'that is James']"", ""PROJECT['company with #REF', '#3']"", ""PROJECT['headquarters of #REF', '#4']""]","['select', 'project', 'filter', 'project', 'project']",train
SPIDER_train_5276,"Find all manufacturers' names and their headquarters, sorted by the ones with highest revenue first.","return manufacturers ;return names of  #1 ;return headquarters of  #1 ;return revenues of  #1 ;return #2 ,  #3 ;return #5 sorted by #4 from  highest to lowest","[""SELECT['manufacturers']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['headquarters of #REF', '#1']"", ""PROJECT['revenues of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#5', '#4', 'from highest to lowest']""]","['select', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_5277,"What are the names and headquarters of all manufacturers, ordered by revenue descending?","return manufacturers ;return names of  #1 ;return headquarters of  #1 ;return revenue of  #1 ;return #2 ,  #3 ;return #5 sorted by descending #4","[""SELECT['manufacturers']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['headquarters of #REF', '#1']"", ""PROJECT['revenue of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#5', '#4', 'descending']""]","['select', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_5278,"What are the average, maximum and total revenues of all companies?","return companies ;return revenues of  #1 ;return average of  #2 ;return maximum of  #2 ;return sum of  #2 ;return #3 ,  #4 ,   #5","[""SELECT['companies']"", ""PROJECT['revenues of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""AGGREGATE['max', '#2']"", ""AGGREGATE['sum', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'project', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_5279,"Return the average, maximum, and total revenues across all manufacturers.","return manufacturers ;return revenues of  #1 ;return average of  #2 ;return maximum of  #2 ;return sum of  #2 ;return #3 ,  #4 , #5","[""SELECT['manufacturers']"", ""PROJECT['revenues of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""AGGREGATE['max', '#2']"", ""AGGREGATE['sum', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'project', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_528,What is the full name of each student who is not allergic to any type of food.,return students ;return #1 that are allergic ;return #2 to any type of food ;return #1 besides  #3 ;return full name of #4,"[""SELECT['students']"", ""FILTER['#1', 'that are allergic']"", ""FILTER['#2', 'to any type of food']"", ""DISCARD['#1', '#3']"", ""PROJECT['full name of #REF', '#4']""]","['select', 'filter', 'filter', 'discard', 'project']",train
SPIDER_train_5280,How many companies were created by Andy?,return companies ;return #1 created by Andy ;return number of  #2,"[""SELECT['companies']"", ""FILTER['#1', 'created by Andy']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_5281,Return the number of companies created by Andy.,return companies ;return #1 created by Andy ;return number of  #2,"[""SELECT['companies']"", ""FILTER['#1', 'created by Andy']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_5282,Find the total revenue created by the companies whose headquarter is located at Austin.,return companies ;return headquarters of  #1 ;return #1 where  #2 is  Austin ;return revenue of  #3 ;return sum of  #4,"[""SELECT['companies']"", ""PROJECT['headquarters of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Austin']"", ""PROJECT['revenue of #REF', '#3']"", ""AGGREGATE['sum', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_5283,What is the sum of revenue from companies with headquarters in Austin?,return companies ;return headquarters of #1 ;return #1 where #2 is  in Austin ;return revenue of #3 ;return sums of #4,"[""SELECT['companies']"", ""PROJECT['headquarters of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is in Austin']"", ""PROJECT['revenue of #REF', '#3']"", ""PROJECT['sums of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_5284,What are the different cities listed?,return different cities,"[""SELECT['different cities']""]",['select'],train
SPIDER_train_5285,Give the distinct headquarters of manufacturers.,return manufacturers ;return headquarters of  #1 ;return distinct #2,"[""SELECT['manufacturers']"", ""PROJECT['headquarters of #REF', '#1']"", ""PROJECT['distinct #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_5286,Find the number of manufactures that are based in Tokyo or Beijing.,return manufactures ;return #1 based in  Tokyo ;return #1 based in  Beijing ;return number of  #2 ;return number of  #3 ;return sum of #4 and  #5,"[""SELECT['manufactures']"", ""FILTER['#1', 'based in Tokyo']"", ""FILTER['#1', 'based in Beijing']"", ""AGGREGATE['count', '#2']"", ""AGGREGATE['count', '#3']"", ""ARITHMETIC['sum', '#4', '#5']""]","['select', 'filter', 'filter', 'aggregate', 'aggregate', 'arithmetic']",train
SPIDER_train_5287,How many manufacturers have headquarters in either Tokyo or Beijing?,return manufacturers ;return headquarters of  #1 ;return #1 where  #2 is  in Tokyo ;return #1 where  #2 is  in Beijing ;return #3 or  #4 ;return number of #5,"[""SELECT['manufacturers']"", ""PROJECT['headquarters of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is in Tokyo']"", ""COMPARATIVE['#1', '#2', 'is in Beijing']"", ""UNION['#3', '#4']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'aggregate']",train
SPIDER_train_5288,Find the founder of the company whose name begins with the letter 'S'.,return company ;return founders of  #1 ;return names of  #2 ;return #2 where #3 begins with 'S,"[""SELECT['company']"", ""PROJECT['founders of #REF', '#1']"", ""PROJECT['names of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'begins with S']""]","['select', 'project', 'project', 'comparative']",train
SPIDER_train_5289,Who is the founders of companies whose first letter is S?,return companies ;return first letters of #1 ;return #1 where #2 is  S ;return founders of #3,"[""SELECT['companies']"", ""PROJECT['first letters of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is S']"", ""PROJECT['founders of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_529,Find the number of male (sex is 'M') students who have some food type allery.,return students ;return #1 where  sex is  male ;return #2 where  has  food allery ;return number of  #3,"[""SELECT['students']"", ""FILTER['#1', 'where sex is male']"", ""FILTER['#2', 'where has food allery']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'filter', 'aggregate']",train
SPIDER_train_5290,Find the name of companies whose revenue is between 100 and 150.,return companies ;return revenues of #1 ;return #1 where #2 is  between 100 and 150 ;return the  names of #3,"[""SELECT['companies']"", ""PROJECT['revenues of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is  betweenleftside 100']"", ""COMPARATIVE['#3', '#2', 'is  betweenrightside 150']"", ""PROJECT['the names of #REF', '#4']""]","['select', 'project', 'comparative', 'comparative', 'project']",train
SPIDER_train_5291,What are the names of companies with revenue between 100 and 150?,return companies ;return revenues of  #1 ;return #1 where #2 is  at least 100 ;return #1 where #2 is  at most 150 ;return #1 of  both #3 and  #4 ;return names of  #5,"[""SELECT['companies']"", ""PROJECT['revenues of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least 100']"", ""COMPARATIVE['#1', '#2', 'is at most 150']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_5292,What is the total revenue of all companies whose main office is at Tokyo or Taiwan?,return companies ;return main offices office #1 ;return #1 where #2 is  in Tokyo ;return #1 where #2 is  in Taiwan ;return #3 or  #4 ;return revenues of #5 ;return sum of #6,"[""SELECT['companies']"", ""PROJECT['main offices office #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is in Tokyo']"", ""COMPARATIVE['#1', '#2', 'is in Taiwan']"", ""UNION['#3', '#4']"", ""PROJECT['revenues of #REF', '#5']"", ""AGGREGATE['sum', '#6']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project', 'aggregate']",train
SPIDER_train_5293,Return the total revenue of companies with headquarters in Tokyo or Taiwan.,"return companies ;return headquarters of #1 ;return #1 where #2 is equal to Tokyo ;return #1 where #2 is equal to Taiwan ;return #3 ,  #4 ;return revenues of #5 ;return sum of #6","[""SELECT['companies']"", ""PROJECT['headquarters of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is equal to Tokyo']"", ""COMPARATIVE['#1', '#2', 'is equal to Taiwan']"", ""UNION['#3', '#4']"", ""PROJECT['revenues of #REF', '#5']"", ""AGGREGATE['sum', '#6']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project', 'aggregate']",train
SPIDER_train_5294,Find the name of product that is produced by both companies Creative Labs and Sony.,return products ;return #1 produced by Creative Labs ;return #1 produced by Sony ;return #1 of  both #2 and #3 ;return names of  #4,"[""SELECT['products']"", ""FILTER['#1', 'produced by Creative Labs']"", ""FILTER['#1', 'produced by Sony']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'filter', 'intersection', 'project']",train
SPIDER_train_5295,What are the names of products produced by both Creative Labs and Sony?,return products ;return #1 produced by Creative Labs ;return #1 produced by Sony ;return #1 in both #2 and  #3 ;return names of  #4,"[""SELECT['products']"", ""FILTER['#1', 'produced by Creative Labs']"", ""FILTER['#1', 'produced by Sony']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'filter', 'intersection', 'project']",train
SPIDER_train_5296,"Find the name, headquarter and founder of the manufacturer that has the highest revenue.","return manufacturers ;return revenue of #1 ;return #1 where #2 is highest ;return name of #3 ;return headquarter of #3 ;return founder of #3 ;return #4 ,  #5 ,   #6","[""SELECT['manufacturers']"", ""PROJECT['revenue of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['name of #REF', '#3']"", ""PROJECT['headquarter of #REF', '#3']"", ""PROJECT['founder of #REF', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'project', 'superlative', 'project', 'project', 'project', 'union']",train
SPIDER_train_5297,"What are the names, headquarters and founders of the company with the highest revenue?","return companies ;return #1 with highest revenue ;return names of  #2 ;return headquarters of  #2 ;return founders of  #2 ;return #3 ,  #4 ,   #5","[""SELECT['companies']"", ""FILTER['#1', 'with highest revenue']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['headquarters of #REF', '#2']"", ""PROJECT['founders of #REF', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_5298,"Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order.","return manufacturers ;return names of #1 ;return headquarters of #1 ;return revenues of #1 ;return #2 ,  #3 ,   #4 ;return #5 sorted by #4 in  descending order","[""SELECT['manufacturers']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['headquarters of #REF', '#1']"", ""PROJECT['revenues of #REF', '#1']"", ""UNION['#2', '#3', '#4']"", ""SORT['#5', '#4', 'in descending order']""]","['select', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_5299,"What are the names, headquarters and revenues for manufacturers, sorted by revenue descending?","return manufacturers ;return revenue of  #1 ;return #1 sorted by #2 descending ;return the  names of  #3 ;return the  headquarters of  #3 ;return the  revenues of  #3 ;return #4 ,  #5 ,   #6","[""SELECT['manufacturers']"", ""PROJECT['revenue of #REF', '#1']"", ""SORT['#1', '#2', 'descending']"", ""PROJECT['the names of #REF', '#3']"", ""PROJECT['the headquarters of #REF', '#3']"", ""PROJECT['the revenues of #REF', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'project', 'sort', 'project', 'project', 'project', 'union']",train
SPIDER_train_53,What are the official names of cities that have population over 1500 or less than 500?,"return cities ;return population of  #1 ;return #1 where #2 is  over 1500 ;return #1 where #2 is  less than 500 ;return #3 ,  #4 ;return the  official names of  #5","[""SELECT['cities']"", ""PROJECT['population of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is over 1500']"", ""COMPARATIVE['#1', '#2', 'is less than 500']"", ""UNION['#3', '#4']"", ""PROJECT['the official names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_530,How many male students (sex is 'M') are allergic to any type of food?,return students ;return #1 who  are  male ;return #2 that  are  allergic to  any type of  food ;return number of  #3,"[""SELECT['students']"", ""FILTER['#1', 'who are male']"", ""FILTER['#2', 'that are allergic to any type of food']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'filter', 'aggregate']",train
SPIDER_train_5300,Find the name of companies whose revenue is greater than the average revenue of all companies.,return companies ;return revenue of  #1 ;return average of  #2 ;return #1 where  #2 is  greater than  #3 ;return name of  #4,"[""SELECT['companies']"", ""PROJECT['revenue of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is greater than #3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_5301,What are the names of manufacturers with revenue greater than the average of all revenues?,return manufacturers ;return revenues of #1 ;return average of #2 ;return #1 where #2 is higher than #3 ;return names of #4,"[""SELECT['manufacturers']"", ""PROJECT['revenues of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_5302,Find the name of companies whose revenue is smaller than the revenue of all companies based in Austin.,return companies ;return #1 based in Austin ;return revenues of #2 ;return the lowest #3 ;return revenues of #1 ;return #1 where #5 is  smaller than #4 ;return names of #6,"[""SELECT['companies']"", ""FILTER['#1', 'based in Austin']"", ""PROJECT['revenues of #REF', '#2']"", ""AGGREGATE['min', '#3']"", ""PROJECT['revenues of #REF', '#1']"", ""COMPARATIVE['#1', '#5', 'is smaller than #4']"", ""PROJECT['names of #REF', '#6']""]","['select', 'filter', 'project', 'aggregate', 'project', 'comparative', 'project']",train
SPIDER_train_5303,What are the names of companies with revenue less than the lowest revenue of any manufacturer in Austin?,return manufacturers ;return #1 in  Austin ;return revenues of #2 ;return #2 where #3 is lowest ;return companies ;return revenue of #5 ;return #5 where #6 is lower than #4,"[""SELECT['manufacturers']"", ""FILTER['#1', 'in Austin']"", ""PROJECT['revenues of #REF', '#2']"", ""SUPERLATIVE['min', '#2', '#3']"", ""SELECT['companies']"", ""PROJECT['revenue of #REF', '#5']"", ""COMPARATIVE['#5', '#6', 'is lower than #4']""]","['select', 'filter', 'project', 'superlative', 'select', 'project', 'comparative']",train
SPIDER_train_5304,Find the total revenue of companies whose revenue is larger than the revenue of some companies based in Austin.,return companies  ;return #1 that  are based in Austin ;return the  revenues of #2 ;return the  lowest of #3 ;return the  revenues of #1 ;return #1 where #5 is  larger than #4 ;return the  revenues of #6 ;return the  sum of #7,"[""SELECT['companies']"", ""FILTER['#1', 'that are based in Austin']"", ""PROJECT['the revenues of #REF', '#2']"", ""AGGREGATE['min', '#3']"", ""PROJECT['the revenues of #REF', '#1']"", ""COMPARATIVE['#1', '#5', 'is larger than #4']"", ""PROJECT['the revenues of #REF', '#6']"", ""AGGREGATE['sum', '#7']""]","['select', 'filter', 'project', 'aggregate', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_5305,What is the total revenue of companies with revenue greater than the lowest revenue of any manufacturer in Austin?,return manufacturers ;return #1 in  Austin ;return revenues of #2 ;return lowest of #3 ;return companies ;return revenues of #5 ;return #6 that are higher than #4 ;return sum of #7,"[""SELECT['manufacturers']"", ""FILTER['#1', 'in Austin']"", ""PROJECT['revenues of #REF', '#2']"", ""AGGREGATE['min', '#3']"", ""SELECT['companies']"", ""PROJECT['revenues of #REF', '#5']"", ""FILTER['#6', 'that are higher than #4']"", ""AGGREGATE['sum', '#7']""]","['select', 'filter', 'project', 'aggregate', 'select', 'project', 'filter', 'aggregate']",train
SPIDER_train_5306,Find the total revenue of companies of each founder.,return founders ;return companies of  #1 ;return total revenue of  #2 for each #1,"[""SELECT['founders']"", ""PROJECT['companies of #REF', '#1']"", ""GROUP['sum', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_5307,What is the total revenue of companies started by founder?,return companies ;return #1 started by founder ;return revenue of  #2 ;return sum of  #3,"[""SELECT['companies']"", ""FILTER['#1', 'started by founder']"", ""PROJECT['revenue of #REF', '#2']"", ""AGGREGATE['sum', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_5308,Find the name and revenue of the company that earns the highest revenue in each city.,"return cities ;return companies of #1 ;return revenues of #2 ;return #2 where #3 is the  highest for each #1 ;return names of #4 ;return revenues of #4 ;return #5 ,  #6","[""SELECT['cities']"", ""PROJECT['companies of #REF', '#1']"", ""PROJECT['revenues of #REF', '#2']"", ""GROUP['max', '#2', '#1']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['revenues of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'project', 'group', 'project', 'project', 'union']",train
SPIDER_train_5309,What are the names and revenues of the companies with the highest revenues in each headquarter city?,"return companies ;return headquarter cities of #1 ;return revenues of #1 ;return #1 where #3 is the  highest for each #2 ;return names of #4 ;return revenues  of #4 ;return #5 ,  #6","[""SELECT['companies']"", ""PROJECT['headquarter cities of #REF', '#1']"", ""PROJECT['revenues of #REF', '#1']"", ""GROUP['max', '#1', '#2']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['revenues of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'project', 'group', 'project', 'project', 'union']",train
SPIDER_train_531,Find the different first names and cities of the students who have allergy to milk or cat.,"return students ;return #1 that  have  allergy to  milk ;return #1 that  have  allergy to  cat ;return #2 or  #3 ;return first names of  #4 ;return cities of  #4 ;return #5 ,   #6","[""SELECT['students']"", ""FILTER['#1', 'that have allergy to milk']"", ""FILTER['#1', 'that have allergy to cat']"", ""UNION['#2', '#3']"", ""PROJECT['first names of #REF', '#4']"", ""PROJECT['cities of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'filter', 'filter', 'union', 'project', 'project', 'union']",train
SPIDER_train_5310,Find the total revenue for each manufacturer.,return manufacturers ;return revenue of #1 ;return sum of #2 for each #1,"[""SELECT['manufacturers']"", ""PROJECT['revenue of #REF', '#1']"", ""GROUP['sum', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_5311,What is the total revenue of each manufacturer?,return manufacturers ;return revenues of #1 ;return sum of #2 for each #1,"[""SELECT['manufacturers']"", ""PROJECT['revenues of #REF', '#1']"", ""GROUP['sum', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_5312,"Find the average prices of all products from each manufacture, and list each company's name.","return manufactures ;return products of #1 ;return prices of #2 ;return average of #3 for each #1 ;return companies of #1 ;return names of #5 ;return #4 ,  #6","[""SELECT['manufactures']"", ""PROJECT['products of #REF', '#1']"", ""PROJECT['prices of #REF', '#2']"", ""GROUP['avg', '#3', '#1']"", ""PROJECT['companies of #REF', '#1']"", ""PROJECT['names of #REF', '#5']"", ""UNION['#4', '#6']""]","['select', 'project', 'project', 'group', 'project', 'project', 'union']",train
SPIDER_train_5313,What are the average prices of products for each manufacturer?,return manufacturers ;return products of  #1 ;return prices of  #2 ;return average of  #3 for each  #1,"[""SELECT['manufacturers']"", ""PROJECT['products of #REF', '#1']"", ""PROJECT['prices of #REF', '#2']"", ""GROUP['avg', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_5314,Find the number of different products that are produced by companies at different headquarter cities.,return headquarter cities ;return companies of #1 ;return the  products produced by #2 ;return the  number of  #3,"[""SELECT['headquarter cities']"", ""PROJECT['companies of #REF', '#1']"", ""PROJECT['the products produced by #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_5315,How many different products are produced in each headquarter city?,return headquarter cities ;return products produced in #1 ;return different #2 ;return number of  #3 for each #1,"[""SELECT['headquarter cities']"", ""PROJECT['products produced in #REF', '#1']"", ""PROJECT['different #REF', '#2']"", ""GROUP['count', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_5316,Find number of products which Sony does not make.,return products ;return #1 that  Sony make ;return #1 besides #2 ;return number of #3,"[""SELECT['products']"", ""FILTER['#1', 'that Sony make']"", ""DISCARD['#1', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'discard', 'aggregate']",train
SPIDER_train_5317,How many products are not made by Sony?,return products ;return #1 made by Sony ;return #1 besides #2 ;return number of  #3,"[""SELECT['products']"", ""FILTER['#1', 'made by Sony']"", ""DISCARD['#1', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'discard', 'aggregate']",train
SPIDER_train_5318,Find the name of companies that do not make DVD drive.,return companies ;return #1 that  make DVD drives ;return #1 besides #2 ;return name of  #3,"[""SELECT['companies']"", ""FILTER['#1', 'that make DVD drives']"", ""DISCARD['#1', '#2']"", ""PROJECT['name of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_5319,What are the names of companies that do not make DVD drives?,return companies ;return #1 that  do not make DVD drives ;return names of #2,"[""SELECT['companies']"", ""FILTER['#1', 'that do not make DVD drives']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_532,What are the distinct first names and cities of the students who have allergy either to milk or to cat?,"return students ;return allergy of #1 ;return #1 where #2 is  to  milk ;return #1 where #2 is  to  cat ;return #3 or  #4 ;return distinct first names of #5 ;return cities of #5 ;return #6 ,  #7","[""SELECT['students']"", ""PROJECT['allergy of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is to milk']"", ""COMPARATIVE['#1', '#2', 'is to cat']"", ""UNION['#3', '#4']"", ""PROJECT['distinct first names of #REF', '#5']"", ""PROJECT['cities of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project', 'project', 'union']",train
SPIDER_train_5320,"Find the number of products for each manufacturer, showing the name of each company.","return manufacturers ;return products of #1 ;return number of  #2 for each #1 ;return names of #1 ;return #3 ,  #4","[""SELECT['manufacturers']"", ""PROJECT['products of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['names of #REF', '#1']"", ""UNION['#3', '#4']""]","['select', 'project', 'group', 'project', 'union']",train
SPIDER_train_5321,How many products are there for each manufacturer?,return manufacturers ;return products of  #1 ;return number of #2 for each #1,"[""SELECT['manufacturers']"", ""PROJECT['products of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_5322,Select the names of all the products in the store.,return products in the  store ;return names of  #1,"[""SELECT['products in the store']"", ""PROJECT['names of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_5323,What are the names of all products?,return products ;return names of  #1,"[""SELECT['products']"", ""PROJECT['names of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_5324,Select the names and the prices of all the products in the store.,"return products in the   store ;return the   names of #1 ;return the   prices of #1 ;return #2 ,  #3","[""SELECT['products in the store']"", ""PROJECT['the names of #REF', '#1']"", ""PROJECT['the prices of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_5325,What are the names and prices of all products in the store?,"return products ;return #1 in the  store ;return names of  #2 ;return prices of  #2 ;return #3 ,  #4","[""SELECT['products']"", ""FILTER['#1', 'in the store']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['prices of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_5326,Select the name of the products with a price less than or equal to $200.,return products ;return prices of  #1 ;return #1 where #2 is  at most 200 ;return names of  #3,"[""SELECT['products']"", ""PROJECT['prices of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at most 200']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5327,What are the names of products with price at most 200?,return products ;return prices of  #1 ;return #1 where #2 is  at most 200 ;return names of  #3,"[""SELECT['products']"", ""PROJECT['prices of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at most 200']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5328,Find all information of all the products with a price between $60 and $120.,return products ;return prices of #1 ;return #1 where #2 is higher than 60 ;return #3 where #2 is lower than 120 ;return all information of #4,"[""SELECT['products']"", ""PROJECT['prices of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 60']"", ""COMPARATIVE['#3', '#2', 'is lower than 120']"", ""PROJECT['all information of #REF', '#4']""]","['select', 'project', 'comparative', 'comparative', 'project']",train
SPIDER_train_5329,What is all the information of all the products that have a price between 60 and 120?,return products ;return prices of #1 ;return #1 where #2 is at least 60 ;return #1 where #2 is at most 120 ;return #1 in  both #3 and  #4 ;return information of #5,"[""SELECT['products']"", ""PROJECT['prices of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least 60']"", ""COMPARATIVE['#1', '#2', 'is at most 120']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['information of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_533,Find the number of students who are older than 18 and do not have allergy to either food or animal.,"return students ;return #1 that  are  older than  18 ;return #1 that  do not  have  allergy to  food ;return #1 that  do not  have  allergy to  animal ;return #3 , #4 ;return #1 of  both #2 and #5 ;return number of #6","[""SELECT['students']"", ""FILTER['#1', 'that are older than 18']"", ""FILTER['#1', 'that do not have allergy to food']"", ""FILTER['#1', 'that do not have allergy to animal']"", ""UNION['#3', '#4']"", ""INTERSECTION['#1', '#2', '#5']"", ""AGGREGATE['count', '#6']""]","['select', 'filter', 'filter', 'filter', 'union', 'intersection', 'aggregate']",train
SPIDER_train_5330,Compute the average price of all the products.,return products ;return price of  #1 ;return average of  #2,"[""SELECT['products']"", ""PROJECT['price of #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_5331,What is the average price across all products?,return products ;return prices of #1 ;return the  average of #2,"[""SELECT['products']"", ""PROJECT['prices of #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_5332,Compute the average price of all products with manufacturer code equal to 2.,return products ;return #1 with  manufacturer code equal to  2 ;return prices of  #2 ;return average of  #3,"[""SELECT['products']"", ""FILTER['#1', 'with manufacturer code equal to 2']"", ""PROJECT['prices of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_5333,What is the average price of products with manufacturer codes equal to 2?,return products ;return manufacturer codes of  #1 ;return #1 where #2 is  2 ;return prices of  #3 ;return average of  #4,"[""SELECT['products']"", ""PROJECT['manufacturer codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 2']"", ""PROJECT['prices of #REF', '#3']"", ""AGGREGATE['avg', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_5334,Compute the number of products with a price larger than or equal to $180.,return products ;return prices of  #1 ;return #1 where #2 is  at least $ 180 ;return number of  #3,"[""SELECT['products']"", ""PROJECT['prices of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least $ 180']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_5335,How many products have prices of at least 180?,return products ;return prices of  #1 ;return #1 where  #2 is  at least 180 ;return number of #3,"[""SELECT['products']"", ""PROJECT['prices of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least 180']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_5336,"Select the name and price of all products with a price larger than or equal to $180, and sort first by price (in descending order), and then by name  (in ascending order).","return products ;return prices of #1 ;return #1 where #2 is  at least $ 180 ;return names of #3 ;return prices of #3 ;return #4 ,  #5 ;return #6 sorted by #5 in descending order  ;return #7 sorted by #4 in ascending order","[""SELECT['products']"", ""PROJECT['prices of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least $ 180']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['prices of #REF', '#3']"", ""UNION['#4', '#5']"", ""SORT['#6', '#5', 'in descending order']"", ""SORT['#7', '#4', 'in ascending order']""]","['select', 'project', 'comparative', 'project', 'project', 'union', 'sort', 'sort']",train
SPIDER_train_5337,"What are the names and prices of products that cost at least 180, sorted by price decreasing and name ascending?","return products ;return prices of  #1 ;return #1 where #2 is  at least 180 ;return names of  #3 ;return prices of  #3 ;return #4 ,  #5 ;return #6 sorted by #5 decreasing and  #4 ascending","[""SELECT['products']"", ""PROJECT['prices of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least 180']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['prices of #REF', '#3']"", ""UNION['#4', '#5']"", ""SORT['#6', '#5', 'decreasing and #4 ascending']""]","['select', 'project', 'comparative', 'project', 'project', 'union', 'sort']",train
SPIDER_train_5338,Select all the data from the products and each product's manufacturer.,"return products ;return all data of #1 ;return manufacturers of #1 ;return #2 ,  #3","[""SELECT['products']"", ""PROJECT['all data of #REF', '#1']"", ""PROJECT['manufacturers of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_5339,"What is all the product data, as well as  each product's manufacturer?","return products ;return data of  #1 ;return manufacturers of  #1 ;return #2 ,  #3","[""SELECT['products']"", ""PROJECT['data of #REF', '#1']"", ""PROJECT['manufacturers of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_534,How many students are over 18 and do not have allergy to food type or animal type?,"return students ;return #1 that are over 18 ;return type of allergies of  #2 ;return #2 where #3 is food type ;return #2 where #3 is animal type ;return #2 besides  #4 ,  #5 ;return number of  #6","[""SELECT['students']"", ""FILTER['#1', 'that are over 18']"", ""PROJECT['type of allergies of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is food type']"", ""COMPARATIVE['#2', '#3', 'is animal type']"", ""FILTER['#2', 'besides #4 , #5']"", ""AGGREGATE['count', '#6']""]","['select', 'filter', 'project', 'comparative', 'comparative', 'filter', 'aggregate']",train
SPIDER_train_5340,"Select the average price of each manufacturer's products, showing only the manufacturer's code.","return manufacturers ;return products of #1 ;return prices of #2 ;return average of #3 for each #1 ;return codes of #1 ;return #4 ,  #5","[""SELECT['manufacturers']"", ""PROJECT['products of #REF', '#1']"", ""PROJECT['prices of #REF', '#2']"", ""GROUP['avg', '#3', '#1']"", ""PROJECT['codes of #REF', '#1']"", ""UNION['#4', '#5']""]","['select', 'project', 'project', 'group', 'project', 'union']",train
SPIDER_train_5341,"What are the average prices of products, grouped by manufacturer code?",return products ;return prices of  #1 ;return manufacturer code of  #1 ;return average of #2 for each #3,"[""SELECT['products']"", ""PROJECT['prices of #REF', '#1']"", ""PROJECT['manufacturer code of #REF', '#1']"", ""GROUP['avg', '#2', '#3']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_5342,"Select the average price of each manufacturer's products, showing the manufacturer's name.","return manufacturers ;return products of #1 ;return prices of #2 ;return the  average of #3 for each #1 ;return the  names of #1 ;return #4 ,  #5","[""SELECT['manufacturers']"", ""PROJECT['products of #REF', '#1']"", ""PROJECT['prices of #REF', '#2']"", ""GROUP['avg', '#3', '#1']"", ""PROJECT['the names of #REF', '#1']"", ""UNION['#4', '#5']""]","['select', 'project', 'project', 'group', 'project', 'union']",train
SPIDER_train_5343,"What are the average prices of products, grouped by manufacturer name?",return manufacturers ;return products of  #1 ;return prices of  #2 ;return average of  #3 for each  #1,"[""SELECT['manufacturers']"", ""PROJECT['products of #REF', '#1']"", ""PROJECT['prices of #REF', '#2']"", ""GROUP['avg', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_5344,Select the names of manufacturer whose products have an average price higher than or equal to $150.,return manufacturers ;return products of #1 ;return prices of #2 ;return average of #3 for each #1 ;return #1 where #4 is  at least $ 150 ;return names of #5,"[""SELECT['manufacturers']"", ""PROJECT['products of #REF', '#1']"", ""PROJECT['prices of #REF', '#2']"", ""GROUP['avg', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is at least $ 150']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_5345,What are the names and average prices of products for manufacturers whose products cost on average 150 or more?,"return manufacturers ;return products  of  #1 ;return prices of  #2 ;return average  of  #3 for each  #1 ;return #1 where #4 is  at least 150 ;return products  of  #5 ;return names of  #6 ;return prices of  #6 ;return average  of  #8 for each  #5 ;return #7 ,  #9","[""SELECT['manufacturers']"", ""PROJECT['products of #REF', '#1']"", ""PROJECT['prices of #REF', '#2']"", ""GROUP['avg', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is at least 150']"", ""PROJECT['products of #REF', '#5']"", ""PROJECT['names of #REF', '#6']"", ""PROJECT['prices of #REF', '#6']"", ""GROUP['avg', '#8', '#5']"", ""UNION['#7', '#9']""]","['select', 'project', 'project', 'group', 'comparative', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_5346,Select the name and price of the cheapest product.,"return products ;return prices of #1 ;return #1 where #2 is  the  lowest ;return the  name of #3 ;return the  price of #3 ;return #4 ,  #5","[""SELECT['products']"", ""PROJECT['prices of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the lowest']"", ""PROJECT['the name of #REF', '#3']"", ""PROJECT['the price of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_5347,What is the name and price of the cheapest product?,"return products ;return prices of #1 ;return the  lowest of #2 ;return #1 where #2 is equal to #3 ;return name of #4 ;return #5 ,  #3","[""SELECT['products']"", ""PROJECT['prices of #REF', '#1']"", ""AGGREGATE['min', '#2']"", ""COMPARATIVE['#1', '#2', 'is equal to #3']"", ""PROJECT['name of #REF', '#4']"", ""UNION['#5', '#3']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'union']",train
SPIDER_train_5348,Select the name of each manufacturer along with the name and price of its most expensive product.,"return manufacturers ;return name  of  #1 ;return products of  #1 ;return highest price #3 for each #1 ;return name  of  #4 ;return #2 ,   #5","[""SELECT['manufacturers']"", ""PROJECT['name of #REF', '#1']"", ""PROJECT['products of #REF', '#1']"", ""GROUP['max', '#3', '#1']"", ""PROJECT['name of #REF', '#4']"", ""UNION['#2', '#5']""]","['select', 'project', 'project', 'group', 'project', 'union']",train
SPIDER_train_5349,"For each manufacturer name, what are the names and prices of their most expensive product?","return manufacturers ;return products of #1 ;return prices of #2 ;return #2 where #3 is the  highest for each #1 ;return names of #4 ;return prices of #4 ;return #5 ,  #6","[""SELECT['manufacturers']"", ""PROJECT['products of #REF', '#1']"", ""PROJECT['prices of #REF', '#2']"", ""GROUP['max', '#2', '#1']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['prices of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'project', 'group', 'project', 'project', 'union']",train
SPIDER_train_535,Find the first name and major of the students who are not allegry to soy.,"return students ;return #1 that have a allegry to soy ;return #1 besides  #2 ;return first names of #3 ;return major of #3 ;return #4 ,  #5","[""SELECT['students']"", ""FILTER['#1', 'that have a allegry to soy']"", ""DISCARD['#1', '#2']"", ""PROJECT['first names of #REF', '#3']"", ""PROJECT['major of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'discard', 'project', 'project', 'union']",train
SPIDER_train_5352,What is the id of the problem log that is created most recently?,return problem logs ;return #1 created most recently ;return id of  #2,"[""SELECT['problem logs']"", ""FILTER['#1', 'created most recently']"", ""PROJECT['id of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5353,Which problem log was created most recently? Give me the log id.,return problem log ;return when  #1 was created ;return #1 where #2 is  most recently ;return log id of  #3,"[""SELECT['problem log']"", ""PROJECT['when #REF was created', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['log id of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_5354,What is the oldest log id and its corresponding problem id?,"return log ids ;return #1 that  is  the  oldest ;return corresponding problem id  of #2 ;return #2 ,  #3","[""SELECT['log ids']"", ""FILTER['#1', 'that is the oldest']"", ""PROJECT['corresponding problem id of #REF', '#2']"", ""UNION['#2', '#3']""]","['select', 'filter', 'project', 'union']",train
SPIDER_train_5355,Find the oldest log id and its corresponding problem id.,"return log id  ;return oldest of  #1 ;return problem id  of  #2 ;return #2 ,   #3","[""SELECT['log id']"", ""PROJECT['oldest of #REF', '#1']"", ""PROJECT['problem id of #REF', '#2']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_5356,Find all the ids and dates of the logs for the problem whose id is 10.,"return problems ;return #1 whose id is  10 ;return logs for #2 ;return ids of  #3 ;return dates of  #3 ;return #4 ,   #5","[""SELECT['problems']"", ""FILTER['#1', 'whose id is 10']"", ""PROJECT['logs for #REF', '#2']"", ""PROJECT['ids of #REF', '#3']"", ""PROJECT['dates of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_5357,"For the problem with id 10, return the ids and dates of its problem logs.","return problems ;return ids of  #1 ;return #1 where  #2 is  10 ;return problem logs of  #3 ;return ids of  #4 ;return dates of  #4 ;return #5 ,   #6","[""SELECT['problems']"", ""PROJECT['ids of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 10']"", ""PROJECT['problem logs of #REF', '#3']"", ""PROJECT['ids of #REF', '#4']"", ""PROJECT['dates of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_5358,List all the log ids and their descriptions from the problem logs.,"return problem logs ;return log ids of  #1 ;return descriptions of  #1 ;return #2 ,  #3","[""SELECT['problem logs']"", ""PROJECT['log ids of #REF', '#1']"", ""PROJECT['descriptions of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_5359,What are the log id and entry description of each problem?,"return problems ;return log ids of  #1 ;return entries of  #1 ;return descriptions of  #3 ;return #2 ,  #4","[""SELECT['problems']"", ""PROJECT['log ids of #REF', '#1']"", ""PROJECT['entries of #REF', '#1']"", ""PROJECT['descriptions of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_536,What are the first name and major of the students who are able to consume soy?,"return students ;return #1 who  are  able to consume soy ;return first names of  #2 ;return major of  #2 ;return #3 ,  #4","[""SELECT['students']"", ""FILTER['#1', 'who are able to consume soy']"", ""PROJECT['first names of #REF', '#2']"", ""PROJECT['major of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_5360,List the first and last names of all distinct staff members who are assigned to the problem whose id is 1.,"return staff members ;return problems #1 are  assigned to  ;return ids of  #2 ;return #1 where  #3 is 1 ;return distinct #4 ;return first names of  #5 ;return last names of  #5 ;return #6 ,  #7","[""SELECT['staff members']"", ""PROJECT['problems #REF are assigned to', '#1']"", ""PROJECT['ids of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is 1']"", ""PROJECT['distinct #REF', '#4']"", ""PROJECT['first names of #REF', '#5']"", ""PROJECT['last names of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_5361,Which staff members are assigned to the problem with id 1? Give me their first and last names.,"return staff members ;return problems #1 are  assigned to ;return ids of  #2 ;return #1 where #3 is  1 ;return first names of  #4 ;return last names of  #4 ;return #5 ,  #6","[""SELECT['staff members']"", ""PROJECT['problems #REF are assigned to', '#1']"", ""PROJECT['ids of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is 1']"", ""PROJECT['first names of #REF', '#4']"", ""PROJECT['last names of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_5362,List the problem id and log id which are assigned to the staff named Rylan Homenick.,"return staff ;return #1 named Rylan Homenick ;return problem id of  #2 ;return log id of  #2 ;return #3 ,  #4","[""SELECT['staff']"", ""FILTER['#1', 'named Rylan Homenick']"", ""PROJECT['problem id of #REF', '#2']"", ""PROJECT['log id of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_5363,Which problem id and log id are assigned to the staff named Rylan Homenick?,"return staff ;return #1 named Rylan Homenick ;return problem id  of #2 ;return log id  of #2 ;return #3 ,  #4","[""SELECT['staff']"", ""FILTER['#1', 'named Rylan Homenick']"", ""PROJECT['problem id of #REF', '#2']"", ""PROJECT['log id of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_5364,How many problems are there for product voluptatem?,return products ;return problems of  #1 ;return #2 where  #1 is  voluptatem ;return number of #3,"[""SELECT['products']"", ""PROJECT['problems of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is voluptatem']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_5365,"How many problems did the product called ""voluptatem"" have in record?",return products ;return problems of  #1 ;return #2 where  #1 is voluptatem ;return number of  #3,"[""SELECT['products']"", ""PROJECT['problems of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is voluptatem']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_5366,How many problems does the product with the most problems have? List the number of the problems and product name.,"return products ;return problems  of  #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is highest ;return problems  of  #4 ;return number of  #5 ;return product  name of  #4 ;return #6 ,  #7","[""SELECT['products']"", ""PROJECT['problems of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['problems of #REF', '#4']"", ""AGGREGATE['count', '#5']"", ""PROJECT['product name of #REF', '#4']"", ""UNION['#6', '#7']""]","['select', 'project', 'group', 'superlative', 'project', 'aggregate', 'project', 'union']",train
SPIDER_train_5367,Which product has the most problems? Give me the number of problems and the product name.,"return products ;return the  number of  problems  for each  #1 ;return #1 where #2 is  the  highest ;return the  number of  problems  of  #3 ;return the  product name of  #3 ;return #4 ,  #5","[""SELECT['products']"", ""PROJECT['problems', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']"", ""PROJECT['problems of #REF', '#4']"", ""GROUP['count', '#5', '#4']"", ""PROJECT['the product name of #REF', '#4']"", ""UNION['#6', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'group', 'project', 'union']",train
SPIDER_train_5368,Give me a list of descriptions of the problems that are reported by the staff whose first name is Christop.,return staff ;return first names of  #1 ;return #1 where  #2 is  Christop ;return problems reported by #3 ;return descriptions of  #4,"[""SELECT['staff']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Christop']"", ""PROJECT['problems reported by #REF', '#3']"", ""PROJECT['descriptions of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_5369,"Which problems are reported by the staff with first name ""Christop""? Show the descriptions of the problems.",return problems  ;return staff who  reported #1 ;return first names of  #2 ;return #1 where #3 is  Christop ;return descriptions of  #4,"[""SELECT['problems']"", ""PROJECT['staff who reported #REF', '#1']"", ""PROJECT['first names of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Christop']"", ""PROJECT['descriptions of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_537,A list of the top 5 countries by number of invoices. List country name and number of invoices.,"return countries ;return invoices  of   #1 ;return number of  #2 for each #1 ;return the  top 5 highest of   #3 ;return #1 where #3 is equal to any of   #4 ;return names of   #5 ;return #6 ,  #4","[""SELECT['countries']"", ""PROJECT['invoices of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['max', '#3']"", ""COMPARATIVE['#1', '#3', 'is equal to any of #4']"", ""PROJECT['names of #REF', '#5']"", ""UNION['#6', '#4']""]","['select', 'project', 'group', 'aggregate', 'comparative', 'project', 'union']",train
SPIDER_train_5370,Find the ids of the problems that are reported by the staff whose last name is Bosco.,return staff ;return last names of  #1 ;return #1 where  #2 is  Bosco ;return problems reported by #3 ;return ids of  #4,"[""SELECT['staff']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Bosco']"", ""PROJECT['problems reported by #REF', '#3']"", ""PROJECT['ids of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_5371,"Which problems are reported by the staff with last name ""Bosco""? Show the ids of the problems.",return problems  ;return staff who  reported #1 ;return last names of  #2 ;return #1 where #3 is  Bosco ;return ids of  #4,"[""SELECT['problems']"", ""PROJECT['staff who reported #REF', '#1']"", ""PROJECT['last names of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Bosco']"", ""PROJECT['ids of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_5372,What are the ids of the problems which are reported after 1978-06-26?,return problems ;return #1 reported after 1978-06-26 ;return ids of  #2,"[""SELECT['problems']"", ""FILTER['#1', 'reported after 1978-06-26']"", ""PROJECT['ids of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5373,Find the ids of the problems reported after 1978-06-26.,return problems ;return #1 reported after 1978-06-26 ;return ids of #2,"[""SELECT['problems']"", ""FILTER['#1', 'reported after 1978-06-26']"", ""PROJECT['ids of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5374,What are the ids of the problems which are reported before 1978-06-26?,return problems ;return #1 reported before 1978-06-26 ;return ids of  #2,"[""SELECT['problems']"", ""FILTER['#1', 'reported before 1978-06-26']"", ""PROJECT['ids of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5375,Which problems are reported before 1978-06-26? Give me the ids of the problems.,return problems  ;return #1 reported before 1978-06-26 ;return ids of #2,"[""SELECT['problems']"", ""FILTER['#1', 'reported before 1978-06-26']"", ""PROJECT['ids of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5376,"For each product which has problems, what are the number of problems and the product id?","return products ;return problems  of #1 ;return number of  #2 for each #1 ;return product  ids of #1 ;return #3 ,  #4","[""SELECT['products']"", ""PROJECT['problems of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['product ids of #REF', '#1']"", ""UNION['#3', '#4']""]","['select', 'project', 'group', 'project', 'union']",train
SPIDER_train_5377,"For each product with some problems, list the count of problems and the product id.","return products ;return #1 with  problems ;return problems of  #2 ;return number of #3 for each #2 ;return product ids of  #2 ;return #4 ,   #5","[""SELECT['products']"", ""FILTER['#1', 'with problems']"", ""PROJECT['problems of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""PROJECT['product ids of #REF', '#2']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'group', 'project', 'union']",train
SPIDER_train_5378,"For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?","return products ;return #1 with problems  ;return #2 reported after 1986-11-13 ;return number of  #3 for each  #2 ;return product ids of  #2 ;return #4 ,  #5","[""SELECT['products']"", ""FILTER['#1', 'with problems']"", ""FILTER['#2', 'reported after 1986-11-13']"", ""GROUP['count', '#3', '#2']"", ""PROJECT['product ids of #REF', '#2']"", ""UNION['#4', '#5']""]","['select', 'filter', 'filter', 'group', 'project', 'union']",train
SPIDER_train_5379,What are the products that have problems reported after 1986-11-13? Give me the product id and the count of problems reported after 1986-11-13.,"return products ;return problems  of #1 ;return reported date of #2 ;return #1 where #3 is higher than 1986-11-13 ;return id of #4 ;return #2 where #1 is equal to #4 ;return number of  #6 for each #4 ;return #5 ,  #7","[""SELECT['products']"", ""PROJECT['problems of #REF', '#1']"", ""PROJECT['reported date of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is higher than 1986-11-13']"", ""PROJECT['id of #REF', '#4']"", ""COMPARATIVE['#2', '#1', 'is equal to #4']"", ""GROUP['count', '#6', '#4']"", ""UNION['#5', '#7']""]","['select', 'project', 'project', 'comparative', 'project', 'comparative', 'group', 'union']",train
SPIDER_train_538,What are the top 5 countries by number of invoices and how many do they have?,"return countries ;return invoices of #1 ;return number of  #2 for each #1 ;return #1 where #3 is highest 5 ;return number of  #2 for each #4 ;return #4 ,  #5","[""SELECT['countries']"", ""PROJECT['invoices of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""GROUP['count', '#2', '#4']"", ""UNION['#4', '#5']""]","['select', 'project', 'group', 'superlative', 'group', 'union']",train
SPIDER_train_5380,List the names of all the distinct product names in alphabetical order?,return products ;return names  of #1 ;return distinct #2 ;return #3 sorted by alphabetical order,"[""SELECT['products']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['distinct #REF', '#2']"", ""SORT['#3', '#3', 'alphabetical order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_5381,Sort all the distinct product names in alphabetical order.,return products ;return names of  #1 ;return distinct #2 ;return #3 sorted by alphabetical order,"[""SELECT['products']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['distinct #REF', '#2']"", ""SORT['#3', '#3', 'alphabetical order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_5382,List all the distinct product names ordered by product id?,return products ;return product  names of  #1 ;return distinct #2 ;return product  ids of  #1 ;return #3 sorted by #4,"[""SELECT['products']"", ""PROJECT['product names of #REF', '#1']"", ""PROJECT['distinct #REF', '#2']"", ""PROJECT['product ids of #REF', '#1']"", ""SORT['#3', '#4']""]","['select', 'project', 'project', 'project', 'sort']",train
SPIDER_train_5383,What is the list of distinct product names sorted by product id?,return distinct product names ;return the  product ids of  #1 ;return #1 sorted by #2,"[""SELECT['distinct product names']"", ""PROJECT['the product ids of #REF', '#1']"", ""SORT['#1', '#2']""]","['select', 'project', 'sort']",train
SPIDER_train_5384,What are the id of problems reported by the staff named Dameon Frami or Jolie Weber?,return problems ;return staff who  reported #1 ;return #1 where #2 is  named Dameon Frami ;return #1 where #2 is  named Jolie Weber ;return #3 or  #4 ;return ids of  #5,"[""SELECT['problems']"", ""PROJECT['staff who reported #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is named Dameon Frami']"", ""COMPARATIVE['#1', '#2', 'is named Jolie Weber']"", ""UNION['#3', '#4']"", ""PROJECT['ids of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_5385,Which problems were reported by the staff named Dameon Frami or Jolie Weber? Give me the ids of the problems.,return problems  ;return staff who  reported #1 ;return #2 named Dameon Frami ;return #2 named Jolie Weber ;return #1 of  both #3 and  #4 ;return ids of  #5,"[""SELECT['problems']"", ""PROJECT['staff who reported #REF', '#1']"", ""FILTER['#2', 'named Dameon Frami']"", ""FILTER['#2', 'named Jolie Weber']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['ids of #REF', '#5']""]","['select', 'project', 'filter', 'filter', 'intersection', 'project']",train
SPIDER_train_5386,What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst?,return problems ;return #1 reported by Christop Berge ;return #2 where closure authorised by Ashley Medhurst ;return product ids of #3,"[""SELECT['problems']"", ""FILTER['#1', 'reported by Christop Berge']"", ""FILTER['#2', 'where closure authorised by Ashley Medhurst']"", ""PROJECT['product ids of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_5387,"For which product was there a problem reported by Christop Berge, with closure authorised by Ashley Medhurst? Return the product ids.",return products ;return problems of  #1 ;return #2 reported by Christop Berge ;return closures of  #1 ;return #4 authorised by Ashley Medhurst ;return #1 of  both #3 and #5 ;return product ids of  #6,"[""SELECT['products']"", ""PROJECT['problems of #REF', '#1']"", ""FILTER['#2', 'reported by Christop Berge']"", ""PROJECT['closures of #REF', '#1']"", ""FILTER['#4', 'authorised by Ashley Medhurst']"", ""INTERSECTION['#1', '#3', '#5']"", ""PROJECT['product ids of #REF', '#6']""]","['select', 'project', 'filter', 'project', 'filter', 'intersection', 'project']",train
SPIDER_train_5388,What are the ids of the problems reported before the date of any problem reported by Lysanne Turcotte?,return problems ;return #1 reported  by Lysanne Turcotte ;return dates of  #2 ;return #1 besides  #2 ;return dates of  #4 ;return #4 where #5 are  reported  before #3,"[""SELECT['problems']"", ""FILTER['#1', 'reported by Lysanne Turcotte']"", ""PROJECT['dates of #REF', '#2']"", ""DISCARD['#1', '#2']"", ""PROJECT['dates of #REF', '#4']"", ""COMPARATIVE['#4', '#5', 'are reported before #3']""]","['select', 'filter', 'project', 'discard', 'project', 'comparative']",train
SPIDER_train_5389,Which problems were reported before the date of any problem reported by the staff Lysanne Turcotte? Give me the ids of the problems.,return Lysanne Turcotte ;return problems  reported by #1 ;return dates of #2 ;return the  lowest of #3 ;return problems  reported besides  #2 ;return dates of #5 ;return #5 where #6 is lower than #4 ;return ids of #7,"[""SELECT['Lysanne Turcotte']"", ""PROJECT['problems reported by #REF', '#1']"", ""PROJECT['dates of #REF', '#2']"", ""AGGREGATE['min', '#3']"", ""SELECT['problems reported']"", ""DISCARD['#5', '#2']"", ""PROJECT['dates of #REF', '#6']"", ""COMPARATIVE['#6', '#7', 'is lower than #4']"", ""PROJECT['ids of #REF', '#8']""]","['select', 'project', 'project', 'aggregate', 'select', 'discard', 'project', 'comparative', 'project']",train
SPIDER_train_539,A list of the top 8 countries by gross/total invoice size. List country name and gross invoice size.,"return countries ;return gross/total invoice sizes of #1 ;return #1 where #2 is in  the  top 8 highest ;return names of #3 ;return gross/total invoice sizes of #3 ;return #4 ,  #5","[""SELECT['countries']"", ""PROJECT['gross/total invoice sizes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is in the top 8 highest']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['gross/total invoice sizes of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_5390,What are the ids of the problems reported after the date of any problems reported by Rylan Homenick?,return problems  ;return #1 that are reported by Rylan Homenick ;return date of #2 ;return lowest of #3 ;return #1 besides  #2 ;return date of #5 ;return #5 where #6 is higher than #4 ;return ids of #7,"[""SELECT['problems']"", ""FILTER['#1', 'that are reported by Rylan Homenick']"", ""PROJECT['date of #REF', '#2']"", ""AGGREGATE['min', '#3']"", ""DISCARD['#1', '#2']"", ""PROJECT['date of #REF', '#5']"", ""COMPARATIVE['#5', '#6', 'is higher than #4']"", ""PROJECT['ids of #REF', '#7']""]","['select', 'filter', 'project', 'aggregate', 'discard', 'project', 'comparative', 'project']",train
SPIDER_train_5391,Find the ids of the problems reported after the date of any problems reported by the staff Rylan Homenick.,return problems  ;return reported date of #1 ;return #1 that are reported by the  staff Rylan Homenick ;return reported date of #3 ;return lowest of #4 ;return #1 where #2 is higher than #5 ;return ids of #6,"[""SELECT['problems']"", ""PROJECT['reported date of #REF', '#1']"", ""FILTER['#1', 'that are reported by the staff Rylan Homenick']"", ""PROJECT['reported date of #REF', '#3']"", ""AGGREGATE['min', '#4']"", ""COMPARATIVE['#1', '#2', 'is higher than #5']"", ""PROJECT['ids of #REF', '#6']""]","['select', 'project', 'filter', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_5392,Find the top 3 products which have the largest number of problems?,return products ;return problems of #1 ;return number of  #2 for each #1 ;return #1 where #3 are top 3,"[""SELECT['products']"", ""PROJECT['problems of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'are top 3']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_5394,"List the ids of the problems from the product ""voluptatem"" that are reported after 1995?",return products ;return problems of  #1 ;return #2 where  #1 is voluptatem ;return #3 reported after 1995 ;return ids of  #4,"[""SELECT['products']"", ""PROJECT['problems of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is voluptatem']"", ""FILTER['#3', 'reported after 1995']"", ""PROJECT['ids of #REF', '#4']""]","['select', 'project', 'comparative', 'filter', 'project']",train
SPIDER_train_5395,"What are the ids of the problems that are from the product ""voluptatem"" and are reported after 1995?",return products ;return #1 that  is  voluptatem ;return problems that  are  from  #2 ;return #3 reported after 1995 ;return ids of  #4,"[""SELECT['products']"", ""FILTER['#1', 'that is voluptatem']"", ""PROJECT['problems that are from #REF', '#2']"", ""FILTER['#3', 'reported after 1995']"", ""PROJECT['ids of #REF', '#4']""]","['select', 'filter', 'project', 'filter', 'project']",train
SPIDER_train_5396,"Find the first and last name of the staff members who reported problems from the product ""rem"" but not ""aut""?","return staff members ;return problems reported of #1 ;return products of #2 ;return #1 where #3 is rem ;return #1 where #3 is aut ;return #1 besides  #5 ;return #1 in  both #4 and  #6 ;return first names of #7 ;return last names of #7 ;return #8 ,  #9","[""SELECT['staff members']"", ""PROJECT['problems reported of #REF', '#1']"", ""PROJECT['products of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is rem']"", ""COMPARATIVE['#1', '#3', 'is aut']"", ""DISCARD['#1', '#5']"", ""INTERSECTION['#1', '#4', '#6']"", ""PROJECT['first names of #REF', '#7']"", ""PROJECT['last names of #REF', '#7']"", ""UNION['#8', '#9']""]","['select', 'project', 'project', 'comparative', 'comparative', 'discard', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_5397,"Which staff members who reported problems from the product ""rem"" but not ""aut""? Give me their first and last names.","return staff members ;return problems that #1 reported ;return products of #2 ;return #1 where #3 is rem ;return #4 where #3 is aut ;return #4 besides  #5 ;return first names of #6 ;return last names of #6 ;return #7 ,  #8","[""SELECT['staff members']"", ""PROJECT['problems that #REF reported', '#1']"", ""PROJECT['products of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is rem']"", ""COMPARATIVE['#4', '#3', 'is aut']"", ""DISCARD['#4', '#5']"", ""PROJECT['first names of #REF', '#6']"", ""PROJECT['last names of #REF', '#6']"", ""UNION['#7', '#8']""]","['select', 'project', 'project', 'comparative', 'comparative', 'discard', 'project', 'project', 'union']",train
SPIDER_train_5398,Find the products which have problems reported by both Lacey Bosco and Kenton Champlin?,return Lacey Bosco ;return Kenton Champlin ;return problems reported by #1 ;return problems reported by #2 ;return products ;return #5 of both #3 and  #4,"[""SELECT['Lacey Bosco']"", ""SELECT['Kenton Champlin']"", ""PROJECT['problems reported by #REF', '#1']"", ""PROJECT['problems reported by #REF', '#2']"", ""SELECT['products']"", ""INTERSECTION['#5', '#3', '#4']""]","['select', 'select', 'project', 'project', 'select', 'intersection']",train
SPIDER_train_5399,Which products have problems reported by both the staff named Lacey Bosco and the staff named Kenton Champlin?,return products ;return problems of #1 ;return #2 reported by the  staff  named  Lacey Bosco ;return #2 reported by the  staff  named  Kenton Champlin ;return #2 in both #3 and  #4 ;return products of #5,"[""SELECT['products']"", ""PROJECT['problems of #REF', '#1']"", ""FILTER['#2', 'reported by the staff named Lacey Bosco']"", ""FILTER['#2', 'reported by the staff named Kenton Champlin']"", ""INTERSECTION['#2', '#3', '#4']"", ""PROJECT['products of #REF', '#5']""]","['select', 'project', 'filter', 'filter', 'intersection', 'project']",train
SPIDER_train_54,"Show the census ranking of cities whose status are not ""Village"".",return cities ;return statuses of  #1 ;return #1 where #2 is  not  Village ;return census rankings of  #3,"[""SELECT['cities']"", ""PROJECT['statuses of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not Village']"", ""PROJECT['census rankings of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_540,What are the names of the top 8 countries by total invoice size and what are those sizes?,"return countries ;return total invoice sizes of #1 ;return the  8 highest of #2 ;return #1 where #2 is equal to any of #3 ;return names of #4 ;return #5 ,  #3","[""SELECT['countries']"", ""PROJECT['invoice sizes of #REF', '#1']"", ""GROUP['sum', '#2', '#1']"", ""AGGREGATE['max', '#3']"", ""COMPARATIVE['#1', '#3', 'is equal to any of #4']"", ""PROJECT['names of #REF', '#5']"", ""UNION['#6', '#4']""]","['select', 'project', 'group', 'aggregate', 'comparative', 'project', 'union']",train
SPIDER_train_5400,How many branches where have more than average number of memberships are there?,return branches ;return memberships of  #1 ;return average of  #2 ;return number of #2 for each #1 ;return #1 where  #4 is  higher than #3 ;return number of #5,"[""SELECT['branches']"", ""PROJECT['memberships of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#4', 'is higher than #3']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'aggregate', 'group', 'comparative', 'aggregate']",train
SPIDER_train_5401,What is the number of branches that have more than the average number of memberships?,return branches ;return memberships of #1 ;return number of  #2 for each #1 ;return average of #3 ;return #1 where #3 is  higher than #4 ;return number of  #5,"[""SELECT['branches']"", ""PROJECT['memberships of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['avg', '#3']"", ""COMPARATIVE['#1', '#3', 'is higher than #4']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'group', 'aggregate', 'comparative', 'aggregate']",train
SPIDER_train_5402,"Show name, address road, and city for all branches sorted by open year.","return branches ;return name of  #1 ;return address roads of  #1 ;return city of  #1 ;return #2 ,  #3 ,   #4 ; return open year of #1 ; return #5 sorted by #6","[""SELECT['branches']"", ""PROJECT['name of #REF', '#1']"", ""PROJECT['address roads of #REF', '#1']"", ""PROJECT['city of #REF', '#1']"", ""UNION['#2', '#3', '#4']"", ""PROJECT['open year of #REF', '#1']"", ""SORT['#5', '#6']""]","['select', 'project', 'project', 'project', 'union', 'project', 'sort']",train
SPIDER_train_5403,"What are the names, address roads, and cities of the branches ordered by opening year?","return branches ;return names of #1 ;return address roads of #1 ;return cities of #1 ;return opening years of #1 ;return #2 ,  #3 ,   #4 ;return #6 sorted by #5","[""SELECT['branches']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['address roads of #REF', '#1']"", ""PROJECT['cities of #REF', '#1']"", ""PROJECT['opening years of #REF', '#1']"", ""UNION['#2', '#3', '#4']"", ""SORT['#6', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_5404,What are names for top three branches with most number of membership?,return branches ;return memberships ;return number of  #2 for each  #1 ;return top three #3,"[""SELECT['branches']"", ""SELECT['memberships']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['top three #REF', '#3']""]","['select', 'select', 'group', 'project']",train
SPIDER_train_5405,What are the names for the 3 branches that have the most memberships?,return branches ;return 3 #1 with most memberships ;return names of  #2,"[""SELECT['branches']"", ""PROJECT['3 #REF with most memberships', '#1']"", ""PROJECT['names of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_5406,Show all distinct city where branches with at least 100 memberships are located.,return cities ;return branches in #1 ;return memberships of  #2 ;return number of  #3 for each  #1 ;return #1 where #4 is  at least 100 ;return distinct #5,"[""SELECT['cities']"", ""PROJECT['branches in #REF', '#1']"", ""PROJECT['memberships of #REF', '#2']"", ""GROUP['count', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is at least 100']"", ""PROJECT['distinct #REF', '#5']""]","['select', 'project', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_5407,What are the different cities that have more than 100 memberships?,return cities ;return memberships of  #1 ;return #1 where #2 is  higher than 100 ;return different #3,"[""SELECT['cities']"", ""PROJECT['memberships of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 100']"", ""PROJECT['different #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5408,List all open years when at least two shops are opened.,return open years ;return shops opened in #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is at least two,"[""SELECT['open years']"", ""PROJECT['shops opened in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_5409,What are the opening years in which at least two shops opened?,return opening years ;return shops that  opened in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least two,"[""SELECT['opening years']"", ""PROJECT['shops that opened in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_541,A list of the top 10 countries by average invoice size. List country name and average invoice size.,"return countries ;return invoice sizes of #1 ;return the  average of #2 for each #1 ;return the  top 10 highest of #3 ;return #1 where #3 is equal to any of #4 ;return names of #5 ;return #6 ,  #4","[""SELECT['countries']"", ""PROJECT['invoice sizes of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""AGGREGATE['max', '#3']"", ""COMPARATIVE['#1', '#3', 'is equal to any of #4']"", ""PROJECT['names of #REF', '#5']"", ""UNION['#6', '#4']""]","['select', 'project', 'group', 'aggregate', 'comparative', 'project', 'union']",train
SPIDER_train_5410,Show minimum and maximum amount of memberships for all branches opened in 2011 or located at city London.,"return branches ;return #1 opened in 2011 ;return #1 located in London ;return #2 or  #3 ;return memberships of  #4 ;return number of  #5 for each  #1 ;return minimum of  #6 ;return maximum of  #6 ;return #7 ,  #8","[""SELECT['branches']"", ""FILTER['#1', 'opened in 2011']"", ""FILTER['#1', 'located in London']"", ""UNION['#2', '#3']"", ""PROJECT['memberships of #REF', '#4']"", ""GROUP['count', '#5', '#1']"", ""AGGREGATE['min', '#6']"", ""AGGREGATE['max', '#6']"", ""UNION['#7', '#8']""]","['select', 'filter', 'filter', 'union', 'project', 'group', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_5411,What are the minimum and maximum membership amounts for all branches that either opened in 2011 or are located in London?,"return branches ;return #1 that  opened in 2011 ;return #1 that  are located in London ;return #2 or  #3 ;return membership amounts of #4 ;return minimum of #5 ;return maximum of #5 ;return #6 ,  #7","[""SELECT['branches']"", ""FILTER['#1', 'that opened in 2011']"", ""FILTER['#1', 'that are located in London']"", ""UNION['#2', '#3']"", ""PROJECT['membership amounts of #REF', '#4']"", ""AGGREGATE['min', '#5']"", ""AGGREGATE['max', '#5']"", ""UNION['#6', '#7']""]","['select', 'filter', 'filter', 'union', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_5412,Show the city and the number of branches opened before 2010 for each city.,"return cities ;return branches in #1 ;return #2 that  opened before 2010 ;return number of  #3 for each  #1 ;return #1 ,  #4","[""SELECT['cities']"", ""PROJECT['branches in #REF', '#1']"", ""FILTER['#2', 'that opened before 2010']"", ""GROUP['count', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'filter', 'group', 'union']",train
SPIDER_train_5413,"For each city, how many branches opened before 2010?",return cities ;return branches in #1 ;return #2 opened before 2010 ;return number of #3 for each #1,"[""SELECT['cities']"", ""PROJECT['branches in #REF', '#1']"", ""FILTER['#2', 'opened before 2010']"", ""GROUP['count', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'filter', 'group', 'union']",train
SPIDER_train_5414,How many different levels do members have?,return members ;return levels of  #1 ;return different #2 ;return number of #3,"[""SELECT['members']"", ""PROJECT['levels of #REF', '#1']"", ""PROJECT['different #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_5415,What are the different membership levels?,return memberships ;return different levels of  #1,"[""SELECT['memberships']"", ""PROJECT['different levels of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_5416,"Show card number, name, and hometown for all members in a descending order of level.","return members ;return card numbers of #1 ;return names of #1 ;return hometowns of #1 ;return levels of #1 ;return #2 ,  #3 ,   #4 ;return #6 sorted by #5 in descending order","[""SELECT['members']"", ""PROJECT['card numbers of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['hometowns of #REF', '#1']"", ""PROJECT['levels of #REF', '#1']"", ""UNION['#2', '#3', '#4']"", ""SORT['#6', '#5', 'in descending order']""]","['select', 'project', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_5417,"What are the card numbers, names, and hometowns of every member ordered by descending level?","return members ;return card numbers of  #1 ;return names of  #1 ;return hometowns of  #1 ;return levels of  #1 ;return #2 ,  #3 ,   #4 ;return #6 sorted by descending #5","[""SELECT['members']"", ""PROJECT['card numbers of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['hometowns of #REF', '#1']"", ""PROJECT['levels of #REF', '#1']"", ""UNION['#2', '#3', '#4']"", ""SORT['#6', '#5', 'descending']""]","['select', 'project', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_5418,Show the membership level with most number of members.,return memberships ;return levels of #1 ;return memberships of #2 ;return number of #3 for each #2 ;return #2 where #4 is  highest,"[""SELECT['memberships']"", ""PROJECT['levels of #REF', '#1']"", ""PROJECT['memberships of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""SUPERLATIVE['max', '#2', '#4']""]","['select', 'project', 'project', 'group', 'superlative']",train
SPIDER_train_5419,What is the membership level with the most people?,return membership levels ;return people of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['membership levels']"", ""PROJECT['people of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_542,What are the names of the countries and average invoice size of the top countries by size?,"return countries  ;return invoice sizes of #1 ;return the  average of #2 for each #1 ;return the  highest of #3 ;return #1 where #3 is equal to #4 ;return names of #5 ;return #6 ,  #4","[""SELECT['countries']"", ""PROJECT['invoice sizes of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""AGGREGATE['max', '#3']"", ""COMPARATIVE['#1', '#3', 'is equal to #4']"", ""PROJECT['names of #REF', '#5']"", ""UNION['#6', '#4']""]","['select', 'project', 'group', 'aggregate', 'comparative', 'project', 'union']",train
SPIDER_train_5420,Show all member names and registered branch names sorted by register year.,"return members ;return names  of #1 ;return registered branches ;return register years of #3 ;return names  of #3 ;return #2 ,  #5 ;return #6 sorted by #4","[""SELECT['members']"", ""PROJECT['names of #REF', '#1']"", ""SELECT['registered branches']"", ""PROJECT['register years of #REF', '#3']"", ""PROJECT['names of #REF', '#3']"", ""UNION['#2', '#5']"", ""SORT['#6', '#4']""]","['select', 'project', 'select', 'project', 'project', 'union', 'sort']",train
SPIDER_train_5421,What are the names of the members and branches at which they are registered sorted by year of registration?,"return members ;return names of  #1 ;return branches #1 are  registered at ;return year of  registration of #1 ;return #2 ,  #3 ;return #5 sorted by #4","[""SELECT['members']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['branches #REF are registered at', '#1']"", ""PROJECT['year of registration of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#5', '#4']""]","['select', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_5422,Show all branch names with the number of members in each branch registered after 2015.,"return branch  ;return when  #1 registered ;return #1 where #2 is  after 2015 ;return members ;return number of  #4 for each #3 ;return names of #3 ;return #6 ,  #5","[""SELECT['branch']"", ""PROJECT['when #REF registered', '#1']"", ""COMPARATIVE['#1', '#2', 'is after 2015']"", ""SELECT['members']"", ""GROUP['count', '#4', '#3']"", ""PROJECT['names of #REF', '#3']"", ""UNION['#6', '#5']""]","['select', 'project', 'comparative', 'select', 'group', 'project', 'union']",train
SPIDER_train_5423,"For each branch id, what are the names of the branches that were registered after 2015?",return branches ;return branch ids of  #1 ;return #2 registered after 2015 ;return names of  #3,"[""SELECT['branches']"", ""PROJECT['branch ids of #REF', '#1']"", ""FILTER['#2', 'registered after 2015']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'filter', 'project']",train
SPIDER_train_5424,Show member names without any registered branch.,return members ;return #1 without any registered branch ;return names of  #2,"[""SELECT['members']"", ""FILTER['#1', 'without any registered branch']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5425,What are the names of the members that have never registered at any branch?,return branches ;return members registered at #1 ;return members besides #2 ;return the  names of #3,"[""SELECT['branches']"", ""PROJECT['members registered at #REF', '#1']"", ""SELECT['members']"", ""DISCARD['#3', '#2']"", ""PROJECT['the names of #REF', '#4']""]","['select', 'project', 'select', 'discard', 'project']",train
SPIDER_train_5426,List the branch name and city without any registered members.,"return branch names ;return members of  #1 ;return #1 where  #2 are  registered ;return #1 besides #3 ;return cities of  #4 ;return #4 ,  #5","[""SELECT['branch names']"", ""PROJECT['members of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'are registered']"", ""DISCARD['#1', '#3']"", ""PROJECT['cities of #REF', '#4']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'discard', 'project', 'union']",train
SPIDER_train_5427,What are the names and cities of the branches that do not have any registered members?,"return branches ;return #1 that  do not have registered members ;return names of #2 ;return cities of #2 ;return #3 ,  #4","[""SELECT['branches']"", ""FILTER['#1', 'that do not have registered members']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['cities of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_5428,What is the name and open year for the branch with most number of memberships registered in 2016?,"return branches ;return memberships of  #1 ;return #2 registered in 2016 ;return number of  #3 for each  #1 ;return #1 where #4 is  highest ;return name of  #5 ;return open year of  #5 ;return #6 ,  #7","[""SELECT['branches']"", ""PROJECT['memberships of #REF', '#1']"", ""FILTER['#2', 'registered in 2016']"", ""GROUP['count', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']"", ""PROJECT['name of #REF', '#5']"", ""PROJECT['open year of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'filter', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_5429,What is the name and opening year for the branch that registered the most members in 2016?,"return branches ;return members registered of #1 ;return #2 in 2016 ;return number of  #3 for each #1 ;return #1 where #4 is  highest ;return name of #5 ;return opening year of #5 ;return #6 ,  #7","[""SELECT['branches']"", ""PROJECT['members registered of #REF', '#1']"", ""FILTER['#2', 'in 2016']"", ""GROUP['count', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']"", ""PROJECT['name of #REF', '#5']"", ""PROJECT['opening year of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'filter', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_5430,Show the member name and hometown who registered a branch in 2016.,"return those  who  registered a branch ;return #1 in 2016 ;return member name of  #2 ;return hometown of  #2 ;return #3 , #4","[""SELECT['those who registered a branch']"", ""FILTER['#1', 'in 2016']"", ""PROJECT['member name of #REF', '#2']"", ""PROJECT['hometown of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_5431,What are the member names and hometowns of those who registered at a branch in 2016?,"return members ;return #1 who  registered at a branch in 2016 ;return names of  #2 ;return hometowns of  #2 ;return #3 ,  #4","[""SELECT['members']"", ""FILTER['#1', 'who registered at a branch in 2016']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['hometowns of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_5432,Show all city with a branch opened in 2001 and a branch with more than 100 membership.,return cities ;return branches in #1 ;return #2 opened in 2001 ;return membership of #2 ;return #2 where #4 is  higher than 100 ;return #1 of both #3 and #5,"[""SELECT['cities']"", ""PROJECT['branches in #REF', '#1']"", ""FILTER['#2', 'opened in 2001']"", ""PROJECT['membership of #REF', '#2']"", ""COMPARATIVE['#2', '#4', 'is higher than 100']"", ""INTERSECTION['#1', '#3', '#5']""]","['select', 'project', 'filter', 'project', 'comparative', 'intersection']",train
SPIDER_train_5433,What are the cities that have a branch that opened in 2001 and a branch with more than 100 members?,return branches ;return #1 that  opened in 2001 ;return number of  members for each  #1 ;return #1 where #3 is  more than 100 ;return the  cities of #1 ;return #5 of both #2 and  #4,"[""SELECT['branches']"", ""FILTER['#1', 'that opened in 2001']"", ""PROJECT['members', '#1']"", ""GROUP['count', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is more than 100']"", ""PROJECT['the cities of #REF', '#1']"", ""INTERSECTION['#6', '#2', '#5']""]","['select', 'filter', 'project', 'group', 'comparative', 'project', 'intersection']",train
SPIDER_train_5434,Show all cities without a branch having more than 100 memberships.,return cities ;return branches of #1 ;return memberships of #2 ;return number of  #3 for each #2 ;return #2 where #4 is  more than  100 ;return number of  #5 for each #1 ;return #1 where #6 is  zero,"[""SELECT['cities']"", ""PROJECT['branches of #REF', '#1']"", ""PROJECT['memberships of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""COMPARATIVE['#2', '#4', 'is more than 100']"", ""GROUP['count', '#5', '#1']"", ""COMPARATIVE['#1', '#6', 'is zero']""]","['select', 'project', 'project', 'group', 'comparative', 'group', 'comparative']",train
SPIDER_train_5435,What are the cities that do not have any branches with more than 100 members?,return cities ;return branches in #1 ;return members of  #2 ;return number of  #3 for each  #2 ;return #1 where #4 is  at most 100,"[""SELECT['cities']"", ""PROJECT['branches in #REF', '#1']"", ""PROJECT['members of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""COMPARATIVE['#1', '#4', 'is at most 100']""]","['select', 'project', 'project', 'group', 'comparative']",train
SPIDER_train_5436,What is the sum of total pounds of purchase in year 2018 for all branches in London?,return branches ;return #1 in London ;return purchases of #2 ;return #3 in 2018 ;return pounds of #4 ;return the  sum of #5 for each #2 ;return the  sum of #6,"[""SELECT['branches']"", ""FILTER['#1', 'in London']"", ""PROJECT['purchases of #REF', '#2']"", ""FILTER['#3', 'in 2018']"", ""PROJECT['pounds of #REF', '#4']"", ""GROUP['sum', '#5', '#2']"", ""AGGREGATE['sum', '#6']""]","['select', 'filter', 'project', 'filter', 'project', 'group', 'aggregate']",train
SPIDER_train_5437,How many total pounds were purchased in the year 2018 at all London branches?,return branches ;return #1 in London ;return #2 in 2018 ;return pounds purchased at #3 ;return sum of  #4,"[""SELECT['branches']"", ""FILTER['#1', 'in London']"", ""FILTER['#2', 'in 2018']"", ""PROJECT['pounds purchased at #REF', '#3']"", ""AGGREGATE['sum', '#4']""]","['select', 'filter', 'filter', 'project', 'aggregate']",train
SPIDER_train_5438,What is the total number of purchases for members with level 6?,return members ;return #1 with level 6 ;return purchases for #2 ;return number of  #3,"[""SELECT['members']"", ""FILTER['#1', 'with level 6']"", ""PROJECT['purchases for #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_5439,What are the total purchases for members rated at level 6?,return members ;return #1 rated at level 6 ;return purchases of  #2 ;return number of  #3,"[""SELECT['members']"", ""FILTER['#1', 'rated at level 6']"", ""PROJECT['purchases of #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_544,What are the first and last names of the 5 customers who purchased something most recently?,"return customers ;return #1 sorted by purchased most recently ;return 5 of  #2 ;return first names of  #3 ;return last names of  #3 ;return #4 ,  #5","[""SELECT['customers']"", ""SORT['#1', '#1', 'purchased most recently']"", ""PROJECT['5 of #REF', '#2']"", ""PROJECT['first names of #REF', '#3']"", ""PROJECT['last names of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'sort', 'project', 'project', 'project', 'union']",train
SPIDER_train_5440,"Find the name of branches where have some members whose hometown is in Louisville, Kentucky and some in Hiram, Georgia.","return members ;return hometowns of #1 ;return #1 where #2 is in  Louisville ,  Kentucky ;return #1 where #2 is in  Hiram ,  Georgia ;return branches of #1 ; return #5 of both #3 and  #4 ;return names of #6","[""SELECT['members']"", ""PROJECT['hometowns of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is in Louisville , Kentucky']"", ""COMPARATIVE['#1', '#2', 'is in Hiram , Georgia']"", ""PROJECT['branches of #REF', '#1']"", ""INTERSECTION['#5', '#3', '#4']"", ""PROJECT['names of #REF', '#6']""]","['select', 'project', 'comparative', 'comparative', 'project', 'intersection', 'project']",train
SPIDER_train_5441,"What are the names of the branches that have some members with a hometown in Louisville, Kentucky and also those from Hiram, Goergia?","return branches ;return members of #1 ;return hometowns of #2 ;return #2 where #3 is  Louisville ,  Kentucky ;return #2 where #3 is  Hiram ,  Goergia ;return the  number of  #4 for each #1 ;return the  number of  #5 for each #1 ;return #1 where #6 is  at least one ;return #1 where #7 is  at least one ;return #1 in both #8 and #9 ;return the  names of #10","[""SELECT['branches']"", ""PROJECT['members of #REF', '#1']"", ""PROJECT['hometowns of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is Louisville , Kentucky']"", ""COMPARATIVE['#2', '#3', 'is Hiram , Goergia']"", ""GROUP['count', '#4', '#1']"", ""GROUP['count', '#5', '#1']"", ""COMPARATIVE['#1', '#6', 'is at least one']"", ""COMPARATIVE['#1', '#7', 'is at least one']"", ""INTERSECTION['#1', '#8', '#9']"", ""PROJECT['the names of #REF', '#10']""]","['select', 'project', 'project', 'comparative', 'comparative', 'group', 'group', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_5442,"list the card number of all members whose hometown address includes word ""Kentucky"".",return members ;return addresses of  #1 ;return #1 where #2 includes the  word Kentucky ;return card numbers of  #3,"[""SELECT['members']"", ""PROJECT['addresses of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'includes the word Kentucky']"", ""PROJECT['card numbers of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5443,What are the card numbers of members from Kentucky?,return members ;return #1 from Kentucky ;return card numbers of #2,"[""SELECT['members']"", ""FILTER['#1', 'from Kentucky']"", ""PROJECT['card numbers of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5445,How many students are there in total?,return students ;return number of  #1,"[""SELECT['students']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_5446,Find the number of voting records in total.,return voting records ;return number of #1,"[""SELECT['voting records']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_5447,How many voting records do we have?,return voting records ;return number of  #1,"[""SELECT['voting records']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_5448,Find the distinct number of president votes.,return president votes ;return distinct number of #1,"[""SELECT['president votes']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_5449,How many distinct president votes are recorded?,return president votes ;return distinct #1 ;return number of  #2,"[""SELECT['president votes']"", ""PROJECT['distinct #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_5450,Find the maximum age of all the students.,return students ;return age of  #1 ;return #1 where  #2 is  highest ;return age of  #3,"[""SELECT['students']"", ""PROJECT['age of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['age of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_5451,What is the oldest age among the students?,return students ;return ages of #1 ;return the  highest #2,"[""SELECT['students']"", ""PROJECT['ages of #REF', '#1']"", ""AGGREGATE['max', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_5452,Find the last names of students with major 50.,return students ;return major of  #1 ;return #1 where #2 is  50 ;return last names of  #3,"[""SELECT['students']"", ""PROJECT['major of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 50']"", ""PROJECT['last names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5453,What are the last names of students studying major 50?,return students ;return major of  #1 ;return #1 where #2 is  50 ;return last names of  #3,"[""SELECT['students']"", ""PROJECT['major of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 50']"", ""PROJECT['last names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5454,Find the first names of students with age above 22.,return students ;return ages of  #1 ;return #1 where #2 is  higher than 22 ;return first names of  #3,"[""SELECT['students']"", ""PROJECT['ages of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 22']"", ""PROJECT['first names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5455,What are the first names of all the students aged above 22?,return students ;return #1 that  are aged above 22 ;return the  first names of #2,"[""SELECT['students']"", ""FILTER['#1', 'that are aged above 22']"", ""PROJECT['the first names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5456,What are the majors of male (sex is M) students?,return students ;return sex of  #1 ;return #1 where #2 is  M ;return majors of  #3,"[""SELECT['students']"", ""PROJECT['sex of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is M']"", ""PROJECT['majors of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5457,List the major of each male student.,return male students ;return major of  #1,"[""SELECT['male students']"", ""PROJECT['major of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_5458,What is the average age of female (sex is F) students?,return students ;return sex of  #1 ;return #1 where #2 is  F ;return ages of  #3 ;return average of  #4,"[""SELECT['students']"", ""PROJECT['sex of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is F']"", ""PROJECT['ages of #REF', '#3']"", ""AGGREGATE['avg', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_5459,Find the average age of female students.,return students ;return #1 that are female ;return ages of #2 ;return average of #3,"[""SELECT['students']"", ""FILTER['#1', 'that are female']"", ""PROJECT['ages of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_546,What are the top 10 customers' first and last names by total number of orders and how many orders did they make?,"return customers ;return the number of orders for each #1 ;return #1 where #2 are the top 10 ;return the first names of #3 ;return the last names of #3 ;return #4 , #5 ;return the total number of orders of #1 ;return #6 sorted by #7 ;return the number of orders for each #3 ;return #8 , #9","[""SELECT['customers']"", ""PROJECT['orders', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'are the top 10']"", ""PROJECT['the first names of #REF', '#4']"", ""PROJECT['the last names of #REF', '#4']"", ""UNION['#5', '#6']"", ""PROJECT['orders of #REF', '#1']"", ""GROUP['count', '#8', '#1']"", ""GROUP['sum', '#9', '#1']"", ""SORT['#7', '#10']"", ""PROJECT['orders', '#4']"", ""GROUP['count', '#12', '#4']"", ""UNION['#11', '#13']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union', 'project', 'group', 'group', 'sort', 'project', 'group', 'union']",train
SPIDER_train_5460,What are the maximum and minimum age of students with major 600?,"return students ;return major of  #1 ;return #1 where #2 is  600 ;return ages of  #3 ;return maximum of  #4 ;return minimum of  #4 ;return #5 ,  #6","[""SELECT['students']"", ""PROJECT['major of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 600']"", ""PROJECT['ages of #REF', '#3']"", ""AGGREGATE['max', '#4']"", ""AGGREGATE['min', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_5461,Tell me the ages of the oldest and youngest students studying major 600.,"return students ;return major of  #1 ;return #1 where #2 is  600 ;return ages of  #3 ;return #1 where #4 is  highest ;return #1 where #4 is  lowest ;return #5 ,  #6 ;return ages of  #7","[""SELECT['students']"", ""PROJECT['major of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 600']"", ""PROJECT['ages of #REF', '#3']"", ""SUPERLATIVE['max', '#1', '#4']"", ""SUPERLATIVE['min', '#1', '#4']"", ""UNION['#5', '#6']"", ""PROJECT['ages of #REF', '#7']""]","['select', 'project', 'comparative', 'project', 'superlative', 'superlative', 'union', 'project']",train
SPIDER_train_5462,"Who are the advisors for students that live in a city with city code ""BAL""?",return students ;return cities #1 live in ;return city  codes of #2 ;return #1 where #3 is  BAL ;return advisors of #4,"[""SELECT['students']"", ""PROJECT['cities #REF live in', '#1']"", ""PROJECT['city codes of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is BAL']"", ""PROJECT['advisors of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_5463,"Show the advisors of the students whose city of residence has city code ""BAL"".",return students ;return cities of residence of  #1 ;return city  codes of #2 ;return #1 where #3 is  BAL ;return the  advisors of #4,"[""SELECT['students']"", ""PROJECT['cities of residence of #REF', '#1']"", ""PROJECT['city codes of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is BAL']"", ""PROJECT['the advisors of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_5464,What are the distinct secretary votes in the fall election cycle?,return fall election cycle ;return secretary votes in #1 ;return distinct #2,"[""SELECT['fall election cycle']"", ""PROJECT['secretary votes in #REF', '#1']"", ""PROJECT['distinct #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_5465,Return all the distinct secretary votes made in the fall election cycle.,return fall election cycle ;return secretary votes made in #1 ;return distinct #2,"[""SELECT['fall election cycle']"", ""PROJECT['secretary votes made in #REF', '#1']"", ""PROJECT['distinct #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_5466,What are the distinct president votes on 08/30/2015?,return president votes ;return #1 on  08/30/2015 ;return distinct #2,"[""SELECT['president votes']"", ""FILTER['#1', 'on 08/30/2015']"", ""PROJECT['distinct #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5467,Show all the distinct president votes made on 08/30/2015.,return president votes ;return #1 made on  08/30/2015 ;return distinct #2,"[""SELECT['president votes']"", ""FILTER['#1', 'made on 08/30/2015']"", ""PROJECT['distinct #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5468,Report the distinct registration date and the election cycle.,"return election cycles ;return registration dates of #1 ;return the  distinct #2 ;return #3 ,  #1","[""SELECT['election cycles']"", ""PROJECT['registration dates of #REF', '#1']"", ""PROJECT['the distinct #REF', '#2']"", ""UNION['#3', '#1']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_5469,What are the distinct registration dates and the election cycles?,"return distinct registration dates ;return election cycles ;return #1 ,  #2","[""SELECT['distinct registration dates']"", ""SELECT['election cycles']"", ""UNION['#1', '#2']""]","['select', 'select', 'union']",train
SPIDER_train_547,List the top 10 customers by total gross sales. List customers' first and last name and total gross sales.,"return customers ;return gross  sales  of #1 ;return sum of #2 for each #1 ;return the  10 highest #3 ;return #1 where #2 is  in #4 ;return first names of #5 ;return last names of #5 ;return gross  sales  of #5 ;return the  sum of #8 for each #5 ;return #6 ,  #7 ,   #9","[""SELECT['customers']"", ""PROJECT['gross sales of #REF', '#1']"", ""GROUP['sum', '#2', '#1']"", ""AGGREGATE['max', '#3']"", ""COMPARATIVE['#1', '#2', 'is in #4']"", ""PROJECT['first names of #REF', '#5']"", ""PROJECT['last names of #REF', '#5']"", ""PROJECT['gross sales of #REF', '#5']"", ""GROUP['sum', '#8', '#5']"", ""UNION['#6', '#7', '#9']""]","['select', 'project', 'group', 'aggregate', 'comparative', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_5470,Report the distinct president vote and the vice president vote.,"return president votes ;return the  distinct #1 ;return vice president votes ;return the  distinct #3 ;return #2 ,  #4","[""SELECT['president votes']"", ""PROJECT['the distinct #REF', '#1']"", ""SELECT['vice president votes']"", ""PROJECT['the distinct #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'select', 'project', 'union']",train
SPIDER_train_5471,List all the distinct president votes and the vice president votes.,"return president votes  ;return the  distinct #1 ;return vice president votes  ;return the  distinct #3 ;return #2 ,  #4","[""SELECT['president votes']"", ""PROJECT['the distinct #REF', '#1']"", ""SELECT['vice president votes']"", ""PROJECT['the distinct #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'select', 'project', 'union']",train
SPIDER_train_5472,Find the distinct last names of the students who have class president votes.,return students ;return class president votes of #1 ;return number of  #2 for each #1 ;return #1 where #3 is higher than zero ;return distinct last names of #4,"[""SELECT['students']"", ""PROJECT['class president votes of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than zero']"", ""PROJECT['distinct last names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_5473,What are the distinct last names of the students who have class president votes?,return students ;return #1 who  have  class president votes ;return distinct last names of  #2,"[""SELECT['students']"", ""FILTER['#1', 'who have class president votes']"", ""PROJECT['distinct last names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5474,Find the distinct first names of the students who have class senator votes.,return students ;return #1 with  class senator votes ;return first names of  #2 ;return #3 which  are  distinct,"[""SELECT['students']"", ""FILTER['#1', 'with class senator votes']"", ""PROJECT['first names of #REF', '#2']"", ""FILTER['#3', 'which are distinct']""]","['select', 'filter', 'project', 'filter']",train
SPIDER_train_5475,What are the distinct first names of the students who have class president votes?,return students ;return #1 who  have  class president votes ;return distinct first names of  #2,"[""SELECT['students']"", ""FILTER['#1', 'who have class president votes']"", ""PROJECT['distinct first names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5476,Find the distinct ages of students who have secretary votes in the fall election cycle.,return students ;return secretary votes of #1 ;return #2 in  the  fall election cycle ;return number of  #3 for each #1 ;return #1 where #4 is higher than zero ;return distinct ages of #5,"[""SELECT['students']"", ""PROJECT['secretary votes of #REF', '#1']"", ""FILTER['#2', 'in the fall election cycle']"", ""GROUP['count', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is higher than zero']"", ""PROJECT['distinct ages of #REF', '#5']""]","['select', 'project', 'filter', 'group', 'comparative', 'project']",train
SPIDER_train_5477,What are the distinct ages of students who have secretary votes in the fall election cycle?,return students ;return secretary votes of #1 ;return #2 in  the  fall election cycle ;return number of  #3 for each #1 ;return #1 where #4 is higher than zero ;return distinct ages of #5,"[""SELECT['students']"", ""PROJECT['secretary votes of #REF', '#1']"", ""FILTER['#2', 'in the fall election cycle']"", ""GROUP['count', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is higher than zero']"", ""PROJECT['distinct ages of #REF', '#5']""]","['select', 'project', 'filter', 'group', 'comparative', 'project']",train
SPIDER_train_5478,Find the distinct Advisor of students who have treasurer votes in the spring election cycle.,return students ;return #1 with votes in spring election cycle ;return distinct Advisor of  #2,"[""SELECT['students']"", ""FILTER['#1', 'with votes in spring election cycle']"", ""PROJECT['distinct Advisor of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5479,Who served as an advisor for students who have treasurer votes in the spring election cycle?,return students ;return #1 Who have treasurer votes in the  spring election cycle ;return advisor of #2,"[""SELECT['students']"", ""FILTER['#1', 'Who have treasurer votes in the spring election cycle']"", ""PROJECT['advisor of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_548,"What are the top 10 customers' first and last names with the highest gross sales, and also what are the sales?","return customers ;return gross sales  of #1 ;return the   10 highest of #2 ;return #1 where #2 is  any  of #3 ;return the   first names of #4 ;return the   last names of #4 ;return the   gross sales  of #4 ;return #5 ,  #6 ,   #7","[""SELECT['customers']"", ""PROJECT['gross sales of #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""COMPARATIVE['#1', '#2', 'is any of #3']"", ""PROJECT['the first names of #REF', '#4']"", ""PROJECT['the last names of #REF', '#4']"", ""PROJECT['the gross sales of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_5480,Find the distinct majors of students who have treasurer votes.,return students ;return #1 who  have  treasurer votes ;return distinct majors of  #2,"[""SELECT['students']"", ""FILTER['#1', 'who have treasurer votes']"", ""PROJECT['distinct majors of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5481,What are the distinct majors that students with treasurer votes are studying?,return students ;return #1 with treasurer votes ;return distinct majors of  #2,"[""SELECT['students']"", ""FILTER['#1', 'with treasurer votes']"", ""PROJECT['distinct majors of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5482,Find the first and last names of all the female (sex is F) students who have president votes.,"return students ;return sex of #1 ;return #1 where #2 is F ;return president votes of #1 ;return number of  #4 for each #1 ;return #1 where #5 is higher than zero ;return #1 in  both #3 and  #6 ;return first names of #7 ;return last names of #7 ;return #8 ,  #9","[""SELECT['students']"", ""PROJECT['sex of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is F']"", ""PROJECT['president votes of #REF', '#1']"", ""GROUP['count', '#4', '#1']"", ""COMPARATIVE['#1', '#5', 'is higher than zero']"", ""INTERSECTION['#1', '#3', '#6']"", ""PROJECT['first names of #REF', '#7']"", ""PROJECT['last names of #REF', '#7']"", ""UNION['#8', '#9']""]","['select', 'project', 'comparative', 'project', 'group', 'comparative', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_5483,What are the first and last names of all the female students who have president votes?,"return female students ;return #1 who  have  president votes ;return first names of  #2 ;return last names of  #2 ;return #3 ,  #4","[""SELECT['female students']"", ""FILTER['#1', 'who have president votes']"", ""PROJECT['first names of #REF', '#2']"", ""PROJECT['last names of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_5484,Find the first and last name of all the students of age 18 who have vice president votes.,"return students ;return ages of #1 ;return #1 where #2 is 18 ;return vice president votes of #1 ;return number of  #4 for each #1 ;return #1 where #5 is higher than zero ;return #1 in  both #3 and  #6 ;return first names of #7 ;return last names of #7 ;return #8 ,  #9","[""SELECT['students']"", ""PROJECT['ages of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 18']"", ""PROJECT['vice president votes of #REF', '#1']"", ""GROUP['count', '#4', '#1']"", ""COMPARATIVE['#1', '#5', 'is higher than zero']"", ""INTERSECTION['#1', '#3', '#6']"", ""PROJECT['first names of #REF', '#7']"", ""PROJECT['last names of #REF', '#7']"", ""UNION['#8', '#9']""]","['select', 'project', 'comparative', 'project', 'group', 'comparative', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_5485,What are the first names and last names of the students who are 18 years old and have vice president votes.,"return students ;return #1 who are 18 years old ;return #1 who have vice president votes ;return #1 of both #2 and #3 ;return first names  of #4 ;return last names  of #4 ;return #5 ,  #6","[""SELECT['students']"", ""FILTER['#1', 'who are 18 years old']"", ""FILTER['#1', 'who have vice president votes']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['first names of #REF', '#4']"", ""PROJECT['last names of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'filter', 'filter', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_5486,How many male (sex is M) students have class senator votes in the fall election cycle?,return fall election cycle ;return class senator votes in #1 ;return students who have #2 ;return sex of #3 ;return #3 where #4 is  M ;return number of  #5,"[""SELECT['fall election cycle']"", ""PROJECT['class senator votes in #REF', '#1']"", ""PROJECT['students who have #REF', '#2']"", ""PROJECT['sex of #REF', '#3']"", ""COMPARATIVE['#3', '#4', 'is M']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'project', 'project', 'comparative', 'aggregate']",train
SPIDER_train_5487,Count the number of male students who had class senator votes in the fall election cycle.,return students ;return #1 that are male ;return #2 who  had class senator votes ;return #3 in  the  fall election cycle ;return number of  #4,"[""SELECT['students']"", ""FILTER['#1', 'that are male']"", ""FILTER['#2', 'who had class senator votes']"", ""FILTER['#3', 'in the fall election cycle']"", ""AGGREGATE['count', '#4']""]","['select', 'filter', 'filter', 'filter', 'aggregate']",train
SPIDER_train_5488,Find the number of students whose city code is NYC and who have class senator votes in the spring election cycle.,return class senator votes ;return #1 in the  spring election cycle ;return the  students who have #2 ;return the  city codes of #3 ;return #3 where #4 is  NYC ;return the  number of  #5,"[""SELECT['class senator votes']"", ""FILTER['#1', 'in the spring election cycle']"", ""PROJECT['the students who have #REF', '#2']"", ""PROJECT['the city codes of #REF', '#3']"", ""COMPARATIVE['#3', '#4', 'is NYC']"", ""AGGREGATE['count', '#5']""]","['select', 'filter', 'project', 'project', 'comparative', 'aggregate']",train
SPIDER_train_5489,"Which students live in the city with code ""NYC"" and have class senator votes in the spring election cycle? Count the numbers.",return students ;return cities #1 live in ;return codes of  #2 ;return #1 where #3 is  NYC ;return #1 that  have  class senator votes ;return #5 in the  spring election cycle ;return #1 of  both #4 and  #6 ;return number of  #7,"[""SELECT['students']"", ""PROJECT['cities #REF live in', '#1']"", ""PROJECT['codes of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is NYC']"", ""FILTER['#1', 'that have class senator votes']"", ""FILTER['#5', 'in the spring election cycle']"", ""INTERSECTION['#1', '#4', '#6']"", ""AGGREGATE['count', '#7']""]","['select', 'project', 'project', 'comparative', 'filter', 'filter', 'intersection', 'aggregate']",train
SPIDER_train_549,List the top 5 genres by number of tracks. List genres name and total tracks.,"return tracks  ;return genres of #1 ;return number of  #1 for each #2 ;return the  5 highest of #3 ;return #2 where #3 is equal to any of #4 ;return names of #5 ;return #6 ,  #4","[""SELECT['tracks']"", ""PROJECT['genres of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""AGGREGATE['max', '#3']"", ""COMPARATIVE['#2', '#3', 'is equal to any of #4']"", ""PROJECT['names of #REF', '#5']"", ""UNION['#6', '#4']""]","['select', 'project', 'group', 'aggregate', 'comparative', 'project', 'union']",train
SPIDER_train_5490,"Find the average age of students who live in the city with code ""NYC"" and have secretary votes in the spring election cycle.",return students ;return cities of #1 ;return codes of #2 ;return #1 where #3 is NYC ;return secretary votes of #1 ;return #5 in  the  spring election cycle ;return number of  #6 for each #1 ;return #1 where #7 is higher than zero ;return #1 in  both #4 and  #8 ;return ages of #9 ;return average of #10,"[""SELECT['students']"", ""PROJECT['cities of #REF', '#1']"", ""PROJECT['codes of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is NYC']"", ""PROJECT['secretary votes of #REF', '#1']"", ""FILTER['#5', 'in the spring election cycle']"", ""GROUP['count', '#6', '#1']"", ""COMPARATIVE['#1', '#7', 'is higher than zero']"", ""INTERSECTION['#1', '#4', '#8']"", ""PROJECT['ages of #REF', '#9']"", ""AGGREGATE['avg', '#10']""]","['select', 'project', 'project', 'comparative', 'project', 'filter', 'group', 'comparative', 'intersection', 'project', 'aggregate']",train
SPIDER_train_5491,"What is the average age of students who have city code ""NYC"" and have secretary votes for the spring election cycle?",return students ;return #1 that have secretary votes for the  spring election cycle ;return city codes of #2 ;return #2 where #3 is NYC ;return ages of #4 ;return the  average of #5,"[""SELECT['students']"", ""FILTER['#1', 'that have secretary votes for the spring election cycle']"", ""PROJECT['city codes of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is NYC']"", ""PROJECT['ages of #REF', '#4']"", ""AGGREGATE['avg', '#5']""]","['select', 'filter', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_5492,Find the average age of female (sex is F) students who have secretary votes in the spring election cycle.,return spring election cycle ;return secretary votes in the #1 ;return female students who  have  #2 ;return age of  #3 ;return average of  #4,"[""SELECT['spring election cycle']"", ""PROJECT['secretary votes in the #REF', '#1']"", ""PROJECT['female students who have #REF', '#2']"", ""PROJECT['age of #REF', '#3']"", ""AGGREGATE['avg', '#4']""]","['select', 'project', 'project', 'project', 'aggregate']",train
SPIDER_train_5493,What is the average age of the female students with secretary votes in the spring election cycle?,return students ;return #1 that  are female ;return #2 with  secretary votes ;return #3 in  the   spring election cycle ;return ages of #4 ;return the   average of #5,"[""SELECT['students']"", ""FILTER['#1', 'that are female']"", ""FILTER['#2', 'with secretary votes']"", ""FILTER['#3', 'in the spring election cycle']"", ""PROJECT['ages of #REF', '#4']"", ""AGGREGATE['avg', '#5']""]","['select', 'filter', 'filter', 'filter', 'project', 'aggregate']",train
SPIDER_train_5494,Find the distinct first names of all the students who have vice president votes and whose city code is not PIT.,return students ;return #1 who  have  vice president votes ;return #2 and whose city code is  not  PIT ;return first names of  #3 ;return distinct #4,"[""SELECT['students']"", ""FILTER['#1', 'who have vice president votes']"", ""FILTER['#2', 'and whose city code is not PIT']"", ""PROJECT['first names of #REF', '#3']"", ""PROJECT['distinct #REF', '#4']""]","['select', 'filter', 'filter', 'project', 'project']",train
SPIDER_train_5495,What are the distinct first names of the students who have vice president votes and reside in a city whose city code is not PIT?,return students ;return vice president votes of #1 ;return number of  #2 for each #1 ;return #1 where #3 is higher than zero ;return cities of #1 ;return codes of #5 ;return #1 where #6 is PIT ;return #1 besides  #7 ;return #1 in  both #4 and  #8 ;return distinct first names of #9,"[""SELECT['students']"", ""PROJECT['vice president votes of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than zero']"", ""PROJECT['cities of #REF', '#1']"", ""PROJECT['codes of #REF', '#5']"", ""COMPARATIVE['#1', '#6', 'is PIT']"", ""DISCARD['#1', '#7']"", ""INTERSECTION['#1', '#4', '#8']"", ""PROJECT['distinct first names of #REF', '#9']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'comparative', 'discard', 'intersection', 'project']",train
SPIDER_train_5496,Find the distinct last names of all the students who have president votes and whose advisor is not 2192.,return students ;return president votes of #1 ;return number of  #2 for each #1 ;return #1 where #3 is higher than zero ;return advisors of #1 ;return #1 where #5 is 2192 ;return #1 besides  #6 ;return #1 in  both #4 and  #7 ;return distinct last names of #8,"[""SELECT['students']"", ""PROJECT['president votes of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than zero']"", ""PROJECT['advisors of #REF', '#1']"", ""COMPARATIVE['#1', '#5', 'is 2192']"", ""DISCARD['#1', '#6']"", ""INTERSECTION['#1', '#4', '#7']"", ""PROJECT['distinct last names of #REF', '#8']""]","['select', 'project', 'group', 'comparative', 'project', 'comparative', 'discard', 'intersection', 'project']",train
SPIDER_train_5497,What are the distinct last names of the students who have president votes but do not have 2192 as the advisor?,return students ;return #1 who have president votes ;return advisors of #2 ;return #2 where #3 is  not 2192 ;return distinct last names of #4,"[""SELECT['students']"", ""FILTER['#1', 'who have president votes']"", ""PROJECT['advisors of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is not 2192']"", ""PROJECT['distinct last names of #REF', '#4']""]","['select', 'filter', 'project', 'comparative', 'project']",train
SPIDER_train_5498,Find the distinct last names of all the students who have president votes and whose advisor is 8741.,return students ;return #1 who  have  president votes ;return #2 whose advisor is  8741 ;return distinct last names of  #3,"[""SELECT['students']"", ""FILTER['#1', 'who have president votes']"", ""FILTER['#2', 'whose advisor is 8741']"", ""PROJECT['distinct last names of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_5499,What are the distinct last names of the students who have president votes and have 8741 as the advisor?,return students ;return president votes of #1 ;return number of  #2 for each #1 ;return #1 where #3 is higher than zero ;return advisors of #1 ;return #1 where #5 is 8741 ;return #1 in  both #4 and  #6 ;return distinct last names of #7,"[""SELECT['students']"", ""PROJECT['president votes of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than zero']"", ""PROJECT['advisors of #REF', '#1']"", ""COMPARATIVE['#1', '#5', 'is 8741']"", ""INTERSECTION['#1', '#4', '#6']"", ""PROJECT['distinct last names of #REF', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'comparative', 'intersection', 'project']",train
SPIDER_train_55,"What are the census rankings of cities that do not have the status ""Village""?",return cities ;return statuses of  #1 ;return #1 where #2 is  not  Village ;return census rankings of  #3,"[""SELECT['cities']"", ""PROJECT['statuses of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not Village']"", ""PROJECT['census rankings of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_550,How many tracks does each genre have and what are the names of the top 5?,"return tracks ;return genres of #1 ;return number of  #1 for each #2 ;return the  5 highest of #3 ;return #2 where #3 is equal to any of #4 ;return names of #5 ;return #6 ,  #3","[""SELECT['tracks']"", ""PROJECT['genres of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""AGGREGATE['max', '#3']"", ""COMPARATIVE['#2', '#3', 'is equal to any of #4']"", ""PROJECT['names of #REF', '#5']"", ""UNION['#6', '#3']""]","['select', 'project', 'group', 'aggregate', 'comparative', 'project', 'union']",train
SPIDER_train_5500,"For each advisor, report the total number of students advised by him or her.",return advisors ;return students advised by #1 ;return number of #2 for each #1,"[""SELECT['advisors']"", ""PROJECT['students advised by #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_5502,Report all advisors that advise more than 2 students.,return advisors ;return students of  #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is higher than than  2,"[""SELECT['advisors']"", ""PROJECT['students of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than than 2']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_5503,Which advisors have more than two students?,return advisors ;return students of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  more than two,"[""SELECT['advisors']"", ""PROJECT['students of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than two']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_5504,Report all majors that have less than 3 students.,return majors ;return students in #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is lower than 3,"[""SELECT['majors']"", ""PROJECT['students in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is lower than 3']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_5505,What are the majors only less than three students are studying?,return majors ;return students studying #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  lower than three,"[""SELECT['majors']"", ""PROJECT['students studying #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is lower than three']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_5506,"For each election cycle, report the number of voting records.",return election cycles ;return voting records of  #1 ;return number of #2 for each #1,"[""SELECT['election cycles']"", ""PROJECT['voting records of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_5507,Count the number of voting records for each election cycle.,return election cycles ;return voting records of #1 ;return number of  #2 for each #1,"[""SELECT['election cycles']"", ""PROJECT['voting records of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_5508,Which major has the most students?,return major ;return students ;return number of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['major']"", ""SELECT['students']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'select', 'group', 'superlative']",train
SPIDER_train_5509,Find the major that is studied by the largest number of students.,return major ;return students in #1 ;return number of #2 for each #1 ;return #1 where  #3 is  highest,"[""SELECT['major']"", ""PROJECT['students in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_551,List every album's title.,return albums ;return titles of  #1,"[""SELECT['albums']"", ""PROJECT['titles of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_5510,What is the most common major among female (sex is F) students?,return major ;return students in #1 ;return sex of #2 ;return #2 where #3 is  F ;return number of #4 for each #1 ;return #1 where #5 is  highest,"[""SELECT['major']"", ""PROJECT['students in #REF', '#1']"", ""PROJECT['sex of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is F']"", ""GROUP['count', '#4', '#1']"", ""SUPERLATIVE['max', '#1', '#5']""]","['select', 'project', 'project', 'comparative', 'group', 'superlative']",train
SPIDER_train_5511,Find the major that is studied by the most female students.,return major ;return students ;return #2 that  are  female ;return number of #3 for each #1 ;return #1 where  #4 is  highest,"[""SELECT['major']"", ""SELECT['students']"", ""FILTER['#2', 'that are female']"", ""GROUP['count', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']""]","['select', 'select', 'filter', 'group', 'superlative']",train
SPIDER_train_5512,What is the city_code of the city that the most students live in?,return cities ;return students that  live in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return city_code of  #4,"[""SELECT['cities']"", ""PROJECT['students that live in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['city_code of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_5513,Return the code of the city that has the most students.,return cities ;return students in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return code of  #4,"[""SELECT['cities']"", ""PROJECT['students in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['code of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_5514,Report the distinct advisors who have more than 2 students.,return advisors ;return students of  #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is higher than 2 ;return distinct #4,"[""SELECT['advisors']"", ""PROJECT['students of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 2']"", ""PROJECT['distinct #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_5515,Which advisors are advising more than 2 students?,return advisors ;return students #1 are  advising ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than 2,"[""SELECT['advisors']"", ""PROJECT['students #REF are advising', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 2']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_5516,How many products are there?,return products ;return number of  #1,"[""SELECT['products']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_5517,Count the number of products.,return products ;return number of  #1,"[""SELECT['products']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_5518,How many colors are there?,return colors ;return number of #1,"[""SELECT['colors']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_5519,Count the number of colors.,return colors ;return number of #1,"[""SELECT['colors']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_552,What are the titles of all the albums?,return albums ;return titles of  #1,"[""SELECT['albums']"", ""PROJECT['titles of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_5520,How many characteristics are there?,return characteristics ;return number of  #1,"[""SELECT['characteristics']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_5521,Count the number of characteristics.,return characteristics ;return number of  #1,"[""SELECT['characteristics']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_5522,What are the names and buying prices of all the products?,"return products ;return names of  #1 ;return buying prices of  #1 ;return #2 ,  #3","[""SELECT['products']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['buying prices of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_5523,Return the names and typical buying prices for all products.,"return products ;return the  names of #1 ;return the  typical buying prices of #1 ;return #2 ,  #3","[""SELECT['products']"", ""PROJECT['the names of #REF', '#1']"", ""PROJECT['the typical buying prices of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_5524,List the description of all the colors.,return colors ;return descriptions of  #1,"[""SELECT['colors']"", ""PROJECT['descriptions of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_5525,What are the descriptions for each color?,return colors ;return descriptions of  #1,"[""SELECT['colors']"", ""PROJECT['descriptions of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_5526,Find the names of all the product characteristics.,return products ;return characteristics of  #1 ;return names of  #2,"[""SELECT['products']"", ""PROJECT['characteristics of #REF', '#1']"", ""PROJECT['names of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_5527,What are the different names of the product characteristics?,return product characteristics ;return different names of  #1,"[""SELECT['product characteristics']"", ""PROJECT['different names of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_5528,"What are the names of products with category ""Spices""?",return products ;return categories of  #1 ;return #1 where #2 is  Spices ;return names of  #3,"[""SELECT['products']"", ""PROJECT['categories of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Spices']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5529,Return the names of products in the category 'Spices'.,return products ;return categories of  #1 ;return #1 where #2 is  'Spices ;return names of  #3,"[""SELECT['products']"", ""PROJECT['categories of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Spices']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_553,List every album ordered by album title in ascending order.,return albums ;return titles of  #1 ;return #1 sorted by #2 in ascending order,"[""SELECT['albums']"", ""PROJECT['titles of #REF', '#1']"", ""SORT['#1', '#2', 'in ascending order']""]","['select', 'project', 'sort']",train
SPIDER_train_5530,"List the names, color descriptions and product descriptions of products with category ""Herbs"".","return products ;return categories of  #1 ;return #1 where  #2 is Herbs ;return names of  #3 ;return color descriptions  of  #3 ;return product descriptions  of  #3 ;return #4 ,  #5 , #6","[""SELECT['products']"", ""PROJECT['categories of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Herbs']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['color descriptions of #REF', '#3']"", ""PROJECT['product descriptions of #REF', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_5531,"What are the names, color descriptions, and product descriptions for products in the 'Herbs' category?","return products ;return #1 in the  'Herbs category ;return names of  #2 ;return color descriptions of  #2 ;return product descriptions of  #2 ;return #3 ,  #4 ,   #5","[""SELECT['products']"", ""FILTER['#1', 'in the Herbs category']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['color descriptions of #REF', '#2']"", ""PROJECT['product descriptions of #REF', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_5532,"How many products are there under the category ""Seeds""?",return products ;return categories of  #1 ;return #1 where  #2 is  Seeds ;return number of #3,"[""SELECT['products']"", ""PROJECT['categories of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Seeds']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_5533,Count the number of products in the category 'Seeds'.,return products ;return #1 in the category 'Seeds ;return Count of  #2,"[""SELECT['products']"", ""FILTER['#1', 'in the category Seeds']"", ""PROJECT['Count of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5534,"Find the number of products with category ""Spices"" and typically sold above 1000.",return products ;return category of #1 ;return #1 where #2 is Spices ;return typically sold of #3 ;return #3 where #4 is higher than 1000 ;return number of  #5,"[""SELECT['products']"", ""PROJECT['category of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Spices']"", ""PROJECT['typically sold of #REF', '#3']"", ""COMPARATIVE['#3', '#4', 'is higher than 1000']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'comparative', 'project', 'comparative', 'aggregate']",train
SPIDER_train_5535,How many products are in the 'Spices' category and have a typical price of over 1000?,return products ;return categories of #1 ;return #1 where #2 is  'Spices ;return typical prices of #3 ;return #3 where #4 is  over 1000 ;return number of  #5,"[""SELECT['products']"", ""PROJECT['categories of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Spices']"", ""PROJECT['typical prices of #REF', '#3']"", ""COMPARATIVE['#3', '#4', 'is over 1000']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'comparative', 'project', 'comparative', 'aggregate']",train
SPIDER_train_5536,"What is the category and typical buying price  of the product with name ""cumin""?","return products ;return #1 with name cumin ;return category of  #2 ;return buying price of  #2 ;return typical of  #4 ;return #3 ,  #5","[""SELECT['products']"", ""FILTER['#1', 'with name cumin']"", ""PROJECT['category of #REF', '#2']"", ""PROJECT['buying price of #REF', '#2']"", ""PROJECT['typical of #REF', '#4']"", ""UNION['#3', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_5537,Return the category code and typical price of 'cumin'.,"return 'cumin ;return category code of  #1 ;return typical price of  #1 ;return #2 ,  #3","[""SELECT['cumin']"", ""PROJECT['category code of #REF', '#1']"", ""PROJECT['typical price of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_5538,"Which category does the product named ""flax"" belong to?",return categories ;return products of #1 ;return #1 where #2 is  flax,"[""SELECT['categories']"", ""PROJECT['products of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is flax']""]","['select', 'project', 'comparative']",train
SPIDER_train_5539,What is the code of the category that the product with the name 'flax' belongs to?,return categories ;return products in #1 ;return names of  #2 ;return #1 where #3 is  'flax ;return code of  #4,"[""SELECT['categories']"", ""PROJECT['products in #REF', '#1']"", ""PROJECT['names of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is flax']"", ""PROJECT['code of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_554,What are the titles of all the albums alphabetically ascending?,return albums ;return titles of  #1 ;return #2 alphabetically ascending,"[""SELECT['albums']"", ""PROJECT['titles of #REF', '#1']"", ""FILTER['#2', 'alphabetically ascending']""]","['select', 'project', 'filter']",train
SPIDER_train_5540,What is the name of the product with the color description 'yellow'?,return products ;return color descriptions of  #1 ;return #1 where #2 is  'yellow ;return name of  #3,"[""SELECT['products']"", ""PROJECT['color descriptions of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is yellow']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5541,Give the name of the products that have a color description 'yellow'.,return products ;return color descriptions of  #1 ;return #1 where  #2 is  'yellow ;return names of  #3,"[""SELECT['products']"", ""PROJECT['color descriptions of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is yellow']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5542,Find the category descriptions of the products whose descriptions include letter 't'.,return products ;return descriptions of  #1 ;return #1 where #2 include the  letter 't ;return category of  #3 ;return description of  #4,"[""SELECT['products']"", ""PROJECT['descriptions of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'include the letter t']"", ""PROJECT['category of #REF', '#3']"", ""PROJECT['description of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_5543,What are the descriptions of the categories that products with product descriptions that contain the letter t are in?,return products ;return product descriptions of  #1 ;return #1 where #2 contain the  letter t ;return categories of  #3 ;return descriptions of  #4,"[""SELECT['products']"", ""PROJECT['product descriptions of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'contain the letter t']"", ""PROJECT['categories of #REF', '#3']"", ""PROJECT['descriptions of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_5544,"What is the color description of the product with name ""catnip""?",return products ;return names of  #1 ;return #1 where #2 is  catnip ;return color description of  #3,"[""SELECT['products']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is catnip']"", ""PROJECT['color description of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5545,Give the color description for the product 'catnip'.,return products ;return color descriptions of  #1 ;return #2 where  #1 is  'catnip,"[""SELECT['products']"", ""PROJECT['color descriptions of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is catnip']""]","['select', 'project', 'comparative']",train
SPIDER_train_5546,"What is the color code and description of the product named ""chervil""?","return products ;return #1 named chervil ;return color code of #2 ;return description of #2 ;return #3 ,  #4","[""SELECT['products']"", ""FILTER['#1', 'named chervil']"", ""PROJECT['color code of #REF', '#2']"", ""PROJECT['description of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_5547,Return the color code and description for the product with the name 'chervil'.,"return products ;return names of  #1 ;return #1 where  #2 is 'chervil ;return color code of  #3 ;return description of  #3 ;return #4 ,  #5","[""SELECT['products']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is chervil']"", ""PROJECT['color code of #REF', '#3']"", ""PROJECT['description of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_5548,Find the id and color description of the products with at least 2 characteristics.,"return products ;return characteristics of  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  at least 2 ;return id of  #4 ;return color description of  #4 ;return #5 ,   #6","[""SELECT['products']"", ""PROJECT['characteristics of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 2']"", ""PROJECT['id of #REF', '#4']"", ""PROJECT['color description of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_5549,What are the product ids and color descriptions for products with two or more characteristics?,"return products ;return #1 with two or  more characteristics ;return product ids for #2 ;return color descriptions for #2 ;return #3 ,  #4","[""SELECT['products']"", ""FILTER['#1', 'with two or more characteristics']"", ""PROJECT['product ids for #REF', '#2']"", ""PROJECT['color descriptions for #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_555,List every album whose title starts with A in alphabetical order.,return albums ;return titles of  #1 ;return #1 where  #2 starts with  A ;return #3 sorted by alphabetical order,"[""SELECT['albums']"", ""PROJECT['titles of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'starts with A']"", ""SORT['#3', '#3', 'alphabetical order']""]","['select', 'project', 'comparative', 'sort']",train
SPIDER_train_5550,"List all the product names with the color description ""white"".",return products ;return color descriptions of  #1 ;return #1 where  #2 is white ;return names of  #3,"[""SELECT['products']"", ""PROJECT['color descriptions of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is white']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5551,What are the names of products with 'white' as their color description?,return products ;return color descriptions of  #1 ;return #1 where #2 is  'white ;return names of  #3,"[""SELECT['products']"", ""PROJECT['color descriptions of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is white']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5552,"What are the name and typical buying and selling prices of the products that have color described as ""yellow""?","return products ;return #1 that  have  color described as yellow ;return names of  #2 ;return typical buying prices of  #2 ;return typical selling prices of  #2 ;return #3 ,  #4 ,   #5","[""SELECT['products']"", ""FILTER['#1', 'that have color described as yellow']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['typical buying prices of #REF', '#2']"", ""PROJECT['typical selling prices of #REF', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_5553,Return the names and typical buying and selling prices for products that have 'yellow' as their color description.,"return products ;return #1 that  have  'yellow as their color description ;return names of  #2 ;return typical buying prices for #2 ;return typical selling prices for #2 ;return #3 ,  #4 ,   #5","[""SELECT['products']"", ""FILTER['#1', 'that have yellow as their color description']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['typical buying prices for #REF', '#2']"", ""PROJECT['typical selling prices for #REF', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_5554,"How many characteristics does the product named ""sesame"" have?",return products ;return #1 named sesame ;return characteristics of  #2 ;return number of #3,"[""SELECT['products']"", ""FILTER['#1', 'named sesame']"", ""PROJECT['characteristics of #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_5555,Count the number of characteristics the product 'sesame' has.,return products ;return #1 that is 'sesame ;return characteristics of #2 ;return number of  #3,"[""SELECT['products']"", ""FILTER['#1', 'that is sesame']"", ""PROJECT['characteristics of #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_5556,"How many distinct characteristic names does the product ""cumin"" have?",return products ;return characteristic names of  #1 ;return #2 where  #1 is  cumin ;return distinct #3 ;return number of #4,"[""SELECT['products']"", ""PROJECT['characteristic names of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is cumin']"", ""PROJECT['distinct #REF', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_5557,Count the number of different characteristic names the product 'cumin' has.,return the 'cumin product ;return characteristic of  #1 ;return names of  #2 ;return the number of #3,"[""SELECT['the cumin product']"", ""PROJECT['characteristic of #REF', '#1']"", ""PROJECT['names of #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_5558,"What are all the characteristic names of product ""sesame""?",return products ;return characteristic names of  #1 ;return #2 where #1 is  sesame,"[""SELECT['products']"", ""PROJECT['characteristic names of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is sesame']""]","['select', 'project', 'comparative']",train
SPIDER_train_5559,Return the characteristic names of the 'sesame' product.,return products ;return characteristic names of  #1 ;return #2 where #1 is  'sesame,"[""SELECT['products']"", ""PROJECT['characteristic names of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is sesame']""]","['select', 'project', 'comparative']",train
SPIDER_train_556,What are the titles of all albums that start with A in alphabetical order?,return albums ;return titles of  #1 ;return #2 that  start with A ;return #3 sorted by alphabetical order,"[""SELECT['albums']"", ""PROJECT['titles of #REF', '#1']"", ""FILTER['#2', 'that start with A']"", ""SORT['#3', '#3', 'alphabetical order']""]","['select', 'project', 'filter', 'sort']",train
SPIDER_train_5560,"List all the characteristic names and data types of product ""cumin"".","return cumin ;return characteristic names of  #1 ;return data types of  #1 ;return #2 ,  #3","[""SELECT['cumin']"", ""PROJECT['characteristic names of #REF', '#1']"", ""PROJECT['data types of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_5561,What are the names and data types of the characteristics of the 'cumin' product?,"return products ;return #1 that  are 'cumin ;return characteristics of #2 ;return names of #3 ;return data types of #3 ;return #4 ,  #5","[""SELECT['products']"", ""FILTER['#1', 'that are cumin']"", ""PROJECT['characteristics of #REF', '#2']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['data types of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_5562,"List all characteristics of product named ""sesame"" with type code ""Grade"".",return products ;return #1 named sesame ;return type code of  #2 ;return #2 where  #3 is Grade ;return characteristics of  #4,"[""SELECT['products']"", ""FILTER['#1', 'named sesame']"", ""PROJECT['type code of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is Grade']"", ""PROJECT['characteristics of #REF', '#4']""]","['select', 'filter', 'project', 'comparative', 'project']",train
SPIDER_train_5563,What are the names of the characteristics of the product 'sesame' that have the characteristic type code 'Grade'?,return products ;return #1 which are  'sesame ;return characteristic type codes of  #1 ;return #3 which are  'Grade ;return #1 of  both #4 and  #2 ;return names of  characteristics of #5,"[""SELECT['products']"", ""FILTER['#1', 'which are sesame']"", ""PROJECT['characteristic type codes of #REF', '#1']"", ""FILTER['#3', 'which are Grade']"", ""INTERSECTION['#1', '#4', '#2']"", ""PROJECT['names of characteristics of #REF', '#5']""]","['select', 'filter', 'project', 'filter', 'intersection', 'project']",train
SPIDER_train_5564,"How many characteristics does the product named ""laurel"" have?",return products ;return characteristics of  #1 ;return #2 where  #1 is  laurel ;return number of #3,"[""SELECT['products']"", ""PROJECT['characteristics of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is laurel']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_5565,Count the number of characteristics of the product named 'laurel'.,return the product ;return #1 named 'laurel ;return number of characteristics of  #2,"[""SELECT['the product']"", ""FILTER['#1', 'named laurel']"", ""PROJECT['characteristics of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'filter', 'project', 'group', 'union']",train
SPIDER_train_5566,"Find the number of characteristics that the product ""flax"" has.",return characteristics ;return #1 of  the product flax ;return number of #2,"[""SELECT['characteristics']"", ""FILTER['#1', 'of the product flax']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_5567,Count the number of characteristics of the 'flax' product.,return 'flax product ;return characteristics of #1 ;return number of #2,"[""SELECT['flax product']"", ""PROJECT['characteristics of #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_5568,"Find the name of the products that have the color description ""red"" and have the characteristic name ""fast"".",return products ;return color descriptions of  #1 ;return #1 where  #2 is  red ;return characteristic names of  #1 ;return #1 where  #4 is  fast ;return #3 and #5 ;return names of  #6,"[""SELECT['products']"", ""PROJECT['color descriptions of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is red']"", ""PROJECT['characteristic names of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is fast']"", ""UNION['#3', '#5']"", ""PROJECT['names of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'comparative', 'union', 'project']",train
SPIDER_train_5569,What are the names of the products that have a color description of 'red' and the 'fast' characteristic?,return products ;return color descriptions of  #1 ;return #1 where #2 is  'red ;return characteristics of  #1 ;return #1 where #4 is  'fast ;return #1 of  both #3 and  #5 ;return names of  #6,"[""SELECT['products']"", ""PROJECT['color descriptions of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is red']"", ""PROJECT['characteristics of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is fast']"", ""INTERSECTION['#1', '#3', '#5']"", ""PROJECT['names of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'comparative', 'intersection', 'project']",train
SPIDER_train_557,List the customers first and last name of 10 least expensive invoices.,"return invoices ;return how expensive are #1 ;return the  10 lowest of #2 ;return #1 where #2 is equal to any of #3 ;return customers of #4 ;return first names of #5 ;return last names of #5 ;return #6 ,  #7","[""SELECT['invoices']"", ""PROJECT['how expensive are #REF', '#1']"", ""AGGREGATE['min', '#2']"", ""COMPARATIVE['#1', '#2', 'is equal to any of #3']"", ""PROJECT['customers of #REF', '#4']"", ""PROJECT['first names of #REF', '#5']"", ""PROJECT['last names of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_5570,"How many products have the characteristic named ""hot""?",return products ;return characteristics of  #1 ;return #1 where  #2 is hot ;return number of  #3,"[""SELECT['products']"", ""PROJECT['characteristics of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is hot']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_5571,Count the number of products with the 'hot' charactersitic.,return products ;return charactersitics of  #1 ;return #1 where #2 is  'hot ;return number of  #3,"[""SELECT['products']"", ""PROJECT['charactersitics of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is hot']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_5572,List the all the distinct names of the products with the characteristic name 'warm'.,return products ;return characteristic names of  #1 ;return #1 where  #2 is 'warm ;return names of  #3 ;return distinct #4,"[""SELECT['products']"", ""PROJECT['characteristic names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is warm']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['distinct #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_5573,What are the different product names for products that have the 'warm' characteristic:?,return products ;return characteristics of  #1 ;return #1 where #2 is  'warm ;return different product names of  #3,"[""SELECT['products']"", ""PROJECT['characteristics of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is warm']"", ""PROJECT['different product names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5574,"Find the number of the products that have their color described as ""red"" and have a characteristic named ""slow"".",return products ;return colors of #1 ;return characteristics of #1 ;return #1 where #2 is  red ;return #1 where #3 is  slow ;return #1 of  both #4 and #5 ;return number of #6,"[""SELECT['products']"", ""PROJECT['colors of #REF', '#1']"", ""PROJECT['characteristics of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is red']"", ""COMPARATIVE['#1', '#3', 'is slow']"", ""INTERSECTION['#1', '#4', '#5']"", ""AGGREGATE['count', '#6']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection', 'aggregate']",train
SPIDER_train_5575,How many products have the color description 'red' and the characteristic name 'slow'?,return products ;return color descriptions of  #1 ;return #1 where  #2 is  'red ;return characteristic names of  #1 ;return #1 where  #4 is  'slow ;return #3 and #5 ;return number of #6,"[""SELECT['products']"", ""PROJECT['color descriptions of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is red']"", ""PROJECT['characteristic names of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is slow']"", ""UNION['#3', '#5']"", ""AGGREGATE['count', '#6']""]","['select', 'project', 'comparative', 'project', 'comparative', 'union', 'aggregate']",train
SPIDER_train_5576,"Count the products that have the color description ""white"" or have the characteristic name ""hot"".",return products ;return #1 that  have  color description white ;return #1 that  have  characteristic name hot ;return number of #2 ;return number of #3 ;return sum of  #4 and #5,"[""SELECT['products']"", ""FILTER['#1', 'that have color description white']"", ""FILTER['#1', 'that have characteristic name hot']"", ""AGGREGATE['count', '#2']"", ""AGGREGATE['count', '#3']"", ""ARITHMETIC['sum', '#4', '#5']""]","['select', 'filter', 'filter', 'aggregate', 'aggregate', 'arithmetic']",train
SPIDER_train_5577,How many products have their color described as 'white' or have a characteristic with the name 'hot'?,return products ;return colors of  #1 ;return #1 where  #2 is  'white ;return characteristic of  #1 ;return names of  #4 ;return #1 where  #5 is  'hot ;return #3 or  #6 ;return number of #7,"[""SELECT['products']"", ""PROJECT['colors of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is white']"", ""PROJECT['characteristic of #REF', '#1']"", ""PROJECT['names of #REF', '#4']"", ""COMPARATIVE['#1', '#5', 'is hot']"", ""UNION['#3', '#6']"", ""AGGREGATE['count', '#7']""]","['select', 'project', 'comparative', 'project', 'project', 'comparative', 'union', 'aggregate']",train
SPIDER_train_5578,"What is the unit of measuerment of the product category code ""Herbs""?",return product category code Herbs ;return unit of  measuerment of #1,"[""SELECT['product category code Herbs']"", ""PROJECT['unit of measuerment of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_5579,Return the unit of measure for 'Herb' products.,return product ;return #1 that is 'Herb ;return unit of measure of  #2,"[""SELECT['product']"", ""FILTER['#1', 'that is Herb']"", ""PROJECT['unit of measure of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_558,What are the first and last names of the customers with the 10 cheapest invoices?,"return invoices ;return 10 cheapest of  #1 ;return customers of  #2 ;return first names of  #3 ;return last names of  #3 ;return #4 ,  #5","[""SELECT['invoices']"", ""PROJECT['10 cheapest of #REF', '#1']"", ""PROJECT['customers of #REF', '#2']"", ""PROJECT['first names of #REF', '#3']"", ""PROJECT['last names of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_5580,"Find the product category description of the product category with code ""Spices"".",return product categories ;return codes of  #1 ;return #1 where  #2 is  Spices ;return description of  #3,"[""SELECT['product categories']"", ""PROJECT['codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Spices']"", ""PROJECT['description of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5581,What is the description of the product category with the code 'Spices'?,return product categories ;return codes of #1 ;return #1 where #2 is  'Spices ;return description of #3,"[""SELECT['product categories']"", ""PROJECT['codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Spices']"", ""PROJECT['description of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5582,"What is the product category description and unit of measurement of category ""Herbs""?","return the  category Herbs ;return the  product category description of #1 ;return the  unit of measurement of  #1 ;return #2 ,  #3","[""SELECT['the category Herbs']"", ""PROJECT['the product category description of #REF', '#1']"", ""PROJECT['the unit of measurement of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_5583,Return the description and unit of measurement for products in the 'Herbs' category.,"return products ;return categories of  #1 ;return #1 where  #2 is 'Herbs ;return descriptions of  #3 ;return units of  measurement of #3 ;return #4 ,  #5","[""SELECT['products']"", ""PROJECT['categories of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Herbs']"", ""PROJECT['descriptions of #REF', '#3']"", ""PROJECT['units of measurement of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_5584,"What is the unit of measurement of product named ""cumin""?",return products ;return the  #1 named cumin ;return the  unit of measurement of  #2,"[""SELECT['products']"", ""PROJECT['the #REF named cumin', '#1']"", ""PROJECT['the unit of measurement of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_5585,Give the unit of measure for the product with the name 'cumin'.,return products ;return units of  measure of #1 ;return #2 where  #1 is  'cumin,"[""SELECT['products']"", ""PROJECT['units of measure of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is cumin']""]","['select', 'project', 'comparative']",train
SPIDER_train_5586,"Find the unit of measurement and product category code of product named ""chervil"".","return product ;return #1 named chervil ;return unit of  measurement of #2 ;return product category code of  #2 ;return #3 ,   #4","[""SELECT['product']"", ""FILTER['#1', 'named chervil']"", ""PROJECT['unit of measurement of #REF', '#2']"", ""PROJECT['product category code of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_5587,What are the unit of measure and category code for the 'chervil' product?,"return 'chervil product ;return unit of  measure of #1 ;return category code of  #1 ;return #2 ,  #3","[""SELECT['chervil product']"", ""PROJECT['unit of measure of #REF', '#1']"", ""PROJECT['category code of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_5588,"Find the product names that are colored 'white' but do not have unit of measurement ""Handful"".",return products ;return #1 that  are  colored 'white ;return #2 that  do not  have  unit of  measurement Handful ;return names of  #3,"[""SELECT['products']"", ""FILTER['#1', 'that are colored white']"", ""FILTER['#2', 'that do not have unit of measurement Handful']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_5589,What are the names of products that are not 'white' in color and are not measured by the unit 'Handful'?,return products ;return colors of #1 ;return #1 where #2 is  not 'white ;return units #1 are measured in ;return #1 where #4 is  not 'Handful ;return names of #1 ; return #6 of both #3 and #5,"[""SELECT['products']"", ""PROJECT['colors of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not white']"", ""PROJECT['units #REF are measured in', '#1']"", ""COMPARATIVE['#1', '#4', 'is not Handful']"", ""PROJECT['names of #REF', '#1']"", ""INTERSECTION['#6', '#3', '#5']""]","['select', 'project', 'comparative', 'project', 'comparative', 'project', 'intersection']",train
SPIDER_train_559,"List total amount of  invoice from Chicago, IL.",return invoices ;return #1 from Chicago IL ;return amounts of  #2 ;return sum of  #3,"[""SELECT['invoices']"", ""FILTER['#1', 'from Chicago IL']"", ""PROJECT['amounts of #REF', '#2']"", ""AGGREGATE['sum', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_5590,What is the description of the color for most products?,return colors ;return products with #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return description of  #4,"[""SELECT['colors']"", ""PROJECT['products with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['description of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_5591,Return the color description that is most common across all products.,return color descriptions ;return products with  #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['color descriptions']"", ""PROJECT['products with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_5592,What is the description of the color used by least products?,return colors ;return products #1 are  used ;return number of  #2 for each  #1 ;return #1 where #3 is  lowest ;return description of  #4,"[""SELECT['colors']"", ""PROJECT['products #REF are used', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['description of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_5593,Give the color description that is least common across products.,return color descriptions ;return products with  #1 ;return number of  #2 for each #1 ;return #1 where #3 is  lowest,"[""SELECT['color descriptions']"", ""PROJECT['products with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_5594,What is the characteristic name used by most number of the products?,return products ;return characteristic names of #1 ;return number of  #1 for each #2 ;return #2 where #3 is the  highest,"[""SELECT['products']"", ""PROJECT['characteristic names of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""COMPARATIVE['#2', '#3', 'is the highest']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_5595,Return the name of the characteristic that is most common across all products.,return characteristic ;return products with  #1 ;return number of #2 for each #1 ;return #1 where #3 is  highest ;return name of #4,"[""SELECT['characteristic']"", ""PROJECT['products with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_5596,"What are the names, details and data types of the characteristics which are never used by any product?","return characteristics ;return #1 which are  used by products ;return #1 besides  #2 ;return the  names of  #3 ;return the  details of  #3 ;return the  data types of  #3 ;return #4 ,  #5 ,   #6","[""SELECT['characteristics']"", ""FILTER['#1', 'which are used by products']"", ""DISCARD['#1', '#2']"", ""PROJECT['the names of #REF', '#3']"", ""PROJECT['the details of #REF', '#3']"", ""PROJECT['the data types of #REF', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'filter', 'discard', 'project', 'project', 'project', 'union']",train
SPIDER_train_5597,"Give the names, details, and data types of characteristics that are not found in any product.","return characteristics ;return #1 in products ;return #1 besides #2 ;return names of  #3 ;return details of  #3 ;return data types of  #3 ;return #4 ,   #5 , #6","[""SELECT['characteristics']"", ""FILTER['#1', 'in products']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['details of #REF', '#3']"", ""PROJECT['data types of #REF', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'filter', 'discard', 'project', 'project', 'project', 'union']",train
SPIDER_train_5598,What are characteristic names used at least twice across all products?,return products ;return characteristic names of #1 ;return number of  #1 for each #2 ;return #2 where #3 is  at least two,"[""SELECT['products']"", ""PROJECT['characteristic names of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""COMPARATIVE['#2', '#3', 'is at least two']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_5599,Give the names of characteristics that are in two or more products?,return characteristics ;return products with  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  two or  more ;return names of  #4,"[""SELECT['characteristics']"", ""PROJECT['products with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is two or more']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_56,which course has most number of registered students?,return courses ;return registered students of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['courses']"", ""PROJECT['registered students of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_560,"What are the total amount of money in the invoices billed from Chicago, Illinois?",return invoices ;return #1 billed from  Chicago Illinois ;return amount of  money in #2 ;return sum of  #3,"[""SELECT['invoices']"", ""FILTER['#1', 'billed from Chicago Illinois']"", ""PROJECT['amount of money in #REF', '#2']"", ""AGGREGATE['sum', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_5600,How many colors are never used by any product?,return products ;return colors used by #1 ;return colors besides #2 ;return number of  #3,"[""SELECT['products']"", ""PROJECT['colors used by #REF', '#1']"", ""SELECT['colors']"", ""DISCARD['#3', '#2']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'select', 'discard', 'aggregate']",train
SPIDER_train_5601,Count the number of colors that are not used in any products.,return colors ;return #1 not  used in any products ;return number of  #2,"[""SELECT['colors']"", ""FILTER['#1', 'not used in any products']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_5602,How many events are there?,return events ;return number of  #1,"[""SELECT['events']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_5603,List all the event names by year from the most recent to the oldest.,return events ;return names of  #1 ;return years of  #1 ;return #2 sorted by #3 from most recent to  oldest,"[""SELECT['events']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['years of #REF', '#1']"", ""SORT['#2', '#3', 'from most recent to oldest']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_5604,What is the name of the event that happened in the most recent year?,return event ;return year of #1 ;return the  #1 where #2 is the   highest ;return the  name of #3,"[""SELECT['event']"", ""PROJECT['year of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the highest']"", ""PROJECT['the name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5605,How many stadiums are there?,return stadiums ;return number of #1,"[""SELECT['stadiums']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_5606,Find the name of the stadium that has the maximum capacity.,return stadiums ;return capacity of  #1 ;return #1 where  #2 is  highest ;return name of  #3,"[""SELECT['stadiums']"", ""PROJECT['capacity of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_5607,Find the names of stadiums whose capacity is smaller than the average capacity.,return stadiums ;return capacity of  #1 ;return the average of  #2 ;return #1 where  #2 is  less than  #3 ;return the name of  #4,"[""SELECT['stadiums']"", ""PROJECT['capacity of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is less than #3']"", ""PROJECT['the name of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_5608,Find the country that has the most stadiums.,return countries ;return stadiums of #1 ;return number of  #2 for each #1 ;return #1 where #3 is highest,"[""SELECT['countries']"", ""PROJECT['stadiums of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_5609,Which country has at most 3 stadiums listed?,return countries ;return stadiums that  #1 listed ;return number of  #2 for each #1 ;return #1 where #3 is  at most 3,"[""SELECT['countries']"", ""PROJECT['stadiums that #REF listed', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at most 3']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_561,"List the number of invoices from Chicago, IL.",return invoices ;return #1 from Chicago IL ;return number of  #2,"[""SELECT['invoices']"", ""FILTER['#1', 'from Chicago IL']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_5610,Which country has both stadiums with capacity greater than 60000 and stadiums with capacity less than 50000?,return countries ;return stadiums of  #1 ;return capacities of  #2 ;return #1 where #2 is  higher than 60000 ;return #1 where #2 is  lower than 50000 ;return #1 of  both #4 and  #5,"[""SELECT['countries']"", ""PROJECT['stadiums of #REF', '#1']"", ""PROJECT['capacities of #REF', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than 60000']"", ""COMPARATIVE['#1', '#2', 'is lower than 50000']"", ""INTERSECTION['#1', '#4', '#5']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection']",train
SPIDER_train_5611,How many cities have a stadium that was opened before the year of 2006?,return stadiums ;return year opened of #1 ;return #1 where #2 is lower than 2006 ;return cities of #3 ;return number of  #4,"[""SELECT['stadiums']"", ""PROJECT['year opened of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is lower than 2006']"", ""PROJECT['cities of #REF', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_5612,How many stadiums does each country have?,return countries ;return stadiums in #1 ;return number of #2 for each #1,"[""SELECT['countries']"", ""PROJECT['stadiums in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_5613,Which countries do not have a stadium that was opened after 2006?,return stadiums ;return #1 opened after 2006 ;return countries of #2 ;return countries besides #3,"[""SELECT['stadiums']"", ""FILTER['#1', 'opened after 2006']"", ""PROJECT['countries of #REF', '#2']"", ""SELECT['countries']"", ""DISCARD['#4', '#3']""]","['select', 'filter', 'project', 'select', 'discard']",train
SPIDER_train_5614,"How many stadiums are not in country ""Russia""?",return stadiums ;return #1 that  are  in country Russia ;return #1 besides #2 ;return number of  #3,"[""SELECT['stadiums']"", ""FILTER['#1', 'that are in country Russia']"", ""DISCARD['#1', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'discard', 'aggregate']",train
SPIDER_train_5615,"Find the names of all swimmers, sorted by their 100 meter scores in ascending order.",return swimmers ;return names of #1 ;return scores of #1 ;return #3 that are 100 meters ;return #2 sorted by #4,"[""SELECT['swimmers']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['scores of #REF', '#1']"", ""FILTER['#3', 'that are 100 meters']"", ""SORT['#2', '#4']""]","['select', 'project', 'project', 'filter', 'sort']",train
SPIDER_train_5616,How many different countries are all the swimmers from?,return swimmers ;return countries of  #1 ;return different #2 ;return number of #3,"[""SELECT['swimmers']"", ""PROJECT['countries of #REF', '#1']"", ""PROJECT['different #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_5617,List countries that have more than one swimmer.,return countries ;return swimmers of  #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is higher than one,"[""SELECT['countries']"", ""PROJECT['swimmers of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than one']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_5618,"Find all 200 meter and 300 meter results of swimmers with nationality ""Australia"".","return swimmers ;return nationalities of #1 ;return #1 where #2 is Australia ;return 200 meter  results of #3 ;return 300 meter  results of #3 ;return #4 ,  #5","[""SELECT['swimmers']"", ""PROJECT['nationalities of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Australia']"", ""PROJECT['200 meter results of #REF', '#3']"", ""PROJECT['300 meter results of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_5619,"Find the names of swimmers who has a result of ""win"".",return swimmers ;return #1 with  result of  win ;return the name of  #2,"[""SELECT['swimmers']"", ""FILTER['#1', 'with result of win']"", ""PROJECT['the name of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_562,"How many invoices were billed from Chicago, IL?",return invoices ;return #1 that  were billed from Chicago IL ;return number of  #2,"[""SELECT['invoices']"", ""FILTER['#1', 'that were billed from Chicago IL']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_5620,What is the name of the stadium which held the most events?,return stadium ;return events held in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return name of  #4,"[""SELECT['stadium']"", ""PROJECT['events held in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_5621,"Find the name and capacity of the stadium where the event named ""World Junior"" happened.","return stadiums ;return events of #1 ;return name of #2 ;return #1 where #3 is World Junior ;return name of #4 ;return capacity of #4 ;return #5 ,  #6","[""SELECT['stadiums']"", ""PROJECT['events of #REF', '#1']"", ""PROJECT['name of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is World Junior']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['capacity of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_5622,Find the names of stadiums which have never had any event.,return stadiums ;return #1 which  have  had events ;return #1 besides #2 ;return names of  #3,"[""SELECT['stadiums']"", ""FILTER['#1', 'which have had events']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_5623,Find the name of the swimmer who has the most records.,return swimmers ;return records of  #1 ;return number of #2 ;return #1 where  #3 is  highest ;return name of  #4,"[""SELECT['swimmers']"", ""PROJECT['records of #REF', '#1']"", ""AGGREGATE['count', '#2']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'aggregate', 'superlative', 'project']",train
SPIDER_train_5624,Find the name of the swimmer who has at least 2 records.,return swimmers ;return records of  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  at least 2 ;return name of  #4,"[""SELECT['swimmers']"", ""PROJECT['records of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 2']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_5625,"Find the name and nationality of the swimmer who has won (i.e., has a result of ""win"") more than 1 time.","return swimmers ;return win of #1 ;return number of  #2 for each #1 ;return #1 where #3 is higher than 1 ;return name of #4 ;return nationality of #4 ;return #5 ,  #6","[""SELECT['swimmers']"", ""PROJECT['win of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 1']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['nationality of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_5626,Find the names of the swimmers who have no record.,return swimmers ;return #1 with  records ;return #1 besides #2 ;return names of  #3,"[""SELECT['swimmers']"", ""FILTER['#1', 'with records']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_5627,"Find the names of the swimmers who have both ""win"" and ""loss"" results in the record.",return swimmers ;return results of #1 ;return #1 where #2 is win ;return #1 where #2 is loss ;return #1 in  both #3 and  #4 ;return names of #5,"[""SELECT['swimmers']"", ""PROJECT['results of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is win']"", ""COMPARATIVE['#1', '#2', 'is loss']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_5628,Find the names of stadiums that some Australian swimmers have been to.,return stadiums ;return swimmers that  have been to  #1 ;return #1 where #2 are Australian ;return names of #3,"[""SELECT['stadiums']"", ""PROJECT['swimmers that have been to #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'are Australian']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5629,Find the names of stadiums that the most swimmers have been to.,return stadiums ;return swimmers who  have  been to  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  highest ;return names of  #4,"[""SELECT['stadiums']"", ""PROJECT['swimmers who have been to #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_563,"List the number of invoices from the US, grouped by state.",return invoices ;return #1 from the  US ;return states of  #2 ;return number of  #1 for each  #3,"[""SELECT['invoices']"", ""FILTER['#1', 'from the US']"", ""PROJECT['states of #REF', '#2']"", ""GROUP['count', '#1', '#3']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'group', 'union']",train
SPIDER_train_5630,Find all details for each swimmer.,return swimmers ;return details of #1,"[""SELECT['swimmers']"", ""PROJECT['details of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_5631,What is the average capacity of the stadiums that were opened in year 2005?,return stadiums ;return years #1 opened ;return #1 where #2 is  2005 ;return capacities of  #3 ;return average of  #4,"[""SELECT['stadiums']"", ""PROJECT['years #REF opened', '#1']"", ""COMPARATIVE['#1', '#2', 'is 2005']"", ""PROJECT['capacities of #REF', '#3']"", ""AGGREGATE['avg', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_5632,How many railways are there?,return railways ;return number of  #1,"[""SELECT['railways']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_5633,List the builders of railways in ascending alphabetical order.,return railways ;return builders of  #1 ;return #2 sorted by alphabetical order,"[""SELECT['railways']"", ""PROJECT['builders of #REF', '#1']"", ""SORT['#2', '#2', 'alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_5634,List the wheels and locations of the railways.,"return railways ;return wheels of  #1 ;return locations of  #1 ;return #2 ,  #3","[""SELECT['railways']"", ""PROJECT['wheels of #REF', '#1']"", ""PROJECT['locations of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_5635,"What is the maximum level of managers in countries that are not ""Australia""?",return managers ;return countries of  #1 ;return #1 where #2 is  not  Australia ;return levels of  #3 ;return maximum of  #4,"[""SELECT['managers']"", ""PROJECT['countries of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not Australia']"", ""PROJECT['levels of #REF', '#3']"", ""AGGREGATE['max', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_5636,What is the average age for all managers?,return managers ;return age of  #1 ;return average of  #2,"[""SELECT['managers']"", ""PROJECT['age of #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_5637,What are the names of managers in ascending order of level?,return managers ;return names of  #1 ;return levels of  #1 ;return #2 sorted by #3 in ascending order,"[""SELECT['managers']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['levels of #REF', '#1']"", ""SORT['#2', '#3', 'in ascending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_5638,What are the names and arrival times of trains?,"return trains ;return names of  #1 ;return arrival times of  #1 ;return #2 ,  #3","[""SELECT['trains']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['arrival times of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_5639,What is the name of the oldest manager?,return managers ;return oldness of #1 ;return #1 where #2 is highest ;return name of #3,"[""SELECT['managers']"", ""PROJECT['oldness of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_564,How many invoices were billed from each state?,return states ;return invoices billed from #1 ;return number of  #2 for each  #1,"[""SELECT['states']"", ""PROJECT['invoices billed from #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_5640,Show the names of trains and locations of railways they are in.,"return trains ;return names of #1 ;return railways of #1 ;return the  locations of #3 ;return #2 ,  #4","[""SELECT['trains']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['railways of #REF', '#1']"", ""PROJECT['the locations of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_5641,"Show the builder of railways associated with the trains named ""Andaman Exp"".",return trains ;return #1 named Andaman Exp ;return railways associated with  #2 ;return builder of  #3,"[""SELECT['trains']"", ""FILTER['#1', 'named Andaman Exp']"", ""PROJECT['railways associated with #REF', '#2']"", ""PROJECT['builder of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_5642,Show id and location of railways that are associated with more than one train.,"return railways ;return trains associated with  #1 ;return number of  #2 for each #1 ;return #1 where #3 is  higher than one ;return ids of #4 ;return locations of #4 ;return #5 ,  #6","[""SELECT['railways']"", ""PROJECT['trains associated with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than one']"", ""PROJECT['ids of #REF', '#4']"", ""PROJECT['locations of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_5643,Show the id and builder of the railway that are associated with the most trains.,"return railways ;return trains associated with  #1 ;return number of #2 for each #1 ;return #1 where #3 is  highest ;return id of #4 ;return builder of #4 ;return #5 , #6","[""SELECT['railways']"", ""PROJECT['trains associated with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['id of #REF', '#4']"", ""PROJECT['builder of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_5644,"Show different builders of railways, along with the corresponding number of railways using each builder.","return builders of  railways  ;return different #1 ;return railways  using #2 ;return number of  #3 for each  #2 ;return #2 ,  #4","[""SELECT['builders of railways']"", ""PROJECT['different #REF', '#1']"", ""PROJECT['railways using #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_5645,Show the most common builder of railways.,return railways ;return builders of #1 ;return number of  #1 for each #2 ;return #2 where #3 is highest,"[""SELECT['railways']"", ""PROJECT['builders of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""SUPERLATIVE['max', '#2', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_5646,Show different locations of railways along with the corresponding number of railways at each location.,return railways  ;return locations of  #1 ;return number of  #1  for each  #2,"[""SELECT['railways']"", ""PROJECT['locations of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""UNION['#2', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_5647,Show the locations that have more than one railways.,return locations ;return railways of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than one,"[""SELECT['locations']"", ""PROJECT['railways of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than one']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_5648,List the object number of railways that do not have any trains.,return railways ;return trains of #1 ;return number of  #2 for each #1 ;return #1 where #3 is zero ;return number of  #4,"[""SELECT['railways']"", ""PROJECT['trains of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is zero']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'group', 'comparative', 'aggregate']",train
SPIDER_train_5649,Show the countries that have both managers of age above 50 and managers of age below 46.,return managers  ;return ages of #1 ;return #1 where #2 is  above 50 ;return #1 where #2 is  below 46 ;return the  countries of #3 ;return the  countries of #4 ;return the  countries of #1 ; return #7 of both #5 and #6,"[""SELECT['managers']"", ""PROJECT['ages of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is above 50']"", ""COMPARATIVE['#1', '#2', 'is below 46']"", ""PROJECT['the countries of #REF', '#3']"", ""PROJECT['the countries of #REF', '#4']"", ""PROJECT['the countries of #REF', '#1']"", ""INTERSECTION['#7', '#5', '#6']""]","['select', 'project', 'comparative', 'comparative', 'project', 'project', 'project', 'intersection']",train
SPIDER_train_565,List the state in the US with the most invoices.,return states ;return #1 in the   US ;return invoices of  #2 ;return number of  #3 for each  #1 ;return #1 where  #4 is highest ;return invoices of #5 ;return number of  #5 for each  #5 ;return #5 and #7,"[""SELECT['states']"", ""FILTER['#1', 'in the US']"", ""PROJECT['invoices of #REF', '#2']"", ""GROUP['count', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']"", ""PROJECT['invoices of #REF', '#5']"", ""GROUP['count', '#6', '#5']"", ""UNION['#5', '#7']""]","['select', 'filter', 'project', 'group', 'superlative', 'project', 'group', 'union']",train
SPIDER_train_5650,Show the distinct countries of managers.,return managers ;return countries of #1 ;return the  distinct #2,"[""SELECT['managers']"", ""PROJECT['countries of #REF', '#1']"", ""PROJECT['the distinct #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_5651,Show the working years of managers in descending order of their level.,return managers ;return working years of  #1 ;return levels of  #1 ;return #2 sorted by #3 in descending order,"[""SELECT['managers']"", ""PROJECT['working years of #REF', '#1']"", ""PROJECT['levels of #REF', '#1']"", ""SORT['#2', '#3', 'in descending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_5652,Show the countries that have managers of age above 50 or below 46.,return countries ;return managers of  #1 ;return ages of  #2 ;return #1 where #3 is  higher than 50 ;return #1 where #3 is  lower than 46 ;return #4 or  #5,"[""SELECT['countries']"", ""PROJECT['managers of #REF', '#1']"", ""PROJECT['ages of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is higher than 50']"", ""COMPARATIVE['#1', '#3', 'is lower than 46']"", ""UNION['#4', '#5']""]","['select', 'project', 'project', 'comparative', 'comparative', 'union']",train
SPIDER_train_5653,How many addresses are there in country USA?,return addresses ;return #1 in USA ;return number of #2,"[""SELECT['addresses']"", ""FILTER['#1', 'in USA']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_5654,Show all distinct cities in the address record.,return address record ;return cities in #1,"[""SELECT['address record']"", ""PROJECT['cities in #REF', '#1']""]","['select', 'project']",train
SPIDER_train_5655,Show each state and the number of addresses in each state.,"return states ;return addresses in #1 ;return number of  #2 for each  #1 ;return #1 ,  #3","[""SELECT['states']"", ""PROJECT['addresses in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_5656,Show names and phones of customers who do not have address information.,"return customers ;return #1 with address information ;return #1 besides  #2 ;return names of  #3 ;return phones of  #3 ;return #4 ,  #5","[""SELECT['customers']"", ""FILTER['#1', 'with address information']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['phones of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'discard', 'project', 'project', 'union']",train
SPIDER_train_5657,Show the name of the customer who has the most orders.,return customers ;return orders of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return name of  #4,"[""SELECT['customers']"", ""PROJECT['orders of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_5658,Show the product type codes which have at least two products.,return product type codes ;return products with #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least two,"[""SELECT['product type codes']"", ""PROJECT['products with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_5659,Show the names of customers who have both an order in completed status and an order in part status.,return customers ;return orders of #1 ;return statuses of #2 ;return #2 where #3 is  completed ;return #2 where #3 is  part ;return number of  #4 for each #1 ;return number of  #5 for each #1 ;return #1 where #6 is  at least one ;return #1 where #7 is  at least one ;return #1 in both #8 and #9 ;return the  names of #10,"[""SELECT['customers']"", ""PROJECT['orders of #REF', '#1']"", ""PROJECT['statuses of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is completed']"", ""COMPARATIVE['#2', '#3', 'is part']"", ""GROUP['count', '#4', '#1']"", ""GROUP['count', '#5', '#1']"", ""COMPARATIVE['#1', '#6', 'is at least one']"", ""COMPARATIVE['#1', '#7', 'is at least one']"", ""INTERSECTION['#1', '#8', '#9']"", ""PROJECT['the names of #REF', '#10']""]","['select', 'project', 'project', 'comparative', 'comparative', 'group', 'group', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_566,What are the states with the most invoices?,return states ;return invoices of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['states']"", ""PROJECT['invoices of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_5660,"Show the name, phone, and payment method code for all customers in descending order of customer number.","return customers ;return names of  #1 ;return phones of  #1 ;return payment method codes of  #1 ;return customer numbers of  #1 ;return #2 ,  #3 ,   #4 ;return #6 sorted by #5 in descending order","[""SELECT['customers']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['phones of #REF', '#1']"", ""PROJECT['payment method codes of #REF', '#1']"", ""PROJECT['customer numbers of #REF', '#1']"", ""UNION['#2', '#3', '#4']"", ""SORT['#6', '#5', 'in descending order']""]","['select', 'project', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_5661,Show the product name and total order quantity for each product.,"return products ;return product  names of #1 ;return order quantities of #1 ;return sum of #3 for each #1 ;return #2 ,  #4","[""SELECT['products']"", ""PROJECT['product names of #REF', '#1']"", ""PROJECT['order quantities of #REF', '#1']"", ""GROUP['sum', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_5662,"Show the minimum, maximum, average price for all products.",return products ;return prices of  #1 ;return minimum of  #2 ;return maximum of  #2 ;return average of  #2 ;return #3 or #4 or  #5,"[""SELECT['products']"", ""PROJECT['prices of #REF', '#1']"", ""AGGREGATE['min', '#2']"", ""AGGREGATE['max', '#2']"", ""AGGREGATE['avg', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'project', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_5663,How many products have a price higher than the average?,return products ;return prices of  #1 ;return average of  #2 ;return #1 where  #2 is higher than #3 ;return number of  #4,"[""SELECT['products']"", ""PROJECT['prices of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'aggregate']",train
SPIDER_train_5664,"Show the customer name, customer address city, date from, and date to for each customer address history.","return customer address histories ;return customer names of  #1 ;return customer address cities of  #1 ;return dates from  of  #1 ;return dates to of  #1 ;return #2 ,  #3 ,   #4 , #5","[""SELECT['customer address histories']"", ""PROJECT['customer names of #REF', '#1']"", ""PROJECT['customer address cities of #REF', '#1']"", ""PROJECT['dates from of #REF', '#1']"", ""PROJECT['dates to of #REF', '#1']"", ""UNION['#2', '#3', '#4', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_5665,Show the names of customers who use Credit Card payment method and have more than 2 orders.,return customers ;return #1 who  use Credit Card payment method ;return the number of orders for each  #2 ;return #2 where #3 is  higher than 2 ;return names of  #4,"[""SELECT['customers']"", ""FILTER['#1', 'who use Credit Card payment method']"", ""PROJECT['orders', '#2']"", ""GROUP['count', '#3', '#2']"", ""COMPARATIVE['#2', '#4', 'is higher than 2']"", ""PROJECT['names of #REF', '#5']""]","['select', 'filter', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_5666,What are the name and phone of the customer with the most ordered product quantity?,"return customers ;return products #1 ordered ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return name of  #4 ;return phone of  #4 ;return #5 ,  #6","[""SELECT['customers']"", ""PROJECT['products #REF ordered', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['phone of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_5667,Show the product type and name for the products with price higher than 1000 or lower than 500.,"return products ;return prices of  #1 ;return #1 where #2 is  higher than 1000 ;return #1 where #2 is  lower than 500 ;return #3 or  #4 ;return product types of  #5 ;return names of  #5 ;return #6 ,  #7","[""SELECT['products']"", ""PROJECT['prices of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 1000']"", ""COMPARATIVE['#1', '#2', 'is lower than 500']"", ""UNION['#3', '#4']"", ""PROJECT['product types of #REF', '#5']"", ""PROJECT['names of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project', 'project', 'union']",train
SPIDER_train_5668,Find the name of dorms only for female (F gender).,return dorms ;return gender of  #1 ;return #1 where  #2 is  female ;return names of  #3,"[""SELECT['dorms']"", ""PROJECT['gender of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is female']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5669,What are the names of the all-female dorms?,return dorms ;return names of  #1 ;return #2 where #1 is  all-female,"[""SELECT['dorms']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is all-female']""]","['select', 'project', 'comparative']",train
SPIDER_train_567,List the number of invoices and the invoice total from California.,"return invoices ;return #1 from California ;return number of  #2 ;return sum of  #2 ;return #3 ,  #4","[""SELECT['invoices']"", ""FILTER['#1', 'from California']"", ""AGGREGATE['count', '#2']"", ""AGGREGATE['sum', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_5670,Find the name of dorms that can accommodate more than 300 students.,return dorms ;return #1 that  can accommodate more than  300 students ;return name of  #2,"[""SELECT['dorms']"", ""FILTER['#1', 'that can accommodate more than 300 students']"", ""PROJECT['name of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5671,What are the names of all the dorms that can accomdate more than 300 students?,return dorms ;return students that  #1 can accomdate ;return #1 where #2 is  higher than 300 ;return names of  #3,"[""SELECT['dorms']"", ""PROJECT['students that #REF can accomdate', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 300']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5672,How many female students (sex is F) whose age is below 25?,return students ;return sexes of #1 ;return #1 where #2 is F ;return ages of #3 ;return #3 where #4 is lower than 25 ;return number of  #5,"[""SELECT['students']"", ""PROJECT['sexes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is F']"", ""PROJECT['ages of #REF', '#3']"", ""COMPARATIVE['#3', '#4', 'is lower than 25']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'comparative', 'project', 'comparative', 'aggregate']",train
SPIDER_train_5673,How many girl students who are younger than 25?,return girl students ;return #1 younger than  25 ;return number of #2,"[""SELECT['girl students']"", ""FILTER['#1', 'younger than 25']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_5674,Find the first name of students who is older than 20.,return students ;return #1 who  are  older than 20 ;return first names of  #2,"[""SELECT['students']"", ""FILTER['#1', 'who are older than 20']"", ""PROJECT['first names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5675,What are the first names of all students who are older than 20?,return students ;return #1 who  are  older than 20 ;return first names of  #2,"[""SELECT['students']"", ""FILTER['#1', 'who are older than 20']"", ""PROJECT['first names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5676,Find the first name of students living in city PHL whose age is between 20 and 25.,return students ;return cities of #1 ;return #1 where #2 is PHL ;return ages of #3 ;return #3 where #4 is at least 20 ;return #3 where #4 is at most 25 ;return #3 in  both #5 and  #6 ;return first names of #7,"[""SELECT['students']"", ""PROJECT['cities of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is PHL']"", ""PROJECT['ages of #REF', '#3']"", ""COMPARATIVE['#3', '#4', 'is at least 20']"", ""COMPARATIVE['#3', '#4', 'is at most 25']"", ""INTERSECTION['#3', '#5', '#6']"", ""PROJECT['first names of #REF', '#7']""]","['select', 'project', 'comparative', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_5677,What is the first name of the students who are in age 20 to 25 and living in PHL city?,return students ;return ages of #1 ;return #1 where #2 is  at least 20 ;return #1 where #2 is  at most 25 ;return cities of #1 ;return #5 of both #3 and #4 ;return #1 where #6 is  PHL ;return first names of #6,"[""SELECT['students']"", ""PROJECT['ages of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least 20']"", ""COMPARATIVE['#1', '#2', 'is at most 25']"", ""PROJECT['cities of #REF', '#1']"", ""INTERSECTION['#5', '#3', '#4']"", ""COMPARATIVE['#1', '#6', 'is PHL']"", ""PROJECT['first names of #REF', '#7']""]","['select', 'project', 'comparative', 'comparative', 'project', 'intersection', 'comparative', 'project']",train
SPIDER_train_5678,How many dorms are there?,return dorms ;return number of  #1,"[""SELECT['dorms']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_5679,How many dorms are in the database?,return dorms ;return number of #1,"[""SELECT['dorms']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_568,What is the number of invoices and total money billed in them from CA?,"return invoices ;return #1 from CA ;return number of  #2 ;return money billed in #2 ;return sum of #4 ;return #3 ,  #5","[""SELECT['invoices']"", ""FILTER['#1', 'from CA']"", ""AGGREGATE['count', '#2']"", ""PROJECT['money billed in #REF', '#2']"", ""AGGREGATE['sum', '#4']"", ""UNION['#3', '#5']""]","['select', 'filter', 'aggregate', 'project', 'aggregate', 'union']",train
SPIDER_train_5680,Find the number of distinct amenities.,return amenities ;return number of distinct #1,"[""SELECT['amenities']"", ""PROJECT['distinct #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_5681,How many diffrent dorm amenities are there?,return dorms ;return amenities of  #1 ;return diffrent #2 ;return number of #3,"[""SELECT['dorms']"", ""PROJECT['amenities of #REF', '#1']"", ""PROJECT['diffrent #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_5682,Find the total capacity of all dorms.,return dorms ;return capacity of #1 ;return sum of  #2,"[""SELECT['dorms']"", ""PROJECT['capacity of #REF', '#1']"", ""AGGREGATE['sum', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_5683,What is the total student capacity of all dorms?,return dorms ;return student capacity of  #1 ;return sum of  #2,"[""SELECT['dorms']"", ""PROJECT['student capacity of #REF', '#1']"", ""AGGREGATE['sum', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_5685,How many students exist?,return students ;return number of  #1,"[""SELECT['students']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_5686,Find the average age of all students living in the each city.,return cities ;return students of #1 ;return ages of #2 ;return average of #3 for each #1,"[""SELECT['cities']"", ""PROJECT['students of #REF', '#1']"", ""PROJECT['ages of #REF', '#2']"", ""GROUP['avg', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_5687,What is the average age for each city and what are those cities?,"return cities ;return ages of  #1 ;return average of  #2 for each  #1 ;return #1 ,  #3","[""SELECT['cities']"", ""PROJECT['ages of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_5688,Find the average and total capacity of dorms for the students with gender X.,"return students ;return genders of #1 ;return #1 where #2 is  X ;return dorms for #3 ;return capacities of #4 ;return average of #5 ;return sum of #5 ;return #6 , #7","[""SELECT['students']"", ""PROJECT['genders of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is X']"", ""PROJECT['dorms for #REF', '#3']"", ""PROJECT['capacities of #REF', '#4']"", ""AGGREGATE['avg', '#5']"", ""AGGREGATE['sum', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'comparative', 'project', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_5689,What is the average and total capacity for all dorms who are of gender X?,"return dorms ;return gender of  #1 ;return #1 where #2 is  X ;return capacities of  #3 ;return average of  #4 ;return sum of  #4 ;return #5 ,  #6","[""SELECT['dorms']"", ""PROJECT['gender of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is X']"", ""PROJECT['capacities of #REF', '#3']"", ""AGGREGATE['avg', '#4']"", ""AGGREGATE['sum', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_569,List Aerosmith's albums.,return Aerosmith ;return albums of  #1,"[""SELECT['Aerosmith']"", ""PROJECT['albums of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_5690,Find the number of dorms that have some amenity.,return dorms ;return #1 with  amenities ;return number of #2,"[""SELECT['dorms']"", ""FILTER['#1', 'with amenities']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_5691,How many dorms have amenities?,return dorms ;return #1 with  amenities ;return number of #2,"[""SELECT['dorms']"", ""FILTER['#1', 'with amenities']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_5692,Find the name of dorms that do not have any amenity,return dorms ;return #1 with  amenities ;return #1 besides #2 ;return names of  #3,"[""SELECT['dorms']"", ""FILTER['#1', 'with amenities']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_5693,What are the names of all the dorms that don't have any amenities?,return dorms ;return #1 that  have  amenities ;return #1 besides  #2 ;return names of  #3,"[""SELECT['dorms']"", ""FILTER['#1', 'that have amenities']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_5694,Find the number of distinct gender for dorms.,return dorms ;return distinct gender for #1 ;return number of  #2,"[""SELECT['dorms']"", ""PROJECT['distinct gender for #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_5695,How many different genders are there in the dorms?,return dorms ;return genders in #1 ;return different #2 ;return number of #3,"[""SELECT['dorms']"", ""PROJECT['genders in #REF', '#1']"", ""PROJECT['different #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_5696,Find the capacity and gender type of the dorm whose name has substring ‘Donor’.,"return dorms ;return names of  #1 ;return #1 where #2 has  substring Donor ;return capacity of  #3 ;return gender type of  #3 ;return #4 ,  #5","[""SELECT['dorms']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'has substring Donor']"", ""PROJECT['capacity of #REF', '#3']"", ""PROJECT['gender type of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_5697,What is the student capacity and type of gender for the dorm whose name as the phrase Donor in it?,"return dorms ;return names of  #1 ;return #1 where #2 has  the  phrase Donor ;return student capacity of  #3 ;return gender of  #3 ;return type of  #5 ;return #4 ,  #6","[""SELECT['dorms']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'has the phrase Donor']"", ""PROJECT['student capacity of #REF', '#3']"", ""PROJECT['gender of #REF', '#3']"", ""PROJECT['type of #REF', '#5']"", ""UNION['#4', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_5698,Find the name and gender type of the dorms whose capacity is greater than 300 or less than 100.,"return dorms ;return capacity of  #1 ;return #1 where  #2 is  greater than  300 ;return #1 where  #2 is  less than  100 ;return #3 or  #4 ;return names of  #5 ;return gender types of  #5 ;return #6 ,   #7","[""SELECT['dorms']"", ""PROJECT['capacity of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is greater than 300']"", ""COMPARATIVE['#1', '#2', 'is less than 100']"", ""UNION['#3', '#4']"", ""PROJECT['names of #REF', '#5']"", ""PROJECT['gender types of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project', 'project', 'union']",train
SPIDER_train_5699,What are the names and types of the dorms that have a capacity greater than 300 or less than 100?,"return dorms ;return capacities of  #1 ;return #1 where #2 is  higher than 300 ;return #1 where #2 is  lower than 100 ;return #1 of  both #3 and  #4 ;return names of  #5 ;return types of  #5 ;return #6 ,  #7","[""SELECT['dorms']"", ""PROJECT['capacities of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 300']"", ""COMPARATIVE['#1', '#2', 'is lower than 100']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['names of #REF', '#5']"", ""PROJECT['types of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_57,What is the name of the course with the most registered students?,return courses ;return registered students of #1 ;return number of #2 for each #1 ;return #1 where #3 is  highest ;return name of #4,"[""SELECT['courses']"", ""PROJECT['registered students of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_570,What are the titles of all the Aerosmith albums?,return Aerosmith ;return albums of #1 ;return the  titles of #2,"[""SELECT['Aerosmith']"", ""PROJECT['albums of #REF', '#1']"", ""PROJECT['the titles of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_5700,Find the numbers of different majors and cities.,"return different majors ;return cities ;return number of  #1 ;return number of  #2 ;return #3 ,  #4","[""SELECT['different majors']"", ""SELECT['cities']"", ""AGGREGATE['count', '#1']"", ""AGGREGATE['count', '#2']"", ""UNION['#3', '#4']""]","['select', 'select', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_5701,How many different majors are there and how many different city codes are there for each student?,return banks ;return cities #1 are located ;return different #2 ;return number of  #3,"[""SELECT['banks']"", ""PROJECT['cities #REF are located', '#1']"", ""PROJECT['different #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_5702,Find the name of dorms which have both TV Lounge and Study Room as amenities.,return dorms ;return amenities of  #1 ;return #1 where  #2 is  TV Lounge ;return #1 where  #2 is  Study Room ;return #1 of  both #3 and #4 ;return names of  #5,"[""SELECT['dorms']"", ""PROJECT['amenities of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is TV Lounge']"", ""COMPARATIVE['#1', '#2', 'is Study Room']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_5703,What is the name of the dorm with both a TV Lounge and Study Room listed as amenities?,return dorms ;return amenities of  #1 ;return #1 where #2 is  TV Lounge ;return #1 where #2 is  Study Room ;return #1 of  both #3 and  #4 ;return name of  #5,"[""SELECT['dorms']"", ""PROJECT['amenities of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is TV Lounge']"", ""COMPARATIVE['#1', '#2', 'is Study Room']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['name of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_5704,Find the name of dorms which have TV Lounge but no Study Room as amenity.,return dorms ;return #1 with  TV Lounge ;return #2 not  have  Study Room ;return names of  #3,"[""SELECT['dorms']"", ""FILTER['#1', 'with TV Lounge']"", ""FILTER['#2', 'not have Study Room']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_5705,What is the name of each dorm that has a TV Lounge but no study rooms?,return dorms ;return #1 that  have a TV Lounge ;return the  study rooms of #2 ;return number of  #3 for each #2 ;return #2 where #4 is  at least one ;return #2 besides #5 ;return the  names of #6,"[""SELECT['dorms']"", ""FILTER['#1', 'that have a TV Lounge']"", ""PROJECT['the study rooms of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""COMPARATIVE['#2', '#4', 'is at least one']"", ""DISCARD['#2', '#5']"", ""PROJECT['the names of #REF', '#6']""]","['select', 'filter', 'project', 'group', 'comparative', 'discard', 'project']",train
SPIDER_train_5706,Find the last name of students who is either female (sex is F) and living in the city of code BAL or male (sex is M) and in age of below 20.,"return students ;return sexes of   #1 ;return #1 where #2 is F ;return city codes of   #3 ;return #3 where #4 is BAL ;return #1 where #2 is M ;return ages of   #6 ;return #6 where #7 is lower than 20 ;return #5 ,  #8 ;return last names of   #9","[""SELECT['students']"", ""PROJECT['sexes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is F']"", ""PROJECT['city codes of #REF', '#3']"", ""COMPARATIVE['#3', '#4', 'is BAL']"", ""COMPARATIVE['#1', '#2', 'is M']"", ""PROJECT['ages of #REF', '#6']"", ""COMPARATIVE['#6', '#7', 'is lower than 20']"", ""UNION['#5', '#8']"", ""PROJECT['last names of #REF', '#9']""]","['select', 'project', 'comparative', 'project', 'comparative', 'comparative', 'project', 'comparative', 'union', 'project']",train
SPIDER_train_5707,What is the last name of every student who is either female or living in a city with the code BAL or male and under 20?,"return students ;return #1 who  are  female ;return cities of  #1 ;return codes of  #3 ;return #1 where #4 is  BAL ;return #1 who  are  male ;return #6 who  are  under 20 ;return #2 ,  #5 ,   #7","[""SELECT['students']"", ""FILTER['#1', 'who are female']"", ""PROJECT['cities of #REF', '#1']"", ""PROJECT['codes of #REF', '#3']"", ""COMPARATIVE['#1', '#4', 'is BAL']"", ""FILTER['#1', 'who are male']"", ""FILTER['#6', 'who are under 20']"", ""UNION['#2', '#5', '#7']""]","['select', 'filter', 'project', 'project', 'comparative', 'filter', 'filter', 'union']",train
SPIDER_train_5708,Find the name of the dorm with the largest capacity.,return dorms ;return capacities of  #1 ;return #1 where  #2 is  highest ;return name of  #3,"[""SELECT['dorms']"", ""PROJECT['capacities of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_5709,What are the names of the dorm with the largest capacity?,return dorms ;return capacities of  #1 ;return #1 where #2 is  largest ;return names of  #3,"[""SELECT['dorms']"", ""PROJECT['capacities of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_571,How many albums does Billy Cobham has?,return Billy Cobham ;return albums of  #1 ;return number of #2,"[""SELECT['Billy Cobham']"", ""PROJECT['albums of #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_5710,List in alphabetic order all different amenities.,return amenities ;return different #1 ;return #2 sorted by alphabetic order,"[""SELECT['amenities']"", ""PROJECT['different #REF', '#1']"", ""SORT['#2', '#2', 'alphabetic order']""]","['select', 'project', 'sort']",train
SPIDER_train_5711,What are the different dorm amenity names in alphabetical order?,return dorms amenity ;returns different names of #1 ;return #2 sorted in alphabetical order,"[""SELECT['dorms amenity']"", ""PROJECT['different names of #REF', '#1']"", ""FILTER['#2', 'sorted in alphabetical order']""]","['select', 'project', 'filter']",train
SPIDER_train_5712,Find the code of city where most of students are living in.,return cities ;return students living in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return code of  #4,"[""SELECT['cities']"", ""PROJECT['students living in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['code of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_5713,What is the code of the city with the most students?,return cities ;return students in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return code of  #4,"[""SELECT['cities']"", ""PROJECT['students in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['code of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_5714,Find the first and last name of students whose age is younger than the average age.,"return students ;return ages of  #1 ;return the average of  #2 ;return #1 where  #2 is  less than  #3 ;return first name of  #4 ;return last name of  #4 ;return #5 ,   #6","[""SELECT['students']"", ""PROJECT['ages of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is less than #3']"", ""PROJECT['first name of #REF', '#4']"", ""PROJECT['last name of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_5715,What is the first and last name of all students who are younger than average?,"return students ;return #1 who are younger than  average ;return first names of #2 ;return last names of #2 ;return #3 ,  #4","[""SELECT['students']"", ""FILTER['#1', 'who are younger than average']"", ""PROJECT['first names of #REF', '#2']"", ""PROJECT['last names of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_5716,"List the first and last name of students who are not living in the city with code HKG, and sorted the results by their ages.","return students ;return cities of  #1 ;return codes of  #2 ;return #1 where  #3 is HKG ;return #1 besides #4 ;return first names of  #5 ;return last names of  #5 ;return ages of  #5 ;return #6 ,  #7 ;return #9 sorted by #8","[""SELECT['students']"", ""PROJECT['cities of #REF', '#1']"", ""PROJECT['codes of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is HKG']"", ""DISCARD['#1', '#4']"", ""PROJECT['first names of #REF', '#5']"", ""PROJECT['last names of #REF', '#5']"", ""PROJECT['ages of #REF', '#5']"", ""UNION['#6', '#7']"", ""SORT['#9', '#8']""]","['select', 'project', 'project', 'comparative', 'discard', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_5717,What are the first and last names of all students who are not living in the city HKG and order the results by age?,"return students ;return cities #1 are  living in ;return #1 where #2 is  not  HKG ;return first names of  #3 ;return last names of  #3 ;return ages of  #3 ;return #4 ,  #5 ;return #7 sorted by #6","[""SELECT['students']"", ""PROJECT['cities #REF are living in', '#1']"", ""COMPARATIVE['#1', '#2', 'is not HKG']"", ""PROJECT['first names of #REF', '#3']"", ""PROJECT['last names of #REF', '#3']"", ""PROJECT['ages of #REF', '#3']"", ""UNION['#4', '#5']"", ""SORT['#7', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_5718,"List name of all amenities which Anonymous Donor Hall has, and sort the results in alphabetic order.",return Anonymous Donor Hall ;return amenities of  #1 ;return names of  #2 ;return #3 sorted by alphabetic order,"[""SELECT['Anonymous Donor Hall']"", ""PROJECT['amenities of #REF', '#1']"", ""PROJECT['names of #REF', '#2']"", ""SORT['#3', '#3', 'alphabetic order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_5719,What are the amenities in alphabetical order that Anonymous Donor Hall has?,return Anonymous Donor Hall ;return amenities of  #1 ;return #2 sorted by alphabetical order,"[""SELECT['Anonymous Donor Hall']"", ""PROJECT['amenities of #REF', '#1']"", ""SORT['#2', '#2', 'alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_572,How many albums has Billy Cobam released?,return albums ;return #1 Billy Cobam released ;return number of #2,"[""SELECT['albums']"", ""FILTER['#1', 'Billy Cobam released']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_5720,Find the number of dorms and total capacity for each gender.,"return genders ;return dorms of #1 ;return number of  #2 for each #1 ;return capacities of #2 ;return sum of #4 for each #1 ;return #3 ,  #5","[""SELECT['genders']"", ""PROJECT['dorms of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['capacities of #REF', '#2']"", ""GROUP['sum', '#4', '#1']"", ""UNION['#3', '#5']""]","['select', 'project', 'group', 'project', 'group', 'union']",train
SPIDER_train_5721,How many dorms are there and what is the total capacity for each gender?,"return dorms ;return number of #1 ;return gender of  #1 ;return total capacity of  #1 for each #3 ;return #2 ,   #4","[""SELECT['dorms']"", ""AGGREGATE['count', '#1']"", ""PROJECT['gender of #REF', '#1']"", ""GROUP['sum', '#1', '#3']"", ""UNION['#2', '#4']""]","['select', 'aggregate', 'project', 'group', 'union']",train
SPIDER_train_5722,Find the average and oldest age for students with different sex.,"return students ;return #1 with  different sex ;return age of  #2 ;return oldest #3 ;return average of  #3 ;return #4 ,   #5","[""SELECT['students']"", ""FILTER['#1', 'with different sex']"", ""PROJECT['age of #REF', '#2']"", ""PROJECT['oldest #REF', '#3']"", ""AGGREGATE['avg', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'project', 'aggregate', 'union']",train
SPIDER_train_5723,What is the average and oldest age for each gender of student?,"return students ;return genders of #1 ;return ages of #2 ;return average of #3 for each  #2 ;return highest of #3 for each  #2 ;return #4 ,  #5","[""SELECT['students']"", ""PROJECT['genders of #REF', '#1']"", ""PROJECT['ages of #REF', '#2']"", ""GROUP['avg', '#3', '#2']"", ""GROUP['max', '#3', '#2']"", ""UNION['#4', '#5']""]","['select', 'project', 'project', 'group', 'group', 'union']",train
SPIDER_train_5724,Find the number of students in each major.,return major ;return students in #1 ;return number of #2 for each #1,"[""SELECT['major']"", ""PROJECT['students in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_5725,How many students are there in each major?,return students ;return the  number of  #1 for each  major,"[""SELECT['students']"", ""PROJECT['major', '#1']"", ""GROUP['count', '#1', '#2']"", ""UNION['#2', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_5726,Find the number and average age of students living in each city.,"return cities ;return students living in #1 ;return number of #2 for each #1 ;return ages of  #2 ;return average of  #4 for each #1 ;return #3 ,   #5","[""SELECT['cities']"", ""PROJECT['students living in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['ages of #REF', '#2']"", ""GROUP['avg', '#4', '#1']"", ""UNION['#3', '#5']""]","['select', 'project', 'group', 'project', 'group', 'union']",train
SPIDER_train_5727,How many students live in each city and what are their average ages?,"return cities ;return students that  live in #1 ;return number of  #2 for each  #1 ;return ages of  #2 ;return average of  #4 for each  #1 ;return #3 ,  #5","[""SELECT['cities']"", ""PROJECT['students that live in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['ages of #REF', '#2']"", ""GROUP['avg', '#4', '#1']"", ""UNION['#3', '#5']""]","['select', 'project', 'group', 'project', 'group', 'union']",train
SPIDER_train_5728,Find the average age and number of male students (with sex M) from each city.,"return cities ;return students from  #1 ;return sex of  #2 ;return #2 where #3 is  M ;return ages of  #4 ;return average of  #5 for each  #1 ;return number of  #4 for each  #1 ;return #6 ,  #7","[""SELECT['cities']"", ""PROJECT['students from #REF', '#1']"", ""PROJECT['sex of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is M']"", ""PROJECT['ages of #REF', '#4']"", ""GROUP['avg', '#5', '#1']"", ""GROUP['count', '#4', '#1']"", ""UNION['#6', '#7']""]","['select', 'project', 'project', 'comparative', 'project', 'group', 'group', 'union']",train
SPIDER_train_5729,What is the average age and how many male students are there in each city?,"return cities ;return students in #1 ;return ages of #2 ;return average of #3 ;return #2 that  are male ;return number of  #5 for each #1 ;return #4 ,  #6","[""SELECT['cities']"", ""PROJECT['students in #REF', '#1']"", ""PROJECT['ages of #REF', '#2']"", ""AGGREGATE['avg', '#3']"", ""FILTER['#2', 'that are male']"", ""GROUP['count', '#5', '#1']"", ""UNION['#4', '#6']""]","['select', 'project', 'project', 'aggregate', 'filter', 'group', 'union']",train
SPIDER_train_573,Eduardo Martins is a customer at which company?,return Eduardo Martins ;return company that #1 is a customer at,"[""SELECT['Eduardo Martins']"", ""PROJECT['company that #REF is a customer at', '#1']""]","['select', 'project']",train
SPIDER_train_5730,Find the number of students for the cities where have more than one student.,return cities ;return students from #1 ;return the  number of  #2 for each #1 ;return #1 where #3 is  more than  one ;return students from #4 ;return the  number of  #5 for each #4,"[""SELECT['cities']"", ""PROJECT['students from #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than one']"", ""PROJECT['students from #REF', '#4']"", ""GROUP['count', '#5', '#4']"", ""UNION['#4', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'group', 'union']",train
SPIDER_train_5731,"How many students are from each city, and which cities have more than one cities?","return cities  ;return students from #1 ;return number of  #2 for each #1 ;return #1 where #3 is  more than  one ;return #3 ,  #4","[""SELECT['cities']"", ""PROJECT['students from #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than one']"", ""UNION['#3', '#4']""]","['select', 'project', 'group', 'comparative', 'union']",train
SPIDER_train_5732,Find the first and last name of students who are not in the largest major.,"return major ;return largest #1 ;return students in #2 ;return students besides  #3 ;return first names of  #4 ;return last names of  #4 ;return #5 ,  #6","[""SELECT['major']"", ""AGGREGATE['max', '#1']"", ""PROJECT['students in #REF', '#2']"", ""SELECT['students']"", ""DISCARD['#4', '#3']"", ""PROJECT['first names of #REF', '#5']"", ""PROJECT['last names of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'aggregate', 'project', 'select', 'discard', 'project', 'project', 'union']",train
SPIDER_train_5733,What is the first and last name of the students who are not in the largest major?,"return students ;return #1 who  are  in the  largest major ;return #1 besides  #2 ;return first names of  #3 ;return last name of  #3 ;return #4 ,  #5","[""SELECT['students']"", ""FILTER['#1', 'who are in the largest major']"", ""DISCARD['#1', '#2']"", ""PROJECT['first names of #REF', '#3']"", ""PROJECT['last name of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'discard', 'project', 'project', 'union']",train
SPIDER_train_5734,Find the number of students whose age is older than the average age for each gender.,return students ;return genders of  #1 ;return ages of  #1 ;return average of  #3 for each #2 ;return #1 where  #3 is  higher than #4,"[""SELECT['students']"", ""PROJECT['genders of #REF', '#1']"", ""PROJECT['ages of #REF', '#1']"", ""GROUP['avg', '#3', '#2']"", ""COMPARATIVE['#1', '#3', 'is higher than #4']""]","['select', 'project', 'project', 'group', 'comparative']",train
SPIDER_train_5735,How many students are older than average for each gender?,return students ;return how old are #1 ;return average of #2 for each gender ;return #1 where #2 is  lower than #3 ;return number of  #4,"[""SELECT['students']"", ""PROJECT['how old are #REF', '#1']"", ""PROJECT['gender', '#2']"", ""GROUP['avg', '#2', '#3']"", ""COMPARATIVE['#1', '#2', 'is lower than #4']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'project', 'group', 'comparative', 'aggregate']",train
SPIDER_train_5736,Find the average age of students living in each dorm and the name of dorm.,"return dorms ;return students of #1 ;return ages of #2 ;return average of #3 for each #1 ;return names of #1 ;return #4 ,  #5","[""SELECT['dorms']"", ""PROJECT['students of #REF', '#1']"", ""PROJECT['ages of #REF', '#2']"", ""GROUP['avg', '#3', '#1']"", ""PROJECT['names of #REF', '#1']"", ""UNION['#4', '#5']""]","['select', 'project', 'project', 'group', 'project', 'union']",train
SPIDER_train_5737,What is the average age for each dorm and what are the names of each dorm?,"return dorms ;return age of  each  #1 ;return average of  #2 ;return names of  each  #1 ;return #3 ,  #4","[""SELECT['dorms']"", ""PROJECT['age of each #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""PROJECT['names of each #REF', '#1']"", ""UNION['#3', '#4']""]","['select', 'project', 'aggregate', 'project', 'union']",train
SPIDER_train_5738,Find the number of amenities for each of the dorms that can accommodate more than 100 students.,return dorms ;return #1 that  can accommodate more than  100 students ;return amenities of  #1 ;return number of #3 for each #2,"[""SELECT['dorms']"", ""FILTER['#1', 'that can accommodate more than 100 students']"", ""PROJECT['amenities of #REF', '#1']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'filter', 'project', 'group', 'union']",train
SPIDER_train_5739,"For each dorm, how many amenities does it have?",return dorms ;return amenities of  #1 ;return number of #2 for each #1,"[""SELECT['dorms']"", ""PROJECT['amenities of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_574,What is the company where Eduardo Martins is a customer?,return companies ;return customers of  #1 ;return #1 where #2 is  Eduardo Martins,"[""SELECT['companies']"", ""PROJECT['customers of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Eduardo Martins']""]","['select', 'project', 'comparative']",train
SPIDER_train_5740,Find the number of students who is older than 20 in each dorm.,return dorms ;return students in #1 ;return #2 who  are  older than  20 ;return number of #3 for each #1,"[""SELECT['dorms']"", ""PROJECT['students in #REF', '#1']"", ""FILTER['#2', 'who are older than 20']"", ""GROUP['count', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'filter', 'group', 'union']",train
SPIDER_train_5741,How many students are older than 20 in each dorm?,return dorms ;return students in #1 ;return #2 that  are  older than  20 ;return number of  #3 for each  #1,"[""SELECT['dorms']"", ""PROJECT['students in #REF', '#1']"", ""FILTER['#2', 'that are older than 20']"", ""GROUP['count', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'filter', 'group', 'union']",train
SPIDER_train_5742,Find the first name of students who are living in the Smith Hall.,return students ;return #1 living in the Smith Hall ;return first names of  #2,"[""SELECT['students']"", ""FILTER['#1', 'living in the Smith Hall']"", ""PROJECT['first names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5743,What are the first names of all students in Smith Hall?,return students ;return first names of  #1 ;return #2 where #1 are  in Smith Hall,"[""SELECT['students']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'are in Smith Hall']""]","['select', 'project', 'comparative']",train
SPIDER_train_5744,Find the average age of students who are living in the dorm with the largest capacity.,return dorms ;return capacities of #1 ;return #1 where #2 is highest ;return students of #3 ;return ages of #4 ;return average of #5,"[""SELECT['dorms']"", ""PROJECT['capacities of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['students of #REF', '#3']"", ""PROJECT['ages of #REF', '#4']"", ""AGGREGATE['avg', '#5']""]","['select', 'project', 'superlative', 'project', 'project', 'aggregate']",train
SPIDER_train_5745,What is the average age of students who are living in the dorm with the largest capacity?,return dorms ;return capacities of  #1 ;return #1 where #2 is  highest ;return students living in #3 ;return ages of  #4 ;return average of  #5,"[""SELECT['dorms']"", ""PROJECT['capacities of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['students living in #REF', '#3']"", ""PROJECT['ages of #REF', '#4']"", ""AGGREGATE['avg', '#5']""]","['select', 'project', 'superlative', 'project', 'project', 'aggregate']",train
SPIDER_train_5746,Find the total number of students living in the male dorm (with gender M).,return students ;return dorms of  #1 ;return genders of  #2 ;return #1 where  #3 is  male ;return number of #4,"[""SELECT['students']"", ""PROJECT['dorms of #REF', '#1']"", ""PROJECT['genders of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is male']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'project', 'comparative', 'aggregate']",train
SPIDER_train_5747,What are the total number of students who are living in a male dorm?,return students ;return dorms #1 are living in ;return #1 where #2 are male ;return number of  #3,"[""SELECT['students']"", ""PROJECT['dorms #REF are living in', '#1']"", ""COMPARATIVE['#1', '#2', 'are male']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_5748,Find the number of female students (with F sex) living in Smith Hall,return students ;return #1 living in Smith Hall ;return sex of  #2 ;return #2 where  #3 is  female ;return number of #4,"[""SELECT['students']"", ""FILTER['#1', 'living in Smith Hall']"", ""PROJECT['sex of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is female']"", ""AGGREGATE['count', '#4']""]","['select', 'filter', 'project', 'comparative', 'aggregate']",train
SPIDER_train_5749,How many female students live in Smith Hall?,return Smith Hall ;return students who live in #1 ;return #2 that  are female ;return number of  #3,"[""SELECT['Smith Hall']"", ""PROJECT['students who live in #REF', '#1']"", ""FILTER['#2', 'that are female']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'filter', 'aggregate']",train
SPIDER_train_575,What is Astrid Gruber's email and phone number?,"return Astrid Gruber ;return email of  #1 ;return phone number of  #1 ;return #2 ,  #3","[""SELECT['Astrid Gruber']"", ""PROJECT['email of #REF', '#1']"", ""AGGREGATE['count', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'aggregate', 'union']",train
SPIDER_train_5750,Find the name of amenities Smith Hall dorm have.,return dorms ;return amenities of  #1 ;return #2 where  #1 is  Smith Hall ;return names of  #3,"[""SELECT['dorms']"", ""PROJECT['amenities of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Smith Hall']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5751,What are the names of the amenities that Smith Hall has?,return Smith Hall ;return amenities of #1 ;return names of #2,"[""SELECT['Smith Hall']"", ""PROJECT['amenities of #REF', '#1']"", ""PROJECT['names of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_5752,Find the name of amenities Smith Hall dorm have. ordered the results by amenity names.,return dorms ;return #1 where  dorm is  Smith Hall ;return amenities of  #2 ;return names of  #3 ;return #4 sorted by amenity names,"[""SELECT['dorms']"", ""FILTER['#1', 'where dorm is Smith Hall']"", ""PROJECT['amenities of #REF', '#2']"", ""PROJECT['names of #REF', '#3']"", ""SORT['#4', '#4']""]","['select', 'filter', 'project', 'project', 'sort']",train
SPIDER_train_5753,What amenities does Smith Hall have in alphabetical order?,return Smith Hall ;return amenities of  #1 ;return #2 sorted by alphabetical order,"[""SELECT['Smith Hall']"", ""PROJECT['amenities of #REF', '#1']"", ""SORT['#2', '#2', 'alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_5754,Find the name of amenity that is most common in all dorms.,return amenities ;return dorms with  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  highest ;return name of  #4,"[""SELECT['amenities']"", ""PROJECT['dorms with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_5755,What is the most common amenity in the dorms?,return amenities ;return dorms with #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['amenities']"", ""PROJECT['dorms with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_5756,Find the first name of students who are living in the dorm that has most number of amenities.,return dorms ;return amenities of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return students living in #4 ;return first names of  #5,"[""SELECT['dorms']"", ""PROJECT['amenities of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['students living in #REF', '#4']"", ""PROJECT['first names of #REF', '#5']""]","['select', 'project', 'group', 'superlative', 'project', 'project']",train
SPIDER_train_5757,What are the first names of all students who live in the dorm with the most amenities?,return dorms ;return amenities of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return students who  live in #4 ;return first names of  #5,"[""SELECT['dorms']"", ""PROJECT['amenities of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['students who live in #REF', '#4']"", ""PROJECT['first names of #REF', '#5']""]","['select', 'project', 'group', 'superlative', 'project', 'project']",train
SPIDER_train_5758,Find the name and capacity of the dorm with least number of amenities.,"return dorms ;return number of  amenities for each #1 ;return #1 where  #2 is  lowest ;return name of  #3 ;return capacity of  #3 ;return #4 ,   #5","[""SELECT['dorms']"", ""PROJECT['amenities', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['capacity of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_5759,What is the name and capacity of the dorm with the fewest amount of amenities?,"return dorms ;return amenities of #1 ;return the   number of  #2 for each #1 ;return #1 where #3 is  the   fewest ;return the   name of #4 ;return the   capacity of #4 ;return #5 ,  #6","[""SELECT['dorms']"", ""PROJECT['amenities of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the fewest']"", ""PROJECT['the name of #REF', '#4']"", ""PROJECT['the capacity of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_576,What is the email and phone number of Astrid Gruber the customer?,return customers ;return #1 that  are  Astrid Gruber ;return phone number of  #2 ;return email of  #2 ;return #3 or  #4,"[""SELECT['customers']"", ""FILTER['#1', 'that are Astrid Gruber']"", ""AGGREGATE['count', '#2']"", ""PROJECT['email of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'aggregate', 'project', 'union']",train
SPIDER_train_5760,Find the name of dorms that do not have amenity TV Lounge.,return dorms ;return #1 with  the amenity TV Lounge ;return #1 besides #2 ;return names of  #3,"[""SELECT['dorms']"", ""FILTER['#1', 'with the amenity TV Lounge']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_5761,What are the names of the dorm that does not have a TV Lounge?,return dorms ;return #1 that  do not  have  a TV Lounge ;return names of  #2,"[""SELECT['dorms']"", ""FILTER['#1', 'that do not have a TV Lounge']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5762,Find the first and last name of students who are living in the dorms that have amenity TV Lounge.,"return dorms ;return #1 that  have  amenity TV Lounge ;return students who  are  living in #2 ;return first name of  #3 ;return last name of  #3 ;return #4 ,   #5","[""SELECT['dorms']"", ""FILTER['#1', 'that have amenity TV Lounge']"", ""PROJECT['students who are living in #REF', '#2']"", ""PROJECT['first name of #REF', '#3']"", ""PROJECT['last name of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_5763,What are the first and last names of all students who are living in a dorm with a TV Lounge?,"return students ;return dorms of  #1 ;return #1 where #2 have  a  TV Lounge ;return first names of  #3 ;return last names of  #3 ;return #4 ,  #5","[""SELECT['students']"", ""PROJECT['dorms of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'have a TV Lounge']"", ""PROJECT['first names of #REF', '#3']"", ""PROJECT['last names of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_5764,Find the first name and age of students who are living in the dorms that do not have amenity TV Lounge.,"return students ;return #1 that  are  living in the dorms ;return #2 that  do not  have  amenity TV Lounge ;return first name of  #3 ;return ages of  #3 ;return #4 ,   #5","[""SELECT['students']"", ""FILTER['#1', 'that are living in the dorms']"", ""FILTER['#2', 'that do not have amenity TV Lounge']"", ""PROJECT['first name of #REF', '#3']"", ""PROJECT['ages of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'filter', 'project', 'project', 'union']",train
SPIDER_train_5765,What is the first name and age of every student who lives in a dorm with a TV Lounge?,"return students ;return dorms of #1 ;return #1 where #2 has a  TV Lounge ;return first names of #3 ;return ages of #3 ;return #4 ,  #5","[""SELECT['students']"", ""PROJECT['dorms of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'has a TV Lounge']"", ""PROJECT['first names of #REF', '#3']"", ""PROJECT['ages of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_5766,Find the name of amenities of the dorm where the student with last name Smith is living in.,return student ;return last name  of #1 ;return the  #1 where #2 is Smith ;return the  dorm of #3 ;return amenities of #4 ;return the  name  of #5,"[""SELECT['student']"", ""PROJECT['last name of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Smith']"", ""PROJECT['the dorm of #REF', '#3']"", ""PROJECT['amenities of #REF', '#4']"", ""PROJECT['the name of #REF', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'project']",train
SPIDER_train_5767,What are the amenities in the dorm that a student who has the last name of Smith lives in?,return student ;return #1 with last name Smith ;return dorm of  #2 ;return amenities of  #3,"[""SELECT['student']"", ""FILTER['#1', 'with last name Smith']"", ""PROJECT['dorm of #REF', '#2']"", ""PROJECT['amenities of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_577,How many customers live in Prague city?,return customers ;return #1 who  live in  Prague city ;return number of #2,"[""SELECT['customers']"", ""FILTER['#1', 'who live in Prague city']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_5770,"Find the emails and phone numbers of all the customers, ordered by email address and phone number.","return customers ;return emails of  #1 ;return phone numbers of  #1 ;return #2 ,  #3 ;return #4 sorted by #2 and  #3","[""SELECT['customers']"", ""PROJECT['emails of #REF', '#1']"", ""PROJECT['phone numbers of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#4', '#4']""]","['select', 'project', 'project', 'union', 'sort']",train
SPIDER_train_5771,"What are the emails and phone numbers of all customers, sorted by email address and phone number?","return customers ;return emails of  #1 ;return phone numbers of  #1 ;return #2 ,   #3 ;return #4 sorted by #2 ,  #3","[""SELECT['customers']"", ""PROJECT['emails of #REF', '#1']"", ""PROJECT['phone numbers of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#4', '#4']""]","['select', 'project', 'project', 'union', 'sort']",train
SPIDER_train_5772,"Which city has the least number of customers whose type code is ""Good Credit Rating""?",return cities ;return customers of #1 ;return type codes of #2 ;return #2 where #3 is  Good Credit Rating ;return the  number of  #4 for each #1 ;return #1 where #5 is  the  lowest,"[""SELECT['cities']"", ""PROJECT['customers of #REF', '#1']"", ""PROJECT['type codes of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is Good Credit Rating']"", ""GROUP['count', '#4', '#1']"", ""COMPARATIVE['#1', '#5', 'is the lowest']""]","['select', 'project', 'project', 'comparative', 'group', 'comparative']",train
SPIDER_train_5773,"Return the city with the customer type code ""Good Credit Rating"" that had the fewest customers.",return cities ;return customer type codes of  #1 ;return #1 where  #2 is Good Credit Rating ;return customers of  #3 ;return number of  #4 for each  #1 ;return #1 where  #5 is lowest,"[""SELECT['cities']"", ""PROJECT['customer type codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Good Credit Rating']"", ""PROJECT['customers of #REF', '#3']"", ""GROUP['count', '#4', '#1']"", ""SUPERLATIVE['min', '#1', '#5']""]","['select', 'project', 'comparative', 'project', 'group', 'superlative']",train
SPIDER_train_5774,List the name of all products along with the number of complaints that they have received.,"return products ;return names of  #1 ;return complaints received of  #1 ;return number of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['products']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['complaints received of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_5775,"What are all the different product names, and how many complains has each received?","return product names ;return different #1 ;return complains #2 have  received ;return number of  #3 for each  #2 ;return #2 ,  #4","[""SELECT['product names']"", ""PROJECT['different #REF', '#1']"", ""PROJECT['complains #REF have received', '#2']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_5776,Find the emails of customers who has filed a complaints of the product with the most complaints.,return products ;return complaints  of #1 ;return number of  #2 for each #1 ;return #1 where #3 is highest ;return customers who  filed #4 ;return emails of #5,"[""SELECT['products']"", ""PROJECT['complaints of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['customers who filed #REF', '#4']"", ""PROJECT['emails of #REF', '#5']""]","['select', 'project', 'group', 'superlative', 'project', 'project']",train
SPIDER_train_5777,What are the emails of customers who have filed complaints on the product which has had the greatest number of complaints?,return products ;return complaints  of #1 ;return number of  #2 for each #1 ;return #1 where #3 is highest ;return complaints  of #4 ;return customers of #5 ;return emails of #6,"[""SELECT['products']"", ""PROJECT['complaints of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['complaints of #REF', '#4']"", ""PROJECT['customers of #REF', '#5']"", ""PROJECT['emails of #REF', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'project']",train
SPIDER_train_5778,Which products has been complained by the customer who has filed least amount of complaints?,return customers ;return complaints filed of #1 ;return number of  #2 for each #1 ;return #1 where #3 is lowest ;return complaints filed of #4 ;return products of #5,"[""SELECT['customers']"", ""PROJECT['complaints filed of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['complaints filed of #REF', '#4']"", ""PROJECT['products of #REF', '#5']""]","['select', 'project', 'group', 'superlative', 'project', 'project']",train
SPIDER_train_5779,Return the names of products that have had complaints filed by the customer who has filed the fewest complaints.,return customers ;return complaints #1 filed ;return number of  #2 for each #1 ;return #1 where #3 is  lowest ;return complaints #4 filed ;return products of #5 ;return names of #6,"[""SELECT['customers']"", ""PROJECT['complaints #REF filed', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['complaints #REF filed', '#4']"", ""PROJECT['products of #REF', '#5']"", ""PROJECT['names of #REF', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'project']",train
SPIDER_train_578,How many customers live in the city of Prague?,return customers ;return #1 that  live in Prague ;return number of #2,"[""SELECT['customers']"", ""FILTER['#1', 'that live in Prague']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_5780,What is the phone number of the customer who has filed the most recent complaint?,return complaints ;return the   most recent #1 ;return customers who filed #2 ;return the   phone number of #3,"[""SELECT['complaints']"", ""PROJECT['the most recent #REF', '#1']"", ""PROJECT['customers who filed #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_5781,Return the phone number of the customer who filed the complaint that was raised most recently.,return customers ;return complaints that  #1 filed ;return when  #2 was raised ;return #1 where #3 is  the most recently ;return phone number of #4,"[""SELECT['customers']"", ""PROJECT['complaints that #REF filed', '#1']"", ""PROJECT['when #REF was raised', '#2']"", ""COMPARATIVE['#1', '#3', 'is the most recently']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'project', 'comparative', 'aggregate']",train
SPIDER_train_5782,Find the email and phone number of the customers who have never filed a complaint before.,"return customers ;return #1 who  never filed a complaint ;return emails of  #2 ;return phone numbers of  #2 ;return #3 ,  #4","[""SELECT['customers']"", ""FILTER['#1', 'who never filed a complaint']"", ""PROJECT['emails of #REF', '#2']"", ""PROJECT['phone numbers of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_5783,What are the emails and phone numbers of custoemrs who have never filed a complaint?,"return custoemrs ;return #1 that  have  never filed a complaint ;return phone numbers of  #2 ;return emails of  #2 ;return #4 ,  #3","[""SELECT['custoemrs']"", ""FILTER['#1', 'that have never filed a complaint']"", ""PROJECT['phone numbers of #REF', '#2']"", ""PROJECT['emails of #REF', '#2']"", ""UNION['#4', '#3']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_5784,Find the phone number of all the customers and staff.,"return customers ;return staff ;return #1 ,   #2 ;return phone numbers of  #3","[""SELECT['customers']"", ""SELECT['staff']"", ""UNION['#1', '#2']"", ""PROJECT['phone numbers of #REF', '#3']""]","['select', 'select', 'union', 'project']",train
SPIDER_train_5785,What are the phone numbers of all customers and all staff members?,"return customers ;return staff members ;return #1 ,  #2 ;return phone numbers of #3","[""SELECT['customers']"", ""SELECT['staff members']"", ""UNION['#1', '#2']"", ""PROJECT['phone numbers of #REF', '#3']""]","['select', 'select', 'union', 'project']",train
SPIDER_train_5786,"What is the description of the product named ""Chocolate""?",return Chocolate ;return description of  #1,"[""SELECT['Chocolate']"", ""PROJECT['description of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_5787,"Return the description of the product called ""Chocolate"".",return products ;return #1 called Chocolate ;return description of  #2,"[""SELECT['products']"", ""FILTER['#1', 'called Chocolate']"", ""PROJECT['description of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5788,Find the name and category of the most expensive product.,"return products ;return #1 that  is  most expensive ;return name of  #2 ;return category of  #2 ;return #3 ,   #4","[""SELECT['products']"", ""FILTER['#1', 'that is most expensive']"", ""PROJECT['name of #REF', '#2']"", ""PROJECT['category of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_5789,What is the name and category code of the product with the highest price?,"return products ;return prices of #1 ;return #1 where #2 is  highest ;return name of #3 ;return category of #4 ;return code of #5 ;return #4 ,  #6","[""SELECT['products']"", ""PROJECT['prices of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['name of #REF', '#3']"", ""PROJECT['category of #REF', '#4']"", ""PROJECT['code of #REF', '#5']"", ""UNION['#4', '#6']""]","['select', 'project', 'superlative', 'project', 'project', 'project', 'union']",train
SPIDER_train_579,How many customers in state of CA?,return customers ;return #1 in state CA ;return number of  #2,"[""SELECT['customers']"", ""FILTER['#1', 'in state CA']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_5790,Find the prices of products which has never received a single complaint.,return products ;return #1 with  complaints ;return #1 besides #2 ;return prices of  #3,"[""SELECT['products']"", ""FILTER['#1', 'with complaints']"", ""DISCARD['#1', '#2']"", ""PROJECT['prices of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_5791,What are the prices of products that have never gotten a complaint?,return products ;return complaints of #1 ;return number of  #2 for each #1 ;return #1 where #3 is zero ;return prices of #4,"[""SELECT['products']"", ""PROJECT['complaints of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is zero']"", ""PROJECT['prices of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_5792,What is the average price of the products for each category?,return categories ;return products of #1 ;return prices of #2 ;return average of #3 for each #1,"[""SELECT['categories']"", ""PROJECT['products of #REF', '#1']"", ""PROJECT['prices of #REF', '#2']"", ""GROUP['avg', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_5793,Return the average price of products that have each category code.,return category codes ;return products that  have  #1 ;return prices of  #2 ;return average of  #3 for each  #1,"[""SELECT['category codes']"", ""PROJECT['products that have #REF', '#1']"", ""PROJECT['prices of #REF', '#2']"", ""GROUP['avg', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_5794,Find the last name of the staff member who processed the complaint of the cheapest product.,return products ;return complaints on  #1 ;return #2 where  #1 is  cheapest ;return staff member who  processed #3 ;return last name of  #4,"[""SELECT['products']"", ""PROJECT['complaints on #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is cheapest']"", ""PROJECT['staff member who processed #REF', '#3']"", ""PROJECT['last name of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_5795,What is the last name of the staff member in charge of the complaint on the product with the lowest price?,return products ;return price of #1 ;return #1 where #2 is lowest ;return complaint on #3 ;return staff member who  is in  charge of #4 ;return last name of #5,"[""SELECT['products']"", ""PROJECT['price of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""PROJECT['complaint on #REF', '#3']"", ""PROJECT['staff member who is in charge of #REF', '#4']"", ""PROJECT['last name of #REF', '#5']""]","['select', 'project', 'superlative', 'project', 'project', 'project']",train
SPIDER_train_5796,Which complaint status has more than 3 records on file?,return complaint statuses ;return records of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  higher than 3,"[""SELECT['complaint statuses']"", ""PROJECT['records of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 3']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_5797,Return complaint status codes have more than 3 corresponding complaints?,return complaint status codes ;return complaints with  #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is higher than 3,"[""SELECT['complaint status codes']"", ""PROJECT['complaints with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 3']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_5798,"Find the last name of the staff whose email address contains ""wrau"".",return staff ;return email addresses of #1 ;return #1 where #2 contains wrau ;return last name of #3,"[""SELECT['staff']"", ""PROJECT['email addresses of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'contains wrau']"", ""PROJECT['last name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5799,"What are the last names of staff with email addressed containing the substring ""wrau""?",return staff ;return email addressed of  #1 ;return #1 where #2 contain substring wrau ;return last names of  #3,"[""SELECT['staff']"", ""PROJECT['email addressed of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'contain substring wrau']"", ""PROJECT['last names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_58,what is id of students who registered some courses but the least number of courses in these students?,return students  ;return #1 who  registered courses  ;return courses  #2 registered ;return number of  #3 for each  #2 ;return #2 where #4 is  lowest ;return ids of  #5,"[""SELECT['students']"", ""FILTER['#1', 'who registered courses']"", ""PROJECT['courses #REF registered', '#2']"", ""GROUP['count', '#3', '#2']"", ""SUPERLATIVE['min', '#2', '#4']"", ""PROJECT['ids of #REF', '#5']""]","['select', 'filter', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_580,How many customers are from California?,return customers ;return #1 from California ;return the  number of #2,"[""SELECT['customers']"", ""FILTER['#1', 'from California']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_5800,How many customers are there in the customer type with the most customers?,return customer types ;return customers  with  #1 ;return number of #2 for each #1 ;return #2 where  #3 is  highest ;return number of #4,"[""SELECT['customer types']"", ""PROJECT['customers with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#2', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'group', 'superlative', 'aggregate']",train
SPIDER_train_5801,Count the number of customers that have the customer type that is most common.,return customer types ;return customers that  have  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return customers that  have  #4 ;return number of  #5,"[""SELECT['customer types']"", ""PROJECT['customers that have #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['customers that have #REF', '#4']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'group', 'superlative', 'project', 'aggregate']",train
SPIDER_train_5802,What is the last name of the staff who has handled the first ever complaint?,return complaints ;return the  first of #1 ;return staff of #2 ;return last name of #3,"[""SELECT['complaints']"", ""AGGREGATE['min', '#1']"", ""PROJECT['staff of #REF', '#2']"", ""PROJECT['last name of #REF', '#3']""]","['select', 'aggregate', 'project', 'project']",train
SPIDER_train_5803,Return the last name of the staff member who handled the complaint with the earliest date raised.,return staff members ;return complaints handled of #1 ;return date raised of #2 ;return #1 where #3 is  earliest ;return last name of #4,"[""SELECT['staff members']"", ""PROJECT['complaints handled of #REF', '#1']"", ""PROJECT['date raised of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is earliest']"", ""PROJECT['last name of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_5804,How many distinct complaint type codes are there in the database?,return complaint type codes ;return distinct #1 ;return number of  #2,"[""SELECT['complaint type codes']"", ""PROJECT['distinct #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_5805,Count the number of different complaint type codes.,return complaint types ;return different codes of  #1 ;return number of  #2,"[""SELECT['complaint types']"", ""PROJECT['different codes of #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_5806,"Find the address line 1 and 2 of the customer with email ""vbogisich@example.org"".",return email vbogisich @ example.orgs ;return customer with  #1 ;return address of  #2 ;return lines 1 and 2 of  #3,"[""SELECT['email vbogisich @ example.orgs']"", ""PROJECT['customer with #REF', '#1']"", ""PROJECT['address of #REF', '#2']"", ""PROJECT['lines 1 and 2 of #REF', '#3']""]","['select', 'project', 'project', 'project']",train
SPIDER_train_5807,"What are lines 1 and 2 of the addressed of the customer with the email ""vbogisich@example.org""?","return customers ;return emails of #1 ;return #1 where #2 is  vbogisich @ example.org ;return addressed of #3 ;return line 1 of #4 ;return line 2 of #4 ;return #5 ,  #6","[""SELECT['customers']"", ""PROJECT['emails of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is vbogisich @ example.org']"", ""PROJECT['addressed of #REF', '#3']"", ""PROJECT['line 1 of #REF', '#4']"", ""PROJECT['line 2 of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_5808,Find the number of complaints with Product Failure type for each complaint status.,return complaints ;return complaint statuses ;return #1 with type Product Failure ;return number of  #3 for each  #2,"[""SELECT['complaints']"", ""SELECT['complaint statuses']"", ""FILTER['#1', 'with type Product Failure']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'select', 'filter', 'group', 'union']",train
SPIDER_train_5809,"Of complaints with the type code ""Product Failure"", how many had each different status code?",return different status codes ;return complaints with  #1 ;return type codes of  #2 ;return #2 where  #3 is Product Failure ;return number of  #4 for each  #1,"[""SELECT['different status codes']"", ""PROJECT['complaints with #REF', '#1']"", ""PROJECT['type codes of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is Product Failure']"", ""GROUP['count', '#4', '#1']"", ""UNION['#1', '#5']""]","['select', 'project', 'project', 'comparative', 'group', 'union']",train
SPIDER_train_581,What country does Roberto Almeida live?,return Roberto Almeida ;return country where #1 lives,"[""SELECT['Roberto Almeida']"", ""PROJECT['country where #REF lives', '#1']""]","['select', 'project']",train
SPIDER_train_5810,What is first names of the top 5 staff who have handled the greatest number of complaints?,return staff ;return complaints handled of #1 ;return number of  #2 for each #1 ;return the  5 highest of #3 ;return #1 where #3 is equal to any of #4 ;return the  first names of #5,"[""SELECT['staff']"", ""PROJECT['complaints handled of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['max', '#3']"", ""COMPARATIVE['#1', '#3', 'is equal to any of #4']"", ""PROJECT['the first names of #REF', '#5']""]","['select', 'project', 'group', 'aggregate', 'comparative', 'project']",train
SPIDER_train_5811,Return the first names of the 5 staff members who have handled the most complaints.,return staff members ;return complaints that  #1 handled ;return number of  #2 for each #1 ;return #1 where #3 is  the   highest ;return the   first names of #4,"[""SELECT['staff members']"", ""PROJECT['complaints that #REF handled', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']"", ""PROJECT['the first names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_5812,Which state has the most customers?,return states ;return customers in #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['states']"", ""PROJECT['customers in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_5813,Give the state that has the most customers.,return customers ;return state of #1 ;return number of #1 for each #2 ;return #2 where #3 is highest,"[""SELECT['customers']"", ""PROJECT['state of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""SUPERLATIVE['max', '#2', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_5814,How many submissions are there?,return submissions ;return the  number of  #1,"[""SELECT['submissions']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_5815,Count the number of submissions.,return submissions ;return number of #1,"[""SELECT['submissions']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_5816,List the authors of submissions in ascending order of scores.,return submissions ;return authors of  #1 ;return scores of  #1 ;return #2 sorted by #3 in ascending order,"[""SELECT['submissions']"", ""PROJECT['authors of #REF', '#1']"", ""PROJECT['scores of #REF', '#1']"", ""SORT['#2', '#3', 'in ascending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_5817,Find the author for each submission and list them in ascending order of submission score.,return submissions ;return authors of #1 ;return scores of #1 ;return #2 sorted by #3 in  ascending order,"[""SELECT['submissions']"", ""PROJECT['authors of #REF', '#1']"", ""PROJECT['scores of #REF', '#1']"", ""SORT['#2', '#3', 'in ascending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_5818,What are the authors of submissions and their colleges?,"return submissions ;return authors of  #1 ;return colleges of  #1 ;return #2 ,  #3","[""SELECT['submissions']"", ""PROJECT['authors of #REF', '#1']"", ""PROJECT['colleges of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_5819,"For each submission, show the author and their affiliated college.","return submissions ;return authors of #1 ;return colleges of #2 ;return #2 ,  #3","[""SELECT['submissions']"", ""PROJECT['authors of #REF', '#1']"", ""PROJECT['colleges of #REF', '#2']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_582,In which country does Roberto Almeida?,return countries ;return #1 that  Roberto Almeida is  from,"[""SELECT['countries']"", ""FILTER['#1', 'that Roberto Almeida is from']""]","['select', 'filter']",train
SPIDER_train_5820,"Show the names of authors from college ""Florida"" or ""Temple""",return authors ;return colleges of  #1 ;return #1 where #2 is  Florida ;return #1 where #2 is  Temple ;return #3 or  #4 ;return names of  #5,"[""SELECT['authors']"", ""PROJECT['colleges of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Florida']"", ""COMPARATIVE['#1', '#2', 'is Temple']"", ""UNION['#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_5821,"Which authors with submissions are from college ""Florida"" or ""Temple""?","return authors ;return #1 with  submissions ;return colleges of #2 ;return #2 where #3 is  Florida ;return #2 where #3 is  Temple ;return #4 ,  #5","[""SELECT['authors']"", ""FILTER['#1', 'with submissions']"", ""PROJECT['colleges of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is Florida']"", ""COMPARATIVE['#2', '#3', 'is Temple']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'comparative', 'comparative', 'union']",train
SPIDER_train_5822,What is the average score of submissions?,return submissions ;return scores of #1 ;return the  average of #2,"[""SELECT['submissions']"", ""PROJECT['scores of #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_5823,Compute the average score of submissions.,return submissions ;return scores of #1 ;return average of #2,"[""SELECT['submissions']"", ""PROJECT['scores of #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_5824,What is the author of the submission with the highest score?,return submission ;return #1 with the  highest score ;return author of  #2,"[""SELECT['submission']"", ""FILTER['#1', 'with the highest score']"", ""PROJECT['author of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5825,Find the author who achieved the highest score in a submission.,return submissions ;return scores of  #1 ;return submission where  #2 is  the highest ;return author of  #3,"[""SELECT['submissions']"", ""PROJECT['scores of #REF', '#1']"", ""PROJECT['submission where #REF is the highest', '#2']"", ""PROJECT['author of #REF', '#3']""]","['select', 'project', 'project', 'project']",train
SPIDER_train_5826,Show different colleges along with the number of authors of submission from each college.,"return colleges ;return submissions of #1 ;return the  authors of #2 ;return the  number of  #3 for each #1 ;return #1 ,  #4","[""SELECT['colleges']"", ""PROJECT['submissions of #REF', '#1']"", ""PROJECT['the authors of #REF', '#2']"", ""GROUP['count', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_5827,"For each college, return the college name and the count of authors with submissions from that college.","return colleges ;return names of  #1 ;return submissions of  #1 ;return authors of  #3 ;return number of #4 for each #1 ;return #2 ,   #5","[""SELECT['colleges']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['submissions of #REF', '#1']"", ""PROJECT['authors of #REF', '#3']"", ""GROUP['count', '#4', '#1']"", ""UNION['#2', '#5']""]","['select', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_5828,Show the most common college of authors of submissions.,return submissions ;return authors of #1 ;return colleges of #2 ;return number of #2 for each #3 ;return #3 where #4 is  the highest,"[""SELECT['submissions']"", ""PROJECT['authors of #REF', '#1']"", ""PROJECT['colleges of #REF', '#2']"", ""GROUP['count', '#2', '#3']"", ""COMPARATIVE['#3', '#4', 'is the highest']""]","['select', 'project', 'project', 'group', 'comparative']",train
SPIDER_train_5829,Which college has the most authors with submissions?,return authors ;return submissions of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  the  most ;return colleges of  #4,"[""SELECT['authors']"", ""PROJECT['submissions of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the most']"", ""PROJECT['colleges of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_583,List the name of albums that are released by aritist whose name has 'Led',return aritists ;return names of  #1 ;return #1 where  #2 has 'Led ;return albums of  #3 ;return names of  #4,"[""SELECT['aritists']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'has Led']"", ""PROJECT['albums of #REF', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_5830,Show the colleges that have both authors with submission score larger than 90 and authors with submission score smaller than 80.,return colleges ;return authors  of #1 ;return submission  scores of #2 ;return #1 where #3 is higher than 90 ;return #1 where #3 is lower than 80 ;return #1 in  both #4 and  #5,"[""SELECT['colleges']"", ""PROJECT['authors of #REF', '#1']"", ""PROJECT['submission scores of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is higher than 90']"", ""COMPARATIVE['#1', '#3', 'is lower than 80']"", ""INTERSECTION['#1', '#4', '#5']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection']",train
SPIDER_train_5831,Which colleges have both authors with submission score above 90 and authors with submission score below 80?,return colleges ;return authors of  #1 ;return submission scores of  #2 ;return #1 where #3 is  higher than 90 ;return #1 where #3 is  lower than 80 ;return #1 of  both #4 and  #5,"[""SELECT['colleges']"", ""PROJECT['authors of #REF', '#1']"", ""PROJECT['submission scores of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is higher than 90']"", ""COMPARATIVE['#1', '#3', 'is lower than 80']"", ""INTERSECTION['#1', '#4', '#5']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection']",train
SPIDER_train_5832,Show the authors of submissions and the acceptance results of their submissions.,"return submissions ;return authors of #1 ;return acceptance results of #1 ;return #2 , #3","[""SELECT['submissions']"", ""PROJECT['authors of #REF', '#1']"", ""PROJECT['acceptance results of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_5833,"For each submission, find its author and acceptance result.","return submissions ;return authors of  #1 ;return acceptance results of  #1 ;return #2 ,   #3","[""SELECT['submissions']"", ""PROJECT['authors of #REF', '#1']"", ""PROJECT['acceptance results of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_5834,Show the result of the submission with the highest score.,return submissions ;return scores of  #1 ;return #1 where #2 is  highest ;return result of  #3,"[""SELECT['submissions']"", ""PROJECT['scores of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['result of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_5835,Which submission received the highest score in acceptance result. Show me the result.,return submissions ;return acceptance results of #1 ;return scores of #2 ;return #1 where #3 is  highest ;return acceptance result  of #4,"[""SELECT['submissions']"", ""PROJECT['acceptance results of #REF', '#1']"", ""PROJECT['scores of #REF', '#2']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['acceptance result of #REF', '#4']""]","['select', 'project', 'project', 'superlative', 'project']",train
SPIDER_train_5836,Show each author and the number of workshops they submitted to.,"return authors ;return workshops #1 submitted to ;return number of  #2 for each  #1 ;return #1 ,  #3","[""SELECT['authors']"", ""PROJECT['workshops #REF submitted to', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_5837,How many workshops did each author submit to? Return the author name and the number of workshops.,"return authors ;return names of #1 ;return workshops  #1 submit to  ;return number of  #3 for each #1 ;return #2 ,  #4","[""SELECT['authors']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['workshops #REF submit to', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_5838,Show the authors who have submissions to more than one workshop.,return workshops ;return author with  submissions to  #1 ;return number of  workshops of  authors ;return #2 where #3 is higher than one,"[""SELECT['workshops']"", ""PROJECT['author with submissions to #REF', '#1']"", ""SELECT['number of workshops of authors']"", ""COMPARATIVE['#2', '#3', 'is higher than one']""]","['select', 'project', 'select', 'comparative']",train
SPIDER_train_5839,Which authors have submitted to more than one workshop?,return authors ;return workshops #1 have  submitted to ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than one,"[""SELECT['authors']"", ""PROJECT['workshops #REF have submitted to', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than one']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_584,What is the title of the album that was released by the artist whose name has the phrase 'Led'?,return artists ;return names of #1 ;return #1 where #2 has the   phrase 'Led ;return albums released by #3 ;return the   title of #4,"[""SELECT['artists']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'has the phrase Led']"", ""PROJECT['albums released by #REF', '#3']"", ""PROJECT['the title of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_5840,Show the date and venue of each workshop in ascending alphabetical order of the venue.,"return workshops ;return dates of  #1 ;return venues of  #1 ;return #2 ,  #3 ;return #4 sorted by #3 in ascending alphabetical order","[""SELECT['workshops']"", ""PROJECT['dates of #REF', '#1']"", ""PROJECT['venues of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#4', '#3', 'in ascending alphabetical order']""]","['select', 'project', 'project', 'union', 'sort']",train
SPIDER_train_5841,Sort the each workshop in alphabetical order of the venue. Return the date and venue of each workshop.,"return workshops ;return venues of  #1 ;return dates of  #1 ;return #3 ,  #2 ;return #4 sorted by #2 in alphabetical order","[""SELECT['workshops']"", ""PROJECT['venues of #REF', '#1']"", ""PROJECT['dates of #REF', '#1']"", ""UNION['#3', '#2']"", ""SORT['#4', '#2', 'in alphabetical order']""]","['select', 'project', 'project', 'union', 'sort']",train
SPIDER_train_5842,List the authors who do not have submission to any workshop.,return authors ;return #1 with submissions to workshops ;return #1 besides  #2,"[""SELECT['authors']"", ""FILTER['#1', 'with submissions to workshops']"", ""DISCARD['#1', '#2']""]","['select', 'filter', 'discard']",train
SPIDER_train_5843,Which authors did not submit to any workshop?,return authors ;return #1 that  did not  submit to any workshop,"[""SELECT['authors']"", ""FILTER['#1', 'that did not submit to any workshop']""]","['select', 'filter']",train
SPIDER_train_5844,Find the number of investors in total.,return investors ;return number of #1,"[""SELECT['investors']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_5845,Show all investor details.,return investor ;return details of #1,"[""SELECT['investor']"", ""PROJECT['details of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_5846,Show all distinct lot details.,return lots ;return distinct #1 ;return details of  #2,"[""SELECT['lots']"", ""PROJECT['distinct #REF', '#1']"", ""PROJECT['details of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_5847,Show the maximum amount of transaction.,return transactions ;return amount of  #1 ;return maximum #2,"[""SELECT['transactions']"", ""PROJECT['amount of #REF', '#1']"", ""AGGREGATE['max', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_5848,Show all date and share count of transactions.,"return transactions ;return date of  #1 ;return share count of  #1 ;return #2, #3","[""SELECT['transactions']"", ""PROJECT['date of #REF', '#1']"", ""PROJECT['share count of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_5849,What is the total share of transactions?,return transactions ;return shares of #1 ;return number of  #2,"[""SELECT['transactions']"", ""PROJECT['shares of #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_585,How many customers does Steve Johnson support?,return Steve Johnson ;return customers that #1 support ;return number of  #2,"[""SELECT['Steve Johnson']"", ""PROJECT['customers that #REF support', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_5850,Show all transaction ids with transaction code 'PUR'.,return transactions ;return transaction  codes of  #1 ;return #1 where #2 is  'PUR ;return transaction  ids of  #3,"[""SELECT['transactions']"", ""PROJECT['transaction codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is PUR']"", ""PROJECT['transaction ids of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5851,"Show all dates of transactions whose type code is ""SALE"".",return transactions ;return #1 that  has type code of  SALE ;return dates of  #2,"[""SELECT['transactions']"", ""FILTER['#1', 'that has type code of SALE']"", ""PROJECT['dates of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5852,"Show the average amount of transactions with type code ""SALE"".",return transactions ;return type codes of  #1 ;return #1 where #2 is  SALE ;return amounts of  #3 ;return average of  #4,"[""SELECT['transactions']"", ""PROJECT['type codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is SALE']"", ""PROJECT['amounts of #REF', '#3']"", ""AGGREGATE['avg', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_5853,"Show the description of transaction type with code ""PUR"".",return transaction types ;return codes of #1 ;return #1 where #2 is  PUR ;return the  description of #3,"[""SELECT['transaction types']"", ""PROJECT['codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is PUR']"", ""PROJECT['the description of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5854,"Show the minimum amount of transactions whose type code is ""PUR"" and whose share count is bigger than 50.",return transactions ;return share counts of  #1 ;return #1 where #2 is  more than 50 ;return #3 whose type code is  PUR ;return amounts of  #4 ;return the  minimum of  #5,"[""SELECT['transactions']"", ""PROJECT['share counts of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is more than 50']"", ""FILTER['#3', 'whose type code is PUR']"", ""PROJECT['amounts of #REF', '#4']"", ""AGGREGATE['min', '#5']""]","['select', 'project', 'comparative', 'filter', 'project', 'aggregate']",train
SPIDER_train_5855,Show the maximum share count of transactions where the amount is smaller than 10000,return transactions ;return amounts of #1 ;return #1 where #2 is  smaller than 10000 ;return share counts of #3 ;return the  maximum of #4,"[""SELECT['transactions']"", ""PROJECT['amounts of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is smaller than 10000']"", ""PROJECT['share counts of #REF', '#3']"", ""AGGREGATE['max', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_5856,Show the dates of transactions if the share count is bigger than 100 or the amount is bigger than 1000.,"return transactions ;return share count of #1 ;return #1 where #2 is higher than 100 ;return the  amount of #1 ;return #1 where #4 is higher than 1000 ;return #3 ,  #5 ;return the  dates of #6","[""SELECT['transactions']"", ""PROJECT['share count of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 100']"", ""PROJECT['the amount of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is higher than 1000']"", ""UNION['#3', '#5']"", ""PROJECT['the dates of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'comparative', 'union', 'project']",train
SPIDER_train_5857,Show the transaction type descriptions and dates if the share count is smaller than 10.,"return transactions ;return share counts of  #1 ;return #1 where #2 is  lower than 10 ;return transaction type descriptions of  #3 ;return dates of  #3 ;return #4 ,  #5","[""SELECT['transactions']"", ""PROJECT['share counts of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is lower than 10']"", ""PROJECT['transaction type descriptions of #REF', '#3']"", ""PROJECT['dates of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_5858,Show details of all investors if they make any transaction with share count greater than 100.,return investors ;return transactions of  #1 ;return share counts of  #2 ;return #1 where #3 is  higher than 100 ;return details of  #4,"[""SELECT['investors']"", ""PROJECT['transactions of #REF', '#1']"", ""PROJECT['share counts of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is higher than 100']"", ""PROJECT['details of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_5859,How many distinct transaction types are used in the transactions?,return the  transactions ;return transaction types used in #1 ;return number of  distinct #2,"[""SELECT['the transactions']"", ""PROJECT['transaction types used in #REF', '#1']"", ""PROJECT['distinct #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_586,What is the count of customers that Steve Johnson supports?,return Steve Johnson ;return customers #1 supports ;return number of  #2,"[""SELECT['Steve Johnson']"", ""PROJECT['customers #REF supports', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_5860,Return the lot details and investor ids.,"return lots ;return details of  #1 ;return investors of  #1 ;return ids of  #3 ;return #2 ,  #4","[""SELECT['lots']"", ""PROJECT['details of #REF', '#1']"", ""PROJECT['investors of #REF', '#1']"", ""PROJECT['ids of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_5861,"Return the lot details of lots that belong to investors with details ""l""?",return investors ;return #1 with  detail l ;return lots belong to  #2 ;return details  of  #3,"[""SELECT['investors']"", ""FILTER['#1', 'with detail l']"", ""PROJECT['lots belong to #REF', '#2']"", ""PROJECT['details of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_5862,What are the purchase details of transactions with amount bigger than 10000?,return transactions ;return amounts of  #1 ;return #1 where #2 is  higher than 10000 ;return purchase details of  #3,"[""SELECT['transactions']"", ""PROJECT['amounts of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 10000']"", ""PROJECT['purchase details of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5863,What are the sale details and dates of transactions with amount smaller than 3000?,"return transactions ;return amounts of  #1 ;return #1 where #2 is  smaller than 3000 ;return sale details of  #3 ;return dates of  #3 ;return #4 ,  #5","[""SELECT['transactions']"", ""PROJECT['amounts of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is smaller than 3000']"", ""PROJECT['sale details of #REF', '#3']"", ""PROJECT['dates of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_5864,What are the lot details of lots associated with transactions with share count smaller than 50?,return transactions ;return share counts of #1 ;return #1 where #2 is  lower than 50 ;return lots associated with  #3 ;return lot details of #4,"[""SELECT['transactions']"", ""PROJECT['share counts of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is lower than 50']"", ""PROJECT['lots associated with #REF', '#3']"", ""PROJECT['lot details of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_5865,"What are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is ""PUR""?",return transactions ;return share counts of  #1 ;return #1 where #2 is  higher than 100 ;return type codes of  #1 ;return #1 where #4 is  PUR ;return #1 of  both #3 and  #5 ;return lots associated with #6 ;return lot details of  #7,"[""SELECT['transactions']"", ""PROJECT['share counts of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 100']"", ""PROJECT['type codes of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is PUR']"", ""INTERSECTION['#1', '#3', '#5']"", ""PROJECT['lots associated with #REF', '#6']"", ""PROJECT['lot details of #REF', '#7']""]","['select', 'project', 'comparative', 'project', 'comparative', 'intersection', 'project', 'project']",train
SPIDER_train_5866,Show the average transaction amount for different transaction types.,return transaction types ;return  transaction amount of #1 ;return average #2 for each #1,"[""SELECT['transaction types']"", ""PROJECT['transaction amount of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_5867,Show the maximum and minimum share count of different transaction types.,"return transaction types ;return share count of  different #1 ;return maximum #2 ;return minimum #2 ;return #3 ,  #4","[""SELECT['transaction types']"", ""PROJECT['share count of different #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""AGGREGATE['min', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_5868,Show the average share count of transactions for different investors.,return investors ;return transactions of #1 ;return share counts of #2 ;return the  average of #3 for each #1,"[""SELECT['investors']"", ""PROJECT['transactions of #REF', '#1']"", ""PROJECT['share counts of #REF', '#2']"", ""GROUP['avg', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_5869,"Show the average share count of transactions each each investor, ordered by average share count.",return investors ;return transactions of  #1 ;return share counts of  #2 ;return average  of  #3 for each  #1 ;return #4 ;return #5 sorted by #4,"[""SELECT['investors']"", ""PROJECT['transactions of #REF', '#1']"", ""PROJECT['share counts of #REF', '#2']"", ""GROUP['avg', '#3', '#1']"", ""FILTER['#4', '']"", ""SORT['#5', '#4']""]","['select', 'project', 'project', 'group', 'filter', 'sort']",train
SPIDER_train_587,"What is the title, phone and hire date of Nancy Edwards?","return Nancy Edwards ;return title of #1 ;return phone of #1 ;return hire date of #1 ;return #2 ,  #3 ,   #4","[""SELECT['Nancy Edwards']"", ""PROJECT['title of #REF', '#1']"", ""PROJECT['phone of #REF', '#1']"", ""PROJECT['hire date of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_5870,Show the average amount of transactions for different investors.,return investors ;return transactions of #1 ;return amount of #2 ;return average of #3 for each  #1,"[""SELECT['investors']"", ""PROJECT['transactions of #REF', '#1']"", ""PROJECT['amount of #REF', '#2']"", ""GROUP['avg', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_5871,Show the average amount of transactions for different lots.,return different lots ;return transactions of  #1 ;return average of  #2 for each  #1,"[""SELECT['different lots']"", ""PROJECT['transactions of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_5872,"Show the average amount of transactions for different lots, ordered by average amount of transactions.",return different lots ;return transactions of #1 ;return amounts of #2 ;return average  of #3 for each #1 ;return average  of #3 ;return #4 sorted by #5,"[""SELECT['different lots']"", ""PROJECT['transactions of #REF', '#1']"", ""PROJECT['amounts of #REF', '#2']"", ""GROUP['avg', '#3', '#1']"", ""AGGREGATE['avg', '#3']"", ""SORT['#4', '#5']""]","['select', 'project', 'project', 'group', 'aggregate', 'sort']",train
SPIDER_train_5873,"Show the number of transactions with transaction type code ""SALE"" for different investors if it is larger than 0.",return different investors ;return transactions of #1 ;return transaction type codes of #2 ;return #2 where #3 is SALE ;return number of  #4 for each #1 ;return #5 that are higher than 0,"[""SELECT['different investors']"", ""PROJECT['transactions of #REF', '#1']"", ""PROJECT['transaction type codes of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is SALE']"", ""GROUP['count', '#4', '#1']"", ""FILTER['#5', 'that are higher than 0']""]","['select', 'project', 'project', 'comparative', 'group', 'filter']",train
SPIDER_train_5874,Show the number of transactions for different investors.,return investors ;return number of  transactions for each  #1,"[""SELECT['investors']"", ""PROJECT['transactions', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_5875,Show the transaction type code that occurs the fewest times.,return transaction type code ;return #1 that  occurs the  fewest times,"[""SELECT['transaction type code']"", ""FILTER['#1', 'that occurs the fewest times']""]","['select', 'filter']",train
SPIDER_train_5876,Show the transaction type code that occurs the most frequently.,return transaction type codes ;return transactions of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['transaction type codes']"", ""PROJECT['transactions of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_5877,Show the description of the transaction type that occurs most frequently.,return transaction types ;return transactions of #1 ;return number of #2 for each #1 ;return #1 where #3 is  highest ;return description of #4,"[""SELECT['transaction types']"", ""PROJECT['transactions of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['description of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_5878,Show the id and details of the investor that has the largest number of transactions.,"return investors ;return transactions of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest ;return id of #4 ;return details of #4 ;return #5 ,  #6","[""SELECT['investors']"", ""PROJECT['transactions of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['id of #REF', '#4']"", ""PROJECT['details of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_5879,Show the id and details for the investors who have the top 3 number of transactions.,"return investors ;return transactions of #1 ;return number of  #2 for each #1 ;return #1 where #3 is highest ;return #1 besides  #4 ;return #5 where #3 is highest ;return #5 besides  #6 ;return #7 where #3 is highest ;return #4 ,  #6 ,   #8 ;return id of #9 ;return details of #9 ;return #10 ,  #11","[""SELECT['investors']"", ""PROJECT['transactions of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""DISCARD['#1', '#4']"", ""SUPERLATIVE['max', '#5', '#3']"", ""DISCARD['#5', '#6']"", ""SUPERLATIVE['max', '#7', '#3']"", ""UNION['#4', '#6', '#8']"", ""PROJECT['id of #REF', '#9']"", ""PROJECT['details of #REF', '#9']"", ""UNION['#10', '#11']""]","['select', 'project', 'group', 'superlative', 'discard', 'superlative', 'discard', 'superlative', 'union', 'project', 'project', 'union']",train
SPIDER_train_588,"What is the title, phone number and hire date for the employee named Nancy Edwards?","return employees ;return #1 named Nancy Edwards ;return title of  #2 ;return phone number of  #2 ;return hire date of  #2 ;return #3 ,  #4 ,   #5","[""SELECT['employees']"", ""FILTER['#1', 'named Nancy Edwards']"", ""PROJECT['title of #REF', '#2']"", ""AGGREGATE['count', '#2']"", ""PROJECT['hire date of #REF', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'filter', 'project', 'aggregate', 'project', 'union']",train
SPIDER_train_5880,Show the ids of the investors who have at least two transactions.,return investors ;return transactions of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  at least two ;return ids of #4,"[""SELECT['investors']"", ""PROJECT['transactions of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""PROJECT['ids of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_5882,What are the dates of transactions with at least 100 share count or amount bigger than 100?,return transactions ;return share counts of  #1 ;return #1 where #2 is  at least 100 ;return amounts of  #1 ;return #1 where #4 is  higher than 100 ;return #3 or  #5 ;return dates of  #6,"[""SELECT['transactions']"", ""PROJECT['share counts of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least 100']"", ""PROJECT['amounts of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is higher than 100']"", ""UNION['#3', '#5']"", ""PROJECT['dates of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'comparative', 'union', 'project']",train
SPIDER_train_5883,What are the details of all sales and purchases?,"return sales ;return purchases ;return #1 ,  #2 ;return details of  #3","[""SELECT['sales']"", ""SELECT['purchases']"", ""UNION['#1', '#2']"", ""PROJECT['details of #REF', '#3']""]","['select', 'select', 'union', 'project']",train
SPIDER_train_5884,What are the details of the lots which are not used in any transactions?,return transactions ;return lots used in any  #1 ;return lots besides #2 ;return the  details of #3,"[""SELECT['transactions']"", ""PROJECT['lots used in any #REF', '#1']"", ""SELECT['lots']"", ""DISCARD['#3', '#2']"", ""PROJECT['the details of #REF', '#4']""]","['select', 'project', 'select', 'discard', 'project']",train
SPIDER_train_5885,How many available hotels are there in total?,return hotels ;return #1 that  are  available ;return number of #2,"[""SELECT['hotels']"", ""FILTER['#1', 'that are available']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_5886,Find the total number of available hotels.,return hotels ;return #1 that  are  available ;return number of #2,"[""SELECT['hotels']"", ""FILTER['#1', 'that are available']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_5887,What are the price ranges of hotels?,return hotels ;return price ranges of  #1,"[""SELECT['hotels']"", ""PROJECT['price ranges of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_5888,Tell me the price ranges for all the hotels.,return hotels ;return price ranges of #1,"[""SELECT['hotels']"", ""PROJECT['price ranges of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_5889,Show all distinct location names.,return locations ;return names of  #1 ;return distinct #2,"[""SELECT['locations']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['distinct #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_589,find the full name of employees who report to Nancy Edwards?,return employee ;return #1 who  report to Nancy Edwards ;return full name of  #2,"[""SELECT['employee']"", ""FILTER['#1', 'who report to Nancy Edwards']"", ""PROJECT['full name of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5890,What are the distinct location names?,return locations ;return names of  #1 ;return distinct #2,"[""SELECT['locations']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['distinct #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_5891,Show the names and details of all the staff members.,"return staff members ;return names of #1 ;return details of #1 ;return #2 ,  #3","[""SELECT['staff members']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['details of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_5892,What is the name and detail of each staff member?,"return staff members ;return names of  #1 ;return details of  #1 ;return #2 ,  #3","[""SELECT['staff members']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['details of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_5893,Show details of all visitors.,return visitors ;return details of  #1,"[""SELECT['visitors']"", ""PROJECT['details of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_5894,What is the detail of each visitor?,return visitors ;return details of #1,"[""SELECT['visitors']"", ""PROJECT['details of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_5895,Show the price ranges of hotels with 5 star ratings.,return hotels ;return ratings of  #1 ;return #1 where #2 is  5 star ;return price ranges of  #3,"[""SELECT['hotels']"", ""PROJECT['ratings of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 5 star']"", ""PROJECT['price ranges of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5896,What are the price ranges of five star hotels?,return hotels ;return #1 that  are  five star ;return price ranges of  #2,"[""SELECT['hotels']"", ""FILTER['#1', 'that are five star']"", ""PROJECT['price ranges of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5897,Show the average price range of hotels that have 5 star ratings and allow pets.,return hotels ;return #1 with 5 star ratings ;return #2 that  allow pets ;return the  price of  #3 ;return the  average of  #4,"[""SELECT['hotels']"", ""FILTER['#1', 'with 5 star ratings']"", ""FILTER['#2', 'that allow pets']"", ""PROJECT['the price of #REF', '#3']"", ""AGGREGATE['avg', '#4']""]","['select', 'filter', 'filter', 'project', 'aggregate']",train
SPIDER_train_5898,What is the average price range of five star hotels that allow pets?,return five star hotels ;return #1 that  allow pets ;return price range of  #2 ;return average of  #3,"[""SELECT['five star hotels']"", ""FILTER['#1', 'that allow pets']"", ""PROJECT['price range of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_5899,"What is the address of the location ""UK Gallery""?",return location ;return #1 that  is  UK Gallery ;return address of  #2,"[""SELECT['location']"", ""FILTER['#1', 'that is UK Gallery']"", ""PROJECT['address of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_59,What are the ids of the students who registered for some courses but had the least number of courses for all students?,return students  ;return courses of #1 ;return number of  #2 for each #1 ;return #1 where #3 is higher than zero ;return #4 where #3 is lowest ;return ids of #5,"[""SELECT['students']"", ""PROJECT['courses of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than zero']"", ""SUPERLATIVE['min', '#4', '#3']"", ""PROJECT['ids of #REF', '#5']""]","['select', 'project', 'group', 'comparative', 'superlative', 'project']",train
SPIDER_train_590,What is the first and last name of the employee who reports to Nancy Edwards?,"return employees ;return #1 who report to  Nancy Edwards ;return the  first name of #2 ;return the  last name of #2 ;return #3 ,  #4","[""SELECT['employees']"", ""FILTER['#1', 'who report to Nancy Edwards']"", ""PROJECT['the first name of #REF', '#2']"", ""PROJECT['the last name of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_5900,"Find the address of the location named ""UK Gallery"".",return location named UK Gallery ;return address of  #1,"[""SELECT['location named UK Gallery']"", ""PROJECT['address of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_5901,What is the detail of the location UK Gallery?,return locations ;return details of  #1 ;return #2 where #1 is  UK Gallery,"[""SELECT['locations']"", ""PROJECT['details of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is UK Gallery']""]","['select', 'project', 'comparative']",train
SPIDER_train_5902,"Return the detail of the location named ""UK Gallery"".",return locations ;return #1 named UK Gallery ;return detail of  #2,"[""SELECT['locations']"", ""FILTER['#1', 'named UK Gallery']"", ""PROJECT['detail of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5903,"Which location names contain the word ""film""?",return locations ;return names of #1 ;return #1 where #2 contain the  word film ;return names of #3,"[""SELECT['locations']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'contain the word film']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5904,"Find all the locations whose names contain the word ""film"".",return locations ;return #1 names ;return #2 that  contain the word film,"[""SELECT['locations']"", ""FILTER['#1', 'names']"", ""FILTER['#2', 'that contain the word film']""]","['select', 'filter', 'filter']",train
SPIDER_train_5905,How many distinct names are associated with all the photos?,return photos ;return names associated with  #1 ;return distinct #2 ;return number of  #3,"[""SELECT['photos']"", ""PROJECT['names associated with #REF', '#1']"", ""PROJECT['distinct #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_5906,Count the number of distinct names associated with the photos.,return names ;return #1 that are associated with the  photos ;return distinct #2 ;return number of  #3,"[""SELECT['names']"", ""FILTER['#1', 'that are associated with the photos']"", ""PROJECT['distinct #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_5907,What are the distinct visit dates?,return distinct visit dates,"[""SELECT['distinct visit dates']""]",['select'],train
SPIDER_train_5908,Find all the distinct visit dates.,return visits ;return distinct dates of  #1,"[""SELECT['visits']"", ""PROJECT['distinct dates of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_5909,What are the names of the tourist attractions that can be accessed by bus?,return tourist attractions ;return #1 that can be accessed by bus ;return names of  #2,"[""SELECT['tourist attractions']"", ""FILTER['#1', 'that can be accessed by bus']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_591,What is the address of employee Nancy Edwards?,return employee ;return #1 that is  Nancy Edwards ;return address of  #2,"[""SELECT['employee']"", ""FILTER['#1', 'that is Nancy Edwards']"", ""PROJECT['address of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5910,Which tourist attractions can we get to by bus? Tell me the names of the attractions.,return tourist attractions ;return #1 we can get to by bus ;return names of  #2,"[""SELECT['tourist attractions']"", ""FILTER['#1', 'we can get to by bus']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5911,What are the names and opening hours of the tourist attractions that can be accessed by bus or walk?,"return tourist attractions ;return #1 that  can be accessed by bus ;return #1 that  can be accessed by walk ;return #2 or  #3 ;return names of #4 ;return opening hours of #4 ;return #5 ,  #6","[""SELECT['tourist attractions']"", ""FILTER['#1', 'that can be accessed by bus']"", ""FILTER['#1', 'that can be accessed by walk']"", ""UNION['#2', '#3']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['opening hours of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'filter', 'filter', 'union', 'project', 'project', 'union']",train
SPIDER_train_5912,Find the names and opening hours of the tourist attractions that we get to by bus or walk.,"return tourist attractions ;return #1 that we get to by bus ;return #1 that we walk to ;return #2 ,  #3 ;return the  names of #4 ;return the  opening hours of #4 ;return #5 ,  #6","[""SELECT['tourist attractions']"", ""FILTER['#1', 'that we get to by bus']"", ""FILTER['#1', 'that we walk to']"", ""UNION['#2', '#3']"", ""PROJECT['the names of #REF', '#4']"", ""PROJECT['the opening hours of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'filter', 'filter', 'union', 'project', 'project', 'union']",train
SPIDER_train_5913,What are the star rating descriptions of the hotels with price above 10000?,return hotels ;return prices of  #1 ;return #1 where #2 is  higher than 10000 ;return star ratings of  #3 ;return descriptions of  #4,"[""SELECT['hotels']"", ""PROJECT['prices of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 10000']"", ""PROJECT['star ratings of #REF', '#3']"", ""PROJECT['descriptions of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_5914,Give me the star rating descriptions of the hotels that cost more than 10000.,return hotels ;return cost of  #1 ;return #1 where  #2 is higher than 10000 ;return star rating descriptions of  #3,"[""SELECT['hotels']"", ""PROJECT['cost of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 10000']"", ""PROJECT['star rating descriptions of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5915,What are the details and opening hours of the museums?,"return museums ;return details of #1 ;return opening hours of #1 ;return #2 ,  #3","[""SELECT['museums']"", ""PROJECT['details of #REF', '#1']"", ""PROJECT['opening hours of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_5916,Give me the detail and opening hour for each museum.,"return museums ;return details of  #1 ;return opening hours of  #1 ;return #2 ,   #3","[""SELECT['museums']"", ""PROJECT['details of #REF', '#1']"", ""PROJECT['opening hours of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_5917,"What is the name of the tourist attraction that is associated with the photo ""game1""?",return tourist attractions ;return photos of #1 ;return #1 where any  #2 are game1 ;return the   name of #3,"[""SELECT['tourist attractions']"", ""PROJECT['photos of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'are game1']"", ""PROJECT['the name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5918,"Which tourist attraction is associated with the photo ""game1""? Return its name.",return tourist attractions ;return photos that #1 are associated with  ;return #1 where  #2 is game1 ;return the name of  #3,"[""SELECT['tourist attractions']"", ""PROJECT['photos that #REF are associated with', '#1']"", ""COMPARATIVE['#1', '#2', 'is game1']"", ""PROJECT['the name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5919,"What are the names and descriptions of the photos taken at the tourist attraction ""film festival""?","return photos ;return #1 taken at the  tourist attraction film festival ;return names of  #2 ;return descriptions of  #2 ;return #3 ,  #4","[""SELECT['photos']"", ""FILTER['#1', 'taken at the tourist attraction film festival']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['descriptions of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_592,What is Nancy Edwards's address?,return Nancy Edwards ;return address of  #1,"[""SELECT['Nancy Edwards']"", ""PROJECT['address of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_5920,"Find the names and descriptions of the photos taken at the tourist attraction called ""film festival"".","return tourist attraction ;return #1 called film festival ;return photos taken at #2 ;return names of  #3 ;return descriptions of  #3 ;return #4 ,   #5","[""SELECT['tourist attraction']"", ""FILTER['#1', 'called film festival']"", ""PROJECT['photos taken at #REF', '#2']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['descriptions of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_5921,What are the details and ways to get to tourist attractions related to royal family?,"return tourist attractions ;return #1 related to   the  royal family ;return details of  #2 ;return ways to   get to #2 ;return #3 ,  #4","[""SELECT['tourist attractions']"", ""FILTER['#1', 'related to the royal family']"", ""PROJECT['details of #REF', '#2']"", ""PROJECT['ways to get to #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_5922,Which tourist attractions are related to royal family? Tell me their details and how we can get there.,"return tourist attractions ;return #1 that  are related to  the  royal family ;return the  details of #2 ;return how to  get to #2 ;return #3 ,  #4","[""SELECT['tourist attractions']"", ""FILTER['#1', 'that are related to the royal family']"", ""PROJECT['the details of #REF', '#2']"", ""PROJECT['how to get to #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_5923,What are the details of the shops that can be accessed by walk?,return shops ;return #1 that  can be accessed by walk ;return details of  #2,"[""SELECT['shops']"", ""FILTER['#1', 'that can be accessed by walk']"", ""PROJECT['details of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5924,Find the details of the shops that can be reached by walk.,return shops ;return #1 that  can be reached by walk ;return details of  #2,"[""SELECT['shops']"", ""FILTER['#1', 'that can be reached by walk']"", ""PROJECT['details of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5925,"What is the name of the staff that is in charge of the attraction named ""US museum""?",return attractions ;return #1 named US museum ;return the   staff in charge of #2 ;return the   name of #3,"[""SELECT['attractions']"", ""FILTER['#1', 'named US museum']"", ""PROJECT['the staff in charge of #REF', '#2']"", ""PROJECT['the name of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_5926,"Tell me the name of the staff in charge of the attraction called ""US museum"".",return the   attractions ;return #1 called US museum ;return staff in charge of #2 ;return the   name of #3,"[""SELECT['the attractions']"", ""FILTER['#1', 'called US museum']"", ""PROJECT['staff in charge of #REF', '#2']"", ""PROJECT['the name of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_5927,What are the details of the markets that can be accessed by walk or bus?,"return markets ;return #1 that  can be accessed by walk ;return #1 that  can be accessed by bus ;return #2 ,  #3 ;return the  details of #4","[""SELECT['markets']"", ""FILTER['#1', 'that can be accessed by walk']"", ""FILTER['#1', 'that can be accessed by bus']"", ""UNION['#2', '#3']"", ""PROJECT['the details of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_5928,Find the details of all the markets that are accessible by walk or bus.,return markets ;return #1 accessible by walk ;return #1 accessible by bus ;return #2 and #3 ;return details of  #4,"[""SELECT['markets']"", ""FILTER['#1', 'accessible by walk']"", ""FILTER['#1', 'accessible by bus']"", ""UNION['#2', '#3']"", ""PROJECT['details of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_5929,What are the visit date and details of the visitor whose detail is 'Vincent'?,"return visitors ;return #1 whose detail is  'Vincent ;return the  visit date of  #2 ;return the  details of  #2 ;return #3 ,  #4","[""SELECT['visitors']"", ""FILTER['#1', 'whose detail is Vincent']"", ""PROJECT['the visit date of #REF', '#2']"", ""PROJECT['the details of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_593,Find the full name of employee who supported the most number of customers.,return employees ;return customers of  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  highest ;return full name of  #4,"[""SELECT['employees']"", ""PROJECT['customers of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['full name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_5930,Find the visit date and details of the tourist whose detail is 'Vincent',"return tourists ;return details of  #1 ;return #1 where #2 is  'Vincent ;return visit date of  #3 ;return details of  #3 ;return #4 ,  #5","[""SELECT['tourists']"", ""PROJECT['details of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Vincent']"", ""PROJECT['visit date of #REF', '#3']"", ""PROJECT['details of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_5931,Which tourist attractions does the visitor with detail 'Vincent' visit?,return tourist attractions ;return visitors of  #1 ;return details of  #2 ;return #1 where #3 is  'Vincent,"[""SELECT['tourist attractions']"", ""PROJECT['visitors of #REF', '#1']"", ""PROJECT['details of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Vincent']""]","['select', 'project', 'project', 'comparative']",train
SPIDER_train_5932,Show the tourist attractions visited by the tourist whose detail is 'Vincent'.,return tourist attractions ;return tourists who  visited #1 ;return details of  #2 ;return #1 where #3 is  'Vincent,"[""SELECT['tourist attractions']"", ""PROJECT['tourists who visited #REF', '#1']"", ""PROJECT['details of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Vincent']""]","['select', 'project', 'project', 'comparative']",train
SPIDER_train_5933,What are the names of the tourist attractions and the dates when the tourists named Vincent or Vivian visited there?,"return tourist attractions ;return names of  #1 ;return dates when  tourists named Vincent visited #1 ;return dates when  tourists named Vivian visited #1 ;return #2 ,  #3 ,   #4","[""SELECT['tourist attractions']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['dates when tourists named Vincent visited #REF', '#1']"", ""PROJECT['dates when tourists named Vivian visited #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_5935,Show the average price of hotels for each star rating code.,return hotels ;return star rating codes of #1  ;return price of  #1 ;return average of #3 for each  #2,"[""SELECT['hotels']"", ""PROJECT['star rating codes of #REF', '#1']"", ""PROJECT['price of #REF', '#1']"", ""GROUP['avg', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_5936,What is the average price range of hotels for each each star rating code?,return hotels ;return prices of #1 ;return star ratings of #1 ;return average of #2 for each #3,"[""SELECT['hotels']"", ""PROJECT['prices of #REF', '#1']"", ""PROJECT['star ratings of #REF', '#1']"", ""GROUP['avg', '#2', '#3']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_5937,Show the average price of hotels for different pet policy.,return different pet policies ;return hotels with  #1 ;return prices of #2 ;return average of #3 for each #1,"[""SELECT['different pet policies']"", ""PROJECT['hotels with #REF', '#1']"", ""PROJECT['prices of #REF', '#2']"", ""GROUP['avg', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_5938,What are the average prices of hotels grouped by their pet policy.,return hotels ;return prices of  #1 ;return pet policies of  #1 ;return average of  #2 for each  #3,"[""SELECT['hotels']"", ""PROJECT['prices of #REF', '#1']"", ""PROJECT['pet policies of #REF', '#1']"", ""GROUP['avg', '#2', '#3']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_5939,"Show the id and star rating of each hotel, ordered by its price from low to high.","return hotels ;return ids of  #1 ;return star ratings of  #1 ;return prices of  #1 ;return #2 ,  #3 ,   ;return #5 sorted by #4 from  low to high","[""SELECT['hotels']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['star ratings of #REF', '#1']"", ""PROJECT['prices of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#5', '#4', 'from low to high']""]","['select', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_594,What is the full name of the employee who has the most customers?,return employees ;return customers of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest ;return full name of #4,"[""SELECT['employees']"", ""PROJECT['customers of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['full name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_5940,Find the id and star rating of each hotel and sort them in increasing order of price.,return hotels ;return ids of  #1 ;return star ratings of  #1 ;return prices of  #1 ;return #2 and #3 ;return #5 sorted by #4,"[""SELECT['hotels']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['star ratings of #REF', '#1']"", ""PROJECT['prices of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#5', '#4']""]","['select', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_5941,Show the details of the top 3 most expensive hotels.,return hotels ;return #1 sorted by most expensive ;return three most expensive #1 ;return details of  #3,"[""SELECT['hotels']"", ""SORT['#1', '#1', 'most expensive']"", ""PROJECT['three most expensive #REF', '#1']"", ""PROJECT['details of #REF', '#3']""]","['select', 'sort', 'project', 'project']",train
SPIDER_train_5942,What are the details of the three most expensive hotels?,return hotels ;return how expensive #1 are ;return #1 where  #2 is in  the three most expensive ;return the details of  #3,"[""SELECT['hotels']"", ""PROJECT['how expensive #REF are', '#1']"", ""COMPARATIVE['#1', '#2', 'is in the three most expensive']"", ""PROJECT['the details of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5943,Show the details and star ratings of the 3 least expensive hotels.,"return hotels ;return price of #1 ;return the  3 lowest #2 ;return #1 where #2 is  in #3 ;return details of #4 ;return star ratings of #4 ;return #5 ,  #6","[""SELECT['hotels']"", ""PROJECT['price of #REF', '#1']"", ""AGGREGATE['min', '#2']"", ""COMPARATIVE['#1', '#2', 'is in #3']"", ""PROJECT['details of #REF', '#4']"", ""PROJECT['star ratings of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_5944,What are the details and star ratings of the three hotels with the lowest price ranges?,"return hotels ;return price ranges of #1 ;return the  three lowest of #2 ;return #1 where #2 is equal to any of #3 ;return details of #4 ;return star ratings of #4 ;return #5 ,  #6","[""SELECT['hotels']"", ""PROJECT['price ranges of #REF', '#1']"", ""AGGREGATE['min', '#2']"", ""COMPARATIVE['#1', '#2', 'is equal to any of #3']"", ""PROJECT['details of #REF', '#4']"", ""PROJECT['star ratings of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_5945,Show the transportation method most people choose to get to tourist attractions.,return tourist attractions ;return transportation method to  #1 ;return people that  choose #2 ;return number of  #3 for each #2 ;return #2 where #4 is  the  highest,"[""SELECT['tourist attractions']"", ""PROJECT['transportation method to #REF', '#1']"", ""PROJECT['people that choose #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""COMPARATIVE['#2', '#4', 'is the highest']""]","['select', 'project', 'project', 'group', 'comparative']",train
SPIDER_train_5946,Which transportation method is used the most often to get to tourist attractions?,return transportations ;return #1 to get to  tourist attractions ;return methods of  #2 ;return most used #3,"[""SELECT['transportations']"", ""FILTER['#1', 'to get to tourist attractions']"", ""PROJECT['methods of #REF', '#2']"", ""PROJECT['most used #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_5947,Show the description and code of the attraction type most tourist attractions belong to.,"return attraction types ;return attractions with #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return description of  #4 ;return code of  #4 ;return #5 ,  #6","[""SELECT['attraction types']"", ""PROJECT['attractions with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['description of #REF', '#4']"", ""PROJECT['code of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_5948,Which attraction type does the most tourist attractions belong to? Tell me its  attraction type description and code.,"return attractions ;return types of  #1 ;return tourist attractions with #2 ;return number of  #3 for each  #2 ;return #2 where #4 is  highest ;return attraction  type  descriptions of  #5 ;return attraction  type  code of  #5 ;return #6 ,  #7","[""SELECT['attractions']"", ""PROJECT['types of #REF', '#1']"", ""PROJECT['tourist attractions with #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""SUPERLATIVE['max', '#2', '#4']"", ""PROJECT['attraction type descriptions of #REF', '#5']"", ""PROJECT['attraction type code of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_5949,Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way.,"return attractions  ;return ways to  get to #1 ;return number of  #1 accessed for each #2 ;return #2 ,  #3","[""SELECT['attractions']"", ""PROJECT['ways to get to #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""UNION['#2', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_595,How many employees are living in Canada?,return employees ;return #1 living in Canada ;return number of #2,"[""SELECT['employees']"", ""FILTER['#1', 'living in Canada']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_5950,"List all the possible ways to get to attractions, together with the number of attractions accessible by these methods.","return attractions  ;return ways to  get to #1 ;return number of  #1 accessible for each #2 ;return #2 ,  #3","[""SELECT['attractions']"", ""PROJECT['ways to get to #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""UNION['#2', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_5951,"Show different tourist attractions' names, ids, and the corresponding number of visits.","return different tourist attractions ;return names of  #1 ;return ids of  #1 ;return visits to #1 ;return number of  #4 for each  #1 ;return #2 ,  #3 ,   #5","[""SELECT['different tourist attractions']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['visits to #REF', '#1']"", ""GROUP['count', '#4', '#1']"", ""UNION['#2', '#3', '#5']""]","['select', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_5952,"What are the name, id and the corresponding number of visits for each  tourist attraction?","return tourist attractions ;return names of  #1 ;return ids of  #1 ;return visits to #1 ;return number of  #4 for each  #1 ;return #2 ,  #3 ,   #5","[""SELECT['tourist attractions']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['visits to #REF', '#1']"", ""GROUP['count', '#4', '#1']"", ""UNION['#2', '#3', '#5']""]","['select', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_5953,Show the names and ids of tourist attractions that are visited at least two times.,"return tourist attractions ;return times visited of  #1 ;return #1 where #2 is  at least two ;return names of  #3 ;return ids of  #3 ;return #4 ,  #5","[""SELECT['tourist attractions']"", ""PROJECT['times visited of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least two']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['ids of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_5954,Which tourist attractions are visited at least twice? Give me their names and ids.,"return tourist attractions ;return #1 visited at least twice ;return names of #2 ;return ids of #2 ;return #3 ,  #4","[""SELECT['tourist attractions']"", ""FILTER['#1', 'visited at least twice']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['ids of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_5955,Show the names and ids of tourist attractions that are visited at most once.,"return tourist attractions ;return #1 that  are visited at most once ;return the  names of #2 ;return the  ids of #2 ;return #3 ,  #4","[""SELECT['tourist attractions']"", ""FILTER['#1', 'that are visited at most once']"", ""PROJECT['the names of #REF', '#2']"", ""PROJECT['the ids of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_5956,What are the names and ids of the tourist attractions that are visited at most once?,"return tourist attractions ;return #1 visited at most once ;return names of #2 ;return ids of #2 ;return #3 , #4","[""SELECT['tourist attractions']"", ""FILTER['#1', 'visited at most once']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['ids of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_5957,What are the names of tourist attractions that can be reached by walk or is at address 660 Shea Crescent?,"return tourist attractions ;return #1 that can be reached by walk ;return address of #1 ;return #1 where #3 is 660 Shea Crescent ;return #2 ,  #4 ;return names of #5","[""SELECT['tourist attractions']"", ""FILTER['#1', 'that can be reached by walk']"", ""PROJECT['address of #REF', '#1']"", ""COMPARATIVE['#1', '#3', 'is 660 Shea Crescent']"", ""UNION['#2', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'filter', 'project', 'comparative', 'union', 'project']",train
SPIDER_train_5958,Find the names of the tourist attractions that is either accessible by walk or at address 660 Shea Crescent.,return tourist attractions ;return #1 accessible by walk ;return #1 at address 660 Shea Crescent ;return names of  #2 ;return names of  #3 ;return #4 or #5,"[""SELECT['tourist attractions']"", ""FILTER['#1', 'accessible by walk']"", ""FILTER['#1', 'at address 660 Shea Crescent']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['names of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'filter', 'project', 'project', 'union']",train
SPIDER_train_5959,What are the names of the tourist attractions that have parking or shopping as their feature details?,"return tourist attractions ;return feature details of #1 ;return #1 where #2 is parking ;return #1 where #2 is shopping ;return #3 ,  #4 ;return the  names of #5","[""SELECT['tourist attractions']"", ""PROJECT['feature details of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is parking']"", ""COMPARATIVE['#1', '#2', 'is shopping']"", ""UNION['#3', '#4']"", ""PROJECT['the names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_596,How many employees live in Canada?,return employees ;return #1 that  live in Canada ;return number of #2,"[""SELECT['employees']"", ""FILTER['#1', 'that live in Canada']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_5960,Find the tourist attractions that have parking or shopping as their feature details. What are the names of the attractions?,return tourist attractions  ;return feature details of  #1 ;return #1 where  #2 is  parking ;return #1 where  #2 is  shopping ;return #3 or  #4 ;return names of  #5,"[""SELECT['tourist attractions']"", ""PROJECT['feature details of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is parking']"", ""COMPARATIVE['#1', '#2', 'is shopping']"", ""UNION['#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_5961,What are the names of tourist attractions that can be reached by bus or is at address 254 Ottilie Junction?,"return tourist attractions ;return #1 that can be reached by bus ;return address of #1 ;return #1 where #3 is 254 Ottilie Junction ;return #2 ,  #4 ;return names of #5","[""SELECT['tourist attractions']"", ""FILTER['#1', 'that can be reached by bus']"", ""PROJECT['address of #REF', '#1']"", ""COMPARATIVE['#1', '#3', 'is 254 Ottilie Junction']"", ""UNION['#2', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'filter', 'project', 'comparative', 'union', 'project']",train
SPIDER_train_5962,Find the names of the tourist attractions that is either accessible by bus or at address 254 Ottilie Junction.,"return tourist attractions ;return address of #1 ;return #1 where #2 is  254 Ottilie Junction ;return #1 that  are accessible by bus ;return #4 ,  #3 ;return names of #5","[""SELECT['tourist attractions']"", ""PROJECT['address of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 254 Ottilie Junction']"", ""FILTER['#1', 'that are accessible by bus']"", ""UNION['#4', '#3']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'filter', 'union', 'project']",train
SPIDER_train_5963,What are the names of the tourist attractions Vincent and Marcelle visit?,return tourist attractions ;return #1 that  Vincent visits ;return #1 that  Marcelle visits ;return #1 of  both #2 and  #3 ;return names of  #4,"[""SELECT['tourist attractions']"", ""FILTER['#1', 'that Vincent visits']"", ""FILTER['#1', 'that Marcelle visits']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'filter', 'intersection', 'project']",train
SPIDER_train_5964,Which tourist attractions do the tourists Vincent and Marcelle visit? Tell me the names of the attractions.,return tourist attractions ;return #1 Vincent visits ;return #1 Marcelle visits ;return #1 of  both #2 and  #3 ;return names of  #4,"[""SELECT['tourist attractions']"", ""FILTER['#1', 'Vincent visits']"", ""FILTER['#1', 'Marcelle visits']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'filter', 'intersection', 'project']",train
SPIDER_train_5965,What are the names of tourist attraction that Alison visited but Rosalind did not visit?,return tourist attractions ;return #1 that Alison visited ;return #1 that Rosalind visited ;return #2 besides  #3 ;return names of #4,"[""SELECT['tourist attractions']"", ""FILTER['#1', 'that Alison visited']"", ""FILTER['#1', 'that Rosalind visited']"", ""DISCARD['#2', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'filter', 'discard', 'project']",train
SPIDER_train_5966,Find the the names of the tourist attractions that the tourist named Alison visited but Rosalind did not visit.,return tourist  attractions ;return tourists that  visited #1 ;return #1 where  #2 is  Alison ;return #1 where  #2 is  Rosalind ;return #3 besides #4 ;return names of  #5,"[""SELECT['tourist attractions']"", ""PROJECT['tourists that visited #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Alison']"", ""COMPARATIVE['#1', '#2', 'is Rosalind']"", ""DISCARD['#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'discard', 'project']",train
SPIDER_train_5967,How many tourists did not make any visit?,return tourists ;return visits of #1 ;return #1 where #2 is higher than zero ;return #1 besides  #3,"[""SELECT['tourists']"", ""PROJECT['visits of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than zero']"", ""DISCARD['#1', '#3']""]","['select', 'project', 'comparative', 'discard']",train
SPIDER_train_5968,Count the number of tourists who did not visit any place.,return places ;return tourists of  #1 ;return tourists besides #2 ;return number of  #3,"[""SELECT['places']"", ""PROJECT['tourists of #REF', '#1']"", ""SELECT['tourists']"", ""DISCARD['#3', '#2']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'select', 'discard', 'aggregate']",train
SPIDER_train_5969,How many video games exist?,return video games ;return number of  #1,"[""SELECT['video games']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_597,What is employee Nancy Edwards's phone number?,return employee Nancy Edwards ;return phone number of  #1,"[""SELECT['employee Nancy Edwards']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_5970,How many video games do you have?,return video games ;return number of  #1,"[""SELECT['video games']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_5971,How many video game types exist?,return video games ;return number of  #1,"[""SELECT['video games']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_5972,What is the count of different game types?,return games ;return different types of  #1 ;return count of  #2,"[""SELECT['games']"", ""PROJECT['different types of #REF', '#1']"", ""PROJECT['count of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_5973,Show all video game types.,return video games ;return types of  #1,"[""SELECT['video games']"", ""PROJECT['types of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_5974,What are the different types of video games?,return video games ;return types of #1 ;return different #2,"[""SELECT['video games']"", ""PROJECT['types of #REF', '#1']"", ""PROJECT['different #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_5975,Show all video games and their types in the order of their names.,"return video games ;return types of #1 ;return names of #1 ;return #1 ,  #2 ;return #4 sorted by #3","[""SELECT['video games']"", ""PROJECT['types of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""UNION['#1', '#2']"", ""SORT['#4', '#3']""]","['select', 'project', 'project', 'union', 'sort']",train
SPIDER_train_5976,What are the names of all the video games and their types in alphabetical order?,"return video games ;return names of  #1 ;return types of  #1 ;return #2 ,  #3 ;return #4 sorted by #3 in alphabetical order","[""SELECT['video games']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['types of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#4', '#3', 'in alphabetical order']""]","['select', 'project', 'project', 'union', 'sort']",train
SPIDER_train_5977,Show all video games with type Collectible card game.,return video games ;return types of #1 ;return #1 where #2 is  Collectible card game,"[""SELECT['video games']"", ""PROJECT['types of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Collectible card game']""]","['select', 'project', 'comparative']",train
SPIDER_train_5978,What are the names of all video games that are collectible cards?,return video games ;return names of  #1 ;return #2 where #1 are  collectible cards,"[""SELECT['video games']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'are collectible cards']""]","['select', 'project', 'comparative']",train
SPIDER_train_5979,What is the type of video game Call of Destiny.,return video games ;return #1 which are  Call of  Destiny ;return type of  #2,"[""SELECT['video games']"", ""FILTER['#1', 'which are Call of Destiny']"", ""PROJECT['type of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_598,What is the the phone number of Nancy Edwards?,return Nancy Edwards ;return phone number of  #1,"[""SELECT['Nancy Edwards']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_5980,What type of game is Call of Destiny?,return game ;return type of  #1 ;return #2 that  is  Call of  Destiny,"[""SELECT['game']"", ""PROJECT['type of #REF', '#1']"", ""FILTER['#2', 'that is Call of Destiny']""]","['select', 'project', 'filter']",train
SPIDER_train_5981,How many video games have type Massively multiplayer online game?,return video games ;return type of  #1 ;return #1 where  #2 is  Massively multiplayer online ;return number of #3,"[""SELECT['video games']"", ""PROJECT['type of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Massively multiplayer online']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_5982,Count the number of video games with Massively multiplayer online game type .,return video games ;return game types of  #1 ;return #1 where #2 is  Massively multiplayer online ;return number of  #3,"[""SELECT['video games']"", ""PROJECT['game types of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Massively multiplayer online']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_5983,Show all video game types and the number of video games in each type.,"return video  game types ;return video  games in #1 ;return number of  #2 for each  #1 ;return #1 ,  #3","[""SELECT['video game types']"", ""PROJECT['video games in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_5984,What are the types of video games and how many are in each type?,"return video games ;return types of #1 ;return number of  #1 for each #2 ;return #2 ,  #3","[""SELECT['video games']"", ""PROJECT['types of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""UNION['#2', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_5985,Which game type has most number of games?,return game types ;return games of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['game types']"", ""PROJECT['games of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_5986,What type has the most games?,return types ;return games of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['types']"", ""PROJECT['games of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_5987,Which game type has least number of games?,return game types ;return games of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  lowest,"[""SELECT['game types']"", ""PROJECT['games of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_5988,What is the type with the fewest games?,return type ;return games of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  lowest,"[""SELECT['type']"", ""PROJECT['games of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_5989,Show ids for all students who live in CHI.,return students ;return #1 who  live in CHI ;return ids of  #2,"[""SELECT['students']"", ""FILTER['#1', 'who live in CHI']"", ""PROJECT['ids of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_599,Who is the youngest employee in the company? List employee's first and last name.,"return employees ;return #1 that  is  youngest ;return first name of #2 ;return last name of #2 ;return #3 , #4","[""SELECT['employees']"", ""FILTER['#1', 'that is youngest']"", ""PROJECT['first name of #REF', '#2']"", ""PROJECT['last name of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_5990,What are the ids of all students who live in CHI?,return students ;return #1 who  live in CHI ;return ids of  #2,"[""SELECT['students']"", ""FILTER['#1', 'who live in CHI']"", ""PROJECT['ids of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5991,Show ids for all students who have advisor 1121.,return students ;return #1 who  have  advisor 1121 ;return ids of  #2,"[""SELECT['students']"", ""FILTER['#1', 'who have advisor 1121']"", ""PROJECT['ids of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_5992,What are the ids of all students who have advisor number 1121?,return students ;return advisor of #1 ;return numbers of #2 ;return #1 where #3 is  1121 ;return ids of #4,"[""SELECT['students']"", ""PROJECT['advisor of #REF', '#1']"", ""PROJECT['numbers of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is 1121']"", ""PROJECT['ids of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_5993,Show first name for all students with major 600.,return students ;return major of  #1 ;return #1 where  #2 is  600 ;return first name of  #3,"[""SELECT['students']"", ""PROJECT['major of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 600']"", ""PROJECT['first name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5994,What are the first names for all students who are from the major numbered 600?,return students ;return major of  #1 ;return #1 where #2 is  numbered 600 ;return first names of  #3,"[""SELECT['students']"", ""PROJECT['major of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is numbered 600']"", ""PROJECT['first names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_5995,"Show the average, minimum, and maximum age for different majors.","return majors ;return average age for each #1 ;return minimum age for each #1 ;return maximum age for each #1 ;return #2 , #3 , #4","[""SELECT['majors']"", ""PROJECT['age', '#1']"", ""GROUP['avg', '#2', '#1']"", ""PROJECT['age', '#1']"", ""GROUP['min', '#4', '#1']"", ""PROJECT['age', '#1']"", ""GROUP['max', '#6', '#1']"", ""UNION['#3', '#5', '#7']""]","['select', 'project', 'group', 'project', 'group', 'project', 'group', 'union']",train
SPIDER_train_5996,"What are the average, minimum, and max ages for each of the different majors?","return different majors ;return ages of  #1 ;return average of  #2 for each  #1 ;return minimum of  #2 for each  #1 ;return max of  #2 for each  #1 ;return #3 ,  #4 ,   #5","[""SELECT['different majors']"", ""PROJECT['ages of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""GROUP['min', '#2', '#1']"", ""GROUP['max', '#2', '#1']"", ""UNION['#3', '#4', '#5']""]","['select', 'project', 'group', 'group', 'group', 'union']",train
SPIDER_train_5997,Show all advisors who have at least two students.,return advisors ;return students of #1 ;return number of #2 for each #1 ;return #1 where #3 is  at least two,"[""SELECT['advisors']"", ""PROJECT['students of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_5998,What are the advisors,return advisors ;return What are  #1,"[""SELECT['advisors']"", ""PROJECT['What are #REF', '#1']""]","['select', 'project']",train
SPIDER_train_5999,How many sports do we have?,return sports ;return the number of #1,"[""SELECT['sports']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_6,What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?,return secretaries ;return #1 born in state 'Alabama ;return departments managed by #2 ;return distinct creation years of  #3,"[""SELECT['secretaries']"", ""FILTER['#1', 'born in state Alabama']"", ""PROJECT['departments managed by #REF', '#2']"", ""PROJECT['distinct creation years of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_60,what are the first name and last name of all candidates?,"return candidates ;return first names of  #1 ;return last names of  #1 ;return #2 ,  #3","[""SELECT['candidates']"", ""PROJECT['first names of #REF', '#1']"", ""PROJECT['last names of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_600,What si the youngest employee's first and last name?,"return employees ;return the  youngest #1 ;return the  first name of #2 ;return the  last name of #2 ;return #3 ,  #4","[""SELECT['employees']"", ""PROJECT['the youngest #REF', '#1']"", ""PROJECT['the first name of #REF', '#2']"", ""PROJECT['the last name of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_6000,How many different types of sports do we offer?,return sports ;return types of  #1 ;return different #2 ;return number of  #3,"[""SELECT['sports']"", ""PROJECT['types of #REF', '#1']"", ""PROJECT['different #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_6001,How many students play sports?,return students ;return #1 who  play sports ;return number of #2,"[""SELECT['students']"", ""FILTER['#1', 'who play sports']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_6002,How many different students are involved in sports?,return sports ;return students involved in #1 ;return different #2 ;return number of #3,"[""SELECT['sports']"", ""PROJECT['students involved in #REF', '#1']"", ""PROJECT['different #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_6003,List ids for all student who are on scholarship.,return students ;return #1 on  scholarships ;return ids of  #2,"[""SELECT['students']"", ""FILTER['#1', 'on scholarships']"", ""PROJECT['ids of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6004,What are the ids for all sporty students who are on scholarship?,return students ;return sporty #1 ;return #2 who  are  on  scholarship ;return ids of  #3,"[""SELECT['students']"", ""PROJECT['sporty #REF', '#1']"", ""FILTER['#2', 'who are on scholarship']"", ""PROJECT['ids of #REF', '#3']""]","['select', 'project', 'filter', 'project']",train
SPIDER_train_6005,Show last names for all student who are on scholarship.,return students ;return #1 on  scholarship ;return last name of  #2,"[""SELECT['students']"", ""FILTER['#1', 'on scholarship']"", ""PROJECT['last name of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6006,What are the last names for all scholarship students?,return students ;return #1 on  scholarships ;return last names of  #2,"[""SELECT['students']"", ""FILTER['#1', 'on scholarships']"", ""PROJECT['last names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6007,How many games are played for all students?,return students ;return games played of  #1 ;return number of  #2,"[""SELECT['students']"", ""PROJECT['games played of #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_6008,What is the total number of games played?,return games played ;return number of  #1,"[""SELECT['games played']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_6009,How many games are played for all football games by students on scholarship?,return students ;return the  #1 on scholarship ;return football games that  #2 played ;return the  number of  #3 for each #2 ;return the  sum of #4,"[""SELECT['students']"", ""PROJECT['the #REF on scholarship', '#1']"", ""PROJECT['football games that #REF played', '#2']"", ""GROUP['count', '#3', '#2']"", ""AGGREGATE['sum', '#4']""]","['select', 'project', 'project', 'group', 'aggregate']",train
SPIDER_train_601,List top 10 employee work longest in the company. List employee's first and last name.,"return employees ;return how long #1 have work ;return the  10 longest #2 ;return #1 where #2 is  in #3 ;return first names of #4 ;return last names of #4 ;return #5 ,  #6","[""SELECT['employees']"", ""PROJECT['how long #REF have work', '#1']"", ""AGGREGATE['max', '#2']"", ""COMPARATIVE['#1', '#2', 'is in #3']"", ""PROJECT['first names of #REF', '#4']"", ""PROJECT['last names of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_6010,What is the total number of all football games played by scholarship students?,return students ;return #1 who have scholarships ;return football games played by #2 ;return number of  #3,"[""SELECT['students']"", ""FILTER['#1', 'who have scholarships']"", ""PROJECT['football games played by #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_6011,Show all sport name and the number of students.,"return sports ;return names of #1 ;return students of #1 ;return number of  #3 for each #1 ;return #2 ,  #4","[""SELECT['sports']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['students of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_6012,How many students play each sport?,return sports ;return students who  play #1 ;return number of  #2 for each  #1,"[""SELECT['sports']"", ""PROJECT['students who play #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_6013,Show all student IDs with the number of sports and total number of games played,"return students ;return IDs of  #1 ;return sports ;return number of  #3 for each  #2 ;return games played of  #3 ;return number of  #5 for each  #3 ;return sum of  #6 for each  #2 ;return #2 ,  #4 ,   #7","[""SELECT['students']"", ""PROJECT['IDs of #REF', '#1']"", ""SELECT['sports']"", ""GROUP['count', '#3', '#2']"", ""PROJECT['games played of #REF', '#3']"", ""GROUP['count', '#5', '#3']"", ""GROUP['sum', '#6', '#2']"", ""UNION['#2', '#4', '#7']""]","['select', 'project', 'select', 'group', 'project', 'group', 'group', 'union']",train
SPIDER_train_6014,What are the ids of all students along with how many sports and games did they play?,"return students ;return ids of  #1 ;return sports #1 play ;return number of  #3 for each  #1 ;return games #1 play ;return number of  #5 for each  #1 ;return #2 ,  #4 ,   #6","[""SELECT['students']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['sports #REF play', '#1']"", ""GROUP['count', '#3', '#1']"", ""PROJECT['games #REF play', '#1']"", ""GROUP['count', '#5', '#1']"", ""UNION['#2', '#4', '#6']""]","['select', 'project', 'project', 'group', 'project', 'group', 'union']",train
SPIDER_train_6015,Show all student IDs with more than total 10 hours per week on all sports played.,return students ;return sports played of #1 ;return hours per week of #2 ;return sum of #3 for each #1 ;return #1 where #4 is  higher than 10 ;return IDs of #5,"[""SELECT['students']"", ""PROJECT['sports played of #REF', '#1']"", ""PROJECT['hours per week of #REF', '#2']"", ""GROUP['sum', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is higher than 10']"", ""PROJECT['IDs of #REF', '#5']""]","['select', 'project', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_6016,What are the student IDs for everybody who worked for more than 10 hours per week on all sports?,return students ;return sports that  #1 worked on ;return hours of #2 per week ;return number of  #3 for each #2 ;return sum of #4 for each #1 ;return #1 where #5 is  more than  10 ;return student IDs of #6,"[""SELECT['students']"", ""PROJECT['sports that #REF worked on', '#1']"", ""PROJECT['hours of #REF per week', '#2']"", ""GROUP['count', '#3', '#2']"", ""GROUP['sum', '#4', '#1']"", ""COMPARATIVE['#1', '#5', 'is more than 10']"", ""PROJECT['student IDs of #REF', '#6']""]","['select', 'project', 'project', 'group', 'group', 'comparative', 'project']",train
SPIDER_train_6017,What is the first name and last name of the student who have most number of sports?,"return students ;return sports of #1 ;return number of #2 for each #1 ;return #1 where #3 is  the highest ;return first name  of #4 ;return last name  of #4 ;return #5 , #6","[""SELECT['students']"", ""PROJECT['sports of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']"", ""PROJECT['first name of #REF', '#4']"", ""PROJECT['last name of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_6018,What is the first and last name of the student who played the most sports?,"return students ;return sports that  #1 played ;return the   number of  #2 for each #1 ;return #1 where #3 is  the   highest ;return the   first name of #4 ;return the   last name of #4 ;return #5 ,  #6","[""SELECT['students']"", ""PROJECT['sports that #REF played', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']"", ""PROJECT['the first name of #REF', '#4']"", ""PROJECT['the last name of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_6019,Which sport has most number of students on scholarship?,return sports ;return students in #1 ;return #2 on  scholarship ;return number of  #3 for each  #1 ;return #1 where #4 is  highest,"[""SELECT['sports']"", ""PROJECT['students in #REF', '#1']"", ""FILTER['#2', 'on scholarship']"", ""GROUP['count', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']""]","['select', 'project', 'filter', 'group', 'superlative']",train
SPIDER_train_602,What are the first and last names of the top 10 longest-serving employees?,"return employees ;return top 10 longest-serving #1 ;return first names of  #2 ;return last names of  #2 ;return #3 ,  #4","[""SELECT['employees']"", ""PROJECT['top 10 longest-serving #REF', '#1']"", ""PROJECT['first names of #REF', '#2']"", ""PROJECT['last names of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_6020,What is the sport with the most scholarship students?,return sports ;return scholarship students of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  the  highest,"[""SELECT['sports']"", ""PROJECT['scholarship students of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_6021,Show student ids who don't have any sports.,return students ;return #1 who  have  sports ;return #1 besides #2 ;return ids of #3,"[""SELECT['students']"", ""FILTER['#1', 'who have sports']"", ""DISCARD['#1', '#2']"", ""PROJECT['ids of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_6022,What are the ids of all students who don't play sports?,return students ;return #1 who  play sports ;return #1 besides  #2 ;return ids of  #3,"[""SELECT['students']"", ""FILTER['#1', 'who play sports']"", ""DISCARD['#1', '#2']"", ""PROJECT['ids of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_6023,Show student ids who are on scholarship and have major 600.,return students ;return #1 on  scholarships ;return #2 with major 600 ;return student ids of  #3,"[""SELECT['students']"", ""FILTER['#1', 'on scholarships']"", ""FILTER['#2', 'with major 600']"", ""PROJECT['student ids of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_6024,What are the student ids for those on scholarship in major number 600?,return students ;return #1 on scholarship ;return major numbers of #2 ;return #2 where #3 is  600 ;return the  student ids of #4,"[""SELECT['students']"", ""FILTER['#1', 'on scholarship']"", ""PROJECT['major numbers of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is 600']"", ""PROJECT['the student ids of #REF', '#4']""]","['select', 'filter', 'project', 'comparative', 'project']",train
SPIDER_train_6025,Show student ids who are female and play football.,return students ;return #1 who  are  female ;return #2 who  play football ;return ids of  #3,"[""SELECT['students']"", ""FILTER['#1', 'who are female']"", ""FILTER['#2', 'who play football']"", ""PROJECT['ids of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_6026,What are the ids of all female students who play football?,return female students ;return #1 who  play football ;return ids of  #2,"[""SELECT['female students']"", ""FILTER['#1', 'who play football']"", ""PROJECT['ids of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6027,Show all male student ids who don't play football.,return students ;return #1 who are male ;return #2 that  do not play football ;return ids of #3,"[""SELECT['students']"", ""FILTER['#1', 'who are male']"", ""FILTER['#2', 'that do not play football']"", ""PROJECT['ids of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_6028,What are the ids of all male students who do not play football?,return students ;return #1 that  are  male ;return #2 who  do not  play football ;return ids of  #3,"[""SELECT['students']"", ""FILTER['#1', 'that are male']"", ""FILTER['#2', 'who do not play football']"", ""PROJECT['ids of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_6029,Show total hours per week and number of games played for student David Shieber.,"return student ;return #1 who  is David Shieber ;return games played for #2 ;return number of #3 ;return hours per week for #3 ;return total of  #5 ;return #6 ,   #4","[""SELECT['student']"", ""FILTER['#1', 'who is David Shieber']"", ""PROJECT['games played for #REF', '#2']"", ""AGGREGATE['count', '#3']"", ""PROJECT['hours per week for #REF', '#3']"", ""AGGREGATE['sum', '#5']"", ""UNION['#6', '#4']""]","['select', 'filter', 'project', 'aggregate', 'project', 'aggregate', 'union']",train
SPIDER_train_603,Find the number of employees whose title is IT Staff from each city?,return employees ;return cities ;return #1 with  title IT Staff ;return number of  #3 for each  #2,"[""SELECT['employees']"", ""SELECT['cities']"", ""FILTER['#1', 'with title IT Staff']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'select', 'filter', 'group', 'union']",train
SPIDER_train_6030,What is the total number of hours per work and number of games played by David Shieber?,"return David Shieber ;return hours per work of  #1 ;return sum of  #2 ;return games played by #1 ;return number of  #4 ;return #3 ,  #5","[""SELECT['David Shieber']"", ""PROJECT['hours per work of #REF', '#1']"", ""AGGREGATE['sum', '#2']"", ""PROJECT['games played by #REF', '#1']"", ""AGGREGATE['count', '#4']"", ""UNION['#3', '#5']""]","['select', 'project', 'aggregate', 'project', 'aggregate', 'union']",train
SPIDER_train_6031,Show total hours per week and number of games played for students under 20.,"return students ;return #1 who are under 20 ;return hours per week of #2 ;return sum of #3 ;return games played of #2 ;return #4 ,  #5","[""SELECT['students']"", ""FILTER['#1', 'who are under 20']"", ""PROJECT['hours per week of #REF', '#2']"", ""AGGREGATE['sum', '#3']"", ""PROJECT['games played of #REF', '#2']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'aggregate', 'project', 'union']",train
SPIDER_train_6032,What is the total number of hours per week and number of games played by students under 20?,"return students ;return #1 that  are under 20 ;return hours per week of #2 ;return sum of #3 ;return games played of #2 ;return sum of #5 ;return #4 ,  #6","[""SELECT['students']"", ""FILTER['#1', 'that are under 20']"", ""PROJECT['hours per week of #REF', '#2']"", ""AGGREGATE['sum', '#3']"", ""PROJECT['games played of #REF', '#2']"", ""AGGREGATE['sum', '#5']"", ""UNION['#4', '#6']""]","['select', 'filter', 'project', 'aggregate', 'project', 'aggregate', 'union']",train
SPIDER_train_6033,How many students play video games?,return students ;return #1 who  play video games ;return number of #2,"[""SELECT['students']"", ""FILTER['#1', 'who play video games']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_6034,How many different students play games?,return students ;return #1 who  play games ;return different #2 ;return number of  #3,"[""SELECT['students']"", ""FILTER['#1', 'who play games']"", ""PROJECT['different #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_6035,Show ids of students who don't play video game.,return students ;return #1 that  do not  play video games ;return ids of  #2,"[""SELECT['students']"", ""FILTER['#1', 'that do not play video games']"", ""PROJECT['ids of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6036,What are the ids of all students who are not video game players?,return students ;return #1 who  are  not  video game players ;return ids of  #2,"[""SELECT['students']"", ""FILTER['#1', 'who are not video game players']"", ""PROJECT['ids of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6037,Show ids of students who play video game and play sports.,return students ;return #1 who  play  video games ;return #1 who  play  sports ;return ids of #1 ;return #4 of both #2 and #3,"[""SELECT['students']"", ""FILTER['#1', 'who play video games']"", ""FILTER['#1', 'who play sports']"", ""PROJECT['ids of #REF', '#1']"", ""INTERSECTION['#4', '#2', '#3']""]","['select', 'filter', 'filter', 'project', 'intersection']",train
SPIDER_train_6038,What are the ids of all students who played video games and sports?,return students ;return #1 who  played video games ;return #1 who  played sports ;return #1 of  both #2 and  #3 ;return ids of  #4,"[""SELECT['students']"", ""FILTER['#1', 'who played video games']"", ""FILTER['#1', 'who played sports']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['ids of #REF', '#4']""]","['select', 'filter', 'filter', 'intersection', 'project']",train
SPIDER_train_6039,Show all game ids and the number of hours played.,"return games ;return game ids of  #1 ;return number of  hours played of #1 ;return #2 ,  #3","[""SELECT['games']"", ""PROJECT['game ids of #REF', '#1']"", ""PROJECT['hours played of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_604,How many employees who are IT staff are from each city?,return cities ;return employees from  #1 ;return #2 who  are  IT staff ;return number of #3 for each #1,"[""SELECT['cities']"", ""PROJECT['employees from #REF', '#1']"", ""FILTER['#2', 'who are IT staff']"", ""GROUP['count', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'filter', 'group', 'union']",train
SPIDER_train_6040,What are ids and total number of hours played for each game?,"return games ;return ids of  #1 ;return hours played of  #1 ;return sum of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['games']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['hours played of #REF', '#1']"", ""GROUP['sum', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_6041,Show all student ids and the number of hours played.,"return students ;return ids of #1 ;return hours played of #1 ;return number of  #3 for each #1 ;return #2 ,  #4","[""SELECT['students']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['hours played of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_6042,What are the ids of all students and number of hours played?,"return students ;return ids of  #1 ;return hours played of  #1 ;return sum of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['students']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['hours played of #REF', '#1']"", ""GROUP['sum', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_6043,Show the game name that has most number of hours played.,return games ;return hours played of #1 ;return sum of #2 for each #1 ;return #1 where #3 is  highest ;return name of #4,"[""SELECT['games']"", ""PROJECT['hours played of #REF', '#1']"", ""GROUP['sum', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_6044,What is the name of the game that has been played the most?,return games ;return played of #1 ;return #1 where #2 is highest ;return name of #3,"[""SELECT['games']"", ""PROJECT['played of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_6045,Show all game names played by at least 1000 hours.,return games ;return hours played of  #1 ;return #1 where #2 is  at least 1000 ;return names of  #3,"[""SELECT['games']"", ""PROJECT['hours played of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least 1000']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6046,What are the names of all the games that have been played for at least 1000 hours?,return games ;return hours played of  #1 ;return #1 where #2 is  at least 1000 ;return names of  #3,"[""SELECT['games']"", ""PROJECT['hours played of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least 1000']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6047,Show all game names played by Linda Smith,return games ;return #1 played by Linda Smith ;return the  names of #2,"[""SELECT['games']"", ""FILTER['#1', 'played by Linda Smith']"", ""PROJECT['the names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6048,What are the names of all games played by Linda Smith?,return games ;return #1 played by Linda Smith ;return names of  #2,"[""SELECT['games']"", ""FILTER['#1', 'played by Linda Smith']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6049,Find the last and first name of students who are playing Football or Lacrosse.,"return students ;return #1 playing Football ;return #1 playing Lacrosse ;return #2 or  #3 ;return last names of #4 ;return first names of #4 ;return #5 ,  #6","[""SELECT['students']"", ""FILTER['#1', 'playing Football']"", ""FILTER['#1', 'playing Lacrosse']"", ""UNION['#2', '#3']"", ""PROJECT['last names of #REF', '#4']"", ""PROJECT['first names of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'filter', 'filter', 'union', 'project', 'project', 'union']",train
SPIDER_train_605,"Which employee manage most number of peoples? List employee's first and last name, and number of people report to that employee.","return employees ;return the  number of  people #1 manages ;return #1 where #2 is  highest ;return the  first name of  #3 ;return the  last name of  #3 ;return the  number of  people that  report to #3 ;return #4 ,  #5 ,   #6","[""SELECT['employees']"", ""PROJECT['people #REF manages', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['the first name of #REF', '#4']"", ""PROJECT['the last name of #REF', '#4']"", ""PROJECT['people that report to #REF', '#4']"", ""GROUP['count', '#7', '#4']"", ""UNION['#5', '#6', '#8']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_6050,What is the first and last name of all students who play Football or Lacrosse?,"return students ;return #1 who play Football ;return #1 who play Lacrosse ;return #2 ,  #3 ;return the  first names of #4 ;return the  last names of #4 ;return #5 ,  #6","[""SELECT['students']"", ""FILTER['#1', 'who play Football']"", ""FILTER['#1', 'who play Lacrosse']"", ""UNION['#2', '#3']"", ""PROJECT['the first names of #REF', '#4']"", ""PROJECT['the last names of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'filter', 'filter', 'union', 'project', 'project', 'union']",train
SPIDER_train_6051,Find the first name and age of the students who are playing both Football and Lacrosse.,"return students ;return #1 playing Football ;return #1 playing Lacrosse ;return #1 of  both #2 and  #3 ;return first names of  #4 ;return ages of  #4 ;return #5 ,  #6","[""SELECT['students']"", ""FILTER['#1', 'playing Football']"", ""FILTER['#1', 'playing Lacrosse']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['first names of #REF', '#4']"", ""PROJECT['ages of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'filter', 'filter', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_6052,What are the first names and ages of all students who are playing both Football and Lacrosse?,"return students ;return #1 playing Football ;return #1 playing Lacrosse ;return #1 of  both #2 and  #3 ;return first names of  #4 ;return ages of  #4 ;return #5 ,  #6","[""SELECT['students']"", ""FILTER['#1', 'playing Football']"", ""FILTER['#1', 'playing Lacrosse']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['first names of #REF', '#4']"", ""PROJECT['ages of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'filter', 'filter', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_6053,Find the last name and gender of the students who are playing both Call of Destiny and Works of Widenius games.,"return students ;return games of   #1 ;return #1 where #2 is Call of   Destiny ;return #1 where #2 is Works of   Widenius ;return #1 in  both #3 and  #4 ;return last names of   #5 ;return genders of   #5 ;return #6 ,  #7","[""SELECT['students']"", ""PROJECT['games of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Call of Destiny']"", ""COMPARATIVE['#1', '#2', 'is Works of Widenius']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['last names of #REF', '#5']"", ""PROJECT['genders of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_6054,what is the last name and gender of all students who played both Call of Destiny and Works of Widenius?,"return students ;return #1 who  played Call of Destiny ;return #1 who  played Works of Widenius ;return the last name of #1; return #4 of both #2 and  #3 ;return the gender of #1 ; return #6 of both #2 and  #3 ;return #5 , #7","[""SELECT['students']"", ""FILTER['#1', 'who played Call of Destiny']"", ""FILTER['#1', 'who played Works of Widenius']"", ""PROJECT['the last name of #REF', '#1']"", ""INTERSECTION['#4', '#2', '#3']"", ""PROJECT['the gender of #REF', '#1']"", ""INTERSECTION['#6', '#2', '#3']"", ""UNION['#5', '#7']""]","['select', 'filter', 'filter', 'project', 'intersection', 'project', 'intersection', 'union']",train
SPIDER_train_6055,Find the name of all customers.,return customers ;return names of  #1,"[""SELECT['customers']"", ""PROJECT['names of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_6056,What are the names of all the customers?,return customers ;return names of  #1,"[""SELECT['customers']"", ""PROJECT['names of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_6058,Return the total number of distinct customers.,return customers ;return distinct #1 ;return number of  #2,"[""SELECT['customers']"", ""PROJECT['distinct #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_6059,What is the average amount of items ordered in each order?,return orders ;return items ordered in #1 ;return number of  #2 for each #1 ;return average of #3,"[""SELECT['orders']"", ""PROJECT['items ordered in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['avg', '#3']""]","['select', 'project', 'group', 'aggregate']",train
SPIDER_train_606,What are the first and last names of all the employees and how many people report to them?,"return employees ;return first names of  #1 ;return last names of  #1 ;return people who  report to #1 ;return number of  #4 for each  #1 ;return #2 ,  #3 ,   #5","[""SELECT['employees']"", ""PROJECT['first names of #REF', '#1']"", ""PROJECT['last names of #REF', '#1']"", ""PROJECT['people who report to #REF', '#1']"", ""GROUP['count', '#4', '#1']"", ""UNION['#2', '#3', '#5']""]","['select', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_6060,Find the average order quantity per order.,return orders ;return order  quantities of  #1 ;return average of  #2 for each  #1,"[""SELECT['orders']"", ""PROJECT['order quantities of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_6061,"What are the names of customers who use payment method ""Cash""?",return customers ;return payment methods of  #1 ;return #1 where #2 is  Cash ;return names of  #3,"[""SELECT['customers']"", ""PROJECT['payment methods of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Cash']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6062,"Which customers use ""Cash"" for payment method? Return the customer names.",return customers ;return payment methods of  #1 ;return #1 where #2 is  Cash ;return names of  #3,"[""SELECT['customers']"", ""PROJECT['payment methods of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Cash']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6063,"Find the ""date became customers"" of the customers whose ID is between 10 and 20.",return customers  ;return #1 where  ID is  more than  10 ;return #1 where  ID is  less than  20 ;return date became customers  of #1 ;return #4 of both #2 and #3,"[""SELECT['customers']"", ""FILTER['#1', 'where ID is more than 10']"", ""FILTER['#1', 'where ID is less than 20']"", ""PROJECT['date became customers of #ref', '#1']"", ""INTERSECTION['#4', '#2', '#3']""]","['select', 'filter', 'filter', 'project', 'intersection']",train
SPIDER_train_6064,What are the dates when customers with ids between 10 and 20 became customers?,return ids ;return #1 that  are  smaller than 20 ;return #2 larger than 10 ;return customers with #3 ;return dates when  #4 became customers,"[""SELECT['ids']"", ""FILTER['#1', 'that are smaller than 20']"", ""FILTER['#2', 'larger than 10']"", ""PROJECT['customers with #REF', '#3']"", ""PROJECT['dates when #REF became customers', '#4']""]","['select', 'filter', 'filter', 'project', 'project']",train
SPIDER_train_6065,Which payment method is used by most customers?,return payment methods ;return customers that  used #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['payment methods']"", ""PROJECT['customers that used #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_6067,What are the names of customers using the most popular payment method?,return customers ;return payment methods of #1 ;return number of  #2 for each #1 ;return #1 where #3 is highest ;return names of #4,"[""SELECT['customers']"", ""PROJECT['payment methods of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_6068,Find the name of the customers who use the most frequently used payment method.,return payment methods ;return customers who use #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest ;return customers who use #4 ;return names of #5,"[""SELECT['payment methods']"", ""PROJECT['customers who use #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['customers who use #REF', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'group', 'superlative', 'project', 'project']",train
SPIDER_train_6069,What are all the payment methods?,return payment methods,"[""SELECT['payment methods']""]",['select'],train
SPIDER_train_607,How many orders does Lucas Mancini has?,return Lucas Mancini ;return orders of  #1 ;return number of #2,"[""SELECT['Lucas Mancini']"", ""PROJECT['orders of #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_6070,Return all the distinct payment methods used by customers.,return customers ;return payment methods used by #1 ;return distinct #2 ;return number of  #3,"[""SELECT['customers']"", ""PROJECT['payment methods used by #REF', '#1']"", ""PROJECT['distinct #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_6071,What are the details of all products?,return products ;return details of  #1,"[""SELECT['products']"", ""PROJECT['details of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_6072,Return the the details of all products.,return products ;return details of #1,"[""SELECT['products']"", ""PROJECT['details of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_6073,"Find the name of all customers whose name contains ""Alex"".",return customers ;return names of  #1 ;return #2 that  contain Alex,"[""SELECT['customers']"", ""PROJECT['names of #REF', '#1']"", ""FILTER['#2', 'that contain Alex']""]","['select', 'project', 'filter']",train
SPIDER_train_6074,"Which customer's name contains ""Alex""? Find the full name.",return customer ;return names of  #1 ;return #1 where #2 contains Alex ;return full name  of  #3,"[""SELECT['customer']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'contains Alex']"", ""PROJECT['full name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6075,"Find the detail of products whose detail contains the word ""Latte"" or the word ""Americano""","return products ;return details of  #1 ;return #2 contains the word Latte ;return #2 contains the word Americano ;return #3 ,   #4","[""SELECT['products']"", ""PROJECT['details of #REF', '#1']"", ""FILTER['#2', 'contains the word Latte']"", ""FILTER['#2', 'contains the word Americano']"", ""UNION['#3', '#4']""]","['select', 'project', 'filter', 'filter', 'union']",train
SPIDER_train_6076,"Which product's detail contains the word ""Latte"" or ""Americano""? Return the full detail.",return products ;return details of  #1 ;return #1 where #2 contains Latte ;return #1 where #2 contains Americano ;return #3 or  #4 ;return full details of  #5,"[""SELECT['products']"", ""PROJECT['details of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'contains Latte']"", ""COMPARATIVE['#1', '#2', 'contains Americano']"", ""UNION['#3', '#4']"", ""PROJECT['full details of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_6077,"What is the address content of the customer named ""Maudie Kertzmann""?",return customers ;return #1 named Maudie Kertzmann ;return address content of  #2,"[""SELECT['customers']"", ""FILTER['#1', 'named Maudie Kertzmann']"", ""PROJECT['address content of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6078,"Return the address content for the customer whose name is ""Maudie Kertzmann"".",return customers ;return names of  #1 ;return #1 where #2 is  Maudie Kertzmann ;return address content of  #3,"[""SELECT['customers']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Maudie Kertzmann']"", ""PROJECT['address content of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6079,"How many customers are living in city ""Lake Geovannyton""?",return customers ;return cities of  #1 ;return #1 where  #2 is  Lake Geovannyton ;return number of #3,"[""SELECT['customers']"", ""PROJECT['cities of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Lake Geovannyton']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_608,How many orders does Luca Mancini have in his invoices?,return Luca Mancini ;return invoices of  #1 ;return orders in #2 ;return number of #3,"[""SELECT['Luca Mancini']"", ""PROJECT['invoices of #REF', '#1']"", ""PROJECT['orders in #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_6080,Find the number of customers who live in the city called Lake Geovannyton.,return customers ;return cities of  #1 ;return #1 where  #2 is  Lake Geovannyton ;return number of #3,"[""SELECT['customers']"", ""PROJECT['cities of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Lake Geovannyton']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_6081,Find the name of customers who are living in Colorado?,return customers ;return #1 living in Colorado ;return names of  #2,"[""SELECT['customers']"", ""FILTER['#1', 'living in Colorado']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6082,What are the names of customers who live in Colorado state?,return customers ;return states where #1 live ;return #1 where #2 is  Colorado ;return names of  #3,"[""SELECT['customers']"", ""PROJECT['states where #REF live', '#1']"", ""COMPARATIVE['#1', '#2', 'is Colorado']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6083,Find the list of cities that no customer is living in.,return cities ;return #1 that  no customers is  living in,"[""SELECT['cities']"", ""FILTER['#1', 'that no customers is living in']""]","['select', 'filter']",train
SPIDER_train_6084,What are the cities no customers live in?,return cities ;return #1 where no customers live,"[""SELECT['cities']"", ""FILTER['#1', 'where no customers live']""]","['select', 'filter']",train
SPIDER_train_6085,Which city has the most customers living in?,return cities ;return customers living in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['cities']"", ""PROJECT['customers living in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_6086,Find the city where the most customers live.,return cities ;return customers that  live in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['cities']"", ""PROJECT['customers that live in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_6087,Retrieve the list of all cities.,return cities,"[""SELECT['cities']""]",['select'],train
SPIDER_train_6088,List all the distinct cities,return cities ;return distinct #1,"[""SELECT['cities']"", ""PROJECT['distinct #REF', '#1']""]","['select', 'project']",train
SPIDER_train_6089,Find the city with post code 255.,return cities ;return post codes of  #1 ;return #1 where #2 is  255,"[""SELECT['cities']"", ""PROJECT['post codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 255']""]","['select', 'project', 'comparative']",train
SPIDER_train_609,What is the total amount of money spent by Lucas Mancini?,return Lucas Mancini ;return money spent by #1 ;return sum of #2,"[""SELECT['Lucas Mancini']"", ""PROJECT['money spent by #REF', '#1']"", ""AGGREGATE['sum', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_6090,Which city is post code 255 located in?,return city ;return post codes of  #1 ;return #1 where #2 is  255,"[""SELECT['city']"", ""PROJECT['post codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 255']""]","['select', 'project', 'comparative']",train
SPIDER_train_6091,Find the state and country of all cities with post code starting with 4.,"return cities ;return post codes of  #1 ;return #1 where  #2 start with  4 ;return states of  #3 ;return countries of  #3 ;return #4 ,   #5","[""SELECT['cities']"", ""PROJECT['post codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'start with 4']"", ""PROJECT['states of #REF', '#3']"", ""PROJECT['countries of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_6092,What are the state and country of all the cities that have post codes starting with 4.\,"return cities ;return post codes of #1 ;return #1 where #2 start with 4 ;return state of #3 ;return country of #3 ;return #4 ,  #5","[""SELECT['cities']"", ""PROJECT['post codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'start with 4']"", ""PROJECT['state of #REF', '#3']"", ""PROJECT['country of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_6093,List the countries having more than 4 addresses listed.,return countries ;return addresses in #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is higher than 4,"[""SELECT['countries']"", ""PROJECT['addresses in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 4']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_6094,For which countries are there more than four distinct addresses listed?,return countries ;return distinct addresses of #1 ;return number of  #2 for each  #1 ;return #1 where #3 is higher than four,"[""SELECT['countries']"", ""PROJECT['distinct addresses of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than four']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_6095,List all the contact channel codes that were used less than 5 times.,return contact channels ;return codes of  #1 ;return times #2 were used ;return #2 where  #3 is lower than 5,"[""SELECT['contact channels']"", ""PROJECT['codes of #REF', '#1']"", ""PROJECT['times #REF were used', '#2']"", ""COMPARATIVE['#2', '#3', 'is lower than 5']""]","['select', 'project', 'project', 'comparative']",train
SPIDER_train_6096,Which contact channel codes were used less than 5 times?,return contact channels ;return codes of #1 ;return times used of #2 ;return number of  #3 for each #2 ;return #2 where #4 is lower than 5,"[""SELECT['contact channels']"", ""PROJECT['codes of #REF', '#1']"", ""PROJECT['times used of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""COMPARATIVE['#2', '#4', 'is lower than 5']""]","['select', 'project', 'project', 'group', 'comparative']",train
SPIDER_train_6097,"Which contact channel has been used by the customer with name ""Tillman Ernser""?",return customers ;return names of #1 ;return #1 where #2 is Tillman Ernser ;return contact channel of #3,"[""SELECT['customers']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Tillman Ernser']"", ""PROJECT['contact channel of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6098,"Find the contact channel code that was used by the customer named ""Tillman Ernser"".",return customers ;return #1 named Tillman Ernser ;return contact channel code used by #2,"[""SELECT['customers']"", ""FILTER['#1', 'named Tillman Ernser']"", ""PROJECT['contact channel code used by #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6099,"What is the ""active to date"" of the latest contact channel used by ""Tillman Ernser""?",return contact channels ;return #1 used by Tillman Ernser ;return latest #2 ;return active to date of  #3,"[""SELECT['contact channels']"", ""FILTER['#1', 'used by Tillman Ernser']"", ""PROJECT['latest #REF', '#2']"", ""PROJECT['active to date of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_61,What are the first and last names of all the candidates?,"return candidates ;return first names of  #1 ;return last names of  #1 ;return #2 ,  #3","[""SELECT['candidates']"", ""PROJECT['first names of #REF', '#1']"", ""PROJECT['last names of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_610,How much money did Lucas Mancini spend?,return Lucas Mancini ;return monies that  #1 spends ;return the  sum of #2,"[""SELECT['Lucas Mancini']"", ""PROJECT['monies that #REF spends', '#1']"", ""AGGREGATE['sum', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_6100,"Return the the ""active to date"" of the latest contact channel used by the customer named ""Tillman Ernser"".",return customers ;return #1 named Tillman Ernser ;return contact channels of  #2 ;return latest #3 ;return active to  date of  #4,"[""SELECT['customers']"", ""FILTER['#1', 'named Tillman Ernser']"", ""PROJECT['contact channels of #REF', '#2']"", ""PROJECT['latest #REF', '#3']"", ""PROJECT['active to date of #REF', '#4']""]","['select', 'filter', 'project', 'project', 'project']",train
SPIDER_train_6101,What is the average time span of contact channels in the database?,return database ;return contact channels of  #1 ;return time span of  #2 ;return average of  #3,"[""SELECT['database']"", ""PROJECT['contact channels of #REF', '#1']"", ""PROJECT['time span of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_6102,Compute the average active time span of contact channels.,return contact channels ;return active time spans of  #1 ;return average of  #2,"[""SELECT['contact channels']"", ""PROJECT['active time spans of #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_6103,What is the channel code and contact number of the customer contact channel that was active for the longest time?,"return customer contact  channels ;return time active of #1 ;return #1 where #2 is the  highest ;return channel  code of #3 ;return contact  number of #3 ;return #4 ,  #5","[""SELECT['customer contact channels']"", ""PROJECT['time active of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the highest']"", ""PROJECT['channel code of #REF', '#3']"", ""AGGREGATE['count', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'aggregate', 'union']",train
SPIDER_train_6104,Return the channel code and contact number of the customer contact channel whose active duration was the longest.,"return customer contact channels ;return active durations of  #1 ;return #1 where  #2 is longest ;return channel codes of  #3 ;return contact number of  #3 ;return #4 ,  #5","[""SELECT['customer contact channels']"", ""PROJECT['active durations of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['channel codes of #REF', '#3']"", ""AGGREGATE['count', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'superlative', 'project', 'aggregate', 'union']",train
SPIDER_train_6105,Find the name and active date of the customer that use email as the contact channel.,"return customers ;return contact channels of  #1 ;return #1 where  #2 is  email ;return name of  #3 ;return active date of  #3 ;return #4 ,   #5","[""SELECT['customers']"", ""PROJECT['contact channels of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is email']"", ""PROJECT['name of #REF', '#3']"", ""PROJECT['active date of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_6106,What are the name and active date of the customers whose contact channel code is email?,"return customers ;return contact channel codes of #1 ;return #1 where #2 is  email ;return names of #3 ;return active dates of #3 ;return #4 ,  #5","[""SELECT['customers']"", ""PROJECT['contact channel codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is email']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['active dates of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_6107,What is the name of the customer that made the order with the largest quantity?,return customers ;return orders of #1 ;return quantities of #2 ;return #1 where #3 is highest ;return name of #4,"[""SELECT['customers']"", ""PROJECT['orders of #REF', '#1']"", ""PROJECT['quantities of #REF', '#2']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'project', 'superlative', 'project']",train
SPIDER_train_6108,Find the name of the customer who made the order of the largest amount of goods.,return customers ;return orders of  #1 ;return goods in #2 ;return number of #3 for each #2 ;return #1 where  #4 is  highest ;return name of  #5,"[""SELECT['customers']"", ""PROJECT['orders of #REF', '#1']"", ""PROJECT['goods in #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""SUPERLATIVE['max', '#1', '#4']"", ""PROJECT['name of #REF', '#5']""]","['select', 'project', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_6109,What is the name of the customer that has purchased the most items?,return customers ;return items #1 purchased ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return name of  #4,"[""SELECT['customers']"", ""PROJECT['items #REF purchased', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_611,List all media types.,return media types,"[""SELECT['media types']""]",['select'],train
SPIDER_train_6110,Give me the name of the customer who ordered the most items in total.,return customers ;return items ordered of  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  highest ;return name of  #4,"[""SELECT['customers']"", ""PROJECT['items ordered of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_6111,What is the payment method of the customer that has purchased the least quantity of items?,return customers ;return items #1 purchased ;return number of  #2 for each  #1 ;return #1 where #3 is  lowest ;return payment method of  #4,"[""SELECT['customers']"", ""PROJECT['items #REF purchased', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['payment method of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_6112,Tell me the payment method used by the customer who ordered the least amount of goods in total.,return customers ;return goods ordered of #1 ;return number of  #2 for each #1 ;return #1 where #3 is lowest ;return payment method of #4,"[""SELECT['customers']"", ""PROJECT['goods ordered of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['payment method of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_6113,How many types of products have Rodrick Heaney bought in total?,return products ;return #1 Rodrick Heaney bought ;return types of  #2 ;return number of  #3,"[""SELECT['products']"", ""FILTER['#1', 'Rodrick Heaney bought']"", ""PROJECT['types of #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_6114,Find the number of distinct products Rodrick Heaney has bought so far.,return products ;return #1 Rodrick Heaney bought ;return distinct #2 ;return number of #3,"[""SELECT['products']"", ""FILTER['#1', 'Rodrick Heaney bought']"", ""PROJECT['distinct #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_6115,"What is the total quantity of products purchased by ""Rodrick Heaney""?",return products ;return #1 purchased by Rodrick Heaney ;return number of  #2,"[""SELECT['products']"", ""FILTER['#1', 'purchased by Rodrick Heaney']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_6116,"Tell me the total quantity of products bought by the customer called ""Rodrick Heaney"".",return customers ;return products bought by #1 ;return #2 where #1 is  Rodrick Heaney ;return number of  #3,"[""SELECT['customers']"", ""PROJECT['products bought by #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Rodrick Heaney']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_6117,"How many customers have at least one order with status ""Cancelled""?",return customers ;return orders of  #1 ;return statuses of  #2 ;return #1 where  #3 is Cancelled ;return number of  #4,"[""SELECT['customers']"", ""PROJECT['orders of #REF', '#1']"", ""PROJECT['statuses of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Cancelled']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'project', 'comparative', 'aggregate']",train
SPIDER_train_6118,"Return the number of customers who have at least one order with ""Cancelled"" status.",return customers ;return #1 who  have  at least one order with Cancelled status ;return number of  #2,"[""SELECT['customers']"", ""FILTER['#1', 'who have at least one order with Cancelled status']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_6119,"How many orders have detail ""Second time""?",return orders ;return detail of  #1 ;return #1 where  #2 is Second time ;return number of  #3,"[""SELECT['orders']"", ""PROJECT['detail of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Second time']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_612,What are the names of all the media types?,return media types ;return names of  #1,"[""SELECT['media types']"", ""PROJECT['names of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_6120,"Tell me the number of orders with ""Second time"" as order detail.",return orders ;return order details of #1 ;return #1 where #2 is  Second time ;return number of  #3,"[""SELECT['orders']"", ""PROJECT['order details of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Second time']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_6121,"Find the customer name and date of the orders that have the status ""Delivered"".","return orders ;return #1 where  status is  Delivered ;return customer name of  #2 ;return date of  #2 ;return #3 ,   #4","[""SELECT['orders']"", ""FILTER['#1', 'where status is Delivered']"", ""PROJECT['customer name of #REF', '#2']"", ""PROJECT['date of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_6122,"What are the customer name and date of the orders whose status is ""Delivered"".","return orders ;return statuses of  #1 ;return #1 where #2 is  Delivered ;return customers of  #3 ;return names of  #4 ;return dates of  #3 ;return #5 ,  #6","[""SELECT['orders']"", ""PROJECT['statuses of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Delivered']"", ""PROJECT['customers of #REF', '#3']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['dates of #REF', '#3']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_6123,"What is the total number of products that are in orders with status ""Cancelled""?",return orders ;return statuses of  #1 ;return #1 where #2 is  Cancelled ;return products of  #3 ;return number of  #4,"[""SELECT['orders']"", ""PROJECT['statuses of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Cancelled']"", ""PROJECT['products of #REF', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_6124,"Find the total quantity of products associated with the orders in the ""Cancelled"" status.",return orders ;return status of  #1 ;return #1 where  #2 is  Cancelled ;return products associated with  #3 ;return number of #4,"[""SELECT['orders']"", ""PROJECT['status of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Cancelled']"", ""PROJECT['products associated with #REF', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_6125,Find the total amount of products ordered before 2018-03-17 07:13:53.,return products ;return #1 ordered before 2018-03-17 07:13:53 ;return number of  #2,"[""SELECT['products']"", ""FILTER['#1', 'ordered before 2018-03-17 07:13:53']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_6126,What is the total amount of products purchased before 2018-03-17 07:13:53?,return products ;return #1 purchased before 2018-03-17 07:13:53 ;return amounts of #2 ;return sum of #3,"[""SELECT['products']"", ""FILTER['#1', 'purchased before 2018-03-17 07:13:53']"", ""PROJECT['amounts of #REF', '#2']"", ""AGGREGATE['sum', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_6127,Who made the latest order?,return orders ;return #1 that  is  the  latest ;return Who made #2,"[""SELECT['orders']"", ""FILTER['#1', 'that is the latest']"", ""PROJECT['Who made #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6128,Find the name of the customer who made an order most recently.,return customers ;return #1 who  made an order ;return #2 most recently ;return name of  #3,"[""SELECT['customers']"", ""FILTER['#1', 'who made an order']"", ""FILTER['#2', 'most recently']"", ""PROJECT['name of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_6129,Which product has been ordered most number of times?,return products ;return times ordered of  #1 ;return #1 where #2 is  highest,"[""SELECT['products']"", ""PROJECT['times ordered of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']""]","['select', 'project', 'superlative']",train
SPIDER_train_613,List all different genre types.,return genres ;return types of  #1 ;return different #2,"[""SELECT['genres']"", ""PROJECT['types of #REF', '#1']"", ""PROJECT['different #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_6130,What is the most frequently ordered product? Tell me the detail of the product,return products ;return #1 that  is  the   most frequently ordered ;return detail of #2,"[""SELECT['products']"", ""FILTER['#1', 'that is the most frequently ordered']"", ""PROJECT['detail of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6131,Find the name and ID of the product whose total order quantity is the largest.,"return products ;return order quantities of  #1 ;return #1 where  #2 is  largest ;return name of  #3 ;return ID of  #3 ;return #4 ,   #5","[""SELECT['products']"", ""PROJECT['order quantities of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['name of #REF', '#3']"", ""PROJECT['ID of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_6132,What are the name and ID of the product bought the most.,"return products ;return #1 that  are bought the   most ;return the   name of #2 ;return the   ID of #2 ;return #3 ,  #4","[""SELECT['products']"", ""FILTER['#1', 'that are bought the most']"", ""PROJECT['the name of #REF', '#2']"", ""PROJECT['the ID of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_6133,"Find all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.",return address ;return #1 in East Julianaside Texas ;return #1 in Gleasonmouth Arizona ;return #2 and #3,"[""SELECT['address']"", ""FILTER['#1', 'in East Julianaside Texas']"", ""FILTER['#1', 'in Gleasonmouth Arizona']"", ""UNION['#2', '#3']""]","['select', 'filter', 'filter', 'union']",train
SPIDER_train_6134,"What are all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.",return addresses ;return #1 in East Julianaside Texas ;return #1 in Gleasonmouth Arizona ;return #2 or  #3,"[""SELECT['addresses']"", ""FILTER['#1', 'in East Julianaside Texas']"", ""FILTER['#1', 'in Gleasonmouth Arizona']"", ""UNION['#2', '#3']""]","['select', 'filter', 'filter', 'union']",train
SPIDER_train_6135,Find the name of customers who did not pay with Cash.,return customers ;return #1 who  did not  pay with  Cash ;return names of  #2,"[""SELECT['customers']"", ""FILTER['#1', 'who did not pay with Cash']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6136,What is the name of customers who do not use Cash as payment method.,return customers ;return payment methods of #1 ;return #1 where #2 is  not Cash ;return names of #3,"[""SELECT['customers']"", ""PROJECT['payment methods of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not Cash']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6137,Find the names of customers who never ordered product Latte.,return customers ;return #1 who  ordered product Latte ;return #1 besides #2 ;return names of  #3,"[""SELECT['customers']"", ""FILTER['#1', 'who ordered product Latte']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_6138,What are names of customers who never ordered product Latte.,return customers ;return products #1 ordered ;return #1 where #2 is  Latte ;return #1 besides  #3 ;return names of  #4,"[""SELECT['customers']"", ""PROJECT['products #REF ordered', '#1']"", ""COMPARATIVE['#1', '#2', 'is Latte']"", ""DISCARD['#1', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'comparative', 'discard', 'project']",train
SPIDER_train_6139,Find the names of customers who never placed an order.,return customers ;return #1 who  placed an order ;return customers besides #2 ;return names of  #3,"[""SELECT['customers']"", ""FILTER['#1', 'who placed an order']"", ""SELECT['customers']"", ""DISCARD['#3', '#2']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'select', 'discard', 'project']",train
SPIDER_train_614,What are the different names of the genres?,return genres ;return different names of  #1,"[""SELECT['genres']"", ""PROJECT['different names of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_6140,What are the names of customers who never made an order.,return customers ;return #1 who  never made an order ;return names of  #2,"[""SELECT['customers']"", ""FILTER['#1', 'who never made an order']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6141,Find the names of customers who ordered both products Latte and Americano.,return customers ;return products ordered of #1 ;return #1 where #2 is Latte ;return #1 where #2 is Americano ;return #1 in  both #3 and  #4 ;return names of #5,"[""SELECT['customers']"", ""PROJECT['products ordered of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Latte']"", ""COMPARATIVE['#1', '#2', 'is Americano']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_6142,What are the names of customers who have purchased both products Latte and Americano?,return customers ;return #1 who  have  purchased Latte ;return #2 who  have  purchased Americano ;return names of  #3,"[""SELECT['customers']"", ""FILTER['#1', 'who have purchased Latte']"", ""FILTER['#2', 'who have purchased Americano']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_6143,How many artists are there?,return artists ;return number of #1,"[""SELECT['artists']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_6145,List the age of all music artists.,return music artists ;return ages of  #1,"[""SELECT['music artists']"", ""PROJECT['ages of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_6146,What are the ages of all music artists?,return music artists ;return ages of  #1,"[""SELECT['music artists']"", ""PROJECT['ages of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_6147,What is the average age of all artists?,return artists ;return ages of  #1 ;return average of  #2,"[""SELECT['artists']"", ""PROJECT['ages of #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_6148,Return the average age across all artists.,return artists ;return ages of  #1 ;return average of  #2,"[""SELECT['artists']"", ""PROJECT['ages of #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_6149,"What are the famous titles of the artist ""Triumfall""?",return artist Triumfall ;return titles of  #1 ;return famous #2,"[""SELECT['artist Triumfall']"", ""PROJECT['titles of #REF', '#1']"", ""PROJECT['famous #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_615,List the name of all playlist.,return playlists ;return names of  #1,"[""SELECT['playlists']"", ""PROJECT['names of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_6150,"Return the famous titles of the artist called ""Triumfall"".",return artists ;return famous titles of  #1 ;return #2 where  #1 is Triumfall,"[""SELECT['artists']"", ""PROJECT['famous titles of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Triumfall']""]","['select', 'project', 'comparative']",train
SPIDER_train_6151,What are the distinct Famous release dates?,return Famous releases dates ;return the  distinct #1,"[""SELECT['Famous releases dates']"", ""PROJECT['the distinct #REF', '#1']""]","['select', 'project']",train
SPIDER_train_6152,Give the distinct famous release dates for all artists.,return artists ;return famous release dates of  #1 ;return distinct #2,"[""SELECT['artists']"", ""PROJECT['famous release dates of #REF', '#1']"", ""PROJECT['distinct #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_6153,Return the dates of ceremony and the results of all music festivals,"return music festivals ;return dates of  ceremonies of #1 ;return results of  #1 ;return #2 ,  #3","[""SELECT['music festivals']"", ""PROJECT['dates of ceremonies of #REF', '#1']"", ""PROJECT['results of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_6154,What are the dates of ceremony and results for each music festival?,"return music festivals ;return dates of  ceremony of #1 ;return results for #1 ;return #2 ,  #3","[""SELECT['music festivals']"", ""PROJECT['dates of ceremony of #REF', '#1']"", ""PROJECT['results for #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_6155,"What are the category of music festivals with result ""Awarded""?",return music festivals ;return results of #1 ;return #1 where #2 is  Awarded ;return category of #3,"[""SELECT['music festivals']"", ""PROJECT['results of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Awarded']"", ""PROJECT['category of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6156,"Return the categories of music festivals that have the result ""Awarded"".",return music festivals ;return results of  #1 ;return #1 where  #2 is Awarded ;return categories of  #3,"[""SELECT['music festivals']"", ""PROJECT['results of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Awarded']"", ""PROJECT['categories of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6157,What are the maximum and minimum week on top of all volumes?,"return volumes ;return weeks on top of #1 ;return maximum of #2 ;return minimum of #2 ;return #3 ,  #4","[""SELECT['volumes']"", ""PROJECT['weeks on top of #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""AGGREGATE['min', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_6158,Give the maximum and minimum weeks on top across all volumes.,"return volumes ;return weeks on top of #1 ;return number of  #2 for each #1 ;return maximum of #3 ;return minimum of #3 ;return #4 ,  #5","[""SELECT['volumes']"", ""PROJECT['weeks on top of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['max', '#3']"", ""AGGREGATE['min', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'group', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_6159,What are the songs in volumes with more than 1 week on top?,return volumes ;return weeks on  top of  #1 ;return #1 where #2 is  higher than 1 ;return songs of  #3,"[""SELECT['volumes']"", ""PROJECT['weeks on top of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 1']"", ""PROJECT['songs of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_616,What are the names of all the playlists?,return playlists ;return names of  #1,"[""SELECT['playlists']"", ""PROJECT['names of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_6160,Give the songs included in volumes that have more than 1 week on top.,return volumes ;return weeks on  top of  #1 ;return #1 where  #2 is  higher than 1 ;return songs of  #3,"[""SELECT['volumes']"", ""PROJECT['weeks on top of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 1']"", ""PROJECT['songs of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6161,Please list all songs in volumes in ascending alphabetical order.,return volumes ;return songs in #1 ;return #2 sorted by ascending alphabetical order,"[""SELECT['volumes']"", ""PROJECT['songs in #REF', '#1']"", ""SORT['#2', '#2', 'ascending alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_6162,"What are the the songs in volumes, listed in ascending order?",return volumes ;return the  songs in #1 ;return #2 listed in ascending order,"[""SELECT['volumes']"", ""PROJECT['the songs in #REF', '#1']"", ""FILTER['#2', 'listed in ascending order']""]","['select', 'project', 'filter']",train
SPIDER_train_6163,How many distinct artists do the volumes associate to?,return volumes ;return artists of  #1 ;return distinct #2 ;return number of #3,"[""SELECT['volumes']"", ""PROJECT['artists of #REF', '#1']"", ""PROJECT['distinct #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_6164,Count the number of distinct artists who have volumes.,return distinct artists ;return #1 who  have  volumes ;return Count the number of  #2,"[""SELECT['distinct artists']"", ""FILTER['#1', 'who have volumes']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_6165,Please show the date of ceremony of the volumes that last more than 2 weeks on top.,return volumes ;return weeks on  top of  #1 ;return #1 where  #2 is higher than 2 ;return date of  ceremony of #3,"[""SELECT['volumes']"", ""PROJECT['weeks on top of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 2']"", ""PROJECT['date of ceremony of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6166,What are the dates of ceremony at music festivals corresponding to volumes that lasted more than 2 weeks on top?,return volumes ;return #1 that  lasted more than 2 weeks on  top ;return music festivals of #2 ;return the  dates of  ceremony of #3,"[""SELECT['volumes']"", ""FILTER['#1', 'that lasted more than 2 weeks on top']"", ""PROJECT['music festivals of #REF', '#2']"", ""PROJECT['the dates of ceremony of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_6167,"Please show the songs that have result ""nominated"" at music festivals.",return songs ;return #1 that  are nominated ;return #2 at music festivals,"[""SELECT['songs']"", ""FILTER['#1', 'that are nominated']"", ""FILTER['#2', 'at music festivals']""]","['select', 'filter', 'filter']",train
SPIDER_train_6168,What are the songs in volumes that have resulted in a nomination at music festivals?,return volumes ;return #1 that  have resulted in a nomination at music festivals ;return songs in #2,"[""SELECT['volumes']"", ""FILTER['#1', 'that have resulted in a nomination at music festivals']"", ""PROJECT['songs in #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6169,"What are the issue dates of volumes associated with the artist ""Gorgoroth""?",return volumes ;return artists #1 are  associated with ;return #1 where #2 is  Gorgoroth ;return issues of  #3 ;return dates of  #4,"[""SELECT['volumes']"", ""PROJECT['artists #REF are associated with', '#1']"", ""COMPARATIVE['#1', '#2', 'is Gorgoroth']"", ""PROJECT['issues of #REF', '#3']"", ""PROJECT['dates of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_617,Who is the composer of track Fast As a Shark?,return tracks ;return #1 that is  Fast As a Shark ;return composer of  #2,"[""SELECT['tracks']"", ""FILTER['#1', 'that is Fast As a Shark']"", ""PROJECT['composer of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6170,Return the issue dates of volumes that are by the artist named Gorgoroth.,return volumes ;return artists of  #1 ;return #1 where #2 is  Gorgoroth ;return issue dates of  #3,"[""SELECT['volumes']"", ""PROJECT['artists of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Gorgoroth']"", ""PROJECT['issue dates of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6171,What are the songs in volumes associated with the artist aged 32 or older?,return artists ;return age of #1 ;return #1 where #2 is at least 32 ;return volumes of #3 ;return songs of #4,"[""SELECT['artists']"", ""PROJECT['age of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least 32']"", ""PROJECT['volumes of #REF', '#3']"", ""PROJECT['songs of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_6172,Return names of songs in volumes that are by artists that are at least 32 years old.,return artists ;return #1 at least 32 years old ;return volumes of #2 ;return songs in #3 ;return names of #4,"[""SELECT['artists']"", ""FILTER['#1', 'at least 32 years old']"", ""PROJECT['volumes of #REF', '#2']"", ""PROJECT['songs in #REF', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'project', 'project', 'project']",train
SPIDER_train_6173,What is the average weeks on top of volumes associated with the artist aged 25 or younger?,return volumes ;return artists #1 are  associated with ;return age of  #2 ;return #1 where #3 is  at most 25 ;return weeks on  top of  #4 ;return average of  #5,"[""SELECT['volumes']"", ""PROJECT['artists #REF are associated with', '#1']"", ""PROJECT['age of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is at most 25']"", ""PROJECT['weeks on top of #REF', '#4']"", ""AGGREGATE['avg', '#5']""]","['select', 'project', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_6174,Return the average number of weeks on top for volumes by artists that are at most 25 years old.,return artists ;return #1 that  are at most 25 years old ;return volumes of #2 ;return weeks on top of #3 ;return average of #4,"[""SELECT['artists']"", ""FILTER['#1', 'that are at most 25 years old']"", ""PROJECT['volumes of #REF', '#2']"", ""PROJECT['weeks on top of #REF', '#3']"", ""AGGREGATE['avg', '#4']""]","['select', 'filter', 'project', 'project', 'aggregate']",train
SPIDER_train_6175,What are the famous title of the artists associated with volumes with more than 2 weeks on top?,return volumes ;return weeks on  top of  #1 ;return #1 where #2 is  higher than 2 ;return artists associated with #3 ;return famous titles of  #4,"[""SELECT['volumes']"", ""PROJECT['weeks on top of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 2']"", ""PROJECT['artists associated with #REF', '#3']"", ""PROJECT['famous titles of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_6176,Return the famous titles for artists that have volumes that lasted more than 2 weeks on top.,return artists ;return volumes of  #1 ;return weeks on  top of  #2 ;return #1 where  #3 is higher than 2 ;return famous titles of  #4,"[""SELECT['artists']"", ""PROJECT['volumes of #REF', '#1']"", ""PROJECT['weeks on top of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is higher than 2']"", ""PROJECT['famous titles of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_6177,Please list the age and famous title of artists in descending order of age.,"return artists ;return ages of  #1 ;return famous titles of  #1 ;return #2 ,  #3 ;return #4 sorted by #2 in descending order","[""SELECT['artists']"", ""PROJECT['ages of #REF', '#1']"", ""PROJECT['famous titles of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#4', '#2', 'in descending order']""]","['select', 'project', 'project', 'union', 'sort']",train
SPIDER_train_6178,"What are the famous titles and ages of each artist, listed in descending order by age?",return artists ;return famous titles of  #1 ;return ages of  #1 ;return #2 sorted by #3 in descending order,"[""SELECT['artists']"", ""PROJECT['famous titles of #REF', '#1']"", ""PROJECT['ages of #REF', '#1']"", ""SORT['#2', '#3', 'in descending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_6179,What is the famous release date of the artist with the oldest age?,return artists ;return ages of #1 ;return #1 where #2 is  the   highest ;return the   famous release date of #3,"[""SELECT['artists']"", ""PROJECT['ages of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the highest']"", ""PROJECT['the famous release date of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_618,"What is the composer who created the track ""Fast As a Shark""?",return Fast As a Shark ;return composer of #1,"[""SELECT['Fast As a Shark']"", ""PROJECT['composer of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_6180,Return the famous release date for the oldest artist.,return artists ;return the  oldest #1 ;return the  famous release date of #2,"[""SELECT['artists']"", ""PROJECT['the oldest #REF', '#1']"", ""PROJECT['the famous release date of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_6181,Please show the categories of the music festivals and the count.,"return music festivals ;return categories of #1 ;return number of  #2 ;return #2 ,  #3","[""SELECT['music festivals']"", ""PROJECT['categories of #REF', '#1']"", ""AGGREGATE['count', '#2']"", ""UNION['#2', '#3']""]","['select', 'project', 'aggregate', 'union']",train
SPIDER_train_6182,Return the number of music festivals of each category.,return categories ;return music festivals in #1 ;return number of  #2 for each  #1,"[""SELECT['categories']"", ""PROJECT['music festivals in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_6183,What is the most common result of the music festival?,return music festival ;return results of #1 ;return most common #2,"[""SELECT['music festival']"", ""PROJECT['results of #REF', '#1']"", ""PROJECT['most common #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_6184,Return the result that is most frequent at music festivals.,return music festivals ;return results of  #1 ;return most frequent of  #2,"[""SELECT['music festivals']"", ""PROJECT['results of #REF', '#1']"", ""PROJECT['most frequent of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_6185,Please show the categories of the music festivals with count more than 1.,return categories ;return music festivals of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  higher than 1,"[""SELECT['categories']"", ""PROJECT['music festivals of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 1']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_6186,What are the categories of music festivals for which there have been more than 1 music festival?,return categories ;return music festivals in #1 ;return number of  #2 for each #1 ;return #1 where #3 is  higher than 1,"[""SELECT['categories']"", ""PROJECT['music festivals in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 1']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_6187,What is the song in the volume with the maximum weeks on top?,return song ;return #1 in volume ;return weeks on  top ;return number of  #3 for each  #2 ;return #2 where #4 is  maximum,"[""SELECT['song']"", ""FILTER['#1', 'in volume']"", ""SELECT['weeks on top']"", ""GROUP['count', '#3', '#2']"", ""COMPARATIVE['#2', '#4', 'is maximum']""]","['select', 'filter', 'select', 'group', 'comparative']",train
SPIDER_train_6188,Return the song in the volume that has spent the most weeks on top?,return volume ;return songs in #1 ;return weeks on  top of #2 ;return number of #3 for each #2 ;return #2 where #4 is  highest,"[""SELECT['volume']"", ""PROJECT['songs in #REF', '#1']"", ""PROJECT['weeks on top of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""SUPERLATIVE['max', '#2', '#4']""]","['select', 'project', 'project', 'group', 'superlative']",train
SPIDER_train_6189,Find the famous titles of artists that do not have any volume.,return artists ;return #1 that  do not  have  any volume ;return the famous titles of  #2,"[""SELECT['artists']"", ""FILTER['#1', 'that do not have any volume']"", ""PROJECT['the famous titles of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_619,How long does track Fast As a Shark has?,return the  track Fast As a Shark ;return how long #1 is,"[""SELECT['the track Fast As a Shark']"", ""PROJECT['how long #REF is', '#1']""]","['select', 'project']",train
SPIDER_train_6190,What are the famous titles of artists who do not have any volumes?,return volumes ;return artists who  have #1 ;return artists besides  #2 ;return the  famous titles of #3,"[""SELECT['volumes']"", ""PROJECT['artists who have #REF', '#1']"", ""SELECT['artists']"", ""DISCARD['#3', '#2']"", ""PROJECT['the famous titles of #REF', '#4']""]","['select', 'project', 'select', 'discard', 'project']",train
SPIDER_train_6191,Show the famous titles of the artists with both volumes that lasted more than 2 weeks on top and volumes that lasted less than 2 weeks on top.,return artists ;return volumes  of #1 ;return weeks  on top that  #2 lasted ;return number of  #3 for each #2 ;return #1 where #4 is  more than  2 ;return #1 where #4 is  less than  2 ;return #1 in both #5 and #6 ;return famous titles of #7,"[""SELECT['artists']"", ""PROJECT['volumes of #REF', '#1']"", ""PROJECT['weeks on top that #REF lasted', '#2']"", ""GROUP['count', '#3', '#2']"", ""COMPARATIVE['#1', '#4', 'is more than 2']"", ""COMPARATIVE['#1', '#4', 'is less than 2']"", ""INTERSECTION['#1', '#5', '#6']"", ""PROJECT['famous titles of #REF', '#7']""]","['select', 'project', 'project', 'group', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_6192,What are the famous titles of artists who have not only had volumes that spent more than 2 weeks on top but also volumes that spent less than 2 weeks on top?,return volumes  ;return weeks  spent  on top of #1 ;return number of  #2 for each #1 ;return #1 where #3 is higher than 2  weeks  ;return #1 where #3 is lower than 2  weeks  ;return artists of #1 ;return #6 of both #4 and  #5 ;return famous titles of #7,"[""SELECT['volumes']"", ""PROJECT['weeks spent on top of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 2 weeks']"", ""COMPARATIVE['#1', '#3', 'is lower than 2 weeks']"", ""PROJECT['artists of #REF', '#1']"", ""INTERSECTION['#6', '#4', '#5']"", ""PROJECT['famous titles of #REF', '#7']""]","['select', 'project', 'group', 'comparative', 'comparative', 'project', 'intersection', 'project']",train
SPIDER_train_6193,"What are the date of ceremony of music festivals with category ""Best Song"" and result ""Awarded""?",return music festivals ;return ceremonies of #1 ;return categories of #2 ;return result of #2 ;return #2 where #3 is Best Song ;return #2 where #4 is Awarded ;return #2 in  both #5 and  #6 ;return dates of #7,"[""SELECT['music festivals']"", ""PROJECT['ceremonies of #REF', '#1']"", ""PROJECT['categories of #REF', '#2']"", ""PROJECT['result of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is Best Song']"", ""COMPARATIVE['#2', '#4', 'is Awarded']"", ""INTERSECTION['#2', '#5', '#6']"", ""PROJECT['dates of #REF', '#7']""]","['select', 'project', 'project', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_6194,"Return the dates of ceremony corresponding to music festivals that had the category ""Best Song"" and result ""Awarded"".",return music festivals ;return categories of  #1 ;return #1 where  #2 is Best Song ;return result of  #1 ;return #1 where  #4 is Awarded ;return #1 of  both #3 and #5 ;return dates of  ceremonies of #6,"[""SELECT['music festivals']"", ""PROJECT['categories of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Best Song']"", ""PROJECT['result of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is Awarded']"", ""INTERSECTION['#1', '#3', '#5']"", ""PROJECT['dates of ceremonies of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'comparative', 'intersection', 'project']",train
SPIDER_train_6195,What is the issue date of the volume with the minimum weeks on top?,return volumes ;return weeks on top of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  minimum ;return issue date of #4,"[""SELECT['volumes']"", ""PROJECT['weeks on top of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is minimum']"", ""PROJECT['issue date of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_6196,Return the issue date of the volume that has spent the fewest weeks on top.,return volumes ;return weeks on  top of  #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is lowest ;return issue date of  #4,"[""SELECT['volumes']"", ""PROJECT['weeks on top of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['issue date of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_6197,How many distinct artists have volumes?,return artists ;return #1 that  have volumes ;return distinct #2,"[""SELECT['artists']"", ""FILTER['#1', 'that have volumes']"", ""PROJECT['distinct #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6198,Count the number of artists who have had volumes.,return artists ;return #1 who  have  volumes ;return the number of #2,"[""SELECT['artists']"", ""FILTER['#1', 'who have volumes']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_6199,"Please show the results of music festivals and the number of music festivals that have had each, ordered by this count.",return music festivals ;return results of #1 ;return number of  #1 for each #2 ;return #2 sorted by #3,"[""SELECT['music festivals']"", ""PROJECT['results of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""SORT['#2', '#3']""]","['select', 'project', 'group', 'sort']",train
SPIDER_train_62,List the id of students who never attends courses?,return students ;return #1 who never attend courses ;return ids of #2,"[""SELECT['students']"", ""FILTER['#1', 'who never attend courses']"", ""PROJECT['ids of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_620,How many milliseconds long is Fast As a Shark?,return Fast As a Shark ;return how long #1 is  ;return #2 in milliseconds,"[""SELECT['Fast As a Shark']"", ""PROJECT['how long #REF is', '#1']"", ""FILTER['#2', 'in milliseconds']""]","['select', 'project', 'filter']",train
SPIDER_train_6200,"How many music festivals have had each kind of result, ordered descending by count?",return results ;return music festivals that  had #1 ;return number of  #2 for each #1 ;return #3 sorted by descending order,"[""SELECT['results']"", ""PROJECT['music festivals that had #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SORT['#3', '#3', 'descending order']""]","['select', 'project', 'group', 'sort']",train
SPIDER_train_6201,What are the issue dates of volumes associated with the artist aged 23 or younger?,return volumes ;return artists associated with #1 ;return #1 where #2 are  23 or  younger ;return issues of  #3 ;return dates of  #4,"[""SELECT['volumes']"", ""PROJECT['artists associated with #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'are 23 or younger']"", ""PROJECT['issues of #REF', '#3']"", ""PROJECT['dates of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_6202,Return the issue dates of volumes by artists who are at most 23 years old?,return artists ;return years old that  #1 are ;return #1 where #2 is  at most 23 ;return volumes of #3 ;return issue dates of #4,"[""SELECT['artists']"", ""PROJECT['years old that #REF are', '#1']"", ""COMPARATIVE['#1', '#2', 'is at most 23']"", ""PROJECT['volumes of #REF', '#3']"", ""PROJECT['issue dates of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_6203,How many roller coasters are there?,return roller coasters ;return number of  #1,"[""SELECT['roller coasters']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_6204,List the names of roller coasters by ascending order of length.,return roller coasters ;return names of  #1 ;return lengths of  #1 ;return #2 sorted by #3 in ascending order,"[""SELECT['roller coasters']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['lengths of #REF', '#1']"", ""SORT['#2', '#3', 'in ascending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_6205,What are the lengths and heights of roller coasters?,"return roller coasters ;return lengths of  #1 ;return heights of  #1 ;return #2 ,  #3","[""SELECT['roller coasters']"", ""PROJECT['lengths of #REF', '#1']"", ""PROJECT['heights of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_6206,"List the names of countries whose language is not ""German"".",return countries ;return languages of  #1 ;return #1 where  #2 is not  German ;return names of  #3,"[""SELECT['countries']"", ""PROJECT['languages of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not German']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6207,Show the statuses of roller coasters longer than 3300 or higher than 100.,return roller coasters ;return #1 higher than 100 ;return #1 longer than  3300 ;return #1 of  both #2 and #3 ;return statuses of  #4,"[""SELECT['roller coasters']"", ""FILTER['#1', 'higher than 100']"", ""FILTER['#1', 'longer than 3300']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['statuses of #REF', '#4']""]","['select', 'filter', 'filter', 'intersection', 'project']",train
SPIDER_train_6208,What are the speeds of the longest roller coaster?,return roller coasters ;return speeds of  #1 ;return #2 where #1 is  longest,"[""SELECT['roller coasters']"", ""PROJECT['speeds of #REF', '#1']"", ""SUPERLATIVE['max', '#2', '#1']""]","['select', 'project', 'superlative']",train
SPIDER_train_6209,What is the average speed of roller coasters?,return roller coasters ;return speeds of  #1 ;return average of  #2,"[""SELECT['roller coasters']"", ""PROJECT['speeds of #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_621,What is the name of tracks whose genre is Rock?,return tracks ;return genres of #1 ;return #1 where #2 is  Rock ;return names of #3,"[""SELECT['tracks']"", ""PROJECT['genres of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Rock']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6210,Show the different statuses and the numbers of roller coasters for each status.,"return different statuses ;return roller coasters of #1 ;return number of #2 for each #1 ;return #1 , #3","[""SELECT['different statuses']"", ""PROJECT['roller coasters of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_6211,Please show the most common status of roller coasters.,return statuses ;return roller coasters with  #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is highest,"[""SELECT['statuses']"", ""PROJECT['roller coasters with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_6212,List the status shared by more than two roller coaster.,return statuses ;return roller coasters with  #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is higher than two,"[""SELECT['statuses']"", ""PROJECT['roller coasters with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than two']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_6213,Show the park of the roller coaster with the highest speed.,return roller coasters ;return speeds of  #1 ;return #1 where #2 is  highest ;return park of  #3,"[""SELECT['roller coasters']"", ""PROJECT['speeds of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['park of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_6214,Show the names of roller coasters and names of country they are in.,"return roller coasters ;return the  names  of #1 ;return countries that  #1 are in ;return the  names  of #3 ;return #2 ,  #4","[""SELECT['roller coasters']"", ""PROJECT['the names of #REF', '#1']"", ""PROJECT['countries that #REF are in', '#1']"", ""PROJECT['the names of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_6215,Show the names of countries that have more than one roller coaster.,return roller coasters ;return countries of  #1 ;return number of  #1 for each  #2 ;return #2 where  #3  is higher than one ;return the name of #4,"[""SELECT['roller coasters']"", ""PROJECT['countries of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""COMPARATIVE['#2', '#3', 'is higher than one']"", ""PROJECT['the name of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_6216,Show the name and population of the country that has the highest roller coaster.,return roller coasters ;return #1 which is highest ;return country that  has #2 ;return name of  #3 ;return population of  #3 ;return #4 or #5,"[""SELECT['roller coasters']"", ""FILTER['#1', 'which is highest']"", ""PROJECT['country that has #REF', '#2']"", ""PROJECT['name of #REF', '#3']"", ""PROJECT['population of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_6217,Show the names of countries and the average speed of roller coasters from each country.,"return countries ;return names of  #1 ;return roller coasters in #1 ;return speeds of  #3 ;return average of  #4 for each  #1 ;return #2 ,  #5","[""SELECT['countries']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['roller coasters in #REF', '#1']"", ""PROJECT['speeds of #REF', '#3']"", ""GROUP['avg', '#4', '#1']"", ""UNION['#2', '#5']""]","['select', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_6218,How many countries do not have an roller coaster longer than 3000?,return roller coasters ;return #1 longer than  3000 ;return countries of  #2 ;return countries besides #3,"[""SELECT['roller coasters']"", ""FILTER['#1', 'longer than 3000']"", ""PROJECT['countries of #REF', '#2']"", ""SELECT['countries']"", ""DISCARD['#4', '#3']""]","['select', 'filter', 'project', 'select', 'discard']",train
SPIDER_train_622,What is the name of all tracks in the Rock genre?,return tracks ;return genres of #1 ;return #1 where #2 is Rock ;return names of #3,"[""SELECT['tracks']"", ""PROJECT['genres of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Rock']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6220,How many different captain ranks are there?,return ranks ;return #1 that  are  captain ;return different #2 ;return number of  #3,"[""SELECT['ranks']"", ""FILTER['#1', 'that are captain']"", ""PROJECT['different #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_6221,Count the number of different ranks of captain.,return captain ;return ranks of  #1 ;return number of #2,"[""SELECT['captain']"", ""PROJECT['ranks of #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_6222,How many captains are in each rank?,return ranks ;return captains in #1 ;return number of  #2 for each  #1,"[""SELECT['ranks']"", ""PROJECT['captains in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_6223,Count the number of captains that have each rank.,return ranks ;return captains that  have  #1 ;return number of  #2 for each  #1,"[""SELECT['ranks']"", ""PROJECT['captains that have #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_6224,How many captains with younger than 50 are in each rank?,return captains ;return ranks of #1 ;return #1 younger than  50 ;return number of  #3 for each #2,"[""SELECT['captains']"", ""PROJECT['ranks of #REF', '#1']"", ""FILTER['#1', 'younger than 50']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'project', 'filter', 'group', 'union']",train
SPIDER_train_6225,Count the number of captains younger than 50 of each rank.,return ranks ;return captains of  #1 ;return #2 younger than 50 ;return number of  #3 for each  #1,"[""SELECT['ranks']"", ""PROJECT['captains of #REF', '#1']"", ""FILTER['#2', 'younger than 50']"", ""GROUP['count', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'filter', 'group', 'union']",train
SPIDER_train_6226,Sort all captain names by their ages from old to young.,return captains ;return names of  #1 ;return ages of  #1 ;return #2 sorted by #3 from  old to young,"[""SELECT['captains']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['ages of #REF', '#1']"", ""SORT['#2', '#3', 'from old to young']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_6227,"What are the names of captains, sorted by age descending?",return captains ;return names of  #1 ;return ages of  #1 ;return #2 sorted by #3 descending,"[""SELECT['captains']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['ages of #REF', '#1']"", ""SORT['#2', '#3', 'descending']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_6228,"Find the name, class and rank of all captains.","return captains ;return names of  #1 ;return classes of  #1 ;return ranks of  #1 ;return #2 ,   #3 , #4","[""SELECT['captains']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['classes of #REF', '#1']"", ""PROJECT['ranks of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_6229,"What are the names, classes, and ranks of all captains?","return captains ;return names of  #1 ;return classes of  #1 ;return ranks of  #1 ;return #2 ,  #3 ,   #4","[""SELECT['captains']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['classes of #REF', '#1']"", ""PROJECT['ranks of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_623,What is title of album which track Balls to the Wall belongs to?,return albums ;return #1 that  has  Balls to the  Wall ;return title of  #2,"[""SELECT['albums']"", ""FILTER['#1', 'that has Balls to the Wall']"", ""PROJECT['title of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6230,Which rank is the most common among captains?,return captains ;return ranks of #1 ;return number of  #1 for each #2 ;return #2 where #3 is  the  highest,"[""SELECT['captains']"", ""PROJECT['ranks of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""COMPARATIVE['#2', '#3', 'is the highest']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_6231,Return the rank for which there are the fewest captains.,return ranks ;return captains of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  lowest,"[""SELECT['ranks']"", ""PROJECT['captains of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_6232,Which classes have more than two captains?,return classes ;return captains of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than two,"[""SELECT['classes']"", ""PROJECT['captains of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than two']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_6233,Give the classes that have more than two captains.,return classes ;return captains of  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  higher than two,"[""SELECT['classes']"", ""PROJECT['captains of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than two']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_6234,Find the name of captains whose rank are either Midshipman or Lieutenant.,return captains ;return ranks of  #1 ;return #1 where  #2 is  Midshipman ;return #1 where  #2 is  Lieutenant ;return #3 or  #4 ;return names of  #5,"[""SELECT['captains']"", ""PROJECT['ranks of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Midshipman']"", ""COMPARATIVE['#1', '#2', 'is Lieutenant']"", ""UNION['#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_6235,What are the names of captains that have either the rank Midshipman or Lieutenant?,"return captains ;return #1 that  have the  rank Midshipman ;return #1 that  have  the  rank Lieutenant ;return #2 ,  #3 ;return names of  #4","[""SELECT['captains']"", ""FILTER['#1', 'that have the rank Midshipman']"", ""FILTER['#1', 'that have the rank Lieutenant']"", ""UNION['#2', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_6236,What are the average and minimum age of captains in different class?,"return different classes ;return captains in #1 ;return ages of  #2 ;return average of  #3 for each  #1 ;return minimum of  #3 for each  #1 ;return #4 ,  #5","[""SELECT['different classes']"", ""PROJECT['captains in #REF', '#1']"", ""PROJECT['ages of #REF', '#2']"", ""GROUP['avg', '#3', '#1']"", ""GROUP['min', '#3', '#1']"", ""UNION['#4', '#5']""]","['select', 'project', 'project', 'group', 'group', 'union']",train
SPIDER_train_6237,Return the average and minimum age of captains in each class.,"return classes ;return captains of  #1 ;return ages of  #2 ;return average of  #3 for each  #1 ;return minimum of  #3 for each  #1 ;return #4 ,  #5","[""SELECT['classes']"", ""PROJECT['captains of #REF', '#1']"", ""PROJECT['ages of #REF', '#2']"", ""GROUP['avg', '#3', '#1']"", ""GROUP['min', '#3', '#1']"", ""UNION['#4', '#5']""]","['select', 'project', 'project', 'group', 'group', 'union']",train
SPIDER_train_6238,Find the captain rank that has some captains in both Cutter and Armed schooner classes.,return Cutter classes ;return Armed schooner classes ;return captains of #1 ;return captains of #2 ;return the  captain rank ;return #5 of both #3 and  #4,"[""SELECT['Cutter classes']"", ""SELECT['Armed schooner classes']"", ""PROJECT['captains of #REF', '#1']"", ""PROJECT['captains of #REF', '#2']"", ""SELECT['the captain rank']"", ""INTERSECTION['#5', '#3', '#4']""]","['select', 'select', 'project', 'project', 'select', 'intersection']",train
SPIDER_train_6239,What are the ranks of captains that are both in the Cutter and Armed schooner classes?,return captains ;return classes of  #1 ;return #1 where #2 is  Cutter ;return #1 where #2 is  Armed schooner ;return #1 of  both #3 and  #4 ;return ranks of  #5,"[""SELECT['captains']"", ""PROJECT['classes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Cutter']"", ""COMPARATIVE['#1', '#2', 'is Armed schooner']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['ranks of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_624,What is the name of the album that has the track Ball to the Wall?,return albums ;return tracks of #1 ;return #1 where #2 is  Ball to the    Wall ;return name of #3,"[""SELECT['albums']"", ""PROJECT['tracks of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Ball to the Wall']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6240,Find the captain rank that has no captain in Third-rate ship of the line class.,return captains ;return #1 in  the  Third-rate ship of the line class ;return captain ranks of #2 ;return captain ranks besides  #3,"[""SELECT['captains']"", ""FILTER['#1', 'in the Third-rate ship of the line class']"", ""PROJECT['captain ranks of #REF', '#2']"", ""SELECT['captain ranks']"", ""DISCARD['#4', '#3']""]","['select', 'filter', 'project', 'select', 'discard']",train
SPIDER_train_6241,What are the ranks of captains that have no captain that are in the Third-rate ship of the line class?,return captains ;return #1 that are in  the  Third-rate ship of the   line class ;return ranks of #1 ;return ranks of #2 ;return #3 besides  #4,"[""SELECT['captains']"", ""FILTER['#1', 'that are in the Third-rate ship of the line class']"", ""PROJECT['ranks of #REF', '#1']"", ""PROJECT['ranks of #REF', '#2']"", ""DISCARD['#3', '#4']""]","['select', 'filter', 'project', 'project', 'discard']",train
SPIDER_train_6242,What is the name of the youngest captain?,return captains ;return #1 that  is  the youngest ;return name of #2,"[""SELECT['captains']"", ""FILTER['#1', 'that is the youngest']"", ""PROJECT['name of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6243,Return the name of the youngest captain.,return captains ;return names of  #1 ;return #2 where #1 is  youngest,"[""SELECT['captains']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is youngest']""]","['select', 'project', 'comparative']",train
SPIDER_train_6244,how many ships are there?,return ships ;return number of  #1,"[""SELECT['ships']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_6245,Count the number of ships.,return ships ;return number of #1,"[""SELECT['ships']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_6246,"Find the name, type, and flag of the ship that is built in the most recent year.","return ships ;return year built of  #1 ;return #1 where  #2 is  most recent ;return name of  #3 ;return type of  #3 ;return flag of  #3 ;return #4 ,   #5 , #6","[""SELECT['ships']"", ""PROJECT['year built of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['name of #REF', '#3']"", ""PROJECT['type of #REF', '#3']"", ""PROJECT['flag of #REF', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'project', 'superlative', 'project', 'project', 'project', 'union']",train
SPIDER_train_6247,"What is the name, type, and flag of the ship that was built in the most recent year?","return ships ;return the  year built of  #1 ;return #1 where #2 is  the  highest ;return the  name of  #3 ;return the  type of  #3 ;return the  flag of  #3 ;return #4 ,  #5 ,   #6","[""SELECT['ships']"", ""PROJECT['the year built of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the highest']"", ""PROJECT['the name of #REF', '#3']"", ""PROJECT['the type of #REF', '#3']"", ""PROJECT['the flag of #REF', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_6248,"Group by ships by flag, and return number of ships that have each flag.",return ships  ;return flags of #1 ;return number of  #1 for each #2,"[""SELECT['ships']"", ""PROJECT['flags of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""UNION['#2', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_6249,"What are the different ship flags, and how many ships have each?","return ships ;return different flags of  #1 ;return ships that  have  #2 ;return number of  #3 for each  #2 ;return #2 ,  #4","[""SELECT['ships']"", ""PROJECT['different flags of #REF', '#1']"", ""PROJECT['ships that have #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_625,List name of all tracks in Balls to the Wall.,return tracks ;return #1 in Balls to the  Wall ;return names of  #2,"[""SELECT['tracks']"", ""FILTER['#1', 'in Balls to the Wall']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6250,Which flag is most widely used among all ships?,return flags ;return ships with  #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['flags']"", ""PROJECT['ships with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_6251,Return the flag that is most common among all ships.,return flags ;return ships with  #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['flags']"", ""PROJECT['ships with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_6252,List all ship names in the order of built year and class.,return ship ;return built year of  #1 ;return class of  #1 ;return names of  #1 ; return #2 ans #3 ;return #4 sorted by #5,"[""SELECT['ship']"", ""PROJECT['built year of #REF', '#1']"", ""PROJECT['class of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#4', '#5']""]","['select', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_6253,"What are the names of ships, ordered by year they were built and their class?","return ships ;return names of  #1 ;return year #1 were built ;return class of  #1 ; return #3, #4 ; return #2 ordered by #5","[""SELECT['ships']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['year #REF were built', '#1']"", ""PROJECT['class of #REF', '#1']"", ""UNION['#3', '#4']"", ""SORT['#2', '#5']""]","['select', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_6254,Find the ship type that are used by both ships with Panama and Malta flags.,return ships ;return flags of  #1 ;return #1 where  #2 is  Panama ;return #1 where  #2 is  Malta ;return #1 of  both #3 and #4 ;return ship type of  #5,"[""SELECT['ships']"", ""PROJECT['flags of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Panama']"", ""COMPARATIVE['#1', '#2', 'is Malta']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['ship type of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_6255,What types of ships have both ships that have Panama Flags and Malta flags?,return ships  ;return flags of  #1 ;return #2 which are  Panama ;return #2 which are  Malta ;return #1  of  both #3 and  #4 ;return types of  #5,"[""SELECT['ships']"", ""PROJECT['flags of #REF', '#1']"", ""FILTER['#2', 'which are Panama']"", ""FILTER['#2', 'which are Malta']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['types of #REF', '#5']""]","['select', 'project', 'filter', 'filter', 'intersection', 'project']",train
SPIDER_train_6256,In which year were most of ships built?,return years ;return ships built in #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is highest,"[""SELECT['years']"", ""PROJECT['ships built in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_6257,What is the year in which most ships were built?,return years ;return ships built in #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['years']"", ""PROJECT['ships built in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_6258,Find the name of the ships that have more than one captain.,return ships ;return captains of  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  higher than one ;return names of  #4,"[""SELECT['ships']"", ""PROJECT['captains of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than one']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_6259,What are the names of ships that have more than one captain?,return ships ;return captains of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than one ;return names of  #4,"[""SELECT['ships']"", ""PROJECT['captains of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than one']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_626,What is the name of all tracks in the album named Balls to the Wall?,return albums ;return #1 named Balls to  the   Wall ;return tracks in #2 ;return names of #3,"[""SELECT['albums']"", ""FILTER['#1', 'named Balls to the Wall']"", ""PROJECT['tracks in #REF', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_6260,what are the names and classes of the ships that do not have any captain yet?,"return ships ;return #1 that  do not  have  captains yet ;return names of  #2 ;return classes of  #2 ;return #3 ,  #4","[""SELECT['ships']"", ""FILTER['#1', 'that do not have captains yet']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['classes of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_6261,Return the names and classes of ships that do not have a captain?,"return ships ;return #1 that  do not  have  a captain ;return names of  #2 ;return classes of  #2 ;return #3 ,  #4","[""SELECT['ships']"", ""FILTER['#1', 'that do not have a captain']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['classes of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_6262,Find the name of the ship that is steered by the youngest captain.,return ships ;return captains of  #1 ;return #1 where  #2 is  youngest ;return name of  #3,"[""SELECT['ships']"", ""PROJECT['captains of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is youngest']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6263,What is the name of the ship that is commanded by the youngest captain?,return ships ;return captains of  #1 ;return #1 where #2 is  youngest ;return name of  #3,"[""SELECT['ships']"", ""PROJECT['captains of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is youngest']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6264,Find the name and flag of ships that are not steered by any captain with Midshipman rank.,"return captains ;return ranks of  #1 ;return #1 where  #2 is  not  Midshipman ;return ships of  #3 ;return names of  #4 ;return flags of  #4 ;return #5 ,   #6","[""SELECT['captains']"", ""PROJECT['ranks of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not Midshipman']"", ""PROJECT['ships of #REF', '#3']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['flags of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_6265,What are the names and flags of ships that do not have a captain with the rank of Midshipman?,"return ranks ;return #1 besides  Midshipman ;return captains with #2 ;return ships of  #3 ;return names of  #4 ;return flags of  #4 ;return #5 ,  #6","[""SELECT['ranks']"", ""FILTER['#1', 'Midshipman']"", ""DISCARD['#1', '#2']"", ""PROJECT['captains with #REF', '#3']"", ""PROJECT['ships of #REF', '#4']"", ""PROJECT['names of #REF', '#5']"", ""PROJECT['flags of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'filter', 'discard', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_6266,Find the name of the ships that are steered by both a captain with Midshipman rank and a captain with Lieutenant rank.,return ships ;return captains that steered #1 ;return ranks of #2 ;return #1 where #3 is Midshipman ;return #1 where #3 is Lieutenant ;return #1 of both #4 and  #5 ;return name of #6,"[""SELECT['ships']"", ""PROJECT['captains that steered #REF', '#1']"", ""PROJECT['ranks of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Midshipman']"", ""COMPARATIVE['#1', '#3', 'is Lieutenant']"", ""INTERSECTION['#1', '#4', '#5']"", ""PROJECT['name of #REF', '#6']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_6267,What are the names of ships that are commanded by both captains with the rank of Midshipman and captains with the rank of Lieutenant?,return ships ;return captains  that  #1 are commanded by ;return ranks of   #2 ;return #1 where at least one #3 is  Midshipman ;return #1 where at least one #3 is  Lieutenant ;return #1 in both #4 and #5,"[""SELECT['ships']"", ""PROJECT['captains that #REF are commanded by', '#1']"", ""PROJECT['ranks of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Midshipman']"", ""COMPARATIVE['#1', '#3', 'is Lieutenant']"", ""INTERSECTION['#1', '#4', '#5']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection']",train
SPIDER_train_6268,What is id of the city that hosted events in the most recent year?,return cities ;return #1 that  hosted events ;return #2 in the  most recent year ;return id of  #3,"[""SELECT['cities']"", ""FILTER['#1', 'that hosted events']"", ""FILTER['#2', 'in the most recent year']"", ""PROJECT['id of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_6269,Find the city that hosted some events in the most recent year. What is the id of this city?,return cities ;return #1 that  hosted events in most recent year ;return id of  #2,"[""SELECT['cities']"", ""FILTER['#1', 'that hosted events in most recent year']"", ""PROJECT['id of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_627,List title of albums have the number of tracks greater than 10.,return albums ;return number of  tracks of #1 ;return #1 where  #2 is higher than 10 ;return titles of  #3,"[""SELECT['albums']"", ""PROJECT['tracks of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 10']"", ""PROJECT['titles of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_6270,"Find the match ids of the cities that hosted competition ""1994 FIFA World Cup qualification""?",return 1994 FIFA World Cup qualification ;return cities that  hosted #1 ;return match ids of #2,"[""SELECT['1994 FIFA World Cup qualification']"", ""PROJECT['cities that hosted #REF', '#1']"", ""PROJECT['match ids of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_6271,"What is the match id of the competition called ""1994 FIFA World Cup qualification""?",return competitions ;return #1 that  is  called 1994 FIFA World Cup qualification ;return match id of  #2,"[""SELECT['competitions']"", ""FILTER['#1', 'that is called 1994 FIFA World Cup qualification']"", ""PROJECT['match id of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6272,Find the cities which were once a host city after 2010?,return cities ;return #1 which  were once a host city ;return #2 after 2010,"[""SELECT['cities']"", ""FILTER['#1', 'which were once a host city']"", ""FILTER['#2', 'after 2010']""]","['select', 'filter', 'filter']",train
SPIDER_train_6273,Which cities served as a host city after 2010?,return cities ;return #1 Which have  served as host ;return #2 after 2010,"[""SELECT['cities']"", ""FILTER['#1', 'Which have served as host']"", ""FILTER['#2', 'after 2010']""]","['select', 'filter', 'filter']",train
SPIDER_train_6274,Which city has hosted the most events?,return city ;return events ;return number of  #2 hosted for each #1 ;return #1 where #3 is  highest,"[""SELECT['city']"", ""SELECT['events']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'select', 'group', 'superlative']",train
SPIDER_train_6275,Find the city that hosted the most events.,return cities ;return events #1 hosted ;return number of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['cities']"", ""PROJECT['events #REF hosted', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_6276,"What is the venue of the competition ""1994 FIFA World Cup qualification"" hosted by ""Nanjing ( Jiangsu )""?",return venue ;return #1 of  FIFA World Cup qualification ;return #2 in 1994 ;return #3 hosted by Nanjing ( Jiangsu ),"[""SELECT['venue']"", ""FILTER['#1', 'of FIFA World Cup qualification']"", ""FILTER['#2', 'in 1994']"", ""FILTER['#3', 'hosted by Nanjing ( Jiangsu )']""]","['select', 'filter', 'filter', 'filter']",train
SPIDER_train_6277,"Find the venue of the competition ""1994 FIFA World Cup qualification"" which was hosted by ""Nanjing ( Jiangsu )"".",return the  1994 FIFA World Cup competition ;return the  qualifications of #1 ;return #2 that  was hosted by Jiangsu ;return the  venue of #3,"[""SELECT['the 1994 FIFA World Cup competition']"", ""PROJECT['the qualifications of #REF', '#1']"", ""FILTER['#2', 'that was hosted by Jiangsu']"", ""PROJECT['the venue of #REF', '#3']""]","['select', 'project', 'filter', 'project']",train
SPIDER_train_6278,Give me the temperature of Shanghai in January.,return Shanghai ;return temperatures of  #1 ;return #2 in January,"[""SELECT['Shanghai']"", ""PROJECT['temperatures of #REF', '#1']"", ""FILTER['#2', 'in January']""]","['select', 'project', 'filter']",train
SPIDER_train_6279,"What is the temperature of ""Shanghai"" city in January?",return Shanghai city ;return temperature of #1 ;return #2 in January,"[""SELECT['Shanghai city']"", ""PROJECT['temperature of #REF', '#1']"", ""FILTER['#2', 'in January']""]","['select', 'project', 'filter']",train
SPIDER_train_628,What are the names of the albums that have more than 10 tracks?,return albums ;return tracks of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than 10 ;return names of  #4,"[""SELECT['albums']"", ""PROJECT['tracks of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 10']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_6280,"What is the host year of city ""Taizhou ( Zhejiang )""?",return cities ;return host years of  #1 ;return #2 where #1 is  Taizhou,"[""SELECT['cities']"", ""PROJECT['host years of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Taizhou']""]","['select', 'project', 'comparative']",train
SPIDER_train_6281,"IN which year did city ""Taizhou ( Zhejiang )"" serve as a host city?",return the  city  Zhejiang ;return the  year that  #1 serves as a host city,"[""SELECT['the city Zhejiang']"", ""PROJECT['the year that #REF serves as a host city', '#1']""]","['select', 'project']",train
SPIDER_train_6282,Which three cities have the largest regional population?,return cities ;return regional population of  #1 ;return #1 where #2 is  three largest,"[""SELECT['cities']"", ""PROJECT['regional population of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is three largest']""]","['select', 'project', 'comparative']",train
SPIDER_train_6283,What are the three largest cities in terms of regional population?,return cities ;return regional population of  #1 ;return #1 where #2 is  three largest,"[""SELECT['cities']"", ""PROJECT['regional population of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is three largest']""]","['select', 'project', 'comparative']",train
SPIDER_train_6284,Which city has the lowest GDP? Please list the city name and its GDP.,"return cities ;return GDP  of  #1 ;return #1 where #2 is  lowest ;return city  name of  #3 ;return GDP  of  #3 ;return #4 ,  #5","[""SELECT['cities']"", ""PROJECT['GDP of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""PROJECT['city name of #REF', '#3']"", ""PROJECT['GDP of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_6285,What is the city with the smallest GDP? Return the city and its GDP.,"return cities ;return GDP  of  #1 ;return #1 where #2 is  lowest ;return GDP  of  #3 ;return #3 ,  #4","[""SELECT['cities']"", ""PROJECT['GDP of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""PROJECT['GDP of #REF', '#3']"", ""UNION['#3', '#4']""]","['select', 'project', 'superlative', 'project', 'union']",train
SPIDER_train_6286,Which city has the highest temperature in February?,return cities ;return temperatures of  #1 ;return #2 in February ;return #1 where #3 is  highest,"[""SELECT['cities']"", ""PROJECT['temperatures of #REF', '#1']"", ""FILTER['#2', 'in February']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'filter', 'superlative']",train
SPIDER_train_6287,"In February, which city marks the highest temperature?",return cities ;return temperatures of #1 ;return #2 in February ;return #1 where #3 is  the  highest,"[""SELECT['cities']"", ""PROJECT['temperatures of #REF', '#1']"", ""FILTER['#2', 'in February']"", ""COMPARATIVE['#1', '#3', 'is the highest']""]","['select', 'project', 'filter', 'comparative']",train
SPIDER_train_6288,Give me a list of cities whose temperature in March is lower than that in July or higher than that in Oct?,"return cities ;return temperatures of #1 ;return #2 in   March ;return #2 in   July ;return #2 in   Oct ;return #1 where #3 is  lower than #4 ;return #1 where #3 is  higher than #5 ;return #6 ,  #7","[""SELECT['cities']"", ""PROJECT['temperatures of #REF', '#1']"", ""FILTER['#2', 'in March']"", ""FILTER['#2', 'in July']"", ""FILTER['#2', 'in Oct']"", ""COMPARATIVE['#1', '#3', 'is lower than #4']"", ""COMPARATIVE['#1', '#3', 'is higher than #5']"", ""UNION['#6', '#7']""]","['select', 'project', 'filter', 'filter', 'filter', 'comparative', 'comparative', 'union']",train
SPIDER_train_6289,Which cities' temperature in March is lower than that in July or higher than that in Oct?,return cities ;return temperatures of #1 ;return #2 in   March ;return #2 in   July ;return #2 in   Oct ;return #1 where #3 is  lower than #4 ;return #1 where #3 is  higher than #5 ;return #6 or  #7,"[""SELECT['cities']"", ""PROJECT['temperatures of #REF', '#1']"", ""FILTER['#2', 'in March']"", ""FILTER['#2', 'in July']"", ""FILTER['#2', 'in Oct']"", ""COMPARATIVE['#1', '#3', 'is lower than #4']"", ""COMPARATIVE['#1', '#3', 'is higher than #5']"", ""UNION['#6', '#7']""]","['select', 'project', 'filter', 'filter', 'filter', 'comparative', 'comparative', 'union']",train
SPIDER_train_629,List the name of tracks belongs to genre Rock and whose media type is MPEG audio file.,return tracks ;return genre of  #1 ;return #1 where  #2 is Rock ;return media types of  #1 ;return #1 where  #4 is MPEG ;return #1 of  both #3 and #5 ;return names of  #6,"[""SELECT['tracks']"", ""PROJECT['genre of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Rock']"", ""PROJECT['media types of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is MPEG']"", ""INTERSECTION['#1', '#3', '#5']"", ""PROJECT['names of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'comparative', 'intersection', 'project']",train
SPIDER_train_6290,Give me a list of cities whose temperature in Mar is lower than that in July and which have also served as host cities?,return cities ;return #1 that  have served as host cities ;return temperatures of #1 ;return #3 in Mar ;return #3 in July ;return #1 where #4 is  lower than #5 ;return #1 in both #2 and #6,"[""SELECT['cities']"", ""FILTER['#1', 'that have served as host cities']"", ""PROJECT['temperatures of #REF', '#1']"", ""FILTER['#3', 'in Mar']"", ""FILTER['#3', 'in July']"", ""COMPARATIVE['#1', '#4', 'is lower than #5']"", ""INTERSECTION['#1', '#2', '#6']""]","['select', 'filter', 'project', 'filter', 'filter', 'comparative', 'intersection']",train
SPIDER_train_6291,Which cities have lower temperature in March than in July and have been once host cities?,return cities  ;return #1 that have once been host cities  ;return temperatures of #2 ;return #3 in  March ;return #3 in  July ;return #2 where #4 is lower than #5,"[""SELECT['cities']"", ""FILTER['#1', 'that have once been host cities']"", ""PROJECT['temperatures of #REF', '#2']"", ""FILTER['#3', 'in March']"", ""FILTER['#3', 'in July']"", ""COMPARATIVE['#2', '#4', 'is lower than #5']""]","['select', 'filter', 'project', 'filter', 'filter', 'comparative']",train
SPIDER_train_6292,Give me a list of cities whose temperature in Mar is lower than that in Dec and which have never been host cities.,return cities ;return #1 that  have been host cities ;return #1 besides #2 ;return temperatures of #3 ;return #4 in Mar ;return #4 in Dec ;return #3 where #5 is  lower than #6,"[""SELECT['cities']"", ""FILTER['#1', 'that have been host cities']"", ""DISCARD['#1', '#2']"", ""PROJECT['temperatures of #REF', '#3']"", ""FILTER['#4', 'in Mar']"", ""FILTER['#4', 'in Dec']"", ""COMPARATIVE['#3', '#5', 'is lower than #6']""]","['select', 'filter', 'discard', 'project', 'filter', 'filter', 'comparative']",train
SPIDER_train_6293,Which cities have lower temperature in March than in Dec and have never served as host cities?,"return cities ;return the  temperature of  #1 ;return #1 where #2 is  lower in March than in  Dec ;return #1 that  have  served as host cities ;return #1 besides  #4 ;return #3 ,  #5","[""SELECT['cities']"", ""PROJECT['the temperature of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is lower in March than in Dec']"", ""FILTER['#1', 'that have served as host cities']"", ""DISCARD['#1', '#4']"", ""UNION['#3', '#5']""]","['select', 'project', 'comparative', 'filter', 'discard', 'union']",train
SPIDER_train_6294,Give me a list of cities whose temperature in Feb is higher than that in Jun or cities that were once host cities?,"return cities   ;return #1 that  were once host cities   ;return temperatures of #1 ;return #3 in Feb ;return #3 in Jun ;return #1 where #4 is  higher than #5 ;return #6 ,  #2","[""SELECT['cities']"", ""FILTER['#1', 'that were once host cities']"", ""PROJECT['temperatures of #REF', '#1']"", ""FILTER['#3', 'in Feb']"", ""FILTER['#3', 'in Jun']"", ""COMPARATIVE['#1', '#4', 'is higher than #5']"", ""UNION['#6', '#2']""]","['select', 'filter', 'project', 'filter', 'filter', 'comparative', 'union']",train
SPIDER_train_6295,Which cities have higher temperature in Feb than in Jun or have once served as host cities?,"return cities ;return #1 that  once served as host cities ;return temperatures of #1 ;return #3 in Feb ;return #3 in Jun ;return #1 where #4 is  higher than #5 ;return #6 ,  #2","[""SELECT['cities']"", ""FILTER['#1', 'that once served as host cities']"", ""PROJECT['temperatures of #REF', '#1']"", ""FILTER['#3', 'in Feb']"", ""FILTER['#3', 'in Jun']"", ""COMPARATIVE['#1', '#4', 'is higher than #5']"", ""UNION['#6', '#2']""]","['select', 'filter', 'project', 'filter', 'filter', 'comparative', 'union']",train
SPIDER_train_6296,Please give me a list of cities whose regional population is over 10000000.,return cities ;return regional populations of  #1 ;return #1 where  #2 is higher than 10000000,"[""SELECT['cities']"", ""PROJECT['regional populations of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 10000000']""]","['select', 'project', 'comparative']",train
SPIDER_train_6297,Which cities have regional population above 10000000?,return cities ;return regional populations of #1 ;return #1 where #2 is higher than 10000000,"[""SELECT['cities']"", ""PROJECT['regional populations of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 10000000']""]","['select', 'project', 'comparative']",train
SPIDER_train_6298,Please give me a list of cities whose regional population is over 8000000 or under 5000000.,return cities ;return regional populations of  #1 ;return #1 where #2 is  higher than 8000000 ;return #1 where #2 is  lower than 5000000 ;return #3 or  #4,"[""SELECT['cities']"", ""PROJECT['regional populations of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 8000000']"", ""COMPARATIVE['#1', '#2', 'is lower than 5000000']"", ""UNION['#3', '#4']""]","['select', 'project', 'comparative', 'comparative', 'union']",train
SPIDER_train_6299,Which cities have regional population above 8000000 or below 5000000?,"return cities ;return regional population of  #1 ;return #1 where #2 is  above 8000000 ;return #1 where #2 is  below 5000000 ;return #3 ,  #4","[""SELECT['cities']"", ""PROJECT['regional population of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is above 8000000']"", ""COMPARATIVE['#1', '#2', 'is below 5000000']"", ""UNION['#3', '#4']""]","['select', 'project', 'comparative', 'comparative', 'union']",train
SPIDER_train_63,What are the  ids of every student who has never attended a course?,return students ;return #1 who  never attended a course ;return ids of  #2,"[""SELECT['students']"", ""FILTER['#1', 'who never attended a course']"", ""PROJECT['ids of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_630,What are the names of all Rock tracks that are stored on MPEG audio files?,return Rock tracks ;return #1 stored on  MPEG audio files ;return names of  #2,"[""SELECT['Rock tracks']"", ""FILTER['#1', 'stored on MPEG audio files']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6300,Find the number of matches in different competitions.,return different competitions ;return matches in #1 ;return number of  #2,"[""SELECT['different competitions']"", ""PROJECT['matches in #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_6301,"For each competition, count the number of matches.",return competitions ;return matches of  #1 ;return number of #2 for each #1,"[""SELECT['competitions']"", ""PROJECT['matches of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_6302,List venues of all matches in the order of their dates starting from the most recent one.,return matches ;return venues of  #1 ;return dates of  #1 ;return #2 sorted by #3 starting from most recent one,"[""SELECT['matches']"", ""PROJECT['venues of #REF', '#1']"", ""PROJECT['dates of #REF', '#1']"", ""SORT['#2', '#3', 'starting from most recent one']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_6303,What are the venues of all the matches? Sort them in the descending order of match date.,return matches ;return venues of  #1 ;return match dates of  #1 ;return #2 sorted by #3 in descending order,"[""SELECT['matches']"", ""PROJECT['venues of #REF', '#1']"", ""PROJECT['match dates of #REF', '#1']"", ""SORT['#2', '#3', 'in descending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_6304,what is the GDP of the city with the largest population.,return cities ;return populations of  #1 ;return #1 where #2 is  largest ;return GDP of  #3,"[""SELECT['cities']"", ""PROJECT['populations of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['GDP of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_6305,Find the GDP of the city with the largest regional population.,return cities ;return regional populations of  #1 ;return #1 where #2 is  largest ;return GDP of  #3,"[""SELECT['cities']"", ""PROJECT['regional populations of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['GDP of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_6306,What are the GDP and population of the city that already served as a host more than once?,"return cities ;return #1 that  served as host more than  once ;return GDP of #2 ;return population of #2 ;return #3 ,  #4","[""SELECT['cities']"", ""FILTER['#1', 'that served as host more than once']"", ""PROJECT['GDP of #REF', '#2']"", ""PROJECT['population of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_6307,Which cities have served as host cities more than once? Return me their GDP and population.,"return cities ;return #1 that  served as host cities more than  once ;return GDP of #2 ;return populations of #2 ;return #3 ,  #4","[""SELECT['cities']"", ""FILTER['#1', 'that served as host cities more than once']"", ""PROJECT['GDP of #REF', '#2']"", ""PROJECT['populations of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_6308,"List every individual's first name, middle name and last name in alphabetical order by last name.","return individuals ;return first names of  #1 ;return middle names of  #1 ;return last names of  #1 ;return #2 ,  #3 , #4 ;return #5 sorted by #4 in alphabetical order","[""SELECT['individuals']"", ""PROJECT['first names of #REF', '#1']"", ""PROJECT['middle names of #REF', '#1']"", ""PROJECT['last names of #REF', '#1']"", ""UNION['#2', '#3', '#4']"", ""SORT['#5', '#4', 'in alphabetical order']""]","['select', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_6309,"What are the first, middle, and last names of all individuals, ordered by last name?","return individuals ;return first names of  #1 ;return middle names of  #1 ;return last  names of  #1 ;return #2 ,  #3 ,   #4 ;return #5 sorted by #4","[""SELECT['individuals']"", ""PROJECT['first names of #REF', '#1']"", ""PROJECT['middle names of #REF', '#1']"", ""PROJECT['last names of #REF', '#1']"", ""UNION['#2', '#3', '#4']"", ""SORT['#5', '#4']""]","['select', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_631,List the name of tracks belongs to genre Rock or media type is MPEG audio file.,return tracks ;return genre of  #1 ;return #1 where  #2 is Rock ;return media type of  #1 ;return #1 where  #4 is MPEG audio file ;return #3 or #5 ;return names of  #6,"[""SELECT['tracks']"", ""PROJECT['genre of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Rock']"", ""PROJECT['media type of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is MPEG audio file']"", ""UNION['#3', '#5']"", ""PROJECT['names of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'comparative', 'union', 'project']",train
SPIDER_train_6310,List all the types of forms.,return forms ;return types of  #1,"[""SELECT['forms']"", ""PROJECT['types of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_6311,What are the different types of forms?,return forms ;return different types of  #1,"[""SELECT['forms']"", ""PROJECT['different types of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_6312,Find the name of the most popular party form.,return party form ;return most popular #1 ;return name of  #2,"[""SELECT['party form']"", ""PROJECT['most popular #REF', '#1']"", ""PROJECT['name of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_6313,What is the name of the party form that is most common?,return party forms ;return parties with #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return name of  #4,"[""SELECT['party forms']"", ""PROJECT['parties with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_6314,"Find the payment method and phone of the party with email ""enrico09@example.com"".","return parties ;return email of  #1 ;return #1 where  email is  enrico09 @ example.com ;return payment method of  #3 ;return phone of  #3 ;return #4 ,   #5","[""SELECT['parties']"", ""PROJECT['email of #REF', '#1']"", ""FILTER['#1', 'where email is enrico09 @ example.com']"", ""PROJECT['payment method of #REF', '#3']"", ""PROJECT['phone of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'filter', 'project', 'project', 'union']",train
SPIDER_train_6315,What is the payment method code and party phone of the party with the email 'enrico09@example.com'?,"return parties ;return emails of #1 ;return #1 where #2 is  'enrico09 @ example.com ;return the   payment method of #3 ;return the   code of #4 ;return the   party phone of #3 ;return #5 ,  #6","[""SELECT['parties']"", ""PROJECT['emails of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is enrico09 @ example.com']"", ""PROJECT['the payment method of #REF', '#3']"", ""PROJECT['the code of #REF', '#4']"", ""PROJECT['the party phone of #REF', '#3']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_6316,Find the emails of parties with the most popular party form.,return parties ;return party forms of #1 ;return number of  #1 for each #2 ;return #2 where #3 is the  highest ;return #1 where #2 is the  same as #4 ;return emails of #5,"[""SELECT['parties']"", ""PROJECT['party forms of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""COMPARATIVE['#2', '#3', 'is the highest']"", ""COMPARATIVE['#1', '#2', 'is the same as #4']"", ""PROJECT['emails of #REF', '#5']""]","['select', 'project', 'group', 'comparative', 'comparative', 'project']",train
SPIDER_train_6317,What are the party emails associated with parties that used the party form that is the most common?,return parties ;return forms of #1 ;return number of  #1 for each #2 ;return #2 where #3 is  the   highest ;return #1 where #2 is  #4 ;return the   party emails of #5,"[""SELECT['parties']"", ""PROJECT['forms of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""COMPARATIVE['#2', '#3', 'is the highest']"", ""COMPARATIVE['#1', '#2', 'is #4']"", ""PROJECT['the party emails of #REF', '#5']""]","['select', 'project', 'group', 'comparative', 'comparative', 'project']",train
SPIDER_train_6318,List all the name of organizations in order of the date formed.,return organizations ;return names of  #1 ;return dates formed of  #1 ;return #2 sorted by #3,"[""SELECT['organizations']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['dates formed of #REF', '#1']"", ""SORT['#2', '#3']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_6319,"What are the names of organizations, ordered by the date they were formed, ascending?",return organizations ;return names of  #1 ;return date formed of  #1 ;return #2 sorted by ascending #3,"[""SELECT['organizations']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['date formed of #REF', '#1']"", ""SORT['#2', '#3', 'ascending']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_632,What are the names of all tracks that belong to the Rock genre and whose media type is MPEG?,return tracks ;return genres of  #1 ;return #1 where #2 is  Rock ;return media types of  #1 ;return #1 where #4 is  MPEG ;return #1 of  both #3 and  #5 ;return names of  #6,"[""SELECT['tracks']"", ""PROJECT['genres of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Rock']"", ""PROJECT['media types of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is MPEG']"", ""INTERSECTION['#1', '#3', '#5']"", ""PROJECT['names of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'comparative', 'intersection', 'project']",train
SPIDER_train_6320,Find the name of the youngest organization.,return organizations ;return the  youngest #1 ;return name of  the  #2,"[""SELECT['organizations']"", ""PROJECT['the youngest #REF', '#1']"", ""PROJECT['name of the #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_6321,What is the name of the organization that was formed most recently?,return organizations ;return #1 that  was formed most recently ;return name of  #2,"[""SELECT['organizations']"", ""FILTER['#1', 'that was formed most recently']"", ""PROJECT['name of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6322,"Find the last name of the latest contact individual of the organization ""Labour Party"".",return the  Labour Party organization ;return contact individuals of #1 ;return the  latest of #2 ;return the  last name of #3,"[""SELECT['the Labour Party organization']"", ""PROJECT['contact individuals of #REF', '#1']"", ""PROJECT['the latest of #REF', '#2']"", ""PROJECT['the last name of #REF', '#3']""]","['select', 'project', 'project', 'project']",train
SPIDER_train_6323,What is the last name of the contact individual from the Labour party organization who was contacted most recently?,return organization ;return #1 that  is  Labour party ;return contact individual from #2 ;return #3 that  was contacted most recently ;return last name of #4,"[""SELECT['organization']"", ""FILTER['#1', 'that is Labour party']"", ""PROJECT['contact individual from #REF', '#2']"", ""FILTER['#3', 'that was contacted most recently']"", ""PROJECT['last name of #REF', '#4']""]","['select', 'filter', 'project', 'filter', 'project']",train
SPIDER_train_6324,Find the last name of the first ever contact person of the organization with the highest UK Vat number.,return organizations ;return UK Vat numbers of #1 ;return #1 where #2 is  the   highest ;return contact people of #3 ;return the   first ever #4 ;return the   last name of #5,"[""SELECT['organizations']"", ""PROJECT['UK Vat numbers of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the highest']"", ""PROJECT['contact people of #REF', '#3']"", ""PROJECT['the first ever #REF', '#4']"", ""PROJECT['the last name of #REF', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'project']",train
SPIDER_train_6325,What is the last name of the first individual contacted from the organization with the maximum UK Vat number across all organizations?,return organizations ;return UK Vat number of #1 ;return #1 where #2 is  the   highest ;return the   first individual contacted from #3 ;return the   last name of #4,"[""SELECT['organizations']"", ""AGGREGATE['count', '#1']"", ""COMPARATIVE['#1', '#2', 'is the highest']"", ""PROJECT['the first individual contacted from #REF', '#3']"", ""PROJECT['the last name of #REF', '#4']""]","['select', 'aggregate', 'comparative', 'project', 'project']",train
SPIDER_train_6327,Count the number of services.,return services ;return number of #1,"[""SELECT['services']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_6328,Find name of the services that has never been used.,return services ;return #1 that have been used ;return #1 besides  #2 ;return names of #3,"[""SELECT['services']"", ""FILTER['#1', 'that have been used']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_6329,What are the names of the services that have never been used?,return services ;return #1 that  have  been used ;return #1 besides  #2 ;return names of  #3,"[""SELECT['services']"", ""FILTER['#1', 'that have been used']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_633,List the name of tracks belongs to genre Rock or genre Jazz.,"return tracks ;return genre of #1 ;return #1 where #2 is  Rock ;return #1 where #2 is  Jazz ;return #3 ,  #4 ;return names of #5","[""SELECT['tracks']"", ""PROJECT['genre of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Rock']"", ""COMPARATIVE['#1', '#2', 'is Jazz']"", ""UNION['#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_6330,Find the name of all the cities and states.,"return cities ;return states ;return the names of  #1 ;return the names of  #2 ;return #3 ,   #4","[""SELECT['cities']"", ""SELECT['states']"", ""PROJECT['the names of #REF', '#1']"", ""PROJECT['the names of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'select', 'project', 'project', 'union']",train
SPIDER_train_6331,What are the names of all cities and states?,"return cities ;return names of #1 ;return states ;return names of #3 ;return #2 ,  #4","[""SELECT['cities']"", ""PROJECT['names of #REF', '#1']"", ""SELECT['states']"", ""PROJECT['names of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'select', 'project', 'union']",train
SPIDER_train_6332,"How many cities are there in state ""Colorado""?",return Colorado ;return cities in #1 ;return number of #2,"[""SELECT['Colorado']"", ""PROJECT['cities in #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_6333,Count the number of cities in the state of Colorado.,return Colorado ;return cities in #1 ;return number of  #2,"[""SELECT['Colorado']"", ""PROJECT['cities in #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_6334,Find the payment method code used by more than 3 parties.,return payment method code ;return parties of #1 ;return number of #2 for each #1 ;return #1 where  #3 is  more than  3,"[""SELECT['payment method code']"", ""PROJECT['parties of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than 3']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_6335,What are the payment method codes that have been used by more than 3 parties?,return payment methods ;return codes of  #1 ;return parties that  used #2 ;return number of  #3 for each  #2 ;return #2 where #4 is  higher than 3,"[""SELECT['payment methods']"", ""PROJECT['codes of #REF', '#1']"", ""PROJECT['parties that used #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""COMPARATIVE['#2', '#4', 'is higher than 3']""]","['select', 'project', 'project', 'group', 'comparative']",train
SPIDER_train_6336,"Find the name of organizations whose names contain ""Party"".",return organizations ;return names of  #1 ;return #2 whose names contain Party,"[""SELECT['organizations']"", ""PROJECT['names of #REF', '#1']"", ""FILTER['#2', 'whose names contain Party']""]","['select', 'project', 'filter']",train
SPIDER_train_6337,"What are the names of organizations that contain the word ""Party""?",return organizations ;return names of  #1 ;return #1 where #2 contain the  word Party ;return names of  #3,"[""SELECT['organizations']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'contain the word Party']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6338,How many distinct payment methods are used by parties?,return parties ;return payment methods used by #1 ;return distinct #2 ;return number of  #3,"[""SELECT['parties']"", ""PROJECT['payment methods used by #REF', '#1']"", ""PROJECT['distinct #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_6339,Count the number of different payment method codes used by parties.,return payment methods ;return codes of  #1 ;return #2 used by parties ;return different #3 ;return number of  #4,"[""SELECT['payment methods']"", ""PROJECT['codes of #REF', '#1']"", ""FILTER['#2', 'used by parties']"", ""PROJECT['different #REF', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'filter', 'project', 'aggregate']",train
SPIDER_train_634,What are the names of the tracks that are Rock or Jazz songs?,return tracks ;return #1 that  are Rock songs ;return #1 that  are Jazz songs ;return #2 or  #3 ;return names of #4,"[""SELECT['tracks']"", ""FILTER['#1', 'that are Rock songs']"", ""FILTER['#1', 'that are Jazz songs']"", ""UNION['#2', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_6340,Which is the email of the party that has used the services the most number of times?,return parties ;return the  number of  times #1 have  used services ;return #1 where #2 is  most ;return the  email of  #3,"[""SELECT['parties']"", ""PROJECT['times #REF have used services', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['the email of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_6341,Return the party email that has used party services the greatest number of times.,return party email ;return times #1 used party services ;return #1 where #2 is  highest,"[""SELECT['party email']"", ""PROJECT['times #REF used party services', '#1']"", ""SUPERLATIVE['max', '#1', '#2']""]","['select', 'project', 'superlative']",train
SPIDER_train_6342,"Which state can address ""6862 Kaitlyn Knolls"" possibly be in?",return address 6862 Kaitlyn Knolls ;return state of #1,"[""SELECT['address 6862 Kaitlyn Knolls']"", ""PROJECT['state of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_6343,"Give the state corresponding to the line number building ""6862 Kaitlyn Knolls"".",return line number building ;return #1 that  is  6862 Kaitlyn Knolls ;return state corresponding to  #2,"[""SELECT['line number building']"", ""FILTER['#1', 'that is 6862 Kaitlyn Knolls']"", ""PROJECT['state corresponding to #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6344,What is the name of organization that has the greatest number of contact individuals?,return organizations ;return contact individuals of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return name of  #4,"[""SELECT['organizations']"", ""PROJECT['contact individuals of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_6345,Return the name of the organization which has the most contact individuals.,return organizations ;return contact individuals of #1 ;return number of  #2 for each #1 ;return #1 where #3 is highest ;return name of #4,"[""SELECT['organizations']"", ""PROJECT['contact individuals of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_6346,Find the last name of the individuals that have been contact individuals of an organization.,return organizations ;return contact individuals  of  #1 ;return last names of  #2,"[""SELECT['organizations']"", ""PROJECT['contact individuals of #REF', '#1']"", ""PROJECT['last names of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_6347,What are the last names of individuals who have been contact individuals for an organization?,return individuals  ;return #1 who  have  been contact individuals  for an organization ;return the  last names of  #2,"[""SELECT['individuals']"", ""FILTER['#1', 'who have been contact individuals for an organization']"", ""PROJECT['the last names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6348,How many drivers are there?,return drivers ;return number of  #1,"[""SELECT['drivers']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_6349,"Show the name, home city, and age for all drivers.",return drivers ;return names of  #1 ;return home city of  #1 ;return ages of  #1 ;return #2 or #3 or  #4,"[""SELECT['drivers']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['home city of #REF', '#1']"", ""PROJECT['ages of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_635,List the name of all tracks in the playlists of Movies.,return playlists ;return tracks in #1 ;return #2 where  #1 is Movies ;return names of  #3,"[""SELECT['playlists']"", ""PROJECT['tracks in #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Movies']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6350,Show the party and the number of drivers in each party.,"return parties ;return drivers in #1 ;return number of  #2 for each #1 ;return #1 ,  #3","[""SELECT['parties']"", ""PROJECT['drivers in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_6351,Show the name of drivers in descending order of age.,return drivers ;return ages of  #1 ;return #1 sorted by #2 ;return names of  #3,"[""SELECT['drivers']"", ""PROJECT['ages of #REF', '#1']"", ""SORT['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'sort', 'project']",train
SPIDER_train_6352,Show all different home cities.,return home cities ;return different #1,"[""SELECT['home cities']"", ""PROJECT['different #REF', '#1']""]","['select', 'project']",train
SPIDER_train_6353,Show the home city with the most number of drivers.,return home cities ;return drivers in #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['home cities']"", ""PROJECT['drivers in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_6354,Show the party with drivers from Hartford and drivers older than 40.,return drivers from Hartford ;return drivers older than 40 ;return party ;return #3 of  both #1 and #2,"[""SELECT['drivers from Hartford']"", ""SELECT['drivers older than 40']"", ""SELECT['party']"", ""INTERSECTION['#3', '#1', '#2']""]","['select', 'select', 'select', 'intersection']",train
SPIDER_train_6355,Show home city where at least two drivers older than 40 are from.,return home cities ;return drivers from  #1 ;return #2 who  are older than  40 ;return number of #3 for each #1 ;return #1 where #4 is  at least two,"[""SELECT['home cities']"", ""PROJECT['drivers from #REF', '#1']"", ""FILTER['#2', 'who are older than 40']"", ""GROUP['count', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is at least two']""]","['select', 'project', 'filter', 'group', 'comparative']",train
SPIDER_train_6356,Show all home cities except for those having a driver older than 40.,return home cities ;return drivers of #1 ;return #1 where #2 is older than 40 ;return #1 besides  #3,"[""SELECT['home cities']"", ""PROJECT['drivers of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is older than 40']"", ""DISCARD['#1', '#3']""]","['select', 'project', 'comparative', 'discard']",train
SPIDER_train_6357,Show the names of the drivers without a school bus.,return drivers ;return #1 without school bus ;return names of  #2,"[""SELECT['drivers']"", ""FILTER['#1', 'without school bus']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6358,Show the types of schools that have two schools.,return schools  ;return types of #1 ;return number of  #1 for each #2 ;return #2 where #3 is  two,"[""SELECT['schools']"", ""PROJECT['types of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""COMPARATIVE['#2', '#3', 'is two']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_6359,Show the school name and driver name for all school buses.,"return school buses ;return schools of  #1 ;return names of  #2 ;return drivers of  #1 ;return names of  #4 ;return #3 ,  #5","[""SELECT['school buses']"", ""PROJECT['schools of #REF', '#1']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['drivers of #REF', '#1']"", ""PROJECT['names of #REF', '#4']"", ""UNION['#3', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_636,What are the names of all tracks that are on playlists titled Movies?,return tracks ;return #1 on  playlists ;return #2 titled Movies ;return names of  #3,"[""SELECT['tracks']"", ""FILTER['#1', 'on playlists']"", ""FILTER['#2', 'titled Movies']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_6360,"What is the maximum, minimum and average years spent working on a school bus?","return school bus ;return years spent working on #1 ;return maximum of #2 ;return minimum of #2 ;return average of #2 ;return #3 ,  #4 ,   #5","[""SELECT['school bus']"", ""PROJECT['years spent working on #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""AGGREGATE['min', '#2']"", ""AGGREGATE['avg', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'project', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_6361,Show the school name and type for schools without a school bus.,"return schools ;return #1 without buses ;return school names of  #2 ;return types of  #2 ;return #3 ,  #4","[""SELECT['schools']"", ""FILTER['#1', 'without buses']"", ""PROJECT['school names of #REF', '#2']"", ""PROJECT['types of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_6362,Show the type of school and the number of buses for each type.,"return schools ;return types of  #1 ;return buses of  #2 ;return number of  #3 for each  #2 ;return #2 ,  #4","[""SELECT['schools']"", ""PROJECT['types of #REF', '#1']"", ""PROJECT['buses of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_6363,How many drivers are from Hartford city or younger than 40?,return drivers ;return cities of  #1 ;return #1 where  #2 is  Hartford ;return #1 younger than  40 ;return #3 or  #4 ;return number of #5,"[""SELECT['drivers']"", ""PROJECT['cities of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Hartford']"", ""FILTER['#1', 'younger than 40']"", ""UNION['#3', '#4']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'comparative', 'filter', 'union', 'aggregate']",train
SPIDER_train_6364,List names for drivers from Hartford city and younger than 40.,return drivers ;return cities of  #1 ;return #1 where  #2 is Hartford ;return #3 younger than  40 ;return names of  #4,"[""SELECT['drivers']"", ""PROJECT['cities of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Hartford']"", ""FILTER['#3', 'younger than 40']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'comparative', 'filter', 'project']",train
SPIDER_train_6365,find the name of driver who is driving the school bus with the longest working history.,return drivers ;return #1 driving the  school bus ;return working history of  #2 ;return #2 where #3 is  longest ;return name of  #4,"[""SELECT['drivers']"", ""FILTER['#1', 'driving the school bus']"", ""PROJECT['working history of #REF', '#2']"", ""SUPERLATIVE['max', '#2', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'filter', 'project', 'superlative', 'project']",train
SPIDER_train_6366,How many flights have a velocity larger than 200?,return flights ;return velocities of  #1 ;return #1 where  #2 is  higher than 200 ;return number of #3,"[""SELECT['flights']"", ""PROJECT['velocities of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 200']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_6367,"List the vehicle flight number, date and pilot of all the flights, ordered by altitude.","return flights ;return vehicle flight number of  #1 ;return date of  #1 ;return pilot of  #1 ;return altitude of  #1 ;return #2 ,  #3 , #4 ;return #6 sorted by #5","[""SELECT['flights']"", ""AGGREGATE['count', '#1']"", ""PROJECT['date of #REF', '#1']"", ""PROJECT['pilot of #REF', '#1']"", ""PROJECT['altitude of #REF', '#1']"", ""UNION['#2', '#3', '#4']"", ""SORT['#6', '#5']""]","['select', 'aggregate', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_6368,"List the id, country, city and name of the airports ordered alphabetically by the name.","return airports ;return ids of  #1 ;return countries of  #1 ;return cities of  #1 ;return names of  #1 ;return #2 ,  #3 , #4 ,   #5 ;return #6 sorted by #5 alphabetically","[""SELECT['airports']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['countries of #REF', '#1']"", ""PROJECT['cities of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""UNION['#2', '#3', '#4', '#5']"", ""SORT['#6', '#5', 'alphabetically']""]","['select', 'project', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_6369,What is maximum group equity shareholding of the companies?,return companies ;return groups equity shareholding of #1 ;return maximum #2,"[""SELECT['companies']"", ""PROJECT['groups equity shareholding of #REF', '#1']"", ""AGGREGATE['max', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_637,List the name of playlist which has number of tracks greater than 100.,return playlists ;return tracks of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  higher than 100 ;return name of #4,"[""SELECT['playlists']"", ""PROJECT['tracks of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 100']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_6370,What is the velocity of the pilot named 'Thompson'?,return pilots ;return #1 named 'Thompson ;return velocity of  #2,"[""SELECT['pilots']"", ""FILTER['#1', 'named Thompson']"", ""PROJECT['velocity of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6371,What are the names and types of the companies that have ever operated a flight?,"return companies ;return flights that  #1 have operated ;return number of  #2 for each #1 ;return #1 where #3 is  at least one ;return names of #4 ;return types of #4 ;return #5 ,  #6","[""SELECT['companies']"", ""PROJECT['flights that #REF have operated', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least one']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['types of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_6372,What are the names of the airports which are not in the country 'Iceland'?,return airports ;return countries of #1 ;return #1 where #2 is  not 'Iceland ;return names of #3,"[""SELECT['airports']"", ""PROJECT['countries of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not Iceland']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6373,What are the distinct types of the companies that have operated any flights with velocity less than 200?,return companies ;return flights #1 operated ;return velocities of  #2 ;return #1 where #3 is  lower than 200 ;return distinct types of  #4,"[""SELECT['companies']"", ""PROJECT['flights #REF operated', '#1']"", ""PROJECT['velocities of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is lower than 200']"", ""PROJECT['distinct types of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_6374,What are the ids and names of the companies that operated more than one flight?,"return companies ;return flights that  #1 operated ;return the  number of  #2 for each #1 ;return #1 where #3 is  more than  one ;return the  ids of #4 ;return the  names of #4 ;return #5 ,  #6","[""SELECT['companies']"", ""PROJECT['flights that #REF operated', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than one']"", ""PROJECT['the ids of #REF', '#4']"", ""PROJECT['the names of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_6375,"What is the id, name and IATA code of the airport that had most number of flights?","return airports ;return flights of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest ;return id of #4 ;return name of #4 ;return IATA code of #4 ;return #5 ,  #6 ,   #7","[""SELECT['airports']"", ""PROJECT['flights of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['id of #REF', '#4']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['IATA code of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'project', 'union']",train
SPIDER_train_6376,What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'?,return pilots ;return countries #1 piloted flights in ;return #1 where #2 is  'United States ;return airports #1 piloted flights in ;return #1 where #4 is  'Billund Airport ;return #3 or  #5 ;return different names of #6,"[""SELECT['pilots']"", ""PROJECT['countries #REF piloted flights in', '#1']"", ""COMPARATIVE['#1', '#2', 'is United States']"", ""PROJECT['airports #REF piloted flights in', '#1']"", ""COMPARATIVE['#1', '#4', 'is Billund Airport']"", ""UNION['#3', '#5']"", ""PROJECT['different names of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'comparative', 'union', 'project']",train
SPIDER_train_6377,"What is the most common company type, and how many are there?","return company types ;return companies of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest ;return number of  #1 ;return #4 ,  #5","[""SELECT['company types']"", ""PROJECT['companies of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""AGGREGATE['count', '#1']"", ""UNION['#4', '#5']""]","['select', 'project', 'group', 'superlative', 'aggregate', 'union']",train
SPIDER_train_6378,How many airports haven't the pilot 'Thompson' driven an aircraft?,return airports ;return aircraft of #1 ;return pilots that  have driven #2 ;return #2 where #3 is  'Thompson ;return number of  #4 for each #1 ;return #1 where #5 is  at least one ;return #1 besides #6 ;return number of  #7,"[""SELECT['airports']"", ""PROJECT['aircraft of #REF', '#1']"", ""PROJECT['pilots that have driven #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is Thompson']"", ""GROUP['count', '#4', '#1']"", ""COMPARATIVE['#1', '#5', 'is at least one']"", ""DISCARD['#1', '#6']"", ""AGGREGATE['count', '#7']""]","['select', 'project', 'project', 'comparative', 'group', 'comparative', 'discard', 'aggregate']",train
SPIDER_train_6379,List the name of the pilots who have flied for both a company that mainly provide 'Cargo' services and a company that runs 'Catering services' activities.,return pilots ;return companies of  #1 ;return services  of  #2 ;return #1 where  #3 is 'Cargo ;return activities of  #2 ;return #1 where  #5 is 'Catering services  ;return #1 of  both #4 and #6 ;return names of  #7,"[""SELECT['pilots']"", ""PROJECT['companies of #REF', '#1']"", ""PROJECT['services of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Cargo']"", ""PROJECT['activities of #REF', '#2']"", ""COMPARATIVE['#1', '#5', 'is Catering services']"", ""INTERSECTION['#1', '#4', '#6']"", ""PROJECT['names of #REF', '#7']""]","['select', 'project', 'project', 'comparative', 'project', 'comparative', 'intersection', 'project']",train
SPIDER_train_638,What are the names of all playlists that have more than 100 tracks?,return playlists ;return tracks of #1 ;return the  number of  #2 for each #1 ;return #1 where #3 is  more than  100 ;return the  names of #4,"[""SELECT['playlists']"", ""PROJECT['tracks of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than 100']"", ""PROJECT['the names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_6380,Which of the airport names contains the word 'international'?,return airports ;return names of  #1 ;return #1 where #2 contains 'international ;return names of  #3,"[""SELECT['airports']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'contains international']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6381,How many companies operates airlines in each airport?,return airports ;return airlines in #1 ;return companies of  #2 ;return number of  of  #3 for each  #1,"[""SELECT['airports']"", ""PROJECT['airlines in #REF', '#1']"", ""PROJECT['companies of #REF', '#2']"", ""GROUP['count', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_6382,how many airports are there in each country?,return airports ;return countries of  #1 ;return number of  #1 for each  #2,"[""SELECT['airports']"", ""PROJECT['countries of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""UNION['#2', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_6383,which countries have more than 2 airports?,return countries ;return airports in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than 2,"[""SELECT['countries']"", ""PROJECT['airports in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 2']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_6384,which pilot is in charge of the most number of flights?,return pilots ;return flights #1 are  in charge of  ;return number of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['pilots']"", ""PROJECT['flights #REF are in charge of', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_6386,Count the number of accounts.,return accounts ;return number of #1,"[""SELECT['accounts']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_6387,Show all account ids and account details.,"return accounts ;return ids of  #1 ;return details of #1 ;return #2 , #3","[""SELECT['accounts']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['details of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_6388,What are the ids and details of all accounts?,"return accounts ;return ids of  #1 ;return details of  #1 ;return #2 ,  #3","[""SELECT['accounts']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['details of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_6389,How many statements do we have?,return statements  ;return number of  #1,"[""SELECT['statements']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_639,List all tracks bought by customer Daan Peeters.,return customers ;return tracks bought by #1 ;return #2 where  #1 is Daan Peeters,"[""SELECT['customers']"", ""PROJECT['tracks bought by #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Daan Peeters']""]","['select', 'project', 'comparative']",train
SPIDER_train_6390,Count the number of statements.,return statements ;return Count the number of #1,"[""SELECT['statements']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_6391,List all statement ids and statement details.,"return statements ;return ids of  #1 ;return details of  #1 ;return #2 ,  #3","[""SELECT['statements']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['details of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_6392,What are the ids and details of all statements?,"return statements ;return ids of #1 ;return details of #1 ;return #2 ,  #3","[""SELECT['statements']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['details of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_6393,"Show statement id, statement detail, account detail for accounts.","return accounts ;return statement id for #1 ;return statement detail for #1 ;return account detail for #1 ;return #2 ,   #3 , #4","[""SELECT['accounts']"", ""PROJECT['statement id for #REF', '#1']"", ""PROJECT['statement detail for #REF', '#1']"", ""PROJECT['account detail for #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_6394,"What are the statement ids, statement details, and account details, for all accounts?","return accounts ;return statement ids of  #1 ;return statement details of  #1 ;return account details of  #1 ;return #2 ,  #3 ,   #4","[""SELECT['accounts']"", ""PROJECT['statement ids of #REF', '#1']"", ""PROJECT['statement details of #REF', '#1']"", ""PROJECT['account details of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_6395,Show all statement id and the number of accounts for each statement.,"return statements ;return statement  ids of #1 ;return accounts of #1 ;return number of  #3 for each #1 ;return #2 ,  #4","[""SELECT['statements']"", ""PROJECT['statement ids of #REF', '#1']"", ""PROJECT['accounts of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_6396,"What are the different statement ids on accounts, and the number of accounts for each?",return accounts  ;return statement ids of  #1 ;return number of  #1 for each  #2,"[""SELECT['accounts']"", ""PROJECT['statement ids of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""UNION['#2', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_6397,Show the statement id and the statement detail for the statement with most number of accounts.,"return statements ;return accounts of  #1 ;return #1 where #2 is  highest ;return statement id of  #3 ;return statement detail of  #3 ;return #4 ,  #5","[""SELECT['statements']"", ""PROJECT['accounts of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['statement id of #REF', '#3']"", ""PROJECT['statement detail of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_6398,What are the statement id and statement detail for the statement that has the most corresponding accounts?,"return statements ;return corresponding accounts of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return statement id of  #4 ;return statement detail of  #4 ;return #5 ,  #6","[""SELECT['statements']"", ""PROJECT['corresponding accounts of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['statement id of #REF', '#4']"", ""PROJECT['statement detail of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_6399,Show the number of documents.,return documents ;return number of  #1,"[""SELECT['documents']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_64,List the id of students who attended some courses?,return students ;return #1 who  attended some courses ;return id of  #2,"[""SELECT['students']"", ""FILTER['#1', 'who attended some courses']"", ""PROJECT['id of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_640,What are the tracks that Dean Peeters bought?,return tracks ;return #1 that  Dean Peeters bought,"[""SELECT['tracks']"", ""FILTER['#1', 'that Dean Peeters bought']""]","['select', 'filter']",train
SPIDER_train_6400,Count the number of documents.,return documents ;return the number of #1,"[""SELECT['documents']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_6401,"List the document type code, document name, and document description for the document with name 'Noel CV' or name 'King Book'.","return documents ;return document names of  #1 ;return #1 where  #2 is 'Noel CV ;return #1 where  #2 is 'King Book ;return #3 or #4 ;return document type code of  #5 ;return document name   of  #5 ;return document description of  #5 ;return #6 ,  #7 , #8","[""SELECT['documents']"", ""PROJECT['document names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Noel CV']"", ""COMPARATIVE['#1', '#2', 'is King Book']"", ""UNION['#3', '#4']"", ""PROJECT['document type code of #REF', '#5']"", ""PROJECT['document name of #REF', '#5']"", ""PROJECT['document description of #REF', '#5']"", ""UNION['#6', '#7', '#8']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project', 'project', 'project', 'union']",train
SPIDER_train_6402,"What are the type come, name, and description of the document that has either the name 'Noel CV' or 'King Book'?","return documents ;return names of #1 ;return #1 where #2 is 'Noel CV ;return #1 where #2 is 'King Book ;return #3 ,  #4 ;return type come of #5 ;return name  of #5 ;return description of #5 ;return #6 ,  #7 ,   #8","[""SELECT['documents']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Noel CV']"", ""COMPARATIVE['#1', '#2', 'is King Book']"", ""UNION['#3', '#4']"", ""PROJECT['type come of #REF', '#5']"", ""PROJECT['name of #REF', '#5']"", ""PROJECT['description of #REF', '#5']"", ""UNION['#6', '#7', '#8']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project', 'project', 'project', 'union']",train
SPIDER_train_6403,Show the ids and names of all documents.,"return documents ;return ids of  #1 ;return names of  #1 ;return #2 ,  #3","[""SELECT['documents']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_6404,What are the ids and names for each of the documents?,"return documents ;return ids of  #1 ;return names of  #1 ;return #2 ,  #3","[""SELECT['documents']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_6405,Find names and ids of all documents with document type code BK.,"return documents ;return document type codes of  #1 ;return #1 where #2 is  BK ;return names of  #3 ;return ids of  #3 ;return #4 ,  #5","[""SELECT['documents']"", ""PROJECT['document type codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is BK']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['ids of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_6406,What are the names and ids of documents that have the type code BK?,"return documents ;return type codes of  #1 ;return #1 where #2 is  BK ;return names of  #3 ;return ids of  #3 ;return #4 ,  #5","[""SELECT['documents']"", ""PROJECT['type codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is BK']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['ids of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_6407,How many documents are with document type code BK for each product id?,return product ids ;return documents of  #1 ;return document type codes of  #2 ;return #2 where  #3 is  BK ;return number of #4 for each #1,"[""SELECT['product ids']"", ""PROJECT['documents of #REF', '#1']"", ""PROJECT['document type codes of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is BK']"", ""GROUP['count', '#4', '#1']"", ""UNION['#1', '#5']""]","['select', 'project', 'project', 'comparative', 'group', 'union']",train
SPIDER_train_6408,Count the number of documents with the type code BK that correspond to each product id.,return product ids ;return documents that  correspond to #1 ;return #2 with  the type code BK ;return number of #3 for each #1,"[""SELECT['product ids']"", ""PROJECT['documents that correspond to #REF', '#1']"", ""FILTER['#2', 'with the type code BK']"", ""GROUP['count', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'filter', 'group', 'union']",train
SPIDER_train_6409,Show the document name and the document date for all documents on project with details 'Graph Database project'.,"return projects ;return details of #1 ;return #1 where #2 is  'Graph Database project  ;return documents of #3 ;return document  names of #4 ;return document  dates of #4 ;return #5 ,  #6","[""SELECT['projects']"", ""PROJECT['details of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Graph Database project']"", ""PROJECT['documents of #REF', '#3']"", ""PROJECT['document names of #REF', '#4']"", ""PROJECT['document dates of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_641,How much is the track Fast As a Shark?,return track ;return #1 Fast As a Shark ;return how much is #2,"[""SELECT['track']"", ""FILTER['#1', 'Fast As a Shark']"", ""PROJECT['how much is #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6410,What are the names and dates for documents corresponding to project that has the details 'Graph Database project'?,"return projects ;return details of  #1 ;return #1 where #2 is  'Graph Database project  ;return documents corresponding to #3 ;return names of  #4 ;return dates of  #4 ;return #5 ,  #6","[""SELECT['projects']"", ""PROJECT['details of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Graph Database project']"", ""PROJECT['documents corresponding to #REF', '#3']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['dates of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_6411,Show project ids and the number of documents in each project.,"return projects ;return project ids of  #1 ;return documents of  #1 ;return number of  #3 for each #1 ;return #2 ,  #4","[""SELECT['projects']"", ""PROJECT['project ids of #REF', '#1']"", ""PROJECT['documents of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_6412,How many documents correspond with each project id?,return project ids ;return documents of  #1 ;return number of  #2 for each  #1,"[""SELECT['project ids']"", ""PROJECT['documents of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_6413,What is the id of the project with least number of documents?,return projects ;return documents of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  lowest ;return id of  #4,"[""SELECT['projects']"", ""PROJECT['documents of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['id of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_6414,Return the id of the project that has the fewest corresponding documents.,return projects ;return corresponding documents of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  lowest ;return id of  #4,"[""SELECT['projects']"", ""PROJECT['corresponding documents of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['id of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_6415,Show the ids for projects with at least 2 documents.,return projects ;return documents of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least 2 ;return ids of  #4,"[""SELECT['projects']"", ""PROJECT['documents of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 2']"", ""PROJECT['ids of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_6416,What are project ids of projects that have 2 or more corresponding documents?,return projects ;return corresponding documents of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least 2 ;return project ids of  #4,"[""SELECT['projects']"", ""PROJECT['corresponding documents of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 2']"", ""PROJECT['project ids of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_6417,List document type codes and the number of documents in each code.,"return document type codes ;return documents in #1 ;return number of  #2 for each  #1 ;return #1 ,  #3","[""SELECT['document type codes']"", ""PROJECT['documents in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_6418,How many documents are there of each type?,return types of  documents ;return documents of  #1 ;return number of  #2 for each  #1,"[""SELECT['types of documents']"", ""PROJECT['documents of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_6419,What is the document type code with most number of documents?,return document type codes ;return documents with #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['document type codes']"", ""PROJECT['documents with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_642,"What is the unit price of the tune ""Fast As a Shark""?",return the  tune Fast As a Shark ;return the  unit price of #1,"[""SELECT['the tune Fast As a Shark']"", ""PROJECT['the unit price of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_6420,Return the code of the document type that is most common.,return documents ;return types of #1 ;return number of  #1 for each #2 ;return #2 where #3 is  the  highest ;return the  code of #4,"[""SELECT['documents']"", ""PROJECT['types of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""COMPARATIVE['#2', '#3', 'is the highest']"", ""PROJECT['the code of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_6421,Show the document type code with fewer than 3 documents.,return document type codes ;return documents of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  lower than 3,"[""SELECT['document type codes']"", ""PROJECT['documents of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is lower than 3']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_6422,What are the codes corresponding to document types for which there are less than 3 documents?,return document types ;return documents of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  lower than 3 ;return codes corresponding to #4,"[""SELECT['document types']"", ""PROJECT['documents of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is lower than 3']"", ""PROJECT['codes corresponding to #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_6423,Show the statement detail and the corresponding document name for the statement with detail 'Private Project'.,"return statements ;return details of  #1 ;return #1 where #2 is  'Private Project ;return detail  of  #3 ;return document name of  #3 ;return #4 ,  #5","[""SELECT['statements']"", ""PROJECT['details of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Private Project']"", ""PROJECT['detail of #REF', '#3']"", ""PROJECT['document name of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_6424,"What are the details for statements with the details 'Private Project', and what are the names of the corresponding documents?","return statements ;return details for #1 ;return #1 where #2 is  'Private Project ;return details of  #3 ;return corresponding documents of  #3 ;return #4 ,  #5","[""SELECT['statements']"", ""PROJECT['details for #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Private Project']"", ""PROJECT['details of #REF', '#3']"", ""PROJECT['corresponding documents of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_6425,"Show all document type codes, document type names, document type descriptions.","return document   types ;return codes of #1 ;return names of #1 ;return descriptions of #1 ;return #2 ,   #3 ,  #4","[""SELECT['document types']"", ""PROJECT['codes of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['descriptions of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_6426,"What are the codes, names, and descriptions of the different document types?","return documents ;return different types of  #1 ;return codes of  #2 ;return names of  #2 ;return descriptions of  #2 ;return #3 ,  #4 ,   #5","[""SELECT['documents']"", ""PROJECT['different types of #REF', '#1']"", ""PROJECT['codes of #REF', '#2']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['descriptions of #REF', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_6427,What is the document type description for document type named Film?,return document  types ;return #1 named Film ;return document  type  description of #2,"[""SELECT['document types']"", ""FILTER['#1', 'named Film']"", ""PROJECT['document type description of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6428,Return the description of the document type name 'Film'.,return document types ;return names of  #1 ;return #1 where  #2 is 'Film ;return description of  #3,"[""SELECT['document types']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Film']"", ""PROJECT['description of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6429,What is the document type name and the document type description and creation date for all the documents?,"return documents ;return document  types of #1 ;return names of #2 ;return descriptions of #2 ;return creation dates of #1 ;return #3 ,  #4 ,   #5","[""SELECT['documents']"", ""PROJECT['document types of #REF', '#1']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['descriptions of #REF', '#2']"", ""PROJECT['creation dates of #REF', '#1']"", ""UNION['#3', '#4', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_643,Find the name of tracks which are in Movies playlist but not in music playlist.,return the  Movies playlist ;return the  music playlist  ;return tracks of #1 ;return tracks of #2 ;return tracks ;return #5 of both #3 and  #4 ;return #3 besides  #6 ;return names of #5,"[""SELECT['the Movies playlist']"", ""SELECT['the music playlist']"", ""PROJECT['tracks of #REF', '#1']"", ""PROJECT['tracks of #REF', '#2']"", ""SELECT['tracks']"", ""INTERSECTION['#5', '#3', '#4']"", ""DISCARD['#3', '#6']"", ""PROJECT['names of #REF', '#5']""]","['select', 'select', 'project', 'project', 'select', 'intersection', 'discard', 'project']",train
SPIDER_train_6430,"Return the type name, type description, and date of creation for each document.","return documents ;return type  names of  #1 ;return descriptions of  #1 ;return date of  creation of #1 ;return #2 ,  #3 , #4","[""SELECT['documents']"", ""PROJECT['type names of #REF', '#1']"", ""PROJECT['descriptions of #REF', '#1']"", ""PROJECT['date of creation of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_6431,Show the number of projects.,return projects ;return number of  #1,"[""SELECT['projects']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_6432,How many projects are there?,return projects ;return number of #1,"[""SELECT['projects']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_6433,List ids and details for all projects.,"return projects ;return ids of #1 ;return details of #1 ;return #2 ,  #3","[""SELECT['projects']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['details of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_6434,What are the ids and details for each project?,"return projects ;return the  ids of #1 ;return the  details of #1 ;return #2 ,  #3","[""SELECT['projects']"", ""PROJECT['the ids of #REF', '#1']"", ""PROJECT['the details of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_6435,What is the project id and detail for the project with at least two documents?,"return projects ;return documents of #1 ;return number of #2 for each #1 ;return #1 where #3 is  at least two ;return project  id of #4 ;return detail of #4 ;return #5 , #6","[""SELECT['projects']"", ""PROJECT['documents of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""PROJECT['project id of #REF', '#4']"", ""PROJECT['detail of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_6436,Return the ids and details corresponding to projects for which there are more than two documents.,"return projects ;return documents of  #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is higher than two ;return ids of  #4 ;return details of  #4 ;return #5 ,  #6","[""SELECT['projects']"", ""PROJECT['documents of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than two']"", ""PROJECT['ids of #REF', '#4']"", ""PROJECT['details of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_6437,"What is the project detail for the project with document ""King Book""?",return projects ;return document of #1 ;return #1 where #2 is  King Book ;return project detail of #3,"[""SELECT['projects']"", ""PROJECT['document of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is King Book']"", ""PROJECT['project detail of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6438,Give the details of the project with the document name 'King Book'.,return projects ;return document names of  #1 ;return #1 where  #2 is  'King Book ;return details of  #3,"[""SELECT['projects']"", ""PROJECT['document names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is King Book']"", ""PROJECT['details of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6439,How many budget types do we have?,return budget types ;return number of #1,"[""SELECT['budget types']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_644,What are the names of all tracks that are on the Movies playlist but not in the music playlist?,return tracks ;return #1 on the   Movies playlist  ;return #1 on the   music playlist  ;return #1 in both #2 and #3 ;return #2 besides #4 ;return the   names of #5,"[""SELECT['tracks']"", ""FILTER['#1', 'on the Movies playlist']"", ""FILTER['#1', 'on the music playlist']"", ""INTERSECTION['#1', '#2', '#3']"", ""DISCARD['#2', '#4']"", ""PROJECT['the names of #REF', '#5']""]","['select', 'filter', 'filter', 'intersection', 'discard', 'project']",train
SPIDER_train_6440,Count the number of budget codes.,return budget codes ;return number of  #1,"[""SELECT['budget codes']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_6441,List all budget type codes and descriptions.,"return budget type codes ;return descriptions of  #1 ;return #1 ,  #2","[""SELECT['budget type codes']"", ""PROJECT['descriptions of #REF', '#1']"", ""UNION['#1', '#2']""]","['select', 'project', 'union']",train
SPIDER_train_6442,What are the type codes and descriptions of each budget type?,"return budget types ;return type  codes of  #1 ;return descriptions of  #1 ;return #2 ,  #3","[""SELECT['budget types']"", ""PROJECT['type codes of #REF', '#1']"", ""PROJECT['descriptions of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_6443,What is the description for the budget type with code ORG?,return budget types ;return codes of #1 ;return #1 where #2 is  ORG ;return description of #3,"[""SELECT['budget types']"", ""PROJECT['codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is ORG']"", ""PROJECT['description of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6444,Return the description of the budget type that has the code ORG.,return budget types ;return codes of  #1 ;return #1 where #2 is  ORG ;return description of  #3,"[""SELECT['budget types']"", ""PROJECT['codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is ORG']"", ""PROJECT['description of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6445,How many documents have expenses?,return documents ;return #1 that have expenses ;return number of  #2,"[""SELECT['documents']"", ""FILTER['#1', 'that have expenses']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_6446,Count the number of documents with expenses.,return documents ;return #1 with  expenses ;return Count of  #2,"[""SELECT['documents']"", ""FILTER['#1', 'with expenses']"", ""PROJECT['Count of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6447,What are the document ids for the budget type code 'SF'?,return documents ;return budget type codes of #1 ;return #1 where #2 is  'SF ;return document ids of #3,"[""SELECT['documents']"", ""PROJECT['budget type codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is SF']"", ""PROJECT['document ids of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6448,Give the ids of documents with expenses that have the budget code 'SF'.,return expenses ;return budget codes of #1 ;return #1 where #2 is 'SF ;return documents of #3 ;return ids of #4,"[""SELECT['expenses']"", ""PROJECT['budget codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is SF']"", ""PROJECT['documents of #REF', '#3']"", ""PROJECT['ids of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_6449,Show the budget type code and description and the corresponding document id.,"return budget type codes ;return descriptions of #1 ;return document ids of #1 ;return #1 ,  #2 ,   #3","[""SELECT['budget type codes']"", ""PROJECT['descriptions of #REF', '#1']"", ""PROJECT['document ids of #REF', '#1']"", ""UNION['#1', '#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_645,Find the name of tracks which are in both Movies and music playlists.,return tracks ;return playlists of #1 ;return #1 where #2 is  Movies ;return #1 where #2 is  music ;return #1 of both #3 and #4 ;return names of #5,"[""SELECT['tracks']"", ""PROJECT['playlists of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Movies']"", ""COMPARATIVE['#1', '#2', 'is music']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_6450,"Return the budget type codes, budget type descriptions and document ids for documents with expenses.","return documents ;return #1 with  expenses ;return budget  type  codes of  #2 ;return budget  type  descriptions of  #2 ;return document ids of  #2 ;return #3 ,  #4 , #5","[""SELECT['documents']"", ""FILTER['#1', 'with expenses']"", ""PROJECT['budget type codes of #REF', '#2']"", ""PROJECT['budget type descriptions of #REF', '#2']"", ""PROJECT['document ids of #REF', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_6451,Show ids for all documents with budget types described as 'Government'.,return documents ;return #1 with budget types that  are  'Government ;return ids for #2,"[""SELECT['documents']"", ""FILTER['#1', 'with budget types that are Government']"", ""PROJECT['ids for #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6452,Give the ids for documents that have the budget description 'Government'.,return documents ;return budget descriptions of  #1 ;return #1 where  #2 is 'Government ;return ids of  #3,"[""SELECT['documents']"", ""PROJECT['budget descriptions of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Government']"", ""PROJECT['ids of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6453,Show budget type codes and the number of documents in each budget type.,"return budget  types ;return budget  type codes of #1 ;return documents of #1 ;return number of  #3 for each #1 ;return #2 ,  #4","[""SELECT['budget types']"", ""PROJECT['budget type codes of #REF', '#1']"", ""PROJECT['documents of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_6454,"What are the different budget type codes, and how many documents are there for each?",return budget codes ;return types of  #1 ;return number of  of  documents for each  #2,"[""SELECT['budget codes']"", ""PROJECT['types of #REF', '#1']"", ""PROJECT['documents', '#2']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_6455,What is the budget type code with most number of documents.,return budget type codes ;return documents of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['budget type codes']"", ""PROJECT['documents of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_6456,Give the budget type code that is most common among documents with expenses.,return budget type codes ;return documents of #1 ;return #2 with  expenses ;return number of  #3 for each #1 ;return #1 where #4 is  highest,"[""SELECT['budget type codes']"", ""PROJECT['documents of #REF', '#1']"", ""FILTER['#2', 'with expenses']"", ""GROUP['count', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']""]","['select', 'project', 'filter', 'group', 'superlative']",train
SPIDER_train_6457,What are the ids of documents which don't have expense budgets?,return documents ;return #1 which have  expense budgets ;return #1 besides  #2 ;return ids of  #3,"[""SELECT['documents']"", ""FILTER['#1', 'which have expense budgets']"", ""DISCARD['#1', '#2']"", ""PROJECT['ids of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_6458,Return the ids of documents that do not have expenses.,return documents ;return #1 with  expenses ;return #1 besides #2 ;return ids of  #3,"[""SELECT['documents']"", ""FILTER['#1', 'with expenses']"", ""DISCARD['#1', '#2']"", ""PROJECT['ids of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_6459,Show ids for all documents in type CV without expense budgets.,return documents ;return #1 that  are  type CV ;return #2 that  has expense budgets ;return #2 besides #3 ;return ids of  #4,"[""SELECT['documents']"", ""FILTER['#1', 'that are type CV']"", ""FILTER['#2', 'that has expense budgets']"", ""DISCARD['#2', '#3']"", ""PROJECT['ids of #REF', '#4']""]","['select', 'filter', 'filter', 'discard', 'project']",train
SPIDER_train_646,What are the names of all the tracks that are in both the Movies and music playlists?,return tracks ;return playlists #1 are  in ;return #1 where #2 is  Movies ;return #1 where #2 is  music ;return #1 of  both #3 and  #4 ;return names of  #5,"[""SELECT['tracks']"", ""PROJECT['playlists #REF are in', '#1']"", ""COMPARATIVE['#1', '#2', 'is Movies']"", ""COMPARATIVE['#1', '#2', 'is music']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_6460,What are the ids of documents with the type code CV that do not have expenses.,return documents ;return type codes of  #1 ;return #1 where #2 is  CV ;return #3 that  do not  have  expenses ;return ids of  #4,"[""SELECT['documents']"", ""PROJECT['type codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is CV']"", ""FILTER['#3', 'that do not have expenses']"", ""PROJECT['ids of #REF', '#4']""]","['select', 'project', 'comparative', 'filter', 'project']",train
SPIDER_train_6461,What are the ids of documents with letter 's' in the name with any expense budgets.,return documents ;return #1 that  are  expense budgets ;return #1 with letter 's in the  name ;return #1 of  both #2 and  #3,"[""SELECT['documents']"", ""FILTER['#1', 'that are expense budgets']"", ""FILTER['#1', 'with letter s in the name']"", ""INTERSECTION['#1', '#2', '#3']""]","['select', 'filter', 'filter', 'intersection']",train
SPIDER_train_6462,Give the ids of documents that have expenses and contain the letter s in their names.,return documents ;return #1 that  have  expenses ;return names of  #2 ;return #2 where  #3 contain the letter s ;return ids of  #4,"[""SELECT['documents']"", ""FILTER['#1', 'that have expenses']"", ""PROJECT['names of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'contain the letter s']"", ""PROJECT['ids of #REF', '#4']""]","['select', 'filter', 'project', 'comparative', 'project']",train
SPIDER_train_6463,How many documents do not have any expense?,return documents ;return #1 with  expense ;return #1 besides #2 ;return number of  #3,"[""SELECT['documents']"", ""FILTER['#1', 'with expense']"", ""DISCARD['#1', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'discard', 'aggregate']",train
SPIDER_train_6464,Count the number of documents that do not have expenses.,return documents ;return #1 not  have  expenses ;return number of #2,"[""SELECT['documents']"", ""FILTER['#1', 'not have expenses']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_6465,What are the dates for the documents with both 'GV' type and 'SF' type expenses?,return documents ;return expenses of  #1 ;return types of  #1 ;return #1 where #3 is  'GV ;return #1 where #3 is  'SF ;return #1 of  both #4 and  #5 ;return dates of  #6,"[""SELECT['documents']"", ""PROJECT['expenses of #REF', '#1']"", ""PROJECT['types of #REF', '#1']"", ""COMPARATIVE['#1', '#3', 'is GV']"", ""COMPARATIVE['#1', '#3', 'is SF']"", ""INTERSECTION['#1', '#4', '#5']"", ""PROJECT['dates of #REF', '#6']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_6466,Give the dates of creation for documents that have both budget type codes 'GV' and 'SF'.,return documents ;return budget types codes of  #1 ;return #1 where  #2 is  'GV ;return #1 where  #2 is  'SF ;return #1 of  both #3 and #4 ;return dates of  creation of #5,"[""SELECT['documents']"", ""PROJECT['budget types codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is GV']"", ""COMPARATIVE['#1', '#2', 'is SF']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['dates of creation of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_6467,What are the account details with the largest value or with value having char '5' in it?,"return accounts ;return values of #1 ;return #1 where #2 is  the  largest ;return #1 where #2 has the  char '5 in it ;return #3 ,  #4 ;return details of #5","[""SELECT['accounts']"", ""PROJECT['values of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the largest']"", ""COMPARATIVE['#1', '#2', 'has the char 5 in it']"", ""UNION['#3', '#4']"", ""PROJECT['details of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_6468,"Return the account details with the greatest value, as well as those that include the character 5.","return account details ;return values of #1 ;return #1 where #2 is  highest ;return characters of #1 ;return #1 where #4 include 5 ;return #3 ,  #5","[""SELECT['account details']"", ""PROJECT['values of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['characters of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'include 5']"", ""UNION['#3', '#5']""]","['select', 'project', 'superlative', 'project', 'comparative', 'union']",train
SPIDER_train_6469,Find the total number of scientists.,return scientists ;return number of  #1,"[""SELECT['scientists']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_647,Find number of tracks in each genre?,return genres ;return number of tracks for each #1,"[""SELECT['genres']"", ""PROJECT['tracks', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_6470,How many scientists are there?,return scientists ;return number of  #1,"[""SELECT['scientists']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_6471,Find the total hours of all projects.,return projects ;return hours of  #1 ;return sum of  #2,"[""SELECT['projects']"", ""PROJECT['hours of #REF', '#1']"", ""AGGREGATE['sum', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_6472,What is the total number of hours for all projects?,return projects ;return hours of #1 ;return sum of #2,"[""SELECT['projects']"", ""PROJECT['hours of #REF', '#1']"", ""AGGREGATE['sum', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_6473,How many different scientists are assigned to any project?,return projects ;return scientists assigned to  #1 ;return different #2 ;return number of #3,"[""SELECT['projects']"", ""PROJECT['scientists assigned to #REF', '#1']"", ""PROJECT['different #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_6474,Count the number of different scientists assigned to any project.,return scientists ;return projects of #1 ;return number of  #2 for each #1 ;return #1 where #3 is higher than zero ;return number of  #4,"[""SELECT['scientists']"", ""PROJECT['projects of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than zero']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'group', 'comparative', 'aggregate']",train
SPIDER_train_6475,Find the number of distinct projects.,return projects ;return distinct #1 ;return number of #2,"[""SELECT['projects']"", ""PROJECT['distinct #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_6476,How many different projects are there?,return projects ;return different #1 ;return number of #2,"[""SELECT['projects']"", ""PROJECT['different #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_6477,Find the average hours of all projects.,return projects ;return hours of #1 ;return average of #2,"[""SELECT['projects']"", ""PROJECT['hours of #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_6478,What is the average hours across all projects?,return projects ;return hours of  #1 ;return average of  #2,"[""SELECT['projects']"", ""PROJECT['hours of #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_6479,Find the name of project that continues for the longest time.,return projects ;return time of  #1 ;return #1 where  #2 is  longest ;return the name of  #3,"[""SELECT['projects']"", ""PROJECT['time of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['the name of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_648,How many tracks are in each genre?,return genres ;return tracks in #1 ;return number of  #2 for each  #1,"[""SELECT['genres']"", ""PROJECT['tracks in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_6480,What is the name of the project with the most hours?,return projects ;return hours of  #1 ;return #1 where #2 is  highest ;return name of  #3,"[""SELECT['projects']"", ""PROJECT['hours of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_6481,List the name of all projects that are operated longer than the average working hours of all projects.,return projects  ;return working hours that  #1 are operated ;return number of  #2 for each #1 ;return the  average of #3 ;return #1 where #3 is  higher than #4 ;return the  names of #5,"[""SELECT['projects']"", ""PROJECT['working hours that #REF are operated', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['avg', '#3']"", ""COMPARATIVE['#1', '#3', 'is higher than #4']"", ""PROJECT['the names of #REF', '#5']""]","['select', 'project', 'group', 'aggregate', 'comparative', 'project']",train
SPIDER_train_6482,What are the names of projects that have taken longer than the average number of hours for all projects?,return projects ;return hours of  #1 ;return number of  #2 for each  #1 ;return average of  #3 ;return #1 where #2 is  higher than #4 ;return names of  #5,"[""SELECT['projects']"", ""PROJECT['hours of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['avg', '#3']"", ""COMPARATIVE['#1', '#2', 'is higher than #4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'group', 'aggregate', 'comparative', 'project']",train
SPIDER_train_6483,Find the name and hours of project that has the most number of scientists.,"return projects ;return number of scientists for each #1 ;return #1 where  #2 is  highest ;return name of  #3 ;return hours of  #3 ;return #4 ,   #5","[""SELECT['projects']"", ""PROJECT['scientists', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['hours of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_6484,What is the name and hours for the project which has the most scientists assigned to it?,"return project ;return scientists assigned to #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return name of  #4 ;return hours for #4 ;return #5 ,  #6","[""SELECT['project']"", ""PROJECT['scientists assigned to #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['hours for #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_6485,Find the name of the project for which a scientist whose name contains ‘Smith’ is assigned to.,return scientists ;return #1 whose name  contains Smith is  assigned to  ;return project for #2 ;return name  of  #3,"[""SELECT['scientists']"", ""FILTER['#1', 'whose name contains Smith is assigned to']"", ""PROJECT['project for #REF', '#2']"", ""PROJECT['name of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_6486,What is the name of the project that has a scientist assigned to it whose name contains 'Smith'?,return projects ;return scientists assigned to  #1 ;return the  names of #2 ;return #2 where #3 contains 'Smith ;return number of  #4 for each #1 ;return #1 where #5 is  one ;return the  name of #6,"[""SELECT['projects']"", ""PROJECT['scientists assigned to #REF', '#1']"", ""PROJECT['the names of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'contains Smith']"", ""GROUP['count', '#4', '#1']"", ""COMPARATIVE['#1', '#5', 'is one']"", ""PROJECT['the name of #REF', '#6']""]","['select', 'project', 'project', 'comparative', 'group', 'comparative', 'project']",train
SPIDER_train_6487,Find the total hours of the projects that scientists named Michael Rogers or Carol Smith are assigned to.,return scientists ;return projects of  #1 ;return #2 where  #1 is  Michael Rogers ;return #2 where  #1 is  Carol Smith ;return #3 or  #4 ;return hours of  #5 ;return sum of  #6,"[""SELECT['scientists']"", ""PROJECT['projects of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Michael Rogers']"", ""COMPARATIVE['#2', '#1', 'is Carol Smith']"", ""UNION['#3', '#4']"", ""PROJECT['hours of #REF', '#5']"", ""AGGREGATE['sum', '#6']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project', 'aggregate']",train
SPIDER_train_6488,What is the sum of hours for projects that scientists with the name Michael Rogers or Carol Smith are assigned to?,return scientists ;return names of #1 ;return #1 where #2 is  Michael Rogers ;return #1 where #2 is  Carol Smith ;return #3 or  #4 ;return projects of #5 ;return hours of #6 ;return sum of #7,"[""SELECT['scientists']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Michael Rogers']"", ""COMPARATIVE['#1', '#2', 'is Carol Smith']"", ""UNION['#3', '#4']"", ""PROJECT['projects of #REF', '#5']"", ""PROJECT['hours of #REF', '#6']"", ""AGGREGATE['sum', '#7']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project', 'project', 'aggregate']",train
SPIDER_train_6489,Find the name of projects that require between 100 and 300 hours of work.,return projects ;return hours of  work #1 require ;return #1 where  #2 is  between 100 and 300 ;return names of  #3,"[""SELECT['projects']"", ""PROJECT['hours of work #REF require', '#1']"", ""COMPARATIVE['#1', '#2', 'is  betweenleftside 100']"", ""COMPARATIVE['#3', '#2', 'is  betweenrightside 300']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'comparative', 'comparative', 'project']",train
SPIDER_train_649,How many editors are there?,return editors ;return number of  #1,"[""SELECT['editors']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_6490,What are the names of projects that require between 100 and 300 hours?,return projects ;return hours of  #1 ;return #1 where #2 is  at least 100 ;return #3 where #2 is  at most 300 ;return the  names of  #4,"[""SELECT['projects']"", ""PROJECT['hours of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least 100']"", ""COMPARATIVE['#3', '#2', 'is at most 300']"", ""PROJECT['the names of #REF', '#4']""]","['select', 'project', 'comparative', 'comparative', 'project']",train
SPIDER_train_6491,Find the name of the scientist who worked on both a project named 'Matter of Time' and a project named 'A Puzzling Parallax'.,return scientists ;return #1 who  worked on  project named  'Matter of  Time ;return #1 who  worked on  project named  'A Puzzling Parallax ;return name of  #1 ;return #4 in both #2 and #3,"[""SELECT['scientists']"", ""FILTER['#1', 'who worked on project named Matter of Time']"", ""FILTER['#1', 'who worked on project named A Puzzling Parallax']"", ""PROJECT['name of #REF', '#1']"", ""INTERSECTION['#4', '#2', '#3']""]","['select', 'filter', 'filter', 'project', 'intersection']",train
SPIDER_train_6492,What are the names of any scientists who worked on projects named 'Matter of Time' and 'A Puzzling Pattern'?,return scientists ;return projects #1 worked on  ;return #1 where #2 are  named 'Matter of  Time ;return #1 where #2 are  named 'A Puzzling Pattern ;return #1 of  both #3 and  #4 ;return names of  #5,"[""SELECT['scientists']"", ""PROJECT['projects #REF worked on', '#1']"", ""COMPARATIVE['#1', '#2', 'are named Matter of Time']"", ""COMPARATIVE['#1', '#2', 'are named A Puzzling Pattern']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_6493,List the names of all scientists sorted in alphabetical order.,return scientists ;return names of  #1 ;return #2 sorted by alphabetical order,"[""SELECT['scientists']"", ""PROJECT['names of #REF', '#1']"", ""SORT['#2', '#2', 'alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_6494,What are the names of all the scientists in alphabetical order?,return scientists ;return names of  #1 ;return #2 sorted by alphabetical order,"[""SELECT['scientists']"", ""PROJECT['names of #REF', '#1']"", ""SORT['#2', '#2', 'alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_6495,Find the number of scientists involved for each project name.,return projects ;return scientists involved in #1 ;return the  number of  #2 for each #1,"[""SELECT['projects']"", ""PROJECT['scientists involved in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_6496,"What are the naems of all the projects, and how many scientists were assigned to each of them?","return projects ;return naems of  #1 ;return scientists assigned to #1 ;return number of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['projects']"", ""PROJECT['naems of #REF', '#1']"", ""PROJECT['scientists assigned to #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_6497,Find the number of scientists involved for the projects that require more than 300 hours.,return projects ;return hours #1 require ;return #1 where  #2 is  higher than 300 ;return scientists involved in #3 ;return number of #4,"[""SELECT['projects']"", ""PROJECT['hours #REF require', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 300']"", ""PROJECT['scientists involved in #REF', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_6498,"What are the names of projects that require more than 300 hours, and how many scientists are assigned to each?","return projects ;return hours #1 require ;return #1 where #2 is  higher than 300 ;return names of  #3 ;return scientists assigned to #3 ;return number of  #5 for each  #3 ;return #4 ,  #6","[""SELECT['projects']"", ""PROJECT['hours #REF require', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 300']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['scientists assigned to #REF', '#3']"", ""GROUP['count', '#5', '#3']"", ""UNION['#4', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'group', 'union']",train
SPIDER_train_6499,Find the number of projects which each scientist is working on and scientist's name.,"return scientists ;return projects #1 are working on ;return number of  #2 for each #1 ;return the  names of #1 ;return #4 ,  #3","[""SELECT['scientists']"", ""PROJECT['projects #REF are working on', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['the names of #REF', '#1']"", ""UNION['#4', '#3']""]","['select', 'project', 'group', 'project', 'union']",train
SPIDER_train_65,What are the ids of all students who have attended at least one course?,return students ;return courses attended of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  at least one ;return ids of  #4,"[""SELECT['students']"", ""PROJECT['courses attended of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least one']"", ""PROJECT['ids of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_650,List the names of editors in ascending order of age.,return editors ;return names of  #1 ;return ages of  #1 ;return #2 sorted by #3 in ascending order,"[""SELECT['editors']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['ages of #REF', '#1']"", ""SORT['#2', '#3', 'in ascending order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_6500,"What are the names of the scientists, and how many projects are each of them working on?","return scientists ;return names of  #1 ;return projects #1 are  working on  ;return number of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['scientists']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['projects #REF are working on', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_6501,Find the SSN and name of scientists who are assigned to the project with the longest hours.,"return projects ;return hours of  #1 ;return #1 where  #2 is longest ;return scientists assigned to  #3 ;return SSN of  #4 ;return name of  #4 ;return #5 ,   #6","[""SELECT['projects']"", ""PROJECT['hours of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['scientists assigned to #REF', '#3']"", ""PROJECT['SSN of #REF', '#4']"", ""PROJECT['name of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'superlative', 'project', 'project', 'project', 'union']",train
SPIDER_train_6502,What are the SSN and names of scientists working on the project with the most hours?,"return projects ;return hours of #1 ;return number of  #2 for each #1 ;return #1 where #3 is highest ;return scientists of #4 ;return SSN of #5 ;return names of #5 ;return #6 ,  #7","[""SELECT['projects']"", ""PROJECT['hours of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['scientists of #REF', '#4']"", ""PROJECT['SSN of #REF', '#5']"", ""PROJECT['names of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'project', 'union']",train
SPIDER_train_6503,Find the name of scientists who are assigned to some project.,return scientists ;return #1 assigned to  some project ;return names of #2,"[""SELECT['scientists']"", ""FILTER['#1', 'assigned to some project']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6504,What are the names of scientists who are assigned to any project?,return scientists ;return #1 who  are  assigned to any project ;return names of  #2,"[""SELECT['scientists']"", ""FILTER['#1', 'who are assigned to any project']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6505,Select the project names which are not assigned yet.,return projects ;return names of #1 ;return #2 that  are not assigned yet,"[""SELECT['projects']"", ""PROJECT['names of #REF', '#1']"", ""FILTER['#2', 'that are not assigned yet']""]","['select', 'project', 'filter']",train
SPIDER_train_6506,What are the names of projects that have not been assigned?,return projects ;return #1 that  have  not  been assigned ;return names of  #2,"[""SELECT['projects']"", ""FILTER['#1', 'that have not been assigned']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6507,Find the name of scientists who are not assigned to any project.,return scientists ;return #1 assigned to  projects ;return #1 besides #2 ;return names of  #3,"[""SELECT['scientists']"", ""FILTER['#1', 'assigned to projects']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_6508,What are the names of scientists who have not been assigned a project?,return scientists ;return projects assigned to  #1 ;return number of  #2 for each #1 ;return #1 where #3 is  at least one ;return #1 besides #4 ;return the  names of #5,"[""SELECT['scientists']"", ""PROJECT['projects assigned to #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least one']"", ""DISCARD['#1', '#4']"", ""PROJECT['the names of #REF', '#5']""]","['select', 'project', 'group', 'comparative', 'discard', 'project']",train
SPIDER_train_6509,Find the number of scientists who are not assigned to any project.,return scientists ;return #1 assigned to  projects ;return #1 besides #2 ;return number of #3,"[""SELECT['scientists']"", ""FILTER['#1', 'assigned to projects']"", ""DISCARD['#1', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'discard', 'aggregate']",train
SPIDER_train_651,What are the names and ages of editors?,"return editors ;return names of  #1 ;return ages of  #1 ;return #2 ,  #3","[""SELECT['editors']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['ages of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_6510,How many scientists do not have any projects assigned to them?,return scientists ;return #1 that  do not  have  projects assigned ;return the  number of  #2,"[""SELECT['scientists']"", ""FILTER['#1', 'that do not have projects assigned']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_6511,Find the names of scientists who are not working on the project with the highest hours.,return projects ;return hours of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  not the   highest ;return scientists working on #4 ;return names of #5,"[""SELECT['projects']"", ""PROJECT['hours of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is not the highest']"", ""PROJECT['scientists working on #REF', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'group', 'comparative', 'project', 'project']",train
SPIDER_train_6512,What are the names of scientists who are not working on the project with the most hours?,return projects ;return hours of #1 ;return number of  #2 for each #1 ;return #1 where #3 is highest ;return scientists of #4 ;return scientists besides  #5,"[""SELECT['projects']"", ""PROJECT['hours of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['scientists of #REF', '#4']"", ""SELECT['scientists']"", ""DISCARD['#6', '#5']""]","['select', 'project', 'group', 'superlative', 'project', 'select', 'discard']",train
SPIDER_train_6514,"What are the names of each scientist, the names of the projects that they work on, and the hours for each of those projects, listed in alphabetical order by project name, then scientist name.","return scientists ;return name  of   #1 ;return projects  of   #1 ;return name  of   #3 ;return hours of   #3 ;return #2 ,    #4 ,  #5 ; return #4, #2 ;return #6 sorted by #7","[""SELECT['scientists']"", ""PROJECT['name of #REF', '#1']"", ""PROJECT['projects of #REF', '#1']"", ""PROJECT['name of #REF', '#3']"", ""PROJECT['hours of #REF', '#3']"", ""UNION['#2', '#4', '#5']"", ""UNION['#4', '#2']"", ""SORT['#6', '#7']""]","['select', 'project', 'project', 'project', 'project', 'union', 'union', 'sort']",train
SPIDER_train_6515,Find name of the project that needs the least amount of time to finish and the name of scientists who worked on it.,"return projects ;return #1 that  needs the least amount of  time to  finish ;return name  of  scientists who  worked on  #2 ;return #2 ,   #3","[""SELECT['projects']"", ""FILTER['#1', 'that needs the least amount of time to finish']"", ""PROJECT['name of scientists who worked on #REF', '#2']"", ""UNION['#2', '#3']""]","['select', 'filter', 'project', 'union']",train
SPIDER_train_6516,"What is the name of the project that requires the fewest number of hours, and the names of the scientists assigned to it?","return project ;return hours #1 requires ;return number of  #2 for each  #1 ;return #1 where #3 is  fewest ;return name of  #4 ;return scientists assigned to #4 ;return names of  #6 ;return #5 ,  #7","[""SELECT['project']"", ""PROJECT['hours #REF requires', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is fewest']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['scientists assigned to #REF', '#4']"", ""PROJECT['names of #REF', '#6']"", ""UNION['#5', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_6517,What is the name of the highest rated wine?,return wines ;return #1 that  is  highest rated ;return name of #2,"[""SELECT['wines']"", ""FILTER['#1', 'that is highest rated']"", ""PROJECT['name of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6518,Give the name of the wine with the highest score.,return wines ;return scores of  #1 ;return #1 where  #2 is highest ;return name of  #3,"[""SELECT['wines']"", ""PROJECT['scores of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_6519,Which winery is the wine that has the highest score from?,return wines ;return scores of #1 ;return #1 where #2 is  the  highest ;return the  winery that  #3 is  from,"[""SELECT['wines']"", ""PROJECT['scores of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the highest']"", ""PROJECT['the winery that #REF is from', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_652,List the names of editors who are older than 25.,return editors ;return #1 who  are  older than  25 ;return names of  #2,"[""SELECT['editors']"", ""FILTER['#1', 'who are older than 25']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6520,What is the winery at which the wine with the highest score was made?,return wineries ;return wines of #1 ;return scores of #2 ;return #1 where #3 is  highest,"[""SELECT['wineries']"", ""PROJECT['wines of #REF', '#1']"", ""PROJECT['scores of #REF', '#2']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'project', 'superlative']",train
SPIDER_train_6521,Find the names of all wines produced in 2008.,return wines ;return #1 produced in 2008 ;return names of  #2,"[""SELECT['wines']"", ""FILTER['#1', 'produced in 2008']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6522,What are the names of all wines produced in 2008?,return wines ;return #1 produced in 2008 ;return names of  #2,"[""SELECT['wines']"", ""FILTER['#1', 'produced in 2008']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6523,List the grapes and appelations of all wines.,"return wines ;return grapes of  #1 ;return appelations of  #1 ;return #2 ,  #3","[""SELECT['wines']"", ""PROJECT['grapes of #REF', '#1']"", ""PROJECT['appelations of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_6524,What are the grapes and appelations of each wine?,"return wines ;return appelations of #1 ;return grapes of #1 ;return #3 ,  #2","[""SELECT['wines']"", ""PROJECT['appelations of #REF', '#1']"", ""PROJECT['grapes of #REF', '#1']"", ""UNION['#3', '#2']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_6525,List the names and scores of all wines.,"return wines ;return names of  #1 ;return scores of  #1 ;return #2 ,  #3","[""SELECT['wines']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['scores of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_6526,What are the names and scores of all wines?,"return wines ;return names of #1 ;return scores of #1 ;return #2 ,  #3","[""SELECT['wines']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['scores of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_6527,List the area and county of all appelations.,return appelations ;return area of  #1 ;return county of  #1 ;return #2 or #3,"[""SELECT['appelations']"", ""PROJECT['area of #REF', '#1']"", ""PROJECT['county of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_6528,What are the areas and counties for all appelations?,"return appelations ;return areas of  #1 ;return counties of  #1 ;return #2 ,  #3","[""SELECT['appelations']"", ""PROJECT['areas of #REF', '#1']"", ""PROJECT['counties of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_6529,What are the prices of wines produced before the year of 2010?,return wines ;return #1 produced before the  year 2010 ;return the  prices of #2,"[""SELECT['wines']"", ""FILTER['#1', 'produced before the year 2010']"", ""PROJECT['the prices of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_653,Show the names of editors of age either 24 or 25.,return editors ;return ages of  #1 ;return #1 where #2 is  24 ;return #1 where #2 is  25 ;return #3 or  #4 ;return names of  #5,"[""SELECT['editors']"", ""PROJECT['ages of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 24']"", ""COMPARATIVE['#1', '#2', 'is 25']"", ""UNION['#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_6530,Return the prices of wines produced before 2010.,return wines ;return #1 produced before 2010 ;return prices of #2,"[""SELECT['wines']"", ""FILTER['#1', 'produced before 2010']"", ""PROJECT['prices of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6531,List the names of all distinct wines that have scores higher than 90.,return wines ;return scores of  #1 ;return #1 where  #2 is higher than 90 ;return distinct #3 ;return names of  #4,"[""SELECT['wines']"", ""PROJECT['scores of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 90']"", ""PROJECT['distinct #REF', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_6532,What are the names of wines with scores higher than 90?,return wines ;return #1 with scores higher than 90 ;return names of  #2,"[""SELECT['wines']"", ""FILTER['#1', 'with scores higher than 90']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6533,List the names of all distinct wines that are made of red color grape.,return wines ;return grapes of  #1 ;return colors of  #2 ;return #1 where  #3 is red ;return distinct #4 ;return names of  #5,"[""SELECT['wines']"", ""PROJECT['grapes of #REF', '#1']"", ""PROJECT['colors of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is red']"", ""PROJECT['distinct #REF', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_6534,What are the names of wines made from red grapes?,return wines ;return #1 made from  red grapes ;return names of  #2,"[""SELECT['wines']"", ""FILTER['#1', 'made from red grapes']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6535,Find the names of all distinct wines that have appellations in North Coast area.,return wines ;return #1 that  have  appellations in North Coast area ;return distinct names of  #2,"[""SELECT['wines']"", ""FILTER['#1', 'that have appellations in North Coast area']"", ""PROJECT['distinct names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6536,What are the distinct names of wines that have appellations in the North Coast area?,return wines ;return appellations of  #1 ;return #1 where #2 is  North Coast area ;return distinct names of  #3,"[""SELECT['wines']"", ""PROJECT['appellations of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is North Coast area']"", ""PROJECT['distinct names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6537,How many wines are produced at Robert Biale winery?,return wines ;return wineries of  #1 ;return #1 where  #2 is  Robert Biale winery ;return number of #3,"[""SELECT['wines']"", ""PROJECT['wineries of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Robert Biale winery']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_6538,Count the number of wines produced at Robert Biale winery.,return wines ;return #1 produced at Robert Biale winery ;return the number of #2,"[""SELECT['wines']"", ""FILTER['#1', 'produced at Robert Biale winery']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_6539,How many appelations are in Napa Country?,return appelations ;return #1 in Napa Country ;return number of #2,"[""SELECT['appelations']"", ""FILTER['#1', 'in Napa Country']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_654,What is the name of the youngest editor?,return editors ;return youngest #1 ;return name of  #2,"[""SELECT['editors']"", ""PROJECT['youngest #REF', '#1']"", ""PROJECT['name of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_6540,Count the number of appelations in Napa County.,return appelations ;return #1 in Napa County ;return number of  #2,"[""SELECT['appelations']"", ""FILTER['#1', 'in Napa County']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_6541,Give me the average prices of wines that are produced by appelations in Sonoma County.,return wines ;return appelations of  #1 ;return #1 where  #2 is  Sonoma County ;return prices of  #3 ;return average of  #4,"[""SELECT['wines']"", ""PROJECT['appelations of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Sonoma County']"", ""PROJECT['prices of #REF', '#3']"", ""AGGREGATE['avg', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_6542,What is the average price of wines produced in appelations in Sonoma County?,return wines ;return #1 produced in appelations in  Sonoma County ;return the  price of  #2 ;return the  average of  #3,"[""SELECT['wines']"", ""FILTER['#1', 'produced in appelations in Sonoma County']"", ""PROJECT['the price of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_6543,What are the names and scores of wines that are made of white color grapes?,"return wines ;return grapes that  #1 are made of ;return the  color of #2 ;return #1 where #3 is  white ;return names of #4 ;return scores of #4 ;return #5 ,  #6","[""SELECT['wines']"", ""PROJECT['grapes that #REF are made of', '#1']"", ""PROJECT['the color of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is white']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['scores of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_6544,Give the names and scores of wines made from white grapes.,"return wines ;return #1 made with  white grapes ;return names of  #2 ;return scores of  #2 ;return #3 ,   #4","[""SELECT['wines']"", ""FILTER['#1', 'made with white grapes']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['scores of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_6545,Find the maximum price of wins from the appelations in Central Coast area and produced before the year of 2005.,return wins ;return #1 from appelations in Central Coast area ;return #2 that  are produced before 2005 ;return prices of #3 ;return #3 where #4 is  highest,"[""SELECT['wins']"", ""FILTER['#1', 'from appelations in Central Coast area']"", ""FILTER['#2', 'that are produced before 2005']"", ""PROJECT['prices of #REF', '#3']"", ""SUPERLATIVE['max', '#3', '#4']""]","['select', 'filter', 'filter', 'project', 'superlative']",train
SPIDER_train_6546,"What is the maximum price of wines from the appelation in the Central Coast area, which was produced before 2005?",return appelations ;return #1 in the   Central Coast area ;return wines from #2 ;return #3 that  was produced before 2005 ;return the   prices of #4 ;return the   maximum of #5,"[""SELECT['appelations']"", ""FILTER['#1', 'in the Central Coast area']"", ""PROJECT['wines from #REF', '#2']"", ""FILTER['#3', 'that was produced before 2005']"", ""PROJECT['the prices of #REF', '#4']"", ""AGGREGATE['max', '#5']""]","['select', 'filter', 'project', 'filter', 'project', 'aggregate']",train
SPIDER_train_6547,Find the the grape whose white color grapes are used to produce wines with scores higher than 90.,return grapes ;return colors of  #1 ;return #1 where #2 is  white ;return wines #3 produce ;return scores of  #4 ;return #3 where #5 is  higher than 90,"[""SELECT['grapes']"", ""PROJECT['colors of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is white']"", ""PROJECT['wines #REF produce', '#3']"", ""PROJECT['scores of #REF', '#4']"", ""COMPARATIVE['#3', '#5', 'is higher than 90']""]","['select', 'project', 'comparative', 'project', 'project', 'comparative']",train
SPIDER_train_6548,Find the white grape used to produce wines with scores above 90.,return grapes ;return wines of  #1 ;return #2 where  #1 is  white ;return scores of  #3 ;return #1 where  #4 is  higher than 90,"[""SELECT['grapes']"", ""PROJECT['wines of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is white']"", ""PROJECT['scores of #REF', '#3']"", ""COMPARATIVE['#1', '#4', 'is higher than 90']""]","['select', 'project', 'comparative', 'project', 'comparative']",train
SPIDER_train_6549,What are the wines that have prices higher than 50 and made of Red color grapes?,return wines ;return prices of  #1 ;return #1 where #2 is  higher than 50 ;return grapes of  #1 ;return colors of  #4 ;return #1 where #5 is  Red ;return #1 of  both #3 and  #6,"[""SELECT['wines']"", ""PROJECT['prices of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 50']"", ""PROJECT['grapes of #REF', '#1']"", ""PROJECT['colors of #REF', '#4']"", ""COMPARATIVE['#1', '#5', 'is Red']"", ""INTERSECTION['#1', '#3', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'comparative', 'intersection']",train
SPIDER_train_655,What are the different ages of editors? Show each age along with the number of editors of that age.,"return editors  ;return different ages of  #1 ;return number of  #1 for each  #2 ;return #2 ,  #3","[""SELECT['editors']"", ""PROJECT['different ages of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""UNION['#2', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_6550,What are the names of wines made from red grapes and with prices above 50?,return wines ;return #1 that  are made from red grapes ;return the  prices of #2 ;return #2 where #3 is  higher than 50 ;return the  names of #4,"[""SELECT['wines']"", ""FILTER['#1', 'that are made from red grapes']"", ""PROJECT['the prices of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is higher than 50']"", ""PROJECT['the names of #REF', '#4']""]","['select', 'filter', 'project', 'comparative', 'project']",train
SPIDER_train_6551,What are the wines that have prices lower than 50 and have appelations in Monterey county?,return Monterey county ;return appelations of #1 ;return wines of #2 ;return prices of #3 ;return #3 where #4 is lower than 50,"[""SELECT['Monterey county']"", ""PROJECT['appelations of #REF', '#1']"", ""PROJECT['wines of #REF', '#2']"", ""PROJECT['prices of #REF', '#3']"", ""COMPARATIVE['#3', '#4', 'is lower than 50']""]","['select', 'project', 'project', 'project', 'comparative']",train
SPIDER_train_6552,Give the neames of wines with prices below 50 and with appelations in Monterey county.,return wines ;return #1 with  prices below 50 ;return #2 with  appelations in Monterey county ;return neames of  #3,"[""SELECT['wines']"", ""FILTER['#1', 'with prices below 50']"", ""FILTER['#2', 'with appelations in Monterey county']"", ""PROJECT['neames of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_6553,What are the numbers of wines for different grapes?,return different grapes ;return wines of #1 ;return number of  #2 for each  #1,"[""SELECT['different grapes']"", ""PROJECT['wines of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_6554,How many wines are there for each grape?,return grapes ;return wines of  #1 ;return number of  #2 for each  #1,"[""SELECT['grapes']"", ""PROJECT['wines of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_6555,What are the average prices of wines for different years?,return years ;return wines of #1 ;return prices of #2 ;return average of #3 for each #1,"[""SELECT['years']"", ""PROJECT['wines of #REF', '#1']"", ""PROJECT['prices of #REF', '#2']"", ""GROUP['avg', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_6556,What is the average prices of wines for each each?,return wines ;return prices of #1 ;return average of #2 for each #1,"[""SELECT['wines']"", ""PROJECT['prices of #REF', '#1']"", ""GROUP['avg', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_6557,Find the distinct names of all wines that have prices higher than some wines from John Anthony winery.,return wines  ;return #1 from  John Anthony winery ;return prices of #2 ;return the lowest #3 ;return #1 besides #2 ;return prices of #5 ;return #5 where #6 is  higher than #4 ;return distinct names of #7,"[""SELECT['wines']"", ""FILTER['#1', 'from John Anthony winery']"", ""PROJECT['prices of #REF', '#2']"", ""AGGREGATE['min', '#3']"", ""DISCARD['#1', '#2']"", ""PROJECT['prices of #REF', '#5']"", ""COMPARATIVE['#5', '#6', 'is higher than #4']"", ""PROJECT['distinct names of #REF', '#7']""]","['select', 'filter', 'project', 'aggregate', 'discard', 'project', 'comparative', 'project']",train
SPIDER_train_6558,What are the distinct names of wines with prices higher than any wine from John Anthony winery.,return wines ;return wineries of #1 ;return #1 where #2 is  John Anthony ;return prices of #1 ;return prices of #3 ;return #1 where #4 is  higher than #5 ;return names of #6 ;return distinct #7,"[""SELECT['wines']"", ""PROJECT['wineries of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is John Anthony']"", ""PROJECT['prices of #REF', '#1']"", ""PROJECT['prices of #REF', '#3']"", ""COMPARATIVE['#1', '#4', 'is higher than #5']"", ""PROJECT['names of #REF', '#6']"", ""PROJECT['distinct #REF', '#7']""]","['select', 'project', 'comparative', 'project', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_6559,List the names of all distinct wines in alphabetical order.,return wines ;return distinct #1 ;return #2 sorted by alphabetical order,"[""SELECT['wines']"", ""PROJECT['distinct #REF', '#1']"", ""SORT['#2', '#2', 'alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_656,Please show the most common age of editors.,return ages ;return editors of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['ages']"", ""PROJECT['editors of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_6560,"What are the names of wines, sorted in alphabetical order?",return wines ;return names of  #1 ;return #2 sorted in alphabetical order,"[""SELECT['wines']"", ""PROJECT['names of #REF', '#1']"", ""FILTER['#2', 'sorted in alphabetical order']""]","['select', 'project', 'filter']",train
SPIDER_train_6561,List the names of all distinct wines ordered by price.,return wines ;return distinct #1 ;return names of  #2 ;return prices of  #1 ;return #3 sorted by #4,"[""SELECT['wines']"", ""PROJECT['distinct #REF', '#1']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['prices of #REF', '#1']"", ""SORT['#3', '#4']""]","['select', 'project', 'project', 'project', 'sort']",train
SPIDER_train_6562,"What are the names of wines, sorted by price ascending?",return wines ;return price of  #1 ;return names of  #1 ;return #3 sorted by #2 ascending,"[""SELECT['wines']"", ""PROJECT['price of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""SORT['#3', '#2', 'ascending']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_6563,What is the area of the appelation that produces the highest number of wines before the year of 2010?,return appelations ;return wines #1 produces ;return #2 before 2010 ;return number of  #3 for each #1 ;return #1 where #4 is  highest ;return area of   #5,"[""SELECT['appelations']"", ""PROJECT['wines #REF produces', '#1']"", ""FILTER['#2', 'before 2010']"", ""GROUP['count', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']"", ""PROJECT['area of #REF', '#5']""]","['select', 'project', 'filter', 'group', 'superlative', 'project']",train
SPIDER_train_6564,What is the area for the appelation which produced the most wines prior to 2010?,return appelations ;return wines of #1 ;return #2 produced prior to 2010 ;return number of #3 for each #1 ;return #1 where #4 is  highest ;return area of #5,"[""SELECT['appelations']"", ""PROJECT['wines of #REF', '#1']"", ""FILTER['#2', 'produced prior to 2010']"", ""GROUP['count', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']"", ""PROJECT['area of #REF', '#5']""]","['select', 'project', 'filter', 'group', 'superlative', 'project']",train
SPIDER_train_6565,What is the color of the grape whose wine products has the highest average price?,return wine products ;return the  price of  #1 ;return the  average of  #2 ;return the  grape where #3 is  highest ;return the  color of  #4,"[""SELECT['wine products']"", ""PROJECT['the price of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""PROJECT['the grape where #REF is highest', '#3']"", ""PROJECT['the color of #REF', '#4']""]","['select', 'project', 'aggregate', 'project', 'project']",train
SPIDER_train_6566,Give the color of the grape whose wine products have the highest average price?,return grapes ;return wine products of  #1 ;return prices of  #2 ;return average #3 for each #1 ;return #1 where  #4 is  highest ;return color of  #5,"[""SELECT['grapes']"", ""PROJECT['wine products of #REF', '#1']"", ""PROJECT['prices of #REF', '#2']"", ""GROUP['avg', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']"", ""PROJECT['color of #REF', '#5']""]","['select', 'project', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_6567,Find the distinct names of wines produced before the year of 2000 or after the year of 2010.,"return wines ;return year that #1 produced ;return #1 where #2 is lower than 2000 ;return #1 where #2 is higher than 2010 ;return #3 ,  #4 ;return distinct names of   #5","[""SELECT['wines']"", ""PROJECT['year that #REF produced', '#1']"", ""COMPARATIVE['#1', '#2', 'is lower than 2000']"", ""COMPARATIVE['#1', '#2', 'is higher than 2010']"", ""UNION['#3', '#4']"", ""PROJECT['distinct names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_6568,Give the distinct names of wines made before 2000 or after 2010.,return wines ;return #1 made before 2000 ;return #1 made after 2010 ;return #2 or  #3 ;return distinct names of  #4,"[""SELECT['wines']"", ""FILTER['#1', 'made before 2000']"", ""FILTER['#1', 'made after 2010']"", ""UNION['#2', '#3']"", ""PROJECT['distinct names of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_6569,Find the distinct winery of wines having price between 50 and 100.,return wines ;return prices of #1 ;return #1 where #2 is at least 50 ;return #1 where #2 is at most 100 ;return #1 in  both #3 and  #4 ;return distinct wineries of #5,"[""SELECT['wines']"", ""PROJECT['prices of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least 50']"", ""COMPARATIVE['#1', '#2', 'is at most 100']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['distinct wineries of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_657,Show the distinct themes of journals.,return journals ;return distinct themes of  #1,"[""SELECT['journals']"", ""PROJECT['distinct themes of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_6570,What are the distinct wineries which produce wines costing between 50 and 100?,return wines ;return cost of #1 ;return #1 where #2 is higher than 50 ;return #3 where #2 is lower than 100 ;return distinct wineries that produce #4,"[""SELECT['wines']"", ""PROJECT['cost of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 50']"", ""COMPARATIVE['#3', '#2', 'is lower than 100']"", ""PROJECT['distinct wineries that produce #REF', '#4']""]","['select', 'project', 'comparative', 'comparative', 'project']",train
SPIDER_train_6571,What are the average prices and cases of wines produced in the year of 2009 and made of Zinfandel grape?,"return wines ;return grapes of #1 ;return #1 where #2 is  Zinfandel ;return #3 in 2009 ;return prices of #4 ;return average of #5 ;return cases of #4 ;return number of #7 ;return average of #8 ;return #6 , #9","[""SELECT['wines']"", ""PROJECT['grapes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Zinfandel']"", ""FILTER['#3', 'in 2009']"", ""PROJECT['prices of #REF', '#4']"", ""AGGREGATE['avg', '#5']"", ""PROJECT['cases of #REF', '#4']"", ""AGGREGATE['count', '#7']"", ""AGGREGATE['avg', '#8']"", ""UNION['#6', '#9']""]","['select', 'project', 'comparative', 'filter', 'project', 'aggregate', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_6572,Give the average price and case of wines made from Zinfandel grapes in the year 2009.,"return wines ;return #1 made from Zinfandel grapes ;return #2 in the  year 2009 ;return prices of #3 ;return cases of #3 ;return the  average of #4 ;return the  average of #5 ;return #6 ,  #7","[""SELECT['wines']"", ""FILTER['#1', 'made from Zinfandel grapes']"", ""FILTER['#2', 'in the year 2009']"", ""PROJECT['prices of #REF', '#3']"", ""PROJECT['cases of #REF', '#3']"", ""AGGREGATE['avg', '#4']"", ""AGGREGATE['avg', '#5']"", ""UNION['#6', '#7']""]","['select', 'filter', 'filter', 'project', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_6573,What are the maximum price and score of wines produced by St. Helena appelation?,"return wines ;return appelations of  #1 ;return #1 where #2 is  St. Helena ;return prices of  #3 ;return maximum of  #4 ;return scores of  #3 ;return maximum of  #6 ;return #5 ,  #7","[""SELECT['wines']"", ""PROJECT['appelations of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is St. Helena']"", ""PROJECT['prices of #REF', '#3']"", ""AGGREGATE['max', '#4']"", ""PROJECT['scores of #REF', '#3']"", ""AGGREGATE['max', '#6']"", ""UNION['#5', '#7']""]","['select', 'project', 'comparative', 'project', 'aggregate', 'project', 'aggregate', 'union']",train
SPIDER_train_6574,Give the maximum price and score for wines produced in the appelation St. Helena.,"return wines ;return appelations of #1 ;return #1 where #2 is  St. Helena ;return prices of #3 ;return maximum of #4 ;return scores of #3 ;return #5 ,  #6","[""SELECT['wines']"", ""PROJECT['appelations of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is St. Helena']"", ""PROJECT['prices of #REF', '#3']"", ""AGGREGATE['max', '#4']"", ""PROJECT['scores of #REF', '#3']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'project', 'aggregate', 'project', 'union']",train
SPIDER_train_6575,What are the maximum price and score of wines in each year?,"return wines ;return years of #1 ;return prices of #1 ;return scores of #1 ;return the  maximum of #3 for each #2 ;return the  maximum of #4 for each #2 ;return #5 ,  #6","[""SELECT['wines']"", ""PROJECT['years of #REF', '#1']"", ""PROJECT['prices of #REF', '#1']"", ""PROJECT['scores of #REF', '#1']"", ""GROUP['max', '#3', '#2']"", ""GROUP['max', '#4', '#2']"", ""UNION['#5', '#6']""]","['select', 'project', 'project', 'project', 'group', 'group', 'union']",train
SPIDER_train_6576,What are the maximum price and score of wines for each year?,"return years ;return wines of #1 ;return prices of #2 ;return maximum of #3 for each #1 ;return scores of #2 ;return maximum of #5 for each #1 ;return #4 , #6","[""SELECT['years']"", ""PROJECT['wines of #REF', '#1']"", ""PROJECT['prices of #REF', '#2']"", ""GROUP['max', '#3', '#1']"", ""PROJECT['scores of #REF', '#2']"", ""GROUP['max', '#5', '#1']"", ""UNION['#4', '#6']""]","['select', 'project', 'project', 'group', 'project', 'group', 'union']",train
SPIDER_train_6577,What are the average price and score of wines grouped by appelation?,"return appelations ;return wines of  #1 ;return prices of  #2 ;return average of  #3 for each  #1 ;return scores of  #2 ;return average of  #5 for each  #1 ;return #4 ,  #6","[""SELECT['appelations']"", ""PROJECT['wines of #REF', '#1']"", ""PROJECT['prices of #REF', '#2']"", ""GROUP['avg', '#3', '#1']"", ""PROJECT['scores of #REF', '#2']"", ""GROUP['avg', '#5', '#1']"", ""UNION['#4', '#6']""]","['select', 'project', 'project', 'group', 'project', 'group', 'union']",train
SPIDER_train_6578,What are the average price and score of wines for each appelation?,"return appelations ;return wines of  #1 ;return prices of  #2 ;return average of  #3 for each  #1 ;return scores of  #2 ;return average of  #5 for each  #1 ;return #4 ,  #6","[""SELECT['appelations']"", ""PROJECT['wines of #REF', '#1']"", ""PROJECT['prices of #REF', '#2']"", ""GROUP['avg', '#3', '#1']"", ""PROJECT['scores of #REF', '#2']"", ""GROUP['avg', '#5', '#1']"", ""UNION['#4', '#6']""]","['select', 'project', 'project', 'group', 'project', 'group', 'union']",train
SPIDER_train_6579,Find the wineries that have at least four wines.,return wineries ;return wines of  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  at least four,"[""SELECT['wineries']"", ""PROJECT['wines of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least four']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_658,Show the names of editors and the theme of journals for which they serve on committees.,"return editors ;return name of #1 ;return journals of #1 ;return #3 that #1 serve on committees ;return theme of #4 ;return #2 ,  #5","[""SELECT['editors']"", ""PROJECT['name of #REF', '#1']"", ""PROJECT['journals of #REF', '#1']"", ""FILTER['#3', 'that #1 serve on committees']"", ""PROJECT['theme of #REF', '#4']"", ""UNION['#2', '#5']""]","['select', 'project', 'project', 'filter', 'project', 'union']",train
SPIDER_train_6580,Which wineries produce at least four wines?,return wineries ;return wines #1 produce ;return number of  #2 for each  #1 ;return #1 where #3 is  at least four,"[""SELECT['wineries']"", ""PROJECT['wines #REF produce', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least four']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_6581,Find the country of all appelations who have at most three wines.,return appelations ;return wines of #1 ;return number of  #2 for each #1 ;return #1 where #3 is at most three ;return countries of #4,"[""SELECT['appelations']"", ""PROJECT['wines of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at most three']"", ""PROJECT['countries of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_6582,What are the countries for appelations with at most 3 wines?,return appelations ;return wines of #1 ;return number of #2 for each #1 ;return #1 where #3 is  at most 3 ;return countries of #4,"[""SELECT['appelations']"", ""PROJECT['wines of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at most 3']"", ""PROJECT['countries of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_6583,What are the names of wines whose production year are before the year of all wines by Brander winery?,return wines  ;return #1 from the  Brander winery ;return the  production years of #2 ;return the  production years of #1 ;return #1 where #4 is  before all #3 ;return the  names of #5,"[""SELECT['wines']"", ""FILTER['#1', 'from the Brander winery']"", ""PROJECT['the production years of #REF', '#2']"", ""PROJECT['the production years of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is before all #3']"", ""PROJECT['the names of #REF', '#5']""]","['select', 'filter', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_6584,What are the names of wines produced before any wine from the Brander winery?,return the  Brander winery ;return wines of #1 ;return when  was  #2 produced ;return wines that was  produced before #3,"[""SELECT['the Brander winery']"", ""PROJECT['wines of #REF', '#1']"", ""PROJECT['when was #REF produced', '#2']"", ""PROJECT['wines that was produced before #REF', '#3']""]","['select', 'project', 'project', 'project']",train
SPIDER_train_6585,What are the names of wines that are more expensive then all wines made in the year 2006?,return wines ;return #1 made in the  year 2006 ;return price of #2 ;return the  highest #3 ;return price of #1 ;return #1 where #5 is  higher than #4 ;return the  names of #6,"[""SELECT['wines']"", ""FILTER['#1', 'made in the year 2006']"", ""PROJECT['price of #REF', '#2']"", ""AGGREGATE['max', '#3']"", ""PROJECT['price of #REF', '#1']"", ""COMPARATIVE['#1', '#5', 'is higher than #4']"", ""PROJECT['the names of #REF', '#6']""]","['select', 'filter', 'project', 'aggregate', 'project', 'comparative', 'project']",train
SPIDER_train_6586,Give the names of wines with prices above any wine produced in 2006.,return wines ;return #1 produced in 2006 ;return prices of  #1 ;return prices of  #2 ;return maximum of #4 ;return #1 where  #3 is more than #5 ;return name of  #6,"[""SELECT['wines']"", ""FILTER['#1', 'produced in 2006']"", ""PROJECT['prices of #REF', '#1']"", ""PROJECT['prices of #REF', '#2']"", ""AGGREGATE['max', '#4']"", ""COMPARATIVE['#1', '#3', 'is more than #5']"", ""PROJECT['name of #REF', '#6']""]","['select', 'filter', 'project', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_6587,Find the top 3 wineries with the greatest number of wines made of white color grapes.,return wineries ;return wines of #1 ;return grapes of #2 ;return colors of #3 ;return #2 where #4 is  white ;return number of  #5 for each #1 ;return #1 where #6 is  top 3 greatest,"[""SELECT['wineries']"", ""PROJECT['wines of #REF', '#1']"", ""PROJECT['grapes of #REF', '#2']"", ""PROJECT['colors of #REF', '#3']"", ""COMPARATIVE['#2', '#4', 'is white']"", ""GROUP['count', '#5', '#1']"", ""COMPARATIVE['#1', '#6', 'is top 3 greatest']""]","['select', 'project', 'project', 'project', 'comparative', 'group', 'comparative']",train
SPIDER_train_6588,Which 3 wineries produce the most wines made from white grapes?,return wineries ;return wines of #1 ;return #2 that are made from  white grapes ;return number of  #3 for each #1 ;return the  3 highest of #4 ;return #1 where #4 is equal to any of #5,"[""SELECT['wineries']"", ""PROJECT['wines of #REF', '#1']"", ""FILTER['#2', 'that are made from white grapes']"", ""GROUP['count', '#3', '#1']"", ""AGGREGATE['max', '#4']"", ""COMPARATIVE['#1', '#4', 'is equal to any of #5']""]","['select', 'project', 'filter', 'group', 'aggregate', 'comparative']",train
SPIDER_train_6589,"List the grape, winery and year of the wines whose price is bigger than 100 ordered by year.","return wines ;return prices of  #1 ;return #1 where  #2 is higher than 100 ;return grapes of  #3 ;return wineries of  #3 ;return years of  #3 ;return #4 ,  #5 , #6 ;return #7 sorted by #6","[""SELECT['wines']"", ""PROJECT['prices of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 100']"", ""PROJECT['grapes of #REF', '#3']"", ""PROJECT['wineries of #REF', '#3']"", ""PROJECT['years of #REF', '#3']"", ""UNION['#4', '#5', '#6']"", ""SORT['#7', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_659,"For each journal_committee, find the editor name and the journal theme.","return journal_committees ;return editors of #1 ;return names of #2 ;return journal themes of #1 ;return #3 ,  #4","[""SELECT['journal_committees']"", ""PROJECT['editors of #REF', '#1']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['journal themes of #REF', '#1']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_6590,"What are the grapes, wineries and years for wines with price higher than 100, sorted by year?","return wines ;return prices of  #1 ;return #1 where #2 is  higher than 100 ;return grapes of  #3 ;return wineries of  #3 ;return years of  #3 ;return #4 ,  #5 ,   #6 ;return #7 sorted by #6","[""SELECT['wines']"", ""PROJECT['prices of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 100']"", ""PROJECT['grapes of #REF', '#3']"", ""PROJECT['wineries of #REF', '#3']"", ""PROJECT['years of #REF', '#3']"", ""UNION['#4', '#5', '#6']"", ""SORT['#7', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_6591,"List the grape, appelation and name of wines whose score is higher than 93 ordered by Name.","return wines ;return scores of  #1 ;return #1 where #2 is  higher than 93 ;return grapes of  #3 ;return appelations of  #3 ;return names of  #3 ;return #4 ,  #5 ,   #6 ;return #7 sorted by #6","[""SELECT['wines']"", ""PROJECT['scores of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 93']"", ""PROJECT['grapes of #REF', '#3']"", ""PROJECT['appelations of #REF', '#3']"", ""PROJECT['names of #REF', '#3']"", ""UNION['#4', '#5', '#6']"", ""SORT['#7', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_6592,"What are the grapes, appelations, and wines with scores above 93, sorted by Name?","return wines ;return scores of #1 ;return #1 where #2 is  higher than 93 ;return grapes of #3 ;return appelations of #3 ;return Names of #3 ;return #3 ,  #4 ,   #5 ;return #7 sorted by #6","[""SELECT['wines']"", ""PROJECT['scores of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 93']"", ""PROJECT['grapes of #REF', '#3']"", ""PROJECT['appelations of #REF', '#3']"", ""PROJECT['Names of #REF', '#3']"", ""UNION['#3', '#4', '#5']"", ""SORT['#7', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_6593,Find the appelations that produce wines after the year of 2008 but not in Central Coast area.,return appelations ;return year that #1 produce wines ;return #1 where #2 is higher than 2008 ;return #3 that is in  Central Coast area ;return #3 besides  #4,"[""SELECT['appelations']"", ""PROJECT['year that #REF produce wines', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 2008']"", ""FILTER['#3', 'that is in Central Coast area']"", ""DISCARD['#3', '#4']""]","['select', 'project', 'comparative', 'filter', 'discard']",train
SPIDER_train_6594,What are the appelations for wines produced after 2008 but not in the Central Coast area?,return wines ;return #1 produced after 2008 ;return areas of #1 ;return #1 where #3 is  not Central Coast ;return appelations of both #2 and #4,"[""SELECT['wines']"", ""FILTER['#1', 'produced after 2008']"", ""PROJECT['areas of #REF', '#1']"", ""COMPARATIVE['#1', '#3', 'is not Central Coast']"", ""PROJECT['appelations of #REF', '#1']"", ""INTERSECTION['#5', '#2', '#4']""]","['select', 'filter', 'project', 'comparative', 'project', 'intersection']",train
SPIDER_train_6595,Find the average price of wines that are not produced from Sonoma county.,return wines ;return #1 not  produced from  Sonoma county ;return price of  #2 ;return average of  #3,"[""SELECT['wines']"", ""FILTER['#1', 'not produced from Sonoma county']"", ""PROJECT['price of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_6596,What is the average price for wines not produced in Sonoma county?,return wines ;return #1 produced in Sonoma county ;return #1 besides  #2 ;return average price for #3,"[""SELECT['wines']"", ""FILTER['#1', 'produced in Sonoma county']"", ""DISCARD['#1', '#2']"", ""PROJECT['price for #REF', '#3']"", ""GROUP['avg', '#4', '#3']"", ""UNION['#3', '#5']""]","['select', 'filter', 'discard', 'project', 'group', 'union']",train
SPIDER_train_6597,Find the county where produces the most number of wines with score higher than 90.,return counties ;return wines #1 produce ;return scores of  #2 ;return #2 where #3 is  higher than 90 ;return number of  #4 for each  #1 ;return #1 where #5 is  highest,"[""SELECT['counties']"", ""PROJECT['wines #REF produce', '#1']"", ""PROJECT['scores of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is higher than 90']"", ""GROUP['count', '#4', '#1']"", ""SUPERLATIVE['max', '#1', '#5']""]","['select', 'project', 'project', 'comparative', 'group', 'superlative']",train
SPIDER_train_6598,What is the county that produces the most wines scoring higher than 90?,return counties ;return wines of  #1 ;return score of  #2 ;return #2 where #3 is  higher than 90 ;return number of  #4 for each  #1 ;return #1 where #5 is  highest,"[""SELECT['counties']"", ""PROJECT['wines of #REF', '#1']"", ""PROJECT['score of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is higher than 90']"", ""GROUP['count', '#4', '#1']"", ""SUPERLATIVE['max', '#1', '#5']""]","['select', 'project', 'project', 'comparative', 'group', 'superlative']",train
SPIDER_train_6599,How many train stations are there?,return train stations ;return number of  #1,"[""SELECT['train stations']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_66,What are the ids of all students for courses and what are the names of those courses?,"return courses  ;return students of  #1 ;return ids of  #2 ;return names of  #1 ;return #3 ,  #4","[""SELECT['courses']"", ""PROJECT['students of #REF', '#1']"", ""PROJECT['ids of #REF', '#2']"", ""PROJECT['names of #REF', '#1']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_660,"Show the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme.","return editors ;return names of   #1 ;return ages of   #1 ;return journals that #1 serve on committees ;return theme  of   #4 ;return #2 ,  #3 ,   #4 ; return #6 sorted by #5","[""SELECT['editors']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['ages of #REF', '#1']"", ""PROJECT['journals that #REF serve on committees', '#1']"", ""PROJECT['theme of #REF', '#4']"", ""UNION['#2', '#3', '#4']"", ""SORT['#6', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_6600,"Show the name, location, and number of platforms for all stations.","return stations ;return names of  #1 ;return locations of  #1 ;return platforms of  #1 ;return number of  #4 for each  #1 ;return #2 ,  #3 ,   #5","[""SELECT['stations']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['locations of #REF', '#1']"", ""PROJECT['platforms of #REF', '#1']"", ""GROUP['count', '#4', '#1']"", ""UNION['#2', '#3', '#5']""]","['select', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_6601,What are all locations of train stations?,return train stations ;return locations of  #1,"[""SELECT['train stations']"", ""PROJECT['locations of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_6602,Show the names and total passengers for all train stations not in London.,return train stations ;return #1 in London ;return #1 besides #2 ;return passengers of  #3 ;return number of #4 for each #3 ;return names of  #3 ;return #5 or  #6,"[""SELECT['train stations']"", ""FILTER['#1', 'in London']"", ""DISCARD['#1', '#2']"", ""PROJECT['passengers of #REF', '#3']"", ""GROUP['count', '#4', '#3']"", ""PROJECT['names of #REF', '#3']"", ""UNION['#5', '#6']""]","['select', 'filter', 'discard', 'project', 'group', 'project', 'union']",train
SPIDER_train_6604,What is the average and maximum number of total passengers for train stations in London or Glasgow?,"return train stations ;return #1 in London ;return #1 in Glasgow ;return #2 or  #3 ;return passengers of #4 ;return number of #5 ;return average of #6 ;return maximum of #6 ;return #7 , #8","[""SELECT['train stations']"", ""FILTER['#1', 'in London']"", ""FILTER['#1', 'in Glasgow']"", ""UNION['#2', '#3']"", ""PROJECT['passengers of #REF', '#4']"", ""GROUP['count', '#5', '#4']"", ""AGGREGATE['avg', '#6']"", ""AGGREGATE['max', '#6']"", ""UNION['#7', '#8']""]","['select', 'filter', 'filter', 'union', 'project', 'group', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_6605,Show all locations and the total number of platforms and passengers for all train stations in each location.,return locations ;return train stations of  locations ;return total number of  platforms for each  #2 ;return total number of  passengers for each #2 ;return #3 or #4,"[""SELECT['locations']"", ""SELECT['train stations of locations']"", ""PROJECT['platforms', '#2']"", ""GROUP['count', '#3', '#2']"", ""PROJECT['passengers', '#2']"", ""GROUP['count', '#5', '#2']"", ""UNION['#4', '#6']""]","['select', 'select', 'project', 'group', 'project', 'group', 'union']",train
SPIDER_train_6606,Show all locations that have train stations with at least 15 platforms and train stations with more than 25 total passengers.,return train stations ;return platforms of #1 ;return number of #2 for each #1 ;return #1 where #3 is  at least 15 ;return passengers of #1 ;return number of #5 for each #1 ;return #1 where #6 is  higher than 25 ;return #1 of both #4 and  #7 ;return locations of #8,"[""SELECT['train stations']"", ""PROJECT['platforms of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 15']"", ""PROJECT['passengers of #REF', '#1']"", ""GROUP['count', '#5', '#1']"", ""COMPARATIVE['#1', '#6', 'is higher than 25']"", ""INTERSECTION['#1', '#4', '#7']"", ""PROJECT['locations of #REF', '#8']""]","['select', 'project', 'group', 'comparative', 'project', 'group', 'comparative', 'intersection', 'project']",train
SPIDER_train_6607,Show all locations which don't have a train station with at least 15 platforms.,return locations ;return #1 that  have  a train station with  at least 15 platforms ;return #1 besides  #2,"[""SELECT['locations']"", ""FILTER['#1', 'that have a train station with at least 15 platforms']"", ""DISCARD['#1', '#2']""]","['select', 'filter', 'discard']",train
SPIDER_train_6608,Show the location with most number of train stations.,return locations ;return number of  train stations for each  #1 ;return #1 where #2 is highest,"[""SELECT['locations']"", ""PROJECT['stations', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_6609,"Show the name, time, and service for all trains.","return trains ;return names of #1 ;return times of #1 ;return services of #1 ;return #2 ,  #3 ,   #4","[""SELECT['trains']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['times of #REF', '#1']"", ""PROJECT['services of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_661,Show the names of editors that are on the committee of journals with sales bigger than 3000.,return journals ;return sales of  #1 ;return #1 where #2 is  higher than 3000 ;return committees of  #3 ;return editors on  #4 ;return names of  #5,"[""SELECT['journals']"", ""PROJECT['sales of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 3000']"", ""PROJECT['committees of #REF', '#3']"", ""PROJECT['editors on #REF', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'project']",train
SPIDER_train_6610,Show the number of trains,return trains ;return number of  #1,"[""SELECT['trains']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_6611,Show the name and service for all trains in order by time.,return trains ;return times of  #1 ;return #1 sorted by #2 ;return names of  #3 ;return service of  #3 ;return #4 or #5,"[""SELECT['trains']"", ""PROJECT['times of #REF', '#1']"", ""SORT['#1', '#2']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['service of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'sort', 'project', 'project', 'union']",train
SPIDER_train_6612,Show the station name and number of trains in each station.,"return stations ;return names of  #1 ;return trains in #1 ;return number of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['stations']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['trains in #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_6613,show the train name and station name for each train.,"return trains ;return names of  #1 ;return stations of  #1 ;return names of  #3 ;return #2 ,  #4","[""SELECT['trains']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['stations of #REF', '#1']"", ""PROJECT['names of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_6614,Show all train names and times in stations in London in descending order by train time.,"return stations ;return #1 in   London ;return trains of #2 ;return names of #3 ;return times of #3 ;return #4 ,  #5 ;return #6 sorted by #5 in   descending order","[""SELECT['stations']"", ""FILTER['#1', 'in London']"", ""PROJECT['trains of #REF', '#2']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['times of #REF', '#3']"", ""UNION['#4', '#5']"", ""SORT['#6', '#5', 'in descending order']""]","['select', 'filter', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_6615,Show the station name with greatest number of trains.,return stations ;return trains of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return name of  #4,"[""SELECT['stations']"", ""PROJECT['trains of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_6616,Show the station name with at least two trains.,return stations ;return trains of #1 ;return the  number of  #2 for each #1 ;return #1 where #3 is  at least two ;return the  names of #4,"[""SELECT['stations']"", ""PROJECT['trains of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""PROJECT['the names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_6617,Show all locations with only 1 station.,return locations ;return stations of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  1,"[""SELECT['locations']"", ""PROJECT['stations of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is 1']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_6618,Show station names without any trains.,return stations ;return #1 without trains ;return names of #2,"[""SELECT['stations']"", ""FILTER['#1', 'without trains']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6619,"What are the names of the stations which serve both ""Ananthapuri Express"" and ""Guruvayur Express"" trains?",return stations ;return trains #1 serve ;return #1 where #2 is  Ananthapuri Express  ;return #1 where #2 is  Guruvayur Express  ;return #1 of  both #3 and  #4 ;return names of  #5,"[""SELECT['stations']"", ""PROJECT['trains #REF serve', '#1']"", ""COMPARATIVE['#1', '#2', 'is Ananthapuri Express']"", ""COMPARATIVE['#1', '#2', 'is Guruvayur Express']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_662,"Show the id, name of each editor and the number of journal committees they are on.","return editors ;return ids of #1 ;return names of #1 ;return journal committees of #1 ;return number of  #4 for each #1 ;return #2 ,  #3 ,   #5","[""SELECT['editors']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['journal committees of #REF', '#1']"", ""GROUP['count', '#4', '#1']"", ""UNION['#2', '#3', '#5']""]","['select', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_6620,Find the names of the trains that do not pass any station located in London.,return trains ;return stations #1 pass ;return #1 where #2 is  not London ;return names of #3,"[""SELECT['trains']"", ""PROJECT['stations #REF pass', '#1']"", ""COMPARATIVE['#1', '#2', 'is not London']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6621,List the names and locations of all stations ordered by their yearly entry exit and interchange amounts.,"return stations ;return names of #1 ;return locations of #1 ;return yearly entry amounts of #1 ;return yearly exit amount of #1 ;return yearly interchange amount of #1 ;return #2 ,  #3 ; return #4, #5, #6 ; return #7 ordered by #8","[""SELECT['stations']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['locations of #REF', '#1']"", ""PROJECT['yearly entry amounts of #REF', '#1']"", ""PROJECT['yearly exit amount of #REF', '#1']"", ""PROJECT['yearly interchange amount of #REF', '#1']"", ""UNION['#2', '#3']"", ""UNION['#4', '#5', '#6']"", ""SORT['#7', '#8']""]","['select', 'project', 'project', 'project', 'project', 'project', 'union', 'union', 'sort']",train
SPIDER_train_6622,List all vehicle id,return vehicles ;return ids of  #1,"[""SELECT['vehicles']"", ""PROJECT['ids of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_6623,What are the ids of all vehicles?,return vehicles ;return ids of  #1,"[""SELECT['vehicles']"", ""PROJECT['ids of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_6624,How many vehicle in total?,return vehicles ;return number of  #1,"[""SELECT['vehicles']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_6625,How many vehicles exist?,return vehicles ;return number of  #1,"[""SELECT['vehicles']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_6626,Show the detail of vehicle with id 1.,return vehicles ;return id of  #1 ;return #1 where #2  is 1 ;return detail of  #3,"[""SELECT['vehicles']"", ""PROJECT['id of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 1']"", ""PROJECT['detail of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6627,What are the details of the car with id 1?,return cars ;return #1 with id 1 ;return details of  #2,"[""SELECT['cars']"", ""FILTER['#1', 'with id 1']"", ""PROJECT['details of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6628,List the first name middle name and last name of all staff.,return staff ;return first name   of  #1 ;return middle name   of  #1 ;return last name   of  #1 ;return #2 #3 #4,"[""SELECT['staff']"", ""PROJECT['first name of #REF', '#1']"", ""PROJECT['middle name of #REF', '#1']"", ""PROJECT['last name of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_6629,"What are the first, middle, and last names of all staff?","return staff ;return first names of  #1 ;return middle names of  #1 ;return last names of  #1 ;return #2 ,  #3 ,   #4","[""SELECT['staff']"", ""PROJECT['first names of #REF', '#1']"", ""PROJECT['middle names of #REF', '#1']"", ""PROJECT['last names of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_663,Show the names of editors that are on at least two journal committees.,"return editors ;return journal committees of #1 ;return the  number of  #2 ;return #1 where #3 is two ;return #1 where #3 is higher than two ;return #4 ,  #5 ;return the  names of #6","[""SELECT['editors']"", ""PROJECT['journal committees of #REF', '#1']"", ""AGGREGATE['count', '#2']"", ""COMPARATIVE['#1', '#3', 'is two']"", ""COMPARATIVE['#1', '#3', 'is higher than two']"", ""UNION['#4', '#5']"", ""PROJECT['the names of #REF', '#6']""]","['select', 'project', 'aggregate', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_6630,What is the birthday of the staff member with first name as Janessa and last name as Sawayn?,return staff members ;return first names of  #1 ;return #1 where #2 is  Janessa ;return last names of  #1 ;return #1 where #4 is  Sawayn ;return #1 of  both #3 and  #5 ;return birthday of  #6,"[""SELECT['staff members']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Janessa']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is Sawayn']"", ""INTERSECTION['#1', '#3', '#5']"", ""PROJECT['birthday of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'comparative', 'intersection', 'project']",train
SPIDER_train_6631,What is the date of birth for the staff member named Janessa Sawayn?,return staff members ;return #1 named Janessa Sawayn ;return date of birth of  #2,"[""SELECT['staff members']"", ""FILTER['#1', 'named Janessa Sawayn']"", ""PROJECT['date of birth of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6632,When did the staff member with first name as Janessa and last name as Sawayn join the company?,return staff member ;return first name  of  #1 ;return #1 where #2 is  Janessa ;return last name  of  #1 ;return #1 where #4 is  Sawayn ;return #1 in both #3 and  #5 ;return When #6 join company,"[""SELECT['staff member']"", ""PROJECT['first name of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Janessa']"", ""PROJECT['last name of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is Sawayn']"", ""INTERSECTION['#1', '#3', '#5']"", ""PROJECT['When #REF join company', '#6']""]","['select', 'project', 'comparative', 'project', 'comparative', 'intersection', 'project']",train
SPIDER_train_6633,When did the staff member named Janessa Sawayn join the company?,return staff members ;return #1 named Janessa Sawayn ;return when  #2 join the  company,"[""SELECT['staff members']"", ""FILTER['#1', 'named Janessa Sawayn']"", ""PROJECT['when #REF join the company', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6634,When did the staff member with first name as Janessa and last name as Sawayn leave the company?,return staff members ;return first names of #1 ;return #1 where #2 is  Janessa ;return last names of #1 ;return #1 where #4 is  Sawayn ;return #1 of both #3 and #5 ;return when  did  #6 leave the  company,"[""SELECT['staff members']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Janessa']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is Sawayn']"", ""INTERSECTION['#1', '#3', '#5']"", ""PROJECT['when did #REF leave the company', '#6']""]","['select', 'project', 'comparative', 'project', 'comparative', 'intersection', 'project']",train
SPIDER_train_6635,When did the staff member Janessa Sawayn leave the company?,return the  staff member Janessa Sawayn ;return when  #1 leave the  company,"[""SELECT['the staff member Janessa Sawayn']"", ""PROJECT['when #REF leave the company', '#1']""]","['select', 'project']",train
SPIDER_train_6636,How many staff have the first name Ludie?,return staff ;return first names of  #1 ;return #1 where  #2 is  Ludie ;return number of #3,"[""SELECT['staff']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Ludie']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_6637,How many employees have a first name of Ludie?,return employees ;return first names of #1 ;return #1 where #2 is  Ludie ;return number of  #3,"[""SELECT['employees']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Ludie']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_6638,What is the nickname of staff with first name as Janessa and last name as Sawayn?,return staff ;return first names of #1 ;return #1 where #2 is  Janessa ;return last names of #1 ;return #1 where #4 is  Sawayn ;return nickname of #1 ;return #6 of both #3 and #5,"[""SELECT['staff']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Janessa']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is Sawayn']"", ""PROJECT['nickname of #REF', '#1']"", ""INTERSECTION['#6', '#3', '#5']""]","['select', 'project', 'comparative', 'project', 'comparative', 'project', 'intersection']",train
SPIDER_train_6639,What is the nickname of the employee named Janessa Sawayn?,return employees ;return #1 named Janessa Sawayn ;return nickname of #2,"[""SELECT['employees']"", ""FILTER['#1', 'named Janessa Sawayn']"", ""PROJECT['nickname of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_664,List the names of editors that are not on any journal committee.,return editors ;return #1 who are not on any  journal committee ;return names of #2,"[""SELECT['editors']"", ""FILTER['#1', 'who are not on any journal committee']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6640,How many staff in total?,return staff ;return number of  #1,"[""SELECT['staff']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_6641,How many employees are there?,return employees ;return number of #1,"[""SELECT['employees']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_6642,Which city does staff with first name as Janessa and last name as Sawayn live?,return staff ;return first names of  #1 ;return #1 where #2 is  Janessa ;return last names of  #1 ;return #1 where #4 is  Sawayn ;return #1 of  both #3 and  #5 ;return city of  #6,"[""SELECT['staff']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Janessa']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is Sawayn']"", ""INTERSECTION['#1', '#3', '#5']"", ""PROJECT['city of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'comparative', 'intersection', 'project']",train
SPIDER_train_6643,In what city does Janessa Sawayn live?,return Janessa Sawayn ;return city that  #1 lives in,"[""SELECT['Janessa Sawayn']"", ""PROJECT['city that #REF lives in', '#1']""]","['select', 'project']",train
SPIDER_train_6644,Which country and state does staff with first name as Janessa and last name as Sawayn lived?,"return staff ;return #1 with  first name Janessa ;return #2 with  last name Sawayn ;return the  state where #3 lived ;return the  country of #4 ;return #5 ,  #4","[""SELECT['staff']"", ""FILTER['#1', 'with first name Janessa']"", ""FILTER['#2', 'with last name Sawayn']"", ""PROJECT['the state where #REF lived', '#3']"", ""PROJECT['the country of #REF', '#4']"", ""UNION['#5', '#4']""]","['select', 'filter', 'filter', 'project', 'project', 'union']",train
SPIDER_train_6645,In which country and state does Janessa Sawayn live?,"return Janessa Sawayn ;return country of  #1 ;return state of  #1 ;return #2 ,  #3","[""SELECT['Janessa Sawayn']"", ""PROJECT['country of #REF', '#1']"", ""PROJECT['state of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_6646,How long is the total lesson time took by customer with first name as Rylan and last name as Goodwin?,return customers ;return first names of #1 ;return last names of #1 ;return #1 where #2 is  Rylan ;return #1 where #3 is  Goodwin ;return #1 in both #4 and #5 ;return lessons that  #6 took ;return times of #7 ;return sum of #8,"[""SELECT['customers']"", ""PROJECT['first names of #REF', '#1']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Rylan']"", ""COMPARATIVE['#1', '#3', 'is Goodwin']"", ""INTERSECTION['#1', '#4', '#5']"", ""PROJECT['lessons that #REF took', '#6']"", ""PROJECT['times of #REF', '#7']"", ""AGGREGATE['sum', '#8']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection', 'project', 'project', 'aggregate']",train
SPIDER_train_6647,How long is the total lesson time took by the customer named Rylan Goodwin?,return customers ;return lesson times of  #1 ;return #2 where  #1 is  Rylan Goodwin ;return sum of  #3,"[""SELECT['customers']"", ""PROJECT['lesson times of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Rylan Goodwin']"", ""AGGREGATE['sum', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_6648,What is the zip code of staff with first name as Janessa and last name as Sawayn lived?,return staff ;return #1 with first name  of  Janessa ;return #2 with last name  of  Sawayn ;return zip code that  #3 lived,"[""SELECT['staff']"", ""FILTER['#1', 'with first name of Janessa']"", ""FILTER['#2', 'with last name of Sawayn']"", ""PROJECT['zip code that #REF lived', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_6649,What is the zip code of the hosue of the employee named Janessa Sawayn?,return employees ;return #1 named Janessa Sawayn ;return hosue of  #2 ;return zip code of  #3,"[""SELECT['employees']"", ""FILTER['#1', 'named Janessa Sawayn']"", ""PROJECT['hosue of #REF', '#2']"", ""PROJECT['zip code of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_665,"List the date, theme and sales of the journal which did not have any of the listed editors serving on committee.","return journals ;return listed editors of #1 ;return #2 that  are serving on committee ;return number of  #3 for each #1 ;return #1 where #4 is  at least one ;return #1 besides #5 ;return the   date of #6 ;return the   theme of #6 ;return the   sales of #6 ;return #7 ,  #8 ,   #9","[""SELECT['journals']"", ""PROJECT['listed editors of #REF', '#1']"", ""FILTER['#2', 'that are serving on committee']"", ""GROUP['count', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is at least one']"", ""DISCARD['#1', '#5']"", ""PROJECT['the date of #REF', '#6']"", ""PROJECT['the theme of #REF', '#6']"", ""PROJECT['the sales of #REF', '#6']"", ""UNION['#7', '#8', '#9']""]","['select', 'project', 'filter', 'group', 'comparative', 'discard', 'project', 'project', 'project', 'union']",train
SPIDER_train_6650,How many staff live in state Georgia?,return staff ;return #1 that  live in Georgia ;return number of  #2,"[""SELECT['staff']"", ""FILTER['#1', 'that live in Georgia']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_6651,How many employees live in Georgia?,return employees ;return #1 that  live in Georgia ;return number of  #2,"[""SELECT['employees']"", ""FILTER['#1', 'that live in Georgia']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_6652,Find out the first name and last name of staff lived in city Damianfort.,return staff ;return #1 lived in city Damianfort ;return first name  and last name of  #2,"[""SELECT['staff']"", ""FILTER['#1', 'lived in city Damianfort']"", ""PROJECT['first name and last name of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6653,What is the first and last name of all employees who live in the city Damianfort?,"return employees ;return cities #1 live in ;return #1 where #2 is  Damianfort ;return first names of  #3 ;return last names of  #3 ;return #4 ,  #5","[""SELECT['employees']"", ""PROJECT['cities #REF live in', '#1']"", ""COMPARATIVE['#1', '#2', 'is Damianfort']"", ""PROJECT['first names of #REF', '#3']"", ""PROJECT['last names of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_6654,Which city lives most of staffs? List the city name and number of staffs.,"return staffs  ;return city  that #1 lives ;return number of  #1 for each #2 ;return #2 where #3 is highest ;return highest of #3 ;return #4 ,  #5","[""SELECT['staffs']"", ""PROJECT['city that #REF lives', '#1']"", ""GROUP['count', '#1', '#2']"", ""SUPERLATIVE['max', '#2', '#3']"", ""AGGREGATE['max', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'group', 'superlative', 'aggregate', 'union']",train
SPIDER_train_6655,In which city do the most employees live and how many of them live there?,return cities ;return employees that  live  in #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is highest ;return employees that  live  in #4 ;return number of  #5,"[""SELECT['cities']"", ""PROJECT['employees that live in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['employees that live in #REF', '#4']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'group', 'superlative', 'project', 'aggregate']",train
SPIDER_train_6656,List the states which have between 2 to 4 staffs living there.,return states ;return staff living in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least 2 ;return #1 where #3 is  at most 4 ;return #1 of  both #4 and  #5,"[""SELECT['states']"", ""PROJECT['staff living in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 2']"", ""COMPARATIVE['#1', '#3', 'is at most 4']"", ""INTERSECTION['#1', '#4', '#5']""]","['select', 'project', 'group', 'comparative', 'comparative', 'intersection']",train
SPIDER_train_6657,What are the names of the states that have 2 to 4 employees living there?,return states ;return employees living in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  2 to 4 ;return names of  #4,"[""SELECT['states']"", ""PROJECT['employees living in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is 2 to 4']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_6658,List the first name and last name of all customers.,"return customers ;return first names of  #1 ;return last names of  #1 ;return #2 ,  #3","[""SELECT['customers']"", ""PROJECT['first names of #REF', '#1']"", ""PROJECT['last names of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_6659,What are the first and last names for all customers?,"return customers ;return first names of  #1 ;return last names of  #1 ;return #2 ,  #3","[""SELECT['customers']"", ""PROJECT['first names of #REF', '#1']"", ""PROJECT['last names of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_666,What is the average sales of the journals that have an editor whose work type is 'Photo'?,return editors ;return #1 whose work type is  'Photo ;return the  journals of  #2 ;return sales of  #3 ;return the  average of  #4,"[""SELECT['editors']"", ""FILTER['#1', 'whose work type is Photo']"", ""PROJECT['the journals of #REF', '#2']"", ""PROJECT['sales of #REF', '#3']"", ""AGGREGATE['avg', '#4']""]","['select', 'filter', 'project', 'project', 'aggregate']",train
SPIDER_train_6660,List email address and birthday of customer whose first name as Carole.,"return customers ;return first names of  #1 ;return #1 where  #2 is Carole ;return email address of  #3 ;return birthday of  #3 ;return #4 ,  #5","[""SELECT['customers']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Carole']"", ""PROJECT['email address of #REF', '#3']"", ""PROJECT['birthday of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_6661,What are the email addresses and date of births for all customers who have a first name of Carole?,"return customers ;return first names of  #1 ;return #1 where #2 is  Carole ;return email addresses of  #3 ;return dates of  birth of #3 ;return #4 ,  #5","[""SELECT['customers']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Carole']"", ""PROJECT['email addresses of #REF', '#3']"", ""PROJECT['dates of birth of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_6662,List phone number and email address of customer with more than 2000 outstanding balance.,"return customers ;return outstanding balance of #1 ;return #1 where #2 is higher than 2000 ;return phone number of  of #3 ;return email address of #3 ;return #4 ,  #5","[""SELECT['customers']"", ""PROJECT['outstanding balance of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 2000']"", ""AGGREGATE['count', '#3']"", ""PROJECT['email address of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'aggregate', 'project', 'union']",train
SPIDER_train_6663,What are the phone numbers and email addresses of all customers who have an outstanding balance of more than 2000?,"return customers ;return outstanding balances of  #1 ;return #1 where #2 is  higher than 2000 ;return phone numbers of  #3 ;return email addresses of  #3 ;return #4 ,  #5","[""SELECT['customers']"", ""PROJECT['outstanding balances of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is higher than 2000']"", ""PROJECT['phone numbers of #REF', '#3']"", ""PROJECT['email addresses of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_6664,"What is the status code, mobile phone number and email address of customer with last name as Kohler or first name as Marina?","return customer ;return #1 with last name  Kohler ;return #1 with first name  Marina ;return #2 or  #3 ;return status codes of  #4 ;return mobile phone number of  #4 ;return email address of  #4 ;return #5 ,  #6 and  #7","[""SELECT['customer']"", ""FILTER['#1', 'with last name Kohler']"", ""FILTER['#1', 'with first name Marina']"", ""UNION['#2', '#3']"", ""PROJECT['status codes of #REF', '#4']"", ""AGGREGATE['count', '#4']"", ""PROJECT['email address of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'filter', 'filter', 'union', 'project', 'aggregate', 'project', 'union']",train
SPIDER_train_6665,"What is the status code, phone number, and email address of the customer whose last name is Kohler or whose first name is Marina?","return customers ;return last name  of #1 ;return first name  of #1 ;return #1 where #2 is Kohler ;return #1 where #3 is Marina ;return #4 ,  #5 ;return status codes of #6 ;return phone number of  of #6 ;return email address of #6 ;return #7 ,  #8 ,   #9","[""SELECT['customers']"", ""PROJECT['last name of #REF', '#1']"", ""PROJECT['first name of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Kohler']"", ""COMPARATIVE['#1', '#3', 'is Marina']"", ""UNION['#4', '#5']"", ""PROJECT['status codes of #REF', '#6']"", ""AGGREGATE['count', '#6']"", ""PROJECT['email address of #REF', '#6']"", ""UNION['#7', '#8', '#9']""]","['select', 'project', 'project', 'comparative', 'comparative', 'union', 'project', 'aggregate', 'project', 'union']",train
SPIDER_train_6666,When are the birthdays of customer who are classified as 'Good Customer' status?,return customers ;return statuses #1 are classified as ;return #1 where #2 is  'Good Customer ;return birthdays of #3,"[""SELECT['customers']"", ""PROJECT['statuses #REF are classified as', '#1']"", ""COMPARATIVE['#1', '#2', 'is Good Customer']"", ""PROJECT['birthdays of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6667,What is the date of birth of every customer whose status code is 'Good Customer'?,return customers ;return status codes of #1 ;return #1 where #2 is 'Good Customer ;return date of birth of  #3,"[""SELECT['customers']"", ""PROJECT['status codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Good Customer']"", ""PROJECT['date of birth of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6668,When did customer with first name as Carole and last name as Bernhard became a customer?,return customers ;return #1 with  first name Carole ;return #2 with  last name Bernhard ;return when  #3 became a customer,"[""SELECT['customers']"", ""FILTER['#1', 'with first name Carole']"", ""FILTER['#2', 'with last name Bernhard']"", ""PROJECT['when #REF became a customer', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_6669,When did Carole Bernhard first become a customer?,return Carole Bernhard ;return when  did  #1 first become a customer,"[""SELECT['Carole Bernhard']"", ""PROJECT['when did #REF first become a customer', '#1']""]","['select', 'project']",train
SPIDER_train_667,How many accounts do we have?,return accounts ;return number of  #1,"[""SELECT['accounts']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_6670,How many customers in total?,return customers ;return number of  #1,"[""SELECT['customers']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_6672,List all customer status codes and the number of customers having each status code.,"return customer status  codes ;return customers with  #1 ;return number of  #2 for each  #1 ;return #1 ,  #3","[""SELECT['customer status codes']"", ""PROJECT['customers with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_6673,"For each customer status code, how many customers are classified that way?",return customer status codes ;return customers of  #1 ;return number of #2 for each #1,"[""SELECT['customer status codes']"", ""PROJECT['customers of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_6674,Which customer status code has least number of customers?,return customer status codes ;return customers of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  lowest,"[""SELECT['customer status codes']"", ""PROJECT['customers of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_6675,What is the status code with the least number of customers?,return status codes ;return the  number of  customers for each  #1 ;return #1 where #2 is  the  least,"[""SELECT['status codes']"", ""PROJECT['customers', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the least']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_6676,How many lessons taken by customer with first name as Rylan and last name as Goodwin were completed?,return customers ;return first names of  #1 ;return #1 where  #2 is Rylan ;return last names of  #1 ;return #1 where  #4 is Goodwin ;return #1 of  both #3 and #5 ;return lessons taken by #6 ;return #7 that  were completed ;return number of  #8,"[""SELECT['customers']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Rylan']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is Goodwin']"", ""INTERSECTION['#1', '#3', '#5']"", ""PROJECT['lessons taken by #REF', '#6']"", ""FILTER['#7', 'that were completed']"", ""AGGREGATE['count', '#8']""]","['select', 'project', 'comparative', 'project', 'comparative', 'intersection', 'project', 'filter', 'aggregate']",train
SPIDER_train_6677,How many lessons did the customer Ryan Goodwin complete?,return customers ;return lessons complete of  #1 ;return #2 where  #1 is  Ryan Goodwin ;return number of #3,"[""SELECT['customers']"", ""PROJECT['lessons complete of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Ryan Goodwin']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_6678,"What is maximum, minimum and average amount of outstanding of customer?","return customers ;return amounts outstanding of #1 ;return maximum of #2 ;return minimum of #2 ;return average of #2 ;return #3 ,  #4 ,   #5","[""SELECT['customers']"", ""PROJECT['amounts outstanding of #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""AGGREGATE['min', '#2']"", ""AGGREGATE['avg', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'project', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_6679,"What is the maximum, minimum, and average amount of money outsanding for all customers?","return customers ;return money outsanding of #1 ;return amounts of #2 ;return maximum of #3 ;return minimum of #3 ;return average of #3 ;return #4 , #5 ,  #6","[""SELECT['customers']"", ""PROJECT['money outsanding of #REF', '#1']"", ""PROJECT['amounts of #REF', '#2']"", ""AGGREGATE['max', '#3']"", ""AGGREGATE['min', '#3']"", ""AGGREGATE['avg', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'project', 'project', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_6680,List the first name and last name of customers have the amount of outstanding between 1000 and 3000.,"return customers ;return amounts outstanding of  #1 ;return #1 where  #2 is at least 1000 ;return #1 where  #2 is at most 3000 ;return #1 of  both #3 and #4 ;return first names of  #5 ;return last names of  #5 ;return #6 ,  #7","[""SELECT['customers']"", ""PROJECT['amounts outstanding of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least 1000']"", ""COMPARATIVE['#1', '#2', 'is at most 3000']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['first names of #REF', '#5']"", ""PROJECT['last names of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_6681,What are the first and last names of all customers with between 1000 and 3000 dollars outstanding?,"return customers ;return dollars outstanding of  #1 ;return #1 where #2 is  at least 1000 ;return #1 where #2 is  at most 3000 ;return #1 of  both #3 and  #4 ;return first names of  #5 ;return last names of  #5 ;return #6 ,  #7","[""SELECT['customers']"", ""PROJECT['dollars outstanding of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least 1000']"", ""COMPARATIVE['#1', '#2', 'is at most 3000']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['first names of #REF', '#5']"", ""PROJECT['last names of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_6682,List first name and last name of customers lived in city Lockmanfurt.,"return customers ;return cities #1 lived in ;return #1 where  #2 is Lockmanfurt ;return first names of  #3 ;return last names of  #3 ;return #4 ,  #5","[""SELECT['customers']"", ""PROJECT['cities #REF lived in', '#1']"", ""COMPARATIVE['#1', '#2', 'is Lockmanfurt']"", ""PROJECT['first names of #REF', '#3']"", ""PROJECT['last names of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_6683,What are the first and last names of all customers who lived in Lockmanfurt?,"return Lockmanfurt ;return customers who  lived in #1 ;return first names of #2 ;return last names of #2 ;return #3 , #4","[""SELECT['Lockmanfurt']"", ""PROJECT['customers who lived in #REF', '#1']"", ""PROJECT['first names of #REF', '#2']"", ""PROJECT['last names of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_6684,Which country does customer with first name as Carole and last name as Bernhard lived in?,return customers ;return first names of #1 ;return #1 where #2 is  Carole ;return last names of #1 ;return #1 where #4 is  Bernhard ;return country of #1 ;return #6 of both #3 and #5,"[""SELECT['customers']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Carole']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is Bernhard']"", ""PROJECT['country of #REF', '#1']"", ""INTERSECTION['#6', '#3', '#5']""]","['select', 'project', 'comparative', 'project', 'comparative', 'project', 'intersection']",train
SPIDER_train_6685,What is the country in which the customer Carole Bernhard lived?,return the  customer Carole Bernhard ;return the  country that  #1 lived in,"[""SELECT['the customer Carole Bernhard']"", ""PROJECT['the country that #REF lived in', '#1']""]","['select', 'project']",train
SPIDER_train_6686,What is zip code of customer with first name as Carole and last name as Bernhard?,return customers ;return first names of  #1 ;return #1 where #2 is  Carole ;return last names of  #1 ;return #1 where #4 is  Bernhard ;return #1 of  both #3 and  #5 ;return zip code of  #6,"[""SELECT['customers']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Carole']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is Bernhard']"", ""INTERSECTION['#1', '#3', '#5']"", ""PROJECT['zip code of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'comparative', 'intersection', 'project']",train
SPIDER_train_6687,What is the zip code of the customer Carole Bernhard?,return customers ;return #1 that  is  Carole Bernhard ;return zip code of #2,"[""SELECT['customers']"", ""FILTER['#1', 'that is Carole Bernhard']"", ""PROJECT['zip code of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6688,Which city does has most number of customers?,return cities ;return customers of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['cities']"", ""PROJECT['customers of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_6689,What is the city with the most customers?,return cities ;return customers of #1 ;return number of #2 for each #1 ;return #1 where #3 is  the highest,"[""SELECT['cities']"", ""PROJECT['customers of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_669,"Show ids, customer ids, names for all accounts.","return accounts ;return ids  of #1 ;return customer ids  of #1 ;return names of #1 ;return #2 ,  #3 ,   #4","[""SELECT['accounts']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['customer ids of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_6690,How much in total does customer with first name as Carole and last name as Bernhard paid?,return customers ;return #1 with  first name Carole ;return #1 with  last name Bernhard ;return #1 in both #2 and #3 ;return how much #4 has paid ;return the  sum of #5,"[""SELECT['customers']"", ""FILTER['#1', 'with first name Carole']"", ""FILTER['#1', 'with last name Bernhard']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['how much #REF has paid', '#4']"", ""AGGREGATE['sum', '#5']""]","['select', 'filter', 'filter', 'intersection', 'project', 'aggregate']",train
SPIDER_train_6691,What is the total amount of moeny paid by the customer Carole Bernhard?,return customers ;return #1 that  is  Carole Bernhard ;return amount paid by #2 ;return sum of  #3,"[""SELECT['customers']"", ""FILTER['#1', 'that is Carole Bernhard']"", ""PROJECT['amount paid by #REF', '#2']"", ""AGGREGATE['sum', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_6692,List the number of customers that did not have any payment history.,return customers ;return #1 that have payment history ;return #1 besides  #2 ;return number of  #3,"[""SELECT['customers']"", ""FILTER['#1', 'that have payment history']"", ""DISCARD['#1', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'discard', 'aggregate']",train
SPIDER_train_6693,How many customers have no payment histories?,return customers ;return #1 with  payment histories ;return #1 besides #2 ;return number of #3,"[""SELECT['customers']"", ""FILTER['#1', 'with payment histories']"", ""DISCARD['#1', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'discard', 'aggregate']",train
SPIDER_train_6694,List first name and last name of customers that have more than 2 payments.,"return customers ;return payments of  #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is higher than 2 ;return first names of  #4 ;return last names of  #4 ;return #5 ,  #6","[""SELECT['customers']"", ""PROJECT['payments of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 2']"", ""PROJECT['first names of #REF', '#4']"", ""PROJECT['last names of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_6695,What are the first and last names of all customers with more than 2 payments?,"return customers ;return payments of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than 2 ;return first names of  #4 ;return last names of  #4 ;return #5 ,  #6","[""SELECT['customers']"", ""PROJECT['payments of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 2']"", ""PROJECT['first names of #REF', '#4']"", ""PROJECT['last names of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_6696,List all payment methods and number of payments using each payment methods.,"return payment  methods  ;return payments using #1 ;return number of  #2 for each #1 ;return #1 ,  #3","[""SELECT['payment methods']"", ""PROJECT['payments using #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_6697,"For each payment method, how many payments were made?",return payment methods ;return payments of  #1 ;return number of #2 for each #1,"[""SELECT['payment methods']"", ""PROJECT['payments of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_6698,How many lessons were in cancelled state?,return lessons ;return states of  #1 ;return #1 where  #2 is  cancelled ;return number of #3,"[""SELECT['lessons']"", ""PROJECT['states of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is cancelled']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_6699,How many lessons have been cancelled?,return lessons ;return #1 which  have  been cancelled ;return number of #2,"[""SELECT['lessons']"", ""FILTER['#1', 'which have been cancelled']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_67,What is detail of the student who most recently registered course?,return student ;return when  #1 registered course ;return #1 where #2 is  most recently ;return detail of  #3,"[""SELECT['student']"", ""PROJECT['when #REF registered course', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['detail of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_670,"What are the account ids, customer ids, and account names for all the accounts?","return accounts ;return account  ids of  #1 ;return customer ids of  #1 ;return account  names of  #1 ;return #2 ,  #3 ,   #4","[""SELECT['accounts']"", ""PROJECT['account ids of #REF', '#1']"", ""PROJECT['customer ids of #REF', '#1']"", ""PROJECT['account names of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_6700,"List lesson id of all lessons taught by staff with first name as Janessa, last name as Sawayn and nickname containing letter 's'.",return staff ;return first name  of #1 ;return #1 where #2 is Janessa ;return last name  of #3 ;return #3 where #4 is Sawayn ;return nickname of #5 ;return #5 where #6 contain letter 's ;return lessons taught by #7 ;return lesson id of #8,"[""SELECT['staff']"", ""PROJECT['first name of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Janessa']"", ""PROJECT['last name of #REF', '#3']"", ""COMPARATIVE['#3', '#4', 'is Sawayn']"", ""PROJECT['nickname of #REF', '#5']"", ""COMPARATIVE['#5', '#6', 'contain letter s']"", ""PROJECT['lessons taught by #REF', '#7']"", ""PROJECT['lesson id of #REF', '#8']""]","['select', 'project', 'comparative', 'project', 'comparative', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_6701,What are the the lesson ids of all staff taught by Janessa Sawayn whose nickname has the letter s?,return staff ;return #1 taught by Janessa Sawayn ;return nicknames of  #2 ;return #2 where #3 has  the  letter s ;return lesson ids of  #4,"[""SELECT['staff']"", ""FILTER['#1', 'taught by Janessa Sawayn']"", ""PROJECT['nicknames of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'has the letter s']"", ""PROJECT['lesson ids of #REF', '#4']""]","['select', 'filter', 'project', 'comparative', 'project']",train
SPIDER_train_6702,How many lessons taught by staff whose first name has letter 'a' in it?,return staff ;return first names of  #1 ;return #1 where  #2 has 'a ;return lessons taught by #3 ;return number of  #4,"[""SELECT['staff']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'has a']"", ""PROJECT['lessons taught by #REF', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_6703,How many lessons were taught by a staff member whose first name has the letter 'a' in it?,return staff members ;return first names of  #1 ;return #1 where  #2 has the  letter 'a ;return lessons taught by #3 ;return number of  #4,"[""SELECT['staff members']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'has the letter a']"", ""PROJECT['lessons taught by #REF', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_6704,How long is the total lesson time taught by staff with first name as Janessa and last name as Sawayn?,return staff ;return first name  of  #1 ;return last name  of  #1 ;return #1 where  #2 is  Janessa ;return #1 where  #3 is  Sawayn ;return #1 of  both #4 and #5 ;return lesson times of  #6 ;return sum of  #7,"[""SELECT['staff']"", ""PROJECT['first name of #REF', '#1']"", ""PROJECT['last name of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Janessa']"", ""COMPARATIVE['#1', '#3', 'is Sawayn']"", ""INTERSECTION['#1', '#4', '#5']"", ""PROJECT['lesson times of #REF', '#6']"", ""AGGREGATE['sum', '#7']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection', 'project', 'aggregate']",train
SPIDER_train_6705,What is the total time for all lessons taught by Janessa Sawayn?,return lessons ;return #1 taught by Janessa Sawayn ;return times of #2 ;return the  sum of #3,"[""SELECT['lessons']"", ""FILTER['#1', 'taught by Janessa Sawayn']"", ""PROJECT['times of #REF', '#2']"", ""AGGREGATE['sum', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_6706,What is average lesson price taught by staff with first name as Janessa and last name as Sawayn?,return staff ;return first names of  #1 ;return #1 where #2 is  Janessa ;return last names of  #1 ;return #1 where #4 is  Sawayn ;return #1 of  both #3 and  #5 ;return lesson prices of  #6 ;return average of  #7,"[""SELECT['staff']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Janessa']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is Sawayn']"", ""INTERSECTION['#1', '#3', '#5']"", ""PROJECT['lesson prices of #REF', '#6']"", ""AGGREGATE['avg', '#7']""]","['select', 'project', 'comparative', 'project', 'comparative', 'intersection', 'project', 'aggregate']",train
SPIDER_train_6707,What is the average price for a lesson taught by Janessa Sawayn?,return lessons ;return #1 taught by Janessa Sawayn ;return prices of  #2 ;return average of  #3,"[""SELECT['lessons']"", ""FILTER['#1', 'taught by Janessa Sawayn']"", ""PROJECT['prices of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_6708,How many lesson does customer with first name Ray took?,return customers ;return first names of  #1 ;return #1 where  #2 is  Ray ;return lessons of  #3 ;return number of #4,"[""SELECT['customers']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Ray']"", ""PROJECT['lessons of #REF', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_6709,How many lessons did the customer with the first name Ray take?,return customers ;return first names of #1 ;return #1 where #2 is  Ray ;return lessons that  #3 take ;return number of  #4,"[""SELECT['customers']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Ray']"", ""PROJECT['lessons that #REF take', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_671,Show other account details for account with name 338.,return accounts ;return names of  #1 ;return #1 where #2 is  338 ;return other account  details of  #3,"[""SELECT['accounts']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 338']"", ""PROJECT['other account details of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6710,Which last names are both used by customers and by staff?,return customers ;return last names of #1 ;return staff ;return last names of #3 ;return last names ;return #5 in both #2 and #4,"[""SELECT['customers']"", ""PROJECT['last names of #REF', '#1']"", ""SELECT['staff']"", ""PROJECT['last names of #REF', '#3']"", ""SELECT['last names']"", ""INTERSECTION['#5', '#2', '#4']""]","['select', 'project', 'select', 'project', 'select', 'intersection']",train
SPIDER_train_6711,What are the last names that are used by customers and staff?,"return customers ;return last names of  #1 ;return staff ;return last names of  #3 ;return #2 ,  #4","[""SELECT['customers']"", ""PROJECT['last names of #REF', '#1']"", ""SELECT['staff']"", ""PROJECT['last names of #REF', '#3']"", ""UNION['#2', '#4']""]","['select', 'project', 'select', 'project', 'union']",train
SPIDER_train_6712,What is the first name of the staff who did not give any lesson?,return staff ;return #1 who  did give lessons ;return #1 besides  #2 ;return the  first name of  #3,"[""SELECT['staff']"", ""FILTER['#1', 'who did give lessons']"", ""DISCARD['#1', '#2']"", ""PROJECT['the first name of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_6713,What is the first name of all employees who do not give any lessons?,return employees ;return #1 who  do not  give any lessons ;return first name of  #2,"[""SELECT['employees']"", ""FILTER['#1', 'who do not give any lessons']"", ""PROJECT['first name of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6714,What is the id and detail of the vehicle used in lessons for most of the times?,"return vehicles ;return times used in lessons of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest ;return id of #4 ;return detail of #4 ;return #5 ,  #6","[""SELECT['vehicles']"", ""PROJECT['times used in lessons of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['id of #REF', '#4']"", ""PROJECT['detail of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_6715,How many faculty do we have?,return faculty ;return number of #1,"[""SELECT['faculty']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_6716,What is the total number of faculty members?,return faculty members ;return number of  #1,"[""SELECT['faculty members']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_6717,What ranks do we have for faculty?,return faculty ;return ranks for #1,"[""SELECT['faculty']"", ""PROJECT['ranks for #REF', '#1']""]","['select', 'project']",train
SPIDER_train_6718,Find the list of distinct ranks for faculty.,return faculty ;return ranks of  #1 ;return distinct #2,"[""SELECT['faculty']"", ""PROJECT['ranks of #REF', '#1']"", ""PROJECT['distinct #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_6719,Show all the distinct buildings that have faculty rooms.,return buildings ;return rooms of  #1 ;return #1 where #2 is  faculty room ;return distinct #3,"[""SELECT['buildings']"", ""PROJECT['rooms of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is faculty room']"", ""PROJECT['distinct #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_672,What are the other account details for the account with the name 338?,return accounts ;return #1 with the  name 338 ;return other account  details for #2,"[""SELECT['accounts']"", ""FILTER['#1', 'with the name 338']"", ""PROJECT['other account details for #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6720,What buildings have faculty offices?,return buildings ;return #1 that  have  faculty offices,"[""SELECT['buildings']"", ""FILTER['#1', 'that have faculty offices']""]","['select', 'filter']",train
SPIDER_train_6721,"Show the rank, first name, and last name for all the faculty.","return faculty ;return ranks of  #1 ;return first names of  #1 ;return last names of  #1 ;return #2 ,  #3 ,   #4","[""SELECT['faculty']"", ""PROJECT['ranks of #REF', '#1']"", ""PROJECT['first names of #REF', '#1']"", ""PROJECT['last names of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_6722,"What are the rank, first name, and last name of the faculty members?","return faculty members ;return ranks of  #1 ;return first names of  #1 ;return last names of  #1 ;return #2 ,  #3 ,   #4","[""SELECT['faculty members']"", ""PROJECT['ranks of #REF', '#1']"", ""PROJECT['first names of #REF', '#1']"", ""PROJECT['last names of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_6723,"Show the first name, last name, and phone number for all female faculty members.","return faculty members ;return #1 that are female ;return first names of #2 ;return last names of #2 ;return phone numbers of #2 ;return #3 ,  #4 ,   #5","[""SELECT['faculty members']"", ""FILTER['#1', 'that are female']"", ""PROJECT['first names of #REF', '#2']"", ""PROJECT['last names of #REF', '#2']"", ""PROJECT['phone numbers of #REF', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_6724,"What are the first name, last name, and phone number of all the female faculty members?","return faculty members ;return #1 that  are  female ;return first names of  #2 ;return last names of  #2 ;return phone numbers of  #3 ;return #3 ,  #4 ,   #5","[""SELECT['faculty members']"", ""FILTER['#1', 'that are female']"", ""PROJECT['first names of #REF', '#2']"", ""PROJECT['last names of #REF', '#2']"", ""PROJECT['phone numbers of #REF', '#3']"", ""UNION['#3', '#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_6725,Show ids for all the male faculty.,return faculty ;return #1 that  are  males ;return ids of  #2,"[""SELECT['faculty']"", ""FILTER['#1', 'that are males']"", ""PROJECT['ids of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6726,What are the faculty ids of all the male faculty members?,return faculty  ;return members of  #1 ;return male #2 ;return faculty  ids of  #3,"[""SELECT['faculty']"", ""PROJECT['members of #REF', '#1']"", ""PROJECT['male #REF', '#2']"", ""PROJECT['faculty ids of #REF', '#3']""]","['select', 'project', 'project', 'project']",train
SPIDER_train_6727,How many female Professors do we have?,return Professors ;return #1 that  are  female ;return number of  #2,"[""SELECT['Professors']"", ""FILTER['#1', 'that are female']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_6728,Count the number of female Professors we have.,return Professors ;return that  are  female #1 ;return number of #2,"[""SELECT['Professors']"", ""PROJECT['that are female #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_6729,"Show the phone, room, and building for the faculty named Jerry Prince.","return faculty ;return #1 named Jerry Prince ;return phone for #2 ;return room for #2 ;return building for #2 ;return #3 ,  #4 ,   #5","[""SELECT['faculty']"", ""FILTER['#1', 'named Jerry Prince']"", ""PROJECT['phone for #REF', '#2']"", ""PROJECT['room for #REF', '#2']"", ""PROJECT['building for #REF', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_673,"What is the first name, last name, and phone of the customer with account name 162?","return customers ;return accounts of #1 ;return account names of #2 ;return #1 where #3 is  162 ;return first name of #4 ;return last name of #4 ;return phone of #4 ;return #5 ,  #6 ,   #7","[""SELECT['customers']"", ""PROJECT['accounts of #REF', '#1']"", ""PROJECT['account names of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is 162']"", ""PROJECT['first name of #REF', '#4']"", ""PROJECT['last name of #REF', '#4']"", ""PROJECT['phone of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_6730,"What are the phone, room, and building of the faculty member called Jerry Prince?","return faculty members ;return #1 called Jerry Prince ;return the  phone of  #2 ;return the  room of  #2 ;return the  building of  #2 ;return #3 ,  #4 ,   #5","[""SELECT['faculty members']"", ""FILTER['#1', 'called Jerry Prince']"", ""PROJECT['the phone of #REF', '#2']"", ""PROJECT['the room of #REF', '#2']"", ""PROJECT['the building of #REF', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_6731,How many Professors are in building NEB?,return Professors ;return #1 in building NEB ;return number of #2,"[""SELECT['Professors']"", ""FILTER['#1', 'in building NEB']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_6732,Count the number of Professors who have office in building NEB.,return Professors ;return offices of #1 ;return #1 where #2 is buildings NEB ;return number of  #3,"[""SELECT['Professors']"", ""PROJECT['offices of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is buildings NEB']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_6733,Show the first name and last name for all the instructors.,"return all instructors ;return first name  of  #1 ;return last name  of  #1 ;return #2 ,  #3","[""SELECT['all instructors']"", ""PROJECT['first name of #REF', '#1']"", ""PROJECT['last name of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_6734,What are the first name and last name of all the instructors?,"return instructors ;return the  first names of #1 ;return the  last names of #1 ;return #2 ,  #3","[""SELECT['instructors']"", ""PROJECT['the first names of #REF', '#1']"", ""PROJECT['the last names of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_6735,Show all the buildings along with the number of faculty members the buildings have.,"return buildings ;return faculty members of  #1 ;return number of  #2 for each  #1 ;return #1 ,  #3","[""SELECT['buildings']"", ""PROJECT['faculty members of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_6736,How many faculty members does each building have? List the result with the name of the building.,"return buildings ;return faculty of  #1 ;return number of #2 for each #1 ;return names of  #1 ;return #3 ,   #4","[""SELECT['buildings']"", ""PROJECT['faculty of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['names of #REF', '#1']"", ""UNION['#3', '#4']""]","['select', 'project', 'group', 'project', 'union']",train
SPIDER_train_6737,Which building has most faculty members?,return buildings ;return number of  faculty members for each  #1 ;return #1 where #2 is  the  highest,"[""SELECT['buildings']"", ""PROJECT['members', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_6738,Find the building that has the largest number of faculty members.,return buildings ;return faculty members of #1 ;return number of  #2 for each #1 ;return #1 where #3 is highest,"[""SELECT['buildings']"", ""PROJECT['faculty members of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_6739,Show all the buildings that have at least 10 professors.,return buildings ;return professors in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least 10,"[""SELECT['buildings']"", ""PROJECT['professors in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 10']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_674,Give the full name and phone of the customer who has the account name 162.,"return customers ;return account names of  #1 ;return #1 where  #2 is  162 ;return full name  of  #3 ;return phone of  #3 ;return #4 ,   #5","[""SELECT['customers']"", ""PROJECT['account names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 162']"", ""PROJECT['full name of #REF', '#3']"", ""PROJECT['phone of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_6740,In which buildings are there at least ten professors?,return buildings ;return professors in #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is at least ten,"[""SELECT['buildings']"", ""PROJECT['professors in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least ten']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_6741,"For each faculty rank, show the number of faculty members who have it.",return faculty ranks ;return faculty members who  have  #1 ;return number of #2 for each #1,"[""SELECT['faculty ranks']"", ""PROJECT['faculty members who have #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_6742,How many faculty members do we have for each faculty rank?,return faculty ranks ;return faculty members of  #1 ;return number of #2 for each #1,"[""SELECT['faculty ranks']"", ""PROJECT['faculty members of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_6743,Show all the ranks and the number of male and female faculty for each rank.,"return ranks ;return faculty of #1 ;return #2 that are male ;return #2 that are female ;return number of  #3 for each #1 ;return number of  #4 for each #1 ;return #1 ,  #5 ,   #6","[""SELECT['ranks']"", ""PROJECT['faculty of #REF', '#1']"", ""FILTER['#2', 'that are male']"", ""FILTER['#2', 'that are female']"", ""GROUP['count', '#3', '#1']"", ""GROUP['count', '#4', '#1']"", ""UNION['#1', '#5', '#6']""]","['select', 'project', 'filter', 'filter', 'group', 'group', 'union']",train
SPIDER_train_6744,How many faculty members do we have for each rank and gender?,"return faculty members ;return ranks of  #1 ;return genders of  #1 ;return number of #1 for each #2 ;return number of #1 for each #3 ;return #4 ,   #5","[""SELECT['faculty members']"", ""PROJECT['ranks of #REF', '#1']"", ""PROJECT['genders of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""GROUP['count', '#1', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'project', 'group', 'group', 'union']",train
SPIDER_train_6745,Which rank has the smallest number of faculty members?,return ranks ;return faculty members of #1 ;return number of  #2 for each #1 ;return #1 where #3 is lowest,"[""SELECT['ranks']"", ""PROJECT['faculty members of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_6746,Find the faculty rank that has the least members.,return members ;return faculty ranks of #1 ;return number of  #1 for each #2 ;return #2 where #3 is the  lowest,"[""SELECT['members']"", ""PROJECT['faculty ranks of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""COMPARATIVE['#2', '#3', 'is the lowest']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_6747,Show the number of male and female assistant professors.,"return assistant professors ;return #1 that  are  male ;return number of  #2 ;return #1 that  are  female ;return number of  #4 ;return #3 ,  #5","[""SELECT['assistant professors']"", ""FILTER['#1', 'that are male']"", ""AGGREGATE['count', '#2']"", ""FILTER['#1', 'that are female']"", ""AGGREGATE['count', '#4']"", ""UNION['#3', '#5']""]","['select', 'filter', 'aggregate', 'filter', 'aggregate', 'union']",train
SPIDER_train_6748,How many male and female assistant professors do we have?,"return assistant professors ;return #1 that  are  male ;return #1 that  are  female ;return number of  #2 ;return number of  #3 ;return #4 ,  #5","[""SELECT['assistant professors']"", ""FILTER['#1', 'that are male']"", ""FILTER['#1', 'that are female']"", ""AGGREGATE['count', '#2']"", ""AGGREGATE['count', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'filter', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_6749,What are the first name and last name of Linda Smith's advisor?,"return Linda Smith ;return advisor of #1 ;return first name of #2 ;return last name of #2 ;return #3 ,  #4","[""SELECT['Linda Smith']"", ""PROJECT['advisor of #REF', '#1']"", ""PROJECT['first name of #REF', '#2']"", ""PROJECT['last name of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_675,How many accounts does the customer with first name Art and last name Turcotte have?,return customers ;return first names of  #1 ;return #1 where  #2 is Art ;return last names of  #1 ;return #1 where  #4 is Turcotte ;return #1 of  both #3 and #5 ;return accounts of  #6 ;return number of  #7,"[""SELECT['customers']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Art']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is Turcotte']"", ""INTERSECTION['#1', '#3', '#5']"", ""PROJECT['accounts of #REF', '#6']"", ""AGGREGATE['count', '#7']""]","['select', 'project', 'comparative', 'project', 'comparative', 'intersection', 'project', 'aggregate']",train
SPIDER_train_6750,Who is the advisor of Linda Smith? Give me the first name and last name.,"return Linda Smith ;return advisor of  #1 ;return first name  of  #2 ;return last name  of  #2 ;return #3 ,  #4","[""SELECT['Linda Smith']"", ""PROJECT['advisor of #REF', '#1']"", ""PROJECT['first name of #REF', '#2']"", ""PROJECT['last name of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_6751,Show the ids of students whose advisors are professors.,return professors ;return #1 who are advisors ;return students ;return advisors of #3 ;return #3 where #4 is  any  #2 ;return the  ids of #5,"[""SELECT['professors']"", ""FILTER['#1', 'who are advisors']"", ""SELECT['students']"", ""PROJECT['advisors of #REF', '#3']"", ""COMPARATIVE['#3', '#4', 'is any #2']"", ""PROJECT['the ids of #REF', '#5']""]","['select', 'filter', 'select', 'project', 'comparative', 'project']",train
SPIDER_train_6752,Which students have professors as their advisors? Find their student ids.,return students ;return #1 who  have  professor as advisor ;return ids of  #2,"[""SELECT['students']"", ""FILTER['#1', 'who have professor as advisor']"", ""PROJECT['ids of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6753,Show first name and last name for all the students advised by Michael Goodrich.,"return students ;return #1 advised by Michael Goodrich ;return first name  of  #2 ;return last name  of  #2 ;return #3 ,   #4","[""SELECT['students']"", ""FILTER['#1', 'advised by Michael Goodrich']"", ""PROJECT['first name of #REF', '#2']"", ""PROJECT['last name of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_6754,Which students are advised by Michael Goodrich? Give me their first and last names.,"return students ;return #1 advised by Michael Goodrich ;return first names of  #2 ;return last names of  #2 ;return #3 ,  #4","[""SELECT['students']"", ""FILTER['#1', 'advised by Michael Goodrich']"", ""PROJECT['first names of #REF', '#2']"", ""PROJECT['last names of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_6755,"Show the faculty id of each faculty member, along with the number of students he or she advises.","return faculty  members ;return faculty  ids of  #1 ;return students #1 advise ;return number of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['faculty members']"", ""PROJECT['faculty ids of #REF', '#1']"", ""PROJECT['students #REF advise', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_6756,What are the faculty id and the number of students each faculty has?,"return faculty  ;return faculty  ids of  #1 ;return students of  #1 ;return number of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['faculty']"", ""PROJECT['faculty ids of #REF', '#1']"", ""PROJECT['students of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_6757,Show all the faculty ranks and the number of students advised by each rank.,"return faculty ranks ;return students advised by #1 ;return number of  #2 for each #1 ;return #1 ,  #3","[""SELECT['faculty ranks']"", ""PROJECT['students advised by #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_6758,How many students are advised by each rank of faculty? List the rank and the number of students.,return faculty ;return ranks of  #1 ;return students of  #2 ;return number of  #3 for each  #2,"[""SELECT['faculty']"", ""PROJECT['ranks of #REF', '#1']"", ""PROJECT['students of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_6759,What are the first and last name of the faculty who has the most students?,"return faculties ;return #1 who  has  the  most students ;return first names of  #2 ;return last name of  #2 ;return #3 ,  #4","[""SELECT['faculties']"", ""FILTER['#1', 'who has the most students']"", ""PROJECT['first names of #REF', '#2']"", ""PROJECT['last name of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_676,Return the number of accounts that the customer with the first name Art and last name Turcotte has.,return customers ;return first names of #1 ;return last names of #1 ;return #1 where #2 is  Art ;return #1 where #3 is  Turcotte ;return #1 of both #4 and #5 ;return accounts of #6 ;return number of  #7,"[""SELECT['customers']"", ""PROJECT['first names of #REF', '#1']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Art']"", ""COMPARATIVE['#1', '#3', 'is Turcotte']"", ""INTERSECTION['#1', '#4', '#5']"", ""PROJECT['accounts of #REF', '#6']"", ""AGGREGATE['count', '#7']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection', 'project', 'aggregate']",train
SPIDER_train_6760,Give me the the first and last name of the faculty who advises the most students.,"return faculty ;return students #1 advises ;return number of #2 for each #1 ;return #1 where  #3 is  highest ;return first name of  #4 ;return last name of  #4 ;return #5 ,   #6","[""SELECT['faculty']"", ""PROJECT['students #REF advises', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['first name of #REF', '#4']"", ""PROJECT['last name of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_6761,Show the ids for all the faculty members who have at least 2 students.,return faculty members ;return students of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least 2 ;return ids of  #4,"[""SELECT['faculty members']"", ""PROJECT['students of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 2']"", ""PROJECT['ids of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_6762,Which faculty members advise two ore more students? Give me their faculty ids.,return faculty  members ;return students #1 advise ;return number of  #2 for each  #1 ;return #1 where #3 is  at least two ;return faculty  ids of  #4,"[""SELECT['faculty members']"", ""PROJECT['students #REF advise', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""PROJECT['faculty ids of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_6763,Show ids for the faculty members who don't advise any student.,return faculty members ;return students of #1 ;return number of  #2 for each  #1 ;return #1 where #3 is zero ;return ids of #4,"[""SELECT['faculty members']"", ""PROJECT['students of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is zero']"", ""PROJECT['ids of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_6764,What are the ids of the faculty members who do not advise any student.,return faculty members ;return #1 who  do not  advise any student ;return ids of  #2,"[""SELECT['faculty members']"", ""FILTER['#1', 'who do not advise any student']"", ""PROJECT['ids of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6765,What activities do we have?,return activities,"[""SELECT['activities']""]",['select'],train
SPIDER_train_6766,List all the activities we have.,return activities,"[""SELECT['activities']""]",['select'],train
SPIDER_train_6767,How many activities do we have?,return activities ;return number of #1,"[""SELECT['activities']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_6768,Find the number of activities available.,return activities ;return #1 that  are  available ;return number of #2,"[""SELECT['activities']"", ""FILTER['#1', 'that are available']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_6769,How many faculty members participate in an activity?,return faculty members ;return #1 who  participate in an activity ;return number of #2,"[""SELECT['faculty members']"", ""FILTER['#1', 'who participate in an activity']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_677,Show all customer ids and the number of accounts for each customer.,"return customers ;return customer  ids of #1 ;return accounts of #1 ;return number of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['customers']"", ""PROJECT['customer ids of #REF', '#1']"", ""PROJECT['accounts of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_6770,Give me the number of faculty members who participate in an activity,return faculty members ;return #1 who  participate in activity ;return number of #2,"[""SELECT['faculty members']"", ""FILTER['#1', 'who participate in activity']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_6771,Show the ids of the faculty who don't participate in any activity.,return faculty ;return #1 that participate in  any activity ;return the  #1 besides  #2 ;return the  ids of #3,"[""SELECT['faculty']"", ""FILTER['#1', 'that participate in any activity']"", ""DISCARD['#1', '#2']"", ""PROJECT['the ids of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_6772,Which faculty do not participate in any activity? Find their faculty ids.,return faculty  ;return #1 that  do not participate in activities ;return faculty  ids of #2,"[""SELECT['faculty']"", ""FILTER['#1', 'that do not participate in activities']"", ""PROJECT['faculty ids of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6773,Show the ids of all the faculty members who participate in an activity and advise a student.,return faculty members ;return #1 who participate in an activity ;return #1 who advise a student ;return ids of #1 ;return #4 of both #2 and #3,"[""SELECT['faculty members']"", ""FILTER['#1', 'who participate in an activity']"", ""FILTER['#1', 'who advise a student']"", ""PROJECT['ids of #REF', '#1']"", ""INTERSECTION['#4', '#2', '#3']""]","['select', 'filter', 'filter', 'project', 'intersection']",train
SPIDER_train_6774,What are ids of the faculty members who not only participate in an activity but also advise a student.,return faculty members ;return activities of #1 ;return number of  #2 for each #1 ;return #1 where #3 is at least one ;return students advise of #1 ;return number of  #5 for each #1 ;return #1 where #6 is at least one ;return #1 in  both #4 and  #7 ;return ids of #8,"[""SELECT['faculty members']"", ""PROJECT['activities of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least one']"", ""PROJECT['students advise of #REF', '#1']"", ""GROUP['count', '#5', '#1']"", ""COMPARATIVE['#1', '#6', 'is at least one']"", ""INTERSECTION['#1', '#4', '#7']"", ""PROJECT['ids of #REF', '#8']""]","['select', 'project', 'group', 'comparative', 'project', 'group', 'comparative', 'intersection', 'project']",train
SPIDER_train_6775,How many activities does Mark Giuliano participate in?,return Mark Giuliano ;return activities of  #1 ;return number of #2,"[""SELECT['Mark Giuliano']"", ""PROJECT['activities of #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_6776,Find the number of activities Mark Giuliano is involved in.,return activities ;return #1 of  Mark Giuliano ;return number of  #2,"[""SELECT['activities']"", ""FILTER['#1', 'of Mark Giuliano']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_6777,Show the names of all the activities Mark Giuliano participates in.,return activities ;return #1 that  Mark Giuliano participates in ;return the  names of #2,"[""SELECT['activities']"", ""FILTER['#1', 'that Mark Giuliano participates in']"", ""PROJECT['the names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6778,What are the names of the activities Mark Giuliano is involved in,return activities ;return #1 that  Mark Giuliano is  involved in ;return names of  #2,"[""SELECT['activities']"", ""FILTER['#1', 'that Mark Giuliano is involved in']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6779,"Show the first and last name of all the faculty members who participated in some activity, together with the number of activities they participated in.","return faculty members ;return #1 that  participated  in some activity ;return first names of  #2 ;return last names of  #2 ;return the  number of  activities participated of #2 ;return #3 ,  #4 ,   #5","[""SELECT['faculty members']"", ""FILTER['#1', 'that participated in some activity']"", ""PROJECT['first names of #REF', '#2']"", ""PROJECT['last names of #REF', '#2']"", ""PROJECT['activities participated of #REF', '#2']"", ""GROUP['count', '#5', '#2']"", ""UNION['#3', '#4', '#6']""]","['select', 'filter', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_678,How many accounts are there for each customer id?,return customer ids ;return accounts of  #1 ;return number of #2 for each #1,"[""SELECT['customer ids']"", ""PROJECT['accounts of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_6780,"What is the first and last name of the faculty members who participated in at least one activity? For each of them, also show the number of activities they participated in.","return faculty members ;return activities of   #1 ;return number of  #2 for each #1 ;return #1 where #3 is at least one ;return first names of   #4 ;return last names of   #4 ;return activities of   #4 ;return number of  #7 for each #4 ;return #5 ,  #6 ,   #8","[""SELECT['faculty members']"", ""PROJECT['activities of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least one']"", ""PROJECT['first names of #REF', '#4']"", ""PROJECT['last names of #REF', '#4']"", ""PROJECT['activities of #REF', '#4']"", ""GROUP['count', '#7', '#4']"", ""UNION['#5', '#6', '#8']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_6781,Show all the activity names and the number of faculty involved in each activity.,"return activities ;return names of  #1 ;return faculty involved in #1 ;return number of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['activities']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['faculty involved in #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_6782,How many faculty members participate in each activity? Return the activity names and the number of faculty members.,"return activities ;return faculty members that  participate in #1 ;return names of  #2 ;return number of #2 for each #1 ;return #3 ,   #4","[""SELECT['activities']"", ""PROJECT['faculty members that participate in #REF', '#1']"", ""PROJECT['names of #REF', '#2']"", ""GROUP['count', '#2', '#1']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_6783,What is the first and last name of the faculty participating in the most activities?,"return faculty ;return activities of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return first names of  #4 ;return last names of  #4 ;return #5 ,  #6","[""SELECT['faculty']"", ""PROJECT['activities of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['first names of #REF', '#4']"", ""PROJECT['last names of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_6784,Find the first and last name of the faculty who is involved in the largest number of activities.,"return faculty ;return faculty involved in activities ;return #2 where  number of activities is  largest ;return first name of  #3 ;return last name of  #3 ;return #4 ,   #5","[""SELECT['faculty']"", ""SELECT['faculty involved in activities']"", ""FILTER['#2', 'where number of activities is largest']"", ""PROJECT['first name of #REF', '#3']"", ""PROJECT['last name of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_6785,What is the name of the activity that has the most faculty members involved in?,return activities ;return faculty members of #1 ;return number of  #2 for each #1 ;return #1 where #3 is highest ;return name of #4,"[""SELECT['activities']"", ""PROJECT['faculty members of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_6786,Which activity has the most faculty members participating in? Find the activity name.,return activities ;return faculty members participating in #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest ;return name of #4,"[""SELECT['activities']"", ""PROJECT['faculty members participating in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_6787,Show the ids of the students who don't participate in any activity.,return students ;return #1 who  participate in any activity ;return #1 besides  #2 ;return ids of  #3,"[""SELECT['students']"", ""FILTER['#1', 'who participate in any activity']"", ""DISCARD['#1', '#2']"", ""PROJECT['ids of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_6788,What are the ids of the students who are not involved in any activity,return students ;return activities of #1 ;return number of  #2 for each #1 ;return #1 where #3 is higher than zero ;return #1 besides  #4 ;return ids of #5,"[""SELECT['students']"", ""PROJECT['activities of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than zero']"", ""DISCARD['#1', '#4']"", ""PROJECT['ids of #REF', '#5']""]","['select', 'project', 'group', 'comparative', 'discard', 'project']",train
SPIDER_train_6789,Show the ids for all the students who participate in an activity and are under 20.,return students ;return #1 who  participate in activities ;return #2 who  are  under 20 ;return ids of  #3,"[""SELECT['students']"", ""FILTER['#1', 'who participate in activities']"", ""FILTER['#2', 'who are under 20']"", ""PROJECT['ids of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_679,Show the customer id and number of accounts with most accounts.,"return customers ;return accounts  of #1 ;return number of #2 for each #1 ;return #1 where #3 is  highest ;return customer id of #4 ;return accounts  of #4 ;return number of #6 ;return #5 , #7","[""SELECT['customers']"", ""PROJECT['accounts of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['customer id of #REF', '#4']"", ""PROJECT['accounts of #REF', '#4']"", ""AGGREGATE['count', '#6']"", ""UNION['#5', '#7']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'aggregate', 'union']",train
SPIDER_train_6790,What are the ids of the students who are under 20 years old and are involved in at least one activity.,return students ;return #1 under 20 years old ;return activities of  #1 ;return number of  #3 for each  #1 ;return #1 where #4 is  at least one ;return #1 of  both #2 and  #5 ;return ids of  #6,"[""SELECT['students']"", ""FILTER['#1', 'under 20 years old']"", ""PROJECT['activities of #REF', '#1']"", ""GROUP['count', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is at least one']"", ""INTERSECTION['#1', '#2', '#5']"", ""PROJECT['ids of #REF', '#6']""]","['select', 'filter', 'project', 'group', 'comparative', 'intersection', 'project']",train
SPIDER_train_6791,What is the first and last name of the student participating in the most activities?,"return students ;return activities of #1 ;return number of #2 for each #1 ;return #1 where #3 is  highest ;return first name of #4 ;return last name of #4 ;return #5 , #6","[""SELECT['students']"", ""PROJECT['activities of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['first name of #REF', '#4']"", ""PROJECT['last name of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_6792,Tell me the first and last name of the student who has the most activities.,"return students ;return activities of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return first name of  #4 ;return last name of  #4 ;return #5 ,  #6","[""SELECT['students']"", ""PROJECT['activities of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['first name of #REF', '#4']"", ""PROJECT['last name of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_6793,What is the name of the activity with the most students?,return activities ;return students in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return name of  #4,"[""SELECT['activities']"", ""PROJECT['students in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_6794,Find the name of the activity that has the largest number of student participants.,return activities ;return student participants of #1 ;return number of  #2 for each #1 ;return #1 where #3 is highest ;return name of #4,"[""SELECT['activities']"", ""PROJECT['student participants of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_6795,Find the first names of the faculty members who are playing Canoeing or Kayaking.,"return faculty members ;return #1 who  are  playing Canoeing ;return #1 who  are  playing Kayaking ;return first names of  #2 ;return first names of  #3 ;return #4 ,   #5","[""SELECT['faculty members']"", ""FILTER['#1', 'who are playing Canoeing']"", ""FILTER['#1', 'who are playing Kayaking']"", ""PROJECT['first names of #REF', '#2']"", ""PROJECT['first names of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'filter', 'project', 'project', 'union']",train
SPIDER_train_6796,Which faculty members are playing either Canoeing or Kayaking? Tell me their first names.,"return faculty members ;return #1 playing Canoeing ;return #1 playing Kayaking ;return #2 ,  #3 ;return first names of  #4","[""SELECT['faculty members']"", ""FILTER['#1', 'playing Canoeing']"", ""FILTER['#1', 'playing Kayaking']"", ""UNION['#2', '#3']"", ""PROJECT['first names of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_6797,Find the first names of professors who are not playing Canoeing or Kayaking.,return professors ;return #1 who  are playing Canoeing ;return #1 who  are playing Kayaking ;return #1 besides  #2 ;return #4 besides  #3 ;return first names of #5,"[""SELECT['professors']"", ""FILTER['#1', 'who are playing Canoeing']"", ""FILTER['#1', 'who are playing Kayaking']"", ""DISCARD['#1', '#2']"", ""DISCARD['#4', '#3']"", ""PROJECT['first names of #REF', '#5']""]","['select', 'filter', 'filter', 'discard', 'discard', 'project']",train
SPIDER_train_6798,What are the first names of the professors who do not play Canoeing or Kayaking as activities?,return professors ;return activities of  #1 ;return #1 where #2 is  not  Canoeing ;return #1 where #2 is  not  Kayaking ;return #1 of  both #3 and  #4 ;return first names of  #5,"[""SELECT['professors']"", ""PROJECT['activities of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not Canoeing']"", ""COMPARATIVE['#1', '#2', 'is not Kayaking']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['first names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_6799,Find the first names of the faculty members who participate in Canoeing and Kayaking.,return faculty members ;return #1 that  participate in Canoeing ;return #1 that  participate in Kayaking ;return #1 in both #2 and #3 ;return first names of  #4,"[""SELECT['faculty members']"", ""FILTER['#1', 'that participate in Canoeing']"", ""FILTER['#1', 'that participate in Kayaking']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['first names of #REF', '#4']""]","['select', 'filter', 'filter', 'intersection', 'project']",train
SPIDER_train_68,What details do we have on the students who registered for courses most recently?,return students ;return when  did #1 register ;return #1 where #2 is the  highest ;return details of #3,"[""SELECT['students']"", ""PROJECT['when did #REF register', '#1']"", ""COMPARATIVE['#1', '#2', 'is the highest']"", ""PROJECT['details of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_680,"What is the customer id of the customer with the most accounts, and how many accounts does this person have?","return customer ;return accounts  ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return id of  #4 ;return highest of  #3 ;return #5 ,  #6","[""SELECT['customer']"", ""SELECT['accounts']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['id of #REF', '#4']"", ""AGGREGATE['max', '#3']"", ""UNION['#5', '#6']""]","['select', 'select', 'group', 'superlative', 'project', 'aggregate', 'union']",train
SPIDER_train_6800,What are the first names of the faculty members playing both Canoeing and Kayaking?,return faculty members ;return #1 playing Canoeing ;return #1 playing Kayaking ;return #1 of  both #2 and  #3 ;return first names of  #4,"[""SELECT['faculty members']"", ""FILTER['#1', 'playing Canoeing']"", ""FILTER['#1', 'playing Kayaking']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['first names of #REF', '#4']""]","['select', 'filter', 'filter', 'intersection', 'project']",train
SPIDER_train_6801,Find the ids of the students who participate in Canoeing and Kayaking.,return students ;return #1 who  participate in Canoeing ;return #1 who  participate in Kayaking ;return #1 of  both #2 and #3 ;return ids of  #4,"[""SELECT['students']"", ""FILTER['#1', 'who participate in Canoeing']"", ""FILTER['#1', 'who participate in Kayaking']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['ids of #REF', '#4']""]","['select', 'filter', 'filter', 'intersection', 'project']",train
SPIDER_train_6802,Which students participate in both Canoeing and Kayaking as their activities? Tell me their student ids.,return students ;return activities of  #1 ;return #1 where #2 is  Canoeing ;return #1 where #2 is  Kayaking ;return #1 of  both #3 and  #4 ;return student ids of  #5,"[""SELECT['students']"", ""PROJECT['activities of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Canoeing']"", ""COMPARATIVE['#1', '#2', 'is Kayaking']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['student ids of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_6803,Find the name of the airport in the city of Goroka.,return airports ;return cities of  #1 ;return #1 where #2 is  Goroka ;return name of  #3,"[""SELECT['airports']"", ""PROJECT['cities of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Goroka']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6804,What are the names of the airports in the city of Goroka?,return airports ;return cities of  #1 ;return #1 where #2 is  Goroka ;return names of  #3,"[""SELECT['airports']"", ""PROJECT['cities of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Goroka']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6805,"Find the name, city, country, and altitude (or elevation) of the airports in the city of New York.","return airports ;return #1 in the city of  New York ;return names of  #2 ;return cities of  #2 ;return countries of  #2 ;return altitudes of  #2 ;return #3 ,   #4 , #5 ,  #6","[""SELECT['airports']"", ""FILTER['#1', 'in the city of New York']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['cities of #REF', '#2']"", ""PROJECT['countries of #REF', '#2']"", ""PROJECT['altitudes of #REF', '#2']"", ""UNION['#3', '#4', '#5', '#6']""]","['select', 'filter', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_6806,"What is the name, city, country, and elevation for every airport in the city of New York?","return airports ;return cities of  #1 ;return #1 where #2 is  New York ;return names of  #3 ;return cities of  #3 ;return countries of  #3 ;return elevations of  #3 ;return #4 ,  #5 ,   #6 , #7","[""SELECT['airports']"", ""PROJECT['cities of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is New York']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['cities of #REF', '#3']"", ""PROJECT['countries of #REF', '#3']"", ""PROJECT['elevations of #REF', '#3']"", ""UNION['#4', '#5', '#6', '#7']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_6807,How many airlines are there?,return airlines ;return number of #1,"[""SELECT['airlines']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_6808,What is the total number of airlines?,return airlines ;return total number of  #1,"[""SELECT['airlines']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_6809,How many airlines does Russia has?,return airlines ;return #1 that  Russia has ;return number of  #2,"[""SELECT['airlines']"", ""FILTER['#1', 'that Russia has']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_681,"What is the customer first, last name and id with least number of accounts.","return customers ;return accounts of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return first name of  #4 ;return last name of  #4 ;return id of  #4 ;return #5 ,  #6 ,   #7","[""SELECT['customers']"", ""PROJECT['accounts of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['first name of #REF', '#4']"", ""PROJECT['last name of #REF', '#4']"", ""PROJECT['id of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'project', 'union']",train
SPIDER_train_6810,What is the number of airlines based in Russia?,return airlines ;return #1 based in Russia ;return number of  #2,"[""SELECT['airlines']"", ""FILTER['#1', 'based in Russia']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_6811,What is the maximum elevation of all airports in the country of Iceland?,return airports ;return countries of  #1 ;return #1 where #2 is  Iceland ;return elevations of  #3 ;return maximum of  #4,"[""SELECT['airports']"", ""PROJECT['countries of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Iceland']"", ""PROJECT['elevations of #REF', '#3']"", ""AGGREGATE['max', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_6812,What is the highest elevation of an airport in the country of Iceland?,return Iceland ;return airports of #1 ;return elevations of #2 ;return #2 where #3 is  highest ;return elevation of #4,"[""SELECT['Iceland']"", ""PROJECT['airports of #REF', '#1']"", ""PROJECT['elevations of #REF', '#2']"", ""SUPERLATIVE['max', '#2', '#3']"", ""PROJECT['elevation of #REF', '#4']""]","['select', 'project', 'project', 'superlative', 'project']",train
SPIDER_train_6813,Find the name of the airports located in Cuba or Argentina.,"return airports ;return #1 located in Cuba ;return #1 located in Argentina ;return names of  #2 ;return names of  #3 ;return #4 ,   #5","[""SELECT['airports']"", ""FILTER['#1', 'located in Cuba']"", ""FILTER['#1', 'located in Argentina']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['names of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'filter', 'project', 'project', 'union']",train
SPIDER_train_6814,What are the names of all airports in Cuba or Argentina?,return airports ;return #1 in Cuba ;return #1 in Argentina ;return #2 or  #3 ;return names of  #4,"[""SELECT['airports']"", ""FILTER['#1', 'in Cuba']"", ""FILTER['#1', 'in Argentina']"", ""UNION['#2', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_6815,Find the country of the airlines whose name starts with 'Orbit'.,return airlines ;return names of #1 ;return #1 where #2 starts with 'Orbit ;return country of #3,"[""SELECT['airlines']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'starts with Orbit']"", ""PROJECT['country of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6816,What are the countries of all airlines whose names start with Orbit?,return airlines ;return names of  #1 ;return #1 where #2 start with Orbit ;return countries of  #3,"[""SELECT['airlines']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'start with Orbit']"", ""PROJECT['countries of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6817,Find the name of airports whose altitude is between -50 and 50.,return airports ;return altitudes of #1 ;return #1 where #2 is at least -50 ;return #1 where #2 is at most 50 ;return #1 in  both #3 and  #4 ;return names of #5,"[""SELECT['airports']"", ""PROJECT['altitudes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least -50']"", ""COMPARATIVE['#1', '#2', 'is at most 50']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_6818,What are the names of all airports whose elevation is between -50 and 50?,return airports ;return elevations of  #1 ;return #1 where #2 is  at least -50 ;return #1 where #2 is  at most 50 ;return #1 of  both #3 and  #4 ;return names of  #5,"[""SELECT['airports']"", ""PROJECT['elevations of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least -50']"", ""COMPARATIVE['#1', '#2', 'is at most 50']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_6819,Which country is the airport that has the highest altitude located in?,return airports ;return altitudes of #1 ;return #1 where #2 is highest ;return country of #3,"[""SELECT['airports']"", ""PROJECT['altitudes of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['country of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_682,Give the full name and customer id of the customer with the fewest accounts.,"return customers ;return accounts of  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  lowest ;return full name of  #4 ;return customer  id of  #4 ;return #5 ,   #6","[""SELECT['customers']"", ""PROJECT['accounts of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['full name of #REF', '#4']"", ""PROJECT['customer id of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_6820,What is the country of the airport with the highest elevation?,return airports ;return elevations of  #1 ;return #1 where #2 is  highest ;return country of  #3,"[""SELECT['airports']"", ""PROJECT['elevations of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['country of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_6821,Find the number of airports whose name contain the word 'International'.,return airports ;return names of  #1 ;return #1 where  #2 contain 'International ;return number of of  #3,"[""SELECT['airports']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'contain International']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_6822,How many airports' names have the word Interanation in them?,return airports ;return names of  #1 ;return #2 with  the words Interanation ;return number of #3,"[""SELECT['airports']"", ""PROJECT['names of #REF', '#1']"", ""FILTER['#2', 'with the words Interanation']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'filter', 'aggregate']",train
SPIDER_train_6823,How many different cities do have some airport in the country of Greenland?,return airports ;return countries of #1 ;return #1 where #2 is  Greenland ;return cities of #3 ;return different #4 ;return number of  #5,"[""SELECT['airports']"", ""PROJECT['countries of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Greenland']"", ""PROJECT['cities of #REF', '#3']"", ""PROJECT['different #REF', '#4']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'aggregate']",train
SPIDER_train_6824,In how many cities are there airports in the country of Greenland?,return airports ;return #1 in Greenland ;return cities of  #2 ;return number of  #3,"[""SELECT['airports']"", ""FILTER['#1', 'in Greenland']"", ""PROJECT['cities of #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_6825,Find the number of routes operated by American Airlines.,return routes ;return #1 operated by American Airlines ;return number of #2,"[""SELECT['routes']"", ""FILTER['#1', 'operated by American Airlines']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_6826,How many routes does American Airlines operate?,return routes ;return #1 that  American Airlines operates ;return number of #2,"[""SELECT['routes']"", ""FILTER['#1', 'that American Airlines operates']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_6827,Find the number of routes whose destination airports are in Canada.,return routes ;return destination airports of #1 ;return where are #2 ;return #1 where #3 is in  Canada ;return number of  #4,"[""SELECT['routes']"", ""PROJECT['destination airports of #REF', '#1']"", ""PROJECT['where are #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is in Canada']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'project', 'comparative', 'aggregate']",train
SPIDER_train_6828,How many routes end in a Canadian airport?,return routes ;return #1 that  end in a Canadian airport ;return number of  #2,"[""SELECT['routes']"", ""FILTER['#1', 'that end in a Canadian airport']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_6829,"Find the name, city, and country of the airport that has the lowest altitude.","return airports ;return altitudes of  #1 ;return #1 where  #2 is  lowest ;return name of  #3 ;return city of  #3 ;return country of  #3 ;return #4 ,   #5 , #6","[""SELECT['airports']"", ""PROJECT['altitudes of #REF', '#1']"", ""SUPERLATIVE['min', '#1', '#2']"", ""PROJECT['name of #REF', '#3']"", ""PROJECT['city of #REF', '#3']"", ""PROJECT['country of #REF', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'project', 'superlative', 'project', 'project', 'project', 'union']",train
SPIDER_train_683,Show the number of all customers without an account.,return customers ;return #1 without accounts ;return #1 besides  #2 ;return number of  #3,"[""SELECT['customers']"", ""FILTER['#1', 'without accounts']"", ""DISCARD['#1', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'discard', 'aggregate']",train
SPIDER_train_6830,"What is the name, city, and country of the airport with the lowest altitude?","return airports ;return altitudes of #1 ;return #1 where #2 is  the   lowest ;return the   name of #3 ;return the   city of #3 ;return the   country of #3 ;return #4 ,  #5 ,   #6","[""SELECT['airports']"", ""PROJECT['altitudes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the lowest']"", ""PROJECT['the name of #REF', '#3']"", ""PROJECT['the city of #REF', '#3']"", ""PROJECT['the country of #REF', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_6831,"Find the name, city, and country of the airport that has the highest latitude.","return airports ;return latitudes of #1 ;return #1 where #2 is highest ;return name of #3 ;return city of #3 ;return country of #3 ;return #4 ,  #5 ,   #6","[""SELECT['airports']"", ""PROJECT['latitudes of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['name of #REF', '#3']"", ""PROJECT['city of #REF', '#3']"", ""PROJECT['country of #REF', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'project', 'superlative', 'project', 'project', 'project', 'union']",train
SPIDER_train_6832,"What is the name, city, and country of the airport with the highest elevation?","return airports ;return elevations of #1 ;return #1 where #2 is  highest ;return name of #3 ;return city of #3 ;return country of #3 ;return #4 ,  #5 ,   #6","[""SELECT['airports']"", ""PROJECT['elevations of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['name of #REF', '#3']"", ""PROJECT['city of #REF', '#3']"", ""PROJECT['country of #REF', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'project', 'superlative', 'project', 'project', 'project', 'union']",train
SPIDER_train_6833,Find the name and city of the airport which is the destination of the most number of routes.,"return destinations ;return routes of   #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest ;return airport of   #4 ;return name of   #5 ;return city of   #5 ;return #6 ,  #7","[""SELECT['destinations']"", ""PROJECT['routes of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['airport of #REF', '#4']"", ""PROJECT['name of #REF', '#5']"", ""PROJECT['city of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'project', 'union']",train
SPIDER_train_6834,What is the name and city of the airport that the most routes end at?,"return airports ;return routes that  end at #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return name of  #4 ;return city of  #4 ;return #5 ,  #6","[""SELECT['airports']"", ""PROJECT['routes that end at #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['city of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_6835,Find the names of the top 10 airlines that operate the most number of routes.,return airlines ;return routes that  #1 operate ;return number of #2 for each #1 ;return #1 where #3 is  in the top 10 highest ;return names of #4,"[""SELECT['airlines']"", ""PROJECT['routes that #REF operate', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is in the top 10 highest']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_6836,"For the airline ids with the top 10 most routes operated, what are their names?",return airline ids ;return routes operated of #1 ;return number of  #2 for each  #1 ;return the  10 highest of #3 ;return #1 where #3 is equal to any of #4 ;return names of #5,"[""SELECT['airline ids']"", ""PROJECT['routes operated of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['max', '#3']"", ""COMPARATIVE['#1', '#3', 'is equal to any of #4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'group', 'aggregate', 'comparative', 'project']",train
SPIDER_train_6837,Find the name and city of the airport which is the source for the most number of flight routes.,"return airports ;return flight routes of #1 ;return number of  #2 for each #1 ;return #1 where #3 is highest ;return name of #4 ;return city of #4 ;return #5 ,  #6","[""SELECT['airports']"", ""PROJECT['flight routes of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['city of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_6838,What is the name and city of the airport from most of the routes start?,"return airports ;return routes that  start from #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest ;return name of #4 ;return city of #4 ;return #5 ,  #6","[""SELECT['airports']"", ""PROJECT['routes that start from #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['city of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_6839,Find the number of different airports which are the destinations of the American Airlines.,return the   American Airlines ;return destinations of #1 ;return airports of #2 ;return number of  different #3,"[""SELECT['the American Airlines']"", ""PROJECT['destinations of #REF', '#1']"", ""PROJECT['airports of #REF', '#2']"", ""PROJECT['different #REF', '#3']"", ""GROUP['count', '#4', '#3']"", ""UNION['#3', '#5']""]","['select', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_684,How many customers do not have an account?,return customers ;return #1 with  accounts ;return #1 besides #2 ;return number of #3,"[""SELECT['customers']"", ""FILTER['#1', 'with accounts']"", ""DISCARD['#1', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'discard', 'aggregate']",train
SPIDER_train_6840,What is the number of different different airports that are destinations for American Airlines?,return American Airlines ;return destinations of #1 ;return airports of #2 ;return different #3 ;return number of  #4,"[""SELECT['American Airlines']"", ""PROJECT['destinations of #REF', '#1']"", ""PROJECT['airports of #REF', '#2']"", ""PROJECT['different #REF', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'project', 'project', 'aggregate']",train
SPIDER_train_6841,Which countries has the most number of airlines?,return countries ;return airlines of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  most,"[""SELECT['countries']"", ""PROJECT['airlines of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_6842,What is the name of the country with the most number of home airlines?,return countries ;return home airlines of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return name of  #4,"[""SELECT['countries']"", ""PROJECT['home airlines of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_6843,Which countries has the most number of airlines whose active status is 'Y'?,return countries ;return airlines of  #1 ;return active statuses of  #2 ;return #2 where #3 is  'Y ;return number of  #4 for each  #1 ;return #1 where #5 is  highest,"[""SELECT['countries']"", ""PROJECT['airlines of #REF', '#1']"", ""PROJECT['active statuses of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is Y']"", ""GROUP['count', '#4', '#1']"", ""SUPERLATIVE['max', '#1', '#5']""]","['select', 'project', 'project', 'comparative', 'group', 'superlative']",train
SPIDER_train_6844,What are the countries with the most airlines whose active status is Y?,return countries ;return airlines of #1 ;return active statuses of #2 ;return #2 where #3 is  Y ;return number of  #4 for each #1 ;return #1 where #5 is  highest,"[""SELECT['countries']"", ""PROJECT['airlines of #REF', '#1']"", ""PROJECT['active statuses of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is Y']"", ""GROUP['count', '#4', '#1']"", ""SUPERLATIVE['max', '#1', '#5']""]","['select', 'project', 'project', 'comparative', 'group', 'superlative']",train
SPIDER_train_6845,List all countries and their number of airlines in the descending order of number of airlines.,"return countries ;return airlines  of  #1 ;return number of  #2 for each  #1 ;return #1 ,  #3 ;return #4 sorted by #3 in descending order","[""SELECT['countries']"", ""PROJECT['airlines of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']"", ""SORT['#4', '#3', 'in descending order']""]","['select', 'project', 'group', 'union', 'sort']",train
SPIDER_train_6846,How many airlines operate out of each country in descending order?,return countries ;return airlines that  operate out of  #1 ;return number of #2 for each #1 ;return #3 sorted by descending order,"[""SELECT['countries']"", ""PROJECT['airlines that operate out of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SORT['#3', '#3', 'descending order']""]","['select', 'project', 'group', 'sort']",train
SPIDER_train_6847,How many airports are there per country? Order the countries by decreasing number of airports.,return countries ;return airports  in #1 ;return number of #2 for each #1 ;return #3 sorted by number of airports  in decreasing Order,"[""SELECT['countries']"", ""PROJECT['airports in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SORT['#3', '#3', 'in decreasing Order']""]","['select', 'project', 'group', 'sort']",train
SPIDER_train_6848,"What is the number of airports per country, ordered from most to least?",return countries ;return airports in #1 ;return number of  #2 for each  #1 ;return #3 sorted by most to least,"[""SELECT['countries']"", ""PROJECT['airports in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SORT['#3', '#3', 'most to least']""]","['select', 'project', 'group', 'sort']",train
SPIDER_train_6849,How many airports are there per city in the United States? Order the cities by decreasing number of airports.,return cities ;return #1 in the United States ;return airports  in #2 ;return number of #3 for each #2 ;return #4 sorted by decreasing Order,"[""SELECT['cities']"", ""FILTER['#1', 'in the United States']"", ""PROJECT['airports in #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""SORT['#4', '#4', 'decreasing Order']""]","['select', 'filter', 'project', 'group', 'sort']",train
SPIDER_train_685,Show the first names and last names of customers without any account.,return customers ;return #1 without account ;return first names of  #2 ;return last names of  #2 ;return #3 or #4,"[""SELECT['customers']"", ""FILTER['#1', 'without account']"", ""PROJECT['first names of #REF', '#2']"", ""PROJECT['last names of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_6850,How many airports are there per city in the US ordered from most to least?,return US ;return cities of #1 ;return airports in #2 ;return number of  #3 for each #2 ;return #4 sorted by most to  least,"[""SELECT['US']"", ""PROJECT['cities of #REF', '#1']"", ""PROJECT['airports in #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""SORT['#4', '#4', 'most to least']""]","['select', 'project', 'project', 'group', 'sort']",train
SPIDER_train_6851,Return the cities with more than 3 airports in the United States.,return cities ;return airports of  #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is higher than 3,"[""SELECT['cities']"", ""PROJECT['airports of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 3']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_6852,What is the number of cities in the United States with more than 3 airports?,return United States ;return cities of #1 ;return airports in #2 ;return number of  #3 for each #2 ;return #2 where #4 is  higher than 3 ;return number of  #5,"[""SELECT['United States']"", ""PROJECT['cities of #REF', '#1']"", ""PROJECT['airports in #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""COMPARATIVE['#2', '#4', 'is higher than 3']"", ""AGGREGATE['count', '#5']""]","['select', 'project', 'project', 'group', 'comparative', 'aggregate']",train
SPIDER_train_6853,How many cities are there that have more than 3 airports?,return cities ;return airports of  #1 ;return number of  #2 for each #1 ;return #1 where  #3 is  higher than 3 ;return number of #4,"[""SELECT['cities']"", ""PROJECT['airports of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'group', 'comparative', 'aggregate']",train
SPIDER_train_6855,List the cities which have more than one airport and number of airports.,"return cities ;return airports in #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is higher than one ;return airports in #4 ;return number of  #5 for each  #1 ;return #4 ,  #6","[""SELECT['cities']"", ""PROJECT['airports in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than one']"", ""PROJECT['airports in #REF', '#4']"", ""GROUP['count', '#5', '#1']"", ""UNION['#4', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'group', 'union']",train
SPIDER_train_6856,What are the names of all cities with more than one airport and how many airports do they have?,"return cities ;return airports of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  more than  one ;return airports of #4 ;return number of  #5 for each #4 ;return names of #4 ;return #7 ,  #6","[""SELECT['cities']"", ""PROJECT['airports of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than one']"", ""PROJECT['airports of #REF', '#4']"", ""GROUP['count', '#5', '#4']"", ""PROJECT['names of #REF', '#4']"", ""UNION['#7', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'group', 'project', 'union']",train
SPIDER_train_6857,List the cities which have more than 2 airports sorted by the number of airports.,return cities ;return airports  in #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is higher than 2 ;return #4 sorted by #3,"[""SELECT['cities']"", ""PROJECT['airports in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 2']"", ""SORT['#4', '#3']""]","['select', 'project', 'group', 'comparative', 'sort']",train
SPIDER_train_6858,What are the cities that have more than 2 airports sorted by number of airports?,return cities ;return airports  in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than 2 ;return #4 sorted by #3,"[""SELECT['cities']"", ""PROJECT['airports in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 2']"", ""SORT['#4', '#3']""]","['select', 'project', 'group', 'comparative', 'sort']",train
SPIDER_train_6859,Find the number of routes for each source airport and the airport name.,"return source airports ;return routes of  #1 ;return number of #2 for each #1 ;return names of  #1 ;return #3 ,   #4","[""SELECT['source airports']"", ""PROJECT['routes of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['names of #REF', '#1']"", ""UNION['#3', '#4']""]","['select', 'project', 'group', 'project', 'union']",train
SPIDER_train_686,What are the full names of customers who do not have any accounts?,return customers ;return #1 who  do not  have  accounts ;return full names of  #2,"[""SELECT['customers']"", ""FILTER['#1', 'who do not have accounts']"", ""PROJECT['full names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6860,"For each airport name, how many routes start at that airport?",return airports ;return routes that  start at each #1 ;return names of  #1 ;return number of  #2 for each  #3,"[""SELECT['airports']"", ""PROJECT['routes that start at each #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""GROUP['count', '#2', '#3']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_6861,"Find the number of routes and airport name for each source airport, order the results by decreasing number of routes.","return source airports ;return routes of  #1 ;return number of #2 for each #1 ;return airport names of  #1 ;return #3 ,   #4 ;return #5 sorted by #3 in decreasing order","[""SELECT['source airports']"", ""PROJECT['routes of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['airport names of #REF', '#1']"", ""UNION['#3', '#4']"", ""SORT['#5', '#3', 'in decreasing order']""]","['select', 'project', 'group', 'project', 'union', 'sort']",train
SPIDER_train_6862,"For each  airport name, how many routes start at that airport, ordered from most to least?",return airports ;return names of  #1 ;return routes that  start at #1 ;return number of  #3 for each  #2 ;return #4 sorted by most to  least,"[""SELECT['airports']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['routes that start at #REF', '#1']"", ""GROUP['count', '#3', '#2']"", ""SORT['#4', '#4', 'most to least']""]","['select', 'project', 'project', 'group', 'sort']",train
SPIDER_train_6863,Find the average elevation of all airports for each country.,return countries ;return airports of #1 ;return elevation of #2 ;return average of #3 for each #1,"[""SELECT['countries']"", ""PROJECT['airports of #REF', '#1']"", ""PROJECT['elevation of #REF', '#2']"", ""GROUP['avg', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_6864,"For each country, what is the average elevation of that country's airports?",return countries ;return airports of  #1 ;return elevations of  #2 ;return average of  #3 for each #1,"[""SELECT['countries']"", ""PROJECT['airports of #REF', '#1']"", ""PROJECT['elevations of #REF', '#2']"", ""GROUP['avg', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_6865,Find the cities which have exactly two airports.,return cities ;return #1 which  have  exactly two airports,"[""SELECT['cities']"", ""FILTER['#1', 'which have exactly two airports']""]","['select', 'filter']",train
SPIDER_train_6866,What are the cities with exactly two airports?,return cities ;return airports in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  exactly two,"[""SELECT['cities']"", ""PROJECT['airports in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is exactly two']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_6867,"For each country and airline name, how many routes are there?","return countries ;return airlines of #1 ;return routes of #2 ;return the  number of  #3 for each #2 ;return the  sum of #4 for each #1 ;return #5 ,  #4","[""SELECT['countries']"", ""PROJECT['airlines of #REF', '#1']"", ""PROJECT['routes of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""GROUP['sum', '#4', '#1']"", ""UNION['#5', '#4']""]","['select', 'project', 'project', 'group', 'group', 'union']",train
SPIDER_train_6868,What is the total number of routes for each country and airline in that country?,"return countries ;return airlines in #1 ;return routes of #1 ;return routes of #2 ;return number of  #3 ;return number of  #4 for each #2 ;return #5 ,  #6","[""SELECT['countries']"", ""PROJECT['airlines in #REF', '#1']"", ""PROJECT['routes of #REF', '#1']"", ""PROJECT['routes of #REF', '#2']"", ""AGGREGATE['count', '#3']"", ""GROUP['count', '#4', '#2']"", ""UNION['#5', '#6']""]","['select', 'project', 'project', 'project', 'aggregate', 'group', 'union']",train
SPIDER_train_6869,Find the number of routes with destination airports in Italy.,return routes ;return destination airports of  #1 ;return #1 where  #2 is  Italy ;return number of #3,"[""SELECT['routes']"", ""PROJECT['destination airports of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Italy']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_687,Show distinct first and last names for all customers with an account.,"return customers ;return #1 with  an account ;return first name of #2 ;return last name of #2 ;return #3 , #4","[""SELECT['customers']"", ""FILTER['#1', 'with an account']"", ""PROJECT['first name of #REF', '#2']"", ""PROJECT['last name of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_6870,What is the number of routes whose destinations are Italian airports?,return routes ;return destinations of #1 ;return #1 where #2 are Italian airports ;return number of  #3,"[""SELECT['routes']"", ""PROJECT['destinations of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'are Italian airports']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_6871,Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'.,return routes ;return destination airports of #1 ;return #1 where #2 are in Italy ;return airlines that  #1 are operated by ;return the  name of #4 ;return #1 where #5 is  'American Airlines ;return #1 in both #3 and #6 ;return the  number of  #7,"[""SELECT['routes']"", ""PROJECT['destination airports of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'are in Italy']"", ""PROJECT['airlines that #REF are operated by', '#1']"", ""PROJECT['the name of #REF', '#4']"", ""COMPARATIVE['#1', '#5', 'is American Airlines']"", ""INTERSECTION['#1', '#3', '#6']"", ""AGGREGATE['count', '#7']""]","['select', 'project', 'comparative', 'project', 'project', 'comparative', 'intersection', 'aggregate']",train
SPIDER_train_6872,What is the number of routes operated by the airline American Airlines whose destinations are in Italy?,return routes ;return #1 operated by American airlines ;return destinations of #2 ;return #2 where #3 is  in Italy ;return number of  #4,"[""SELECT['routes']"", ""FILTER['#1', 'operated by American airlines']"", ""PROJECT['destinations of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is in Italy']"", ""AGGREGATE['count', '#4']""]","['select', 'filter', 'project', 'comparative', 'aggregate']",train
SPIDER_train_6873,Find the number of routes that have destination John F Kennedy International Airport.,return routes ;return destinations of  #1 ;return #1 where  #2 is  John F Kennedy International Airport ;return number of #3,"[""SELECT['routes']"", ""PROJECT['destinations of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is John F Kennedy International Airport']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_6874,What is the number of routes that end at John F Kennedy International Airport?,return routes ;return #1 to John F Kennedy International Airport ;return the  number of  #2,"[""SELECT['routes']"", ""FILTER['#1', 'to John F Kennedy International Airport']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_6875,Find the number of routes from the United States to Canada.,return routes ;return #1 from  United States ;return #1 to  Canada ;return #1 in both #2 and #3 ;return number of #4,"[""SELECT['routes']"", ""FILTER['#1', 'from United States']"", ""FILTER['#1', 'to Canada']"", ""INTERSECTION['#1', '#2', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'filter', 'filter', 'intersection', 'aggregate']",train
SPIDER_train_6876,How many routes go from the United States to Canada?,return routes ;return #1 from the  United States ;return #2 to  Canada ;return the  number of  #3,"[""SELECT['routes']"", ""FILTER['#1', 'from the United States']"", ""FILTER['#2', 'to Canada']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'filter', 'aggregate']",train
SPIDER_train_6877,Find the id of routes whose source and destination airports are in the United States.,return routes ;return source airports of #1 ;return destination airports of #1 ;return where are #2 ;return where are #3 ;return #1 where #4 is in  the  United States ;return #1 where #5 is in  the  United States ;return #1 in  both #6 and  #7 ;return ids of #8,"[""SELECT['routes']"", ""PROJECT['source airports of #REF', '#1']"", ""PROJECT['destination airports of #REF', '#1']"", ""PROJECT['where are #REF', '#2']"", ""PROJECT['where are #REF', '#3']"", ""COMPARATIVE['#1', '#4', 'is in the United States']"", ""COMPARATIVE['#1', '#5', 'is in the United States']"", ""INTERSECTION['#1', '#6', '#7']"", ""PROJECT['ids of #REF', '#8']""]","['select', 'project', 'project', 'project', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_6878,What is the id of the routes whose source and destination airports are in the United States?,return routes ;return source airports of  #1 ;return #1 where #2 is  in United States ;return destination airports of  #1 ;return #1 where #4 is  in United States ;return #1 of  both #3 and  #5 ;return ids of  #6,"[""SELECT['routes']"", ""PROJECT['source airports of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is in United States']"", ""PROJECT['destination airports of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is in United States']"", ""INTERSECTION['#1', '#3', '#5']"", ""PROJECT['ids of #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'comparative', 'intersection', 'project']",train
SPIDER_train_6879,Find the name of airline which runs the most number of routes.,return airlines ;return routes of  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  highest ;return name of  #4,"[""SELECT['airlines']"", ""PROJECT['routes of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_688,What are the full names of customers who have accounts?,return customers ;return #1 who  have  accounts ;return full names of  #2,"[""SELECT['customers']"", ""FILTER['#1', 'who have accounts']"", ""PROJECT['full names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6880,What is the name of the airline with the most routes?,return airlines ;return routes of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return name of  #4,"[""SELECT['airlines']"", ""PROJECT['routes of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_6881,Find the busiest source airport that runs most number of routes in China.,return source airports ;return routes that #1 runs ;return #2 in  China ;return number of  #3 for each #1 ;return busiest of #1 ;return #5 where #4 is highest,"[""SELECT['source airports']"", ""PROJECT['routes that #REF runs', '#1']"", ""FILTER['#2', 'in China']"", ""GROUP['count', '#3', '#1']"", ""PROJECT['busiest of #REF', '#1']"", ""SUPERLATIVE['max', '#5', '#4']""]","['select', 'project', 'filter', 'group', 'project', 'superlative']",train
SPIDER_train_6882,What is the name of the airport with the most number of routes that start in China?,return airports ;return routes of #1 ;return #2 that  start in China ;return number of #3 for each #1 ;return #1 where #4 is  highest ;return name of #5,"[""SELECT['airports']"", ""PROJECT['routes of #REF', '#1']"", ""FILTER['#2', 'that start in China']"", ""GROUP['count', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']"", ""PROJECT['name of #REF', '#5']""]","['select', 'project', 'filter', 'group', 'superlative', 'project']",train
SPIDER_train_6883,Find the busiest destination airport that runs most number of routes in China.,return destination airports ;return routes of #1 ;return #2 in  China ;return number of  #3 for each #1 ;return #1 where #4 is highest,"[""SELECT['destination airports']"", ""PROJECT['routes of #REF', '#1']"", ""FILTER['#2', 'in China']"", ""GROUP['count', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']""]","['select', 'project', 'filter', 'group', 'superlative']",train
SPIDER_train_6884,What is the name of the airport that is the destination of the most number of routes that start in China?,return routes ;return #1 that  start in China ;return destination of #2 ;return number of #2 for each #3 ;return #3 where #4 is  most ;return airport of #5 ;return name of #6,"[""SELECT['routes']"", ""FILTER['#1', 'that start in China']"", ""PROJECT['destination of #REF', '#2']"", ""GROUP['count', '#2', '#3']"", ""SUPERLATIVE['max', '#3', '#4']"", ""PROJECT['airport of #REF', '#5']"", ""PROJECT['name of #REF', '#6']""]","['select', 'filter', 'project', 'group', 'superlative', 'project', 'project']",train
SPIDER_train_6885,What is the id of the most recent order?,return orders ;return the  most recent #1 ;return the  id of #2,"[""SELECT['orders']"", ""PROJECT['the most recent #REF', '#1']"", ""PROJECT['the id of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_6886,Find the id of the order made most recently.,return orders ;return #1 which  is  made most recently ;return id of  #2,"[""SELECT['orders']"", ""FILTER['#1', 'which is made most recently']"", ""PROJECT['id of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6887,what are the order id and customer id of the oldest order?,"return orders ;return oldest #1 ;return order  id of  #2 ;return customer id of  #2 ;return #3 ,  #4","[""SELECT['orders']"", ""PROJECT['oldest #REF', '#1']"", ""PROJECT['order id of #REF', '#2']"", ""PROJECT['customer id of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_6888,Find the order id and customer id associated with the oldest order.,"return orders ;return oldest of  #1 ;return order  id  of  #2 ;return customer id  of  #2 ;return #3 ,   #4","[""SELECT['orders']"", ""PROJECT['oldest of #REF', '#1']"", ""PROJECT['order id of #REF', '#2']"", ""PROJECT['customer id of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_6889,"Find the id of the order whose shipment tracking number is ""3452"".",return orders ;return shipment tracking numbers of  #1 ;return #1 where  #2 is  3452 ;return id of  #3,"[""SELECT['orders']"", ""PROJECT['shipment tracking numbers of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 3452']"", ""PROJECT['id of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_689,How many customers have an account?,return customers ;return #1 who have an account ;return number of  #2,"[""SELECT['customers']"", ""FILTER['#1', 'who have an account']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_6890,"Which order's shipment tracking number is ""3452""? Give me the id of the order.",return orders ;return shipments of #1 ;return tracking numbers of #2 ;return #1 where #3 is 3452 ;return id of #4,"[""SELECT['orders']"", ""PROJECT['shipments of #REF', '#1']"", ""PROJECT['tracking numbers of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is 3452']"", ""PROJECT['id of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_6891,Find the ids of all the order items whose product id is 11.,return order items ;return product ids of  #1 ;return #1 where  #2 is  11 ;return ids of  #3,"[""SELECT['order items']"", ""PROJECT['product ids of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 11']"", ""PROJECT['ids of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6892,Find all the order items whose product id is 11. What are the order item ids?,return order  items ;return #1 whose product id is  11 ;return order  item ids of  #2,"[""SELECT['order items']"", ""FILTER['#1', 'whose product id is 11']"", ""PROJECT['order item ids of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6893,"List the name of all the distinct customers who have orders with status ""Packing"".",return customers ;return orders of  #1 ;return statuses of  #2 ;return #1 where #3 is  Packing ;return distinct #4 ;return names of  #5,"[""SELECT['customers']"", ""PROJECT['orders of #REF', '#1']"", ""PROJECT['statuses of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Packing']"", ""PROJECT['distinct #REF', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_6894,"Which customers have orders with status ""Packing""? Give me the customer names.",return customers ;return orders of #1 ;return statuses of #2 ;return #1 where #3 is Packing ;return names of #4,"[""SELECT['customers']"", ""PROJECT['orders of #REF', '#1']"", ""PROJECT['statuses of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Packing']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_6895,"Find the details of all the distinct customers who have orders with status ""On Road"".",return customers ;return orders of #1 ;return statuses of #2 ;return #1 where #3 is On Road ;return distinct #4 ;return details of #5,"[""SELECT['customers']"", ""PROJECT['orders of #REF', '#1']"", ""PROJECT['statuses of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is On Road']"", ""PROJECT['distinct #REF', '#4']"", ""PROJECT['details of #REF', '#5']""]","['select', 'project', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_6897,What is the name of the customer who has the most orders?,return customers ;return orders of #1 ;return number of  #2 for each #1 ;return #1 where #3 is highest ;return name of #4,"[""SELECT['customers']"", ""PROJECT['orders of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_6898,Which customer made the most orders? Find the customer name.,return customers ;return #1 who  made the  most orders ;return the  name of  #2,"[""SELECT['customers']"", ""FILTER['#1', 'who made the most orders']"", ""PROJECT['the name of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6899,What is the customer id of the customer who has the most orders?,return customers ;return orders of  #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is  highest ;return customer id of  #4,"[""SELECT['customers']"", ""PROJECT['orders of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['customer id of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_69,How many students attend course English?,return courses ;return students who  attend #1 ;return #2 where  #1 is English ;return number of  #3,"[""SELECT['courses']"", ""PROJECT['students who attend #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is English']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_690,Count the number of customers who hold an account.,return customers ;return #1 who  hold an account ;return the number of #2,"[""SELECT['customers']"", ""FILTER['#1', 'who hold an account']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_6900,Find the id of the customer who made the most orders.,return customers ;return orders #1 made ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return id of  #4,"[""SELECT['customers']"", ""PROJECT['orders #REF made', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['id of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_6901,"Give me a list of id and status of orders which belong to the customer named ""Jeramie"".","return customers ;return #1 named Jeramie ;return orders of  #2 ;return ids of  #3 ;return statuses of  #3 ;return #4 ,   #5","[""SELECT['customers']"", ""FILTER['#1', 'named Jeramie']"", ""PROJECT['orders of #REF', '#2']"", ""PROJECT['ids of #REF', '#3']"", ""PROJECT['statuses of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_6902,"Which orders are made by the customer named ""Jeramie""? Give me the order ids and status.","return customers ;return #1 named Jeramie ;return orders of  #2 ;return order ids of  #3 ;return statuses of  #3 ;return #4 ,  #5","[""SELECT['customers']"", ""FILTER['#1', 'named Jeramie']"", ""PROJECT['orders of #REF', '#2']"", ""PROJECT['order ids of #REF', '#3']"", ""PROJECT['statuses of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_6903,"Find the dates of orders which belong to the customer named ""Jeramie"".",return customers ;return #1 named Jeramie ;return orders of  #2 ;return dates of  #3,"[""SELECT['customers']"", ""FILTER['#1', 'named Jeramie']"", ""PROJECT['orders of #REF', '#2']"", ""PROJECT['dates of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_6904,"What are the dates of the orders made by the customer named ""Jeramie""?",return customers ;return orders of  #1 ;return #2 where #1 is  named Jeramie ;return dates of  #3,"[""SELECT['customers']"", ""PROJECT['orders of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is named Jeramie']"", ""PROJECT['dates of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6905,Give me the names of customers who have placed orders between 2009-01-01 and 2010-01-01.,return orders ;return #1 placed between 2009-01-01 and 2010-01-01 ;return customers of #2 ;return the  names of #3,"[""SELECT['orders']"", ""FILTER['#1', 'placed betweenleftside 2009-01-01']"", ""FILTER['#2', 'placed betweenrightside 2010-01-01']"", ""PROJECT['customers of #REF', '#3']"", ""PROJECT['the names of #REF', '#4']""]","['select', 'filter', 'filter', 'project', 'project']",train
SPIDER_train_6906,Which customers made orders between 2009-01-01 and 2010-01-01? Find their names.,return orders ;return #1 that  are between 2009-01-01 and 2010-01-01 ;return the  customers who made #2 ;return the  names of #3,"[""SELECT['orders']"", ""FILTER['#1', 'that are betweenleftside 2009-01-01']"", ""FILTER['#2', 'that are betweenrightside 2010-01-01']"", ""PROJECT['the customers who made #REF', '#3']"", ""PROJECT['the names of #REF', '#4']""]","['select', 'filter', 'filter', 'project', 'project']",train
SPIDER_train_6907,Give me a list of distinct product ids from orders placed between 1975-01-01 and 1976-01-01?,return orders ;return #1 placed between 1975-01-01 and 1976-01-01 ;return distinct product ids from  #2,"[""SELECT['orders']"", ""FILTER['#1', 'placed betweenleftside 1975-01-01']"", ""FILTER['#2', 'placed betweenrightside 1976-01-01']"", ""PROJECT['distinct product ids from #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_6908,What are the distinct ids of products ordered between 1975-01-01 and 1976-01-01??,return products ;return #1 ordered between 1975-01-01 and  1976-01-01 ;return distinct ids of #2,"[""SELECT['products']"", ""FILTER['#1', 'ordered betweenleftside 1975-01-01']"", ""FILTER['#2', 'ordered betweenrightside 1976-01-01']"", ""PROJECT['distinct ids of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_6909,"Find the names of the customers who have order status both ""On Road"" and ""Shipped"".",return customers ;return orders of #1 ;return statuses of #2 ;return #1 where #3 is on Road ;return #1 where #3 is Shipped ;return #1 in  both #4 and  #5 ;return names of #6,"[""SELECT['customers']"", ""PROJECT['orders of #REF', '#1']"", ""PROJECT['statuses of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is on Road']"", ""COMPARATIVE['#1', '#3', 'is Shipped']"", ""INTERSECTION['#1', '#4', '#5']"", ""PROJECT['names of #REF', '#6']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_6910,"Which customers have both ""On Road"" and ""Shipped"" as order status? List the customer names.",return customers ;return orders of  #1 ;return statuses of  #2 ;return #1 where #3 is  On Road ;return #1 where #3 is  Shipped ;return #1 of  both #4 and  #5 ;return customer names of  #6,"[""SELECT['customers']"", ""PROJECT['orders of #REF', '#1']"", ""PROJECT['statuses of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is On Road']"", ""COMPARATIVE['#1', '#3', 'is Shipped']"", ""INTERSECTION['#1', '#4', '#5']"", ""PROJECT['customer names of #REF', '#6']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_6911,"Find the id of the customers who have order status both ""On Road"" and ""Shipped"".",return customers ;return orders of  #1 ;return status of  #2 ;return #1 where  #3 is  On Road ;return #1 where  #3 is  Shipped ;return #1 of  both #4 and #5 ;return ids of  #6,"[""SELECT['customers']"", ""PROJECT['orders of #REF', '#1']"", ""PROJECT['status of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is On Road']"", ""COMPARATIVE['#1', '#3', 'is Shipped']"", ""INTERSECTION['#1', '#4', '#5']"", ""PROJECT['ids of #REF', '#6']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_6912,"Which customers have both ""On Road"" and ""Shipped"" as order status? List the customer ids.",return customers ;return orders of #1 ;return statuses of #2 ;return #1 where #3 is On Road ;return #1 where #3 is Shipped ;return #1 in  both #4 and  #5 ;return customer ids of #6,"[""SELECT['customers']"", ""PROJECT['orders of #REF', '#1']"", ""PROJECT['statuses of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is On Road']"", ""COMPARATIVE['#1', '#3', 'is Shipped']"", ""INTERSECTION['#1', '#4', '#5']"", ""PROJECT['customer ids of #REF', '#6']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_6913,When was the order placed whose shipment tracking number is 3452? Give me the date.,return shipment ;return tracking number of #1 ;return #1 where #2 is  3452 ;return order of #3 ;return date placed of #4,"[""SELECT['shipment']"", ""AGGREGATE['count', '#1']"", ""COMPARATIVE['#1', '#2', 'is 3452']"", ""PROJECT['order of #REF', '#3']"", ""PROJECT['date placed of #REF', '#4']""]","['select', 'aggregate', 'comparative', 'project', 'project']",train
SPIDER_train_6914,On which day was the order placed whose shipment tracking number is 3452?,return orders ;return shipment tracking numbers of  #1 ;return #1 where  #2 is 3452 ;return day #3 was placed,"[""SELECT['orders']"", ""PROJECT['shipment tracking numbers of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 3452']"", ""PROJECT['day #REF was placed', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6915,What is the placement date of the order whose invoice number is 10?,return orders ;return invoices of #1 ;return invoice numbers of #2 ;return #1 where #3 is  10 ;return placement date of #4,"[""SELECT['orders']"", ""PROJECT['invoices of #REF', '#1']"", ""PROJECT['invoice numbers of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is 10']"", ""PROJECT['placement date of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_6916,On what day was the order with invoice number 10 placed?,return orders ;return invoice of  #1 ;return #1 where  #2 is number 10 ;return day #3 was placed,"[""SELECT['orders']"", ""PROJECT['invoice of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is number 10']"", ""PROJECT['day #REF was placed', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6917,List the count and id of each product in all the orders.,"return orders ;return products in #1 ;return number of  #2 for each #1 ;return ids of #2 ;return #3 ,  #4","[""SELECT['orders']"", ""PROJECT['products in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['ids of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'group', 'project', 'union']",train
SPIDER_train_6918,"For each product, return its id and the number of times it was ordered.","return products ;return ids of #1 ;return times that  #1 was ordered ;return number of  #3 for each #1 ;return #2 ,  #4","[""SELECT['products']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['times that #REF was ordered', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_6919,List the name and count of each product in all orders.,"return orders ;return products in #1 ;return names of  #2 ;return number of  #2 for each  #1 ;return #3 ,  #4","[""SELECT['orders']"", ""PROJECT['products in #REF', '#1']"", ""PROJECT['names of #REF', '#2']"", ""GROUP['count', '#2', '#1']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_692,Count the number of customers.,return customers ;return number of #1,"[""SELECT['customers']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_6920,"For each product, show its name and the number of times it was ordered.","return products ;return names of #1 ;return times #1 was ordered ;return number of  #3 for each #1 ;return #2 ,  #4","[""SELECT['products']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['times #REF was ordered', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_6921,Find the ids of orders which are shipped after 2000-01-01.,return orders ;return #1 which  are  shipped after 2000-01-01 ;return ids of  #2,"[""SELECT['orders']"", ""FILTER['#1', 'which are shipped after 2000-01-01']"", ""PROJECT['ids of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6922,Which orders have shipment after 2000-01-01? Give me the order ids.,return orders ;return shipments of #1 ;return #1 where #2 are after 2000-01-01 ;return order ids of #3,"[""SELECT['orders']"", ""PROJECT['shipments of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'are after 2000-01-01']"", ""PROJECT['order ids of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6923,Find the id of the order which is shipped most recently.,return orders ;return when  #1 was shipped ;return #1 where #2 is  the  most recently ;return the  id of #3,"[""SELECT['orders']"", ""PROJECT['when #REF was shipped', '#1']"", ""COMPARATIVE['#1', '#2', 'is the most recently']"", ""PROJECT['the id of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6924,Which order has the most recent shipment? Give me the order id.,return orders ;return shipments of #1 ;return #1 where #2 is  the  most recent ;return order  id of #3,"[""SELECT['orders']"", ""PROJECT['shipments of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the most recent']"", ""PROJECT['order id of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6925,List the names of all distinct products in alphabetical order.,return products ;return distinct #1 ;return names of  #2 ;return #3 sorted by alphabetical order,"[""SELECT['products']"", ""PROJECT['distinct #REF', '#1']"", ""PROJECT['names of #REF', '#2']"", ""SORT['#3', '#3', 'alphabetical order']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_6926,Sort all the distinct products in alphabetical order.,return products ;return distinct #1 ;return #2 sorted by alphabetical order,"[""SELECT['products']"", ""PROJECT['distinct #REF', '#1']"", ""SORT['#2', '#2', 'alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_6927,List the ids of all distinct orders ordered by placed date.,return orders ;return distinct #1 ;return ids of  #2 ;return dates placed of  #2 ;return #3 sorted by #4,"[""SELECT['orders']"", ""PROJECT['distinct #REF', '#1']"", ""PROJECT['ids of #REF', '#2']"", ""PROJECT['dates placed of #REF', '#2']"", ""SORT['#3', '#4']""]","['select', 'project', 'project', 'project', 'sort']",train
SPIDER_train_6928,"What are ids of the all distinct orders, sorted by placement date?",return distinct orders ;return the ids of #1 ;return the placement date of #1 ;return #2 sorted by #3,"[""SELECT['distinct orders']"", ""PROJECT['the ids of #REF', '#1']"", ""PROJECT['the placement date of #REF', '#1']"", ""SORT['#2', '#3']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_6929,What is the id of the order which has the most items?,return orders ;return items in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return id of  #4,"[""SELECT['orders']"", ""PROJECT['items in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['id of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_693,"Show ids, first names, last names, and phones for all customers.","return customers ;return ids of #1 ;return first names of #1 ;return last names of #1 ;return phones of #1 ;return #2 ,  #3 ,   #4 , #5","[""SELECT['customers']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['first names of #REF', '#1']"", ""PROJECT['last names of #REF', '#1']"", ""PROJECT['phones of #REF', '#1']"", ""UNION['#2', '#3', '#4', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_6930,Which order deals with the most items? Return the order id.,return orders ;return items of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return order  id of  #4,"[""SELECT['orders']"", ""PROJECT['items of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['order id of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_6931,What is the name of the customer who has the largest number of orders?,return customers ;return orders of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return name of  #4,"[""SELECT['customers']"", ""PROJECT['orders of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_6932,Find the name of the customer who made the most orders.,return customers ;return orders #1 made ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return name of  #4,"[""SELECT['customers']"", ""PROJECT['orders #REF made', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_6933,Find the invoice numbers which are created before 1989-09-03 or after 2007-12-25.,"return invoices ;return created date of #1 ;return #1 where #2 is lower than 1989-09-03 ;return #1 where #2 is higher than 2007-12-25 ;return #3 ,  #4 ;return numbers of #5","[""SELECT['invoices']"", ""PROJECT['created date of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is lower than 1989-09-03']"", ""COMPARATIVE['#1', '#2', 'is higher than 2007-12-25']"", ""UNION['#3', '#4']"", ""PROJECT['numbers of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_6934,What are the invoice numbers created before 1989-09-03 or after 2007-12-25?,return invoice numbers ;return #1 created before 1989-09-03 ;return #1 created after 2007-12-25 ;return #2 or  #3,"[""SELECT['invoice numbers']"", ""FILTER['#1', 'created before 1989-09-03']"", ""FILTER['#1', 'created after 2007-12-25']"", ""UNION['#2', '#3']""]","['select', 'filter', 'filter', 'union']",train
SPIDER_train_6935,Find the distinct details of invoices which are created before 1989-09-03 or after 2007-12-25.,return invoices ;return #1 created before 1989-09-03 ;return #1 created after 2007-12-25 ;return #2 and #3 ;return details of  #4 ;return distinct #5,"[""SELECT['invoices']"", ""FILTER['#1', 'created before 1989-09-03']"", ""FILTER['#1', 'created after 2007-12-25']"", ""UNION['#2', '#3']"", ""PROJECT['details of #REF', '#4']"", ""PROJECT['distinct #REF', '#5']""]","['select', 'filter', 'filter', 'union', 'project', 'project']",train
SPIDER_train_6936,What are the distinct details of invoices created before 1989-09-03 or after 2007-12-25?,return invoices ;return #1 created before 1989-09-03 ;return #1 created after 2007-12-25 ;return #2 or  #3 ;return distinct details of  #4,"[""SELECT['invoices']"", ""FILTER['#1', 'created before 1989-09-03']"", ""FILTER['#1', 'created after 2007-12-25']"", ""UNION['#2', '#3']"", ""PROJECT['distinct details of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_6937,"For each customer who has at least two orders, find the customer name and number of orders made.","return customers ;return orders  of  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  at least two ;return customer  names of  #4 ;return number of #2 for each #4 ;return #5 ,   #6","[""SELECT['customers']"", ""PROJECT['orders of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""PROJECT['customer names of #REF', '#4']"", ""GROUP['count', '#2', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'group', 'union']",train
SPIDER_train_6938,Which customers have made at least two orders? Give me each customer name and number of orders made.,"return customers ;return orders made  of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  at least two ;return customer names of #4 ;return orders made  of #4 ;return number of  #6 for each #4 ;return #5 ,  #7","[""SELECT['customers']"", ""PROJECT['orders made of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""PROJECT['customer names of #REF', '#4']"", ""PROJECT['orders made of #REF', '#4']"", ""GROUP['count', '#6', '#4']"", ""UNION['#5', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'group', 'union']",train
SPIDER_train_6939,Find the name of the customers who have at most two orders.,return customers ;return orders of #1 ;return number of  #2 ;return #1 where #2 at most two ;return names of #4,"[""SELECT['customers']"", ""PROJECT['orders of #REF', '#1']"", ""AGGREGATE['count', '#2']"", ""COMPARATIVE['#1', '#2', 'at most two']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'aggregate', 'comparative', 'project']",train
SPIDER_train_694,"What are the ids, full names, and phones of each customer?","return customers ;return ids of  #1 ;return full names of  #1 ;return phones of  #1 ;return #2 ,  #3 ,   #4","[""SELECT['customers']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['full names of #REF', '#1']"", ""PROJECT['phones of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_6940,What are the names of the customers who have made two or less orders?,return customers ;return orders of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 lower than two ;return names of  #4,"[""SELECT['customers']"", ""PROJECT['orders of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'lower than two']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_6941,"List the names of the customers who have once bought product ""food"".",return customers ;return products #1 bought ;return #1 where #2 is  food ;return names of #3,"[""SELECT['customers']"", ""PROJECT['products #REF bought', '#1']"", ""COMPARATIVE['#1', '#2', 'is food']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_6942,"What are the names of the customers who bought product ""food"" at least once?",return customers ;return #1 who  bought product food at least once ;return names of  #2,"[""SELECT['customers']"", ""FILTER['#1', 'who bought product food at least once']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6943,"List the names of customers who have once canceled the purchase of the product ""food"" (the item status is ""Cancel"").",return customers ;return products #1 purchase ;return #1 where #2 is  food ;return item status of #3 ;return #3 where #4 is  Cancel ;return names of #5,"[""SELECT['customers']"", ""PROJECT['products #REF purchase', '#1']"", ""COMPARATIVE['#1', '#2', 'is food']"", ""PROJECT['item status of #REF', '#3']"", ""COMPARATIVE['#3', '#4', 'is Cancel']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'project', 'comparative', 'project']",train
SPIDER_train_6944,"Which customers have ever canceled the purchase of the product ""food"" (the item status is ""Cancel"")?",return customers ;return #1 who  have  ever canceled the  purchase of  the   product food ;return #2 where the  item status is  Cancel,"[""SELECT['customers']"", ""FILTER['#1', 'who have ever canceled the purchase of the product food']"", ""FILTER['#2', 'where the item status is Cancel']""]","['select', 'filter', 'filter']",train
SPIDER_train_6945,How many architects are female?,return architects ;return #1 that  are  female ;return number of #2,"[""SELECT['architects']"", ""FILTER['#1', 'that are female']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_6946,"List the name, nationality and id of all male architects ordered by their names lexicographically.","return architects ;return #1 that are male ;return names of #2 ;return nationalities of #2 ;return ids of #2 ;return #3 ,  #4 ,   #5 ;return #6 sorted by #3 lexicographically","[""SELECT['architects']"", ""FILTER['#1', 'that are male']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['nationalities of #REF', '#2']"", ""PROJECT['ids of #REF', '#2']"", ""UNION['#3', '#4', '#5']"", ""SORT['#6', '#3', 'lexicographically']""]","['select', 'filter', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_6947,What is the maximum length in meters for the bridges and what are the architects' names?,"return bridges ;return lengths in  meters of #1 ;return the  highest of #2 ;return #1 where #2 is equal to #3 ;return architects of #4 ;return names of #5 ;return #6 ,  #3","[""SELECT['bridges']"", ""PROJECT['lengths in meters of #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""COMPARATIVE['#1', '#2', 'is equal to #3']"", ""PROJECT['architects of #REF', '#4']"", ""PROJECT['names of #REF', '#5']"", ""UNION['#6', '#3']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_6948,What is the average length in feet of the bridges?,return bridges ;return lengths of  #1 in feet ;return average of  #2,"[""SELECT['bridges']"", ""PROJECT['lengths of #REF in feet', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_6949,What are the names and year of construction for the mills of 'Grondzeiler' type?,"return mills ;return types of  #1 ;return #1 where #2 is  'Grondzeiler ;return names of  #3 ;return years of  construction of #3 ;return #4 ,  #5","[""SELECT['mills']"", ""PROJECT['types of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Grondzeiler']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['years of construction of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_695,What is the phone and email for customer with first name Aniyah and last name Feest?,"return customers ;return #1 with  first name Aniyah ;return #2 with  last name Feest ;return the  phone of #3 ;return the  email of #3 ;return #4 ,  #5","[""SELECT['customers']"", ""FILTER['#1', 'with first name Aniyah']"", ""FILTER['#2', 'with last name Feest']"", ""PROJECT['the phone of #REF', '#3']"", ""PROJECT['the email of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'filter', 'project', 'project', 'union']",train
SPIDER_train_6950,What are the distinct names and nationalities of the architects who have ever built a mill?,"return architects ;return #1 who built a mill ;return distinct names of #2 ;return nationalities of #2 ;return #3 ,  #4","[""SELECT['architects']"", ""FILTER['#1', 'who built a mill']"", ""PROJECT['distinct names of #REF', '#2']"", ""PROJECT['nationalities of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_6951,What are the names of the mills which are not located in 'Donceel'?,return mills ;return #1 not located in 'Donceel ;return names of #2,"[""SELECT['mills']"", ""FILTER['#1', 'not located in Donceel']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_6952,What are the distinct types of mills that are built by American or Canadian architects?,"return architects ;return #1 that  are American ;return #1 that  are Canadian ;return mills built by #2 ;return mills built by #3 ;return #4 ,  #5 ;return the  distinct types of #6","[""SELECT['architects']"", ""FILTER['#1', 'that are American']"", ""FILTER['#1', 'that are Canadian']"", ""PROJECT['mills built by #REF', '#2']"", ""PROJECT['mills built by #REF', '#3']"", ""UNION['#4', '#5']"", ""PROJECT['the distinct types of #REF', '#6']""]","['select', 'filter', 'filter', 'project', 'project', 'union', 'project']",train
SPIDER_train_6953,What are the ids and names of the architects who built at least 3 bridges ?,"return architects ;return bridges #1 built ;return number of  #2 for each  #1 ;return #1 where #3 is  at least 3 ;return ids of  #4 ;return names of  #4 ;return #5 ,  #6","[""SELECT['architects']"", ""PROJECT['bridges #REF built', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 3']"", ""PROJECT['ids of #REF', '#4']"", ""PROJECT['names of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_6954,"What is the id, name and nationality of the architect who built most mills?","return architects ;return #1 who  built the  most mills ;return the  id of  #2 ;return the  name of  #2 ;return the  nationality of  #2 ;return #3 ,  #4 ,   #5","[""SELECT['architects']"", ""FILTER['#1', 'who built the most mills']"", ""PROJECT['the id of #REF', '#2']"", ""PROJECT['the name of #REF', '#2']"", ""PROJECT['the nationality of #REF', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_6955,"What are the ids, names and genders of the architects who built two bridges or one mill?","return architects ;return bridges #1 built ;return number of  #2 for each  #1 ;return #1 where #3 is  two ;return mills #1 built ;return number of  #5 for each  #1 ;return #1 where #6 is  one ;return #4 or  #7 ;return ids of  #8 ;return names of  #8 ;return genders of  #8 ;return #9 ,  #10 ,   #11","[""SELECT['architects']"", ""PROJECT['bridges #REF built', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is two']"", ""PROJECT['mills #REF built', '#1']"", ""GROUP['count', '#5', '#1']"", ""COMPARATIVE['#1', '#6', 'is one']"", ""UNION['#4', '#7']"", ""PROJECT['ids of #REF', '#8']"", ""PROJECT['names of #REF', '#8']"", ""PROJECT['genders of #REF', '#8']"", ""UNION['#9', '#10', '#11']""]","['select', 'project', 'group', 'comparative', 'project', 'group', 'comparative', 'union', 'project', 'project', 'project', 'union']",train
SPIDER_train_6956,What is the location of the bridge named 'Kolob Arch' or 'Rainbow Bridge'?,return bridges ;return #1 named 'Kolob Arch ;return #1 named 'Rainbow bridge ;return #2 or  #3 ;return location of  #4,"[""SELECT['bridges']"", ""FILTER['#1', 'named Kolob Arch']"", ""FILTER['#1', 'named Rainbow bridge']"", ""UNION['#2', '#3']"", ""PROJECT['location of #REF', '#4']""]","['select', 'filter', 'filter', 'union', 'project']",train
SPIDER_train_6957,Which of the mill names contains the french word 'Moulin'?,return mill names ;return #1 that  contains the  french word 'Moulin,"[""SELECT['mill names']"", ""FILTER['#1', 'that contains the french word Moulin']""]","['select', 'filter']",train
SPIDER_train_6958,What are the distinct name of the mills built by the architects who have also built a bridge longer than 80 meters?,return architects ;return #1 who  have  built a bridge longer than 80 meters ;return mills built by #2 ;return distinct names of  #3,"[""SELECT['architects']"", ""FILTER['#1', 'who have built a bridge longer than 80 meters']"", ""PROJECT['mills built by #REF', '#2']"", ""PROJECT['distinct names of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_6959,"What is the most common mill type, and how many are there?","return mill ;return type of  #1 ;return number of  #1 for each  #2 ;return #2 where #3 is  highest ;return number of  #4 ;return #4 ,  #5","[""SELECT['mill']"", ""PROJECT['type of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""SUPERLATIVE['max', '#2', '#3']"", ""AGGREGATE['count', '#4']"", ""UNION['#4', '#5']""]","['select', 'project', 'group', 'superlative', 'aggregate', 'union']",train
SPIDER_train_696,Return the phone and email of the customer with the first name Aniyah and last name Feest.,"return customers ;return first names of  #1 ;return #1 where #2 is  Aniyah ;return #1 where #2 is  Feest ;return #1 of  both #3 and  #4 ;return phone of  #5 ;return email of  #5 ;return #6 ,  #7","[""SELECT['customers']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Aniyah']"", ""COMPARATIVE['#1', '#2', 'is Feest']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['phone of #REF', '#5']"", ""PROJECT['email of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_6960,How many architects haven't built a mill before year 1850?,return architects ;return #1 who  have  not  built mills before 1850 ;return number of  #2,"[""SELECT['architects']"", ""FILTER['#1', 'who have not built mills before 1850']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_6961,"show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length.",return bridges ;return archtects that  designed #1 ;return #1 where #2 is  american ;return names of  #3 ;return length of  #3 in feet ;return #4 sorted by #5,"[""SELECT['bridges']"", ""PROJECT['archtects that designed #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is american']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['length of #REF in feet', '#3']"", ""SORT['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'sort']",train
SPIDER_train_6962,How many book clubs are there?,return book clubs ;return number of #1,"[""SELECT['book clubs']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_6963,Count the number of book clubs.,return book clubs ;return the number of #1,"[""SELECT['book clubs']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_6964,"show the titles, and authors or editors for all books made after the year 1989.","return books ;return #1 made after 1989 ;return titles of  #2 ;return authors of  #2 ;return editors of  #2 ;return #3 ,  #4 ,   #5","[""SELECT['books']"", ""FILTER['#1', 'made after 1989']"", ""PROJECT['titles of #REF', '#2']"", ""PROJECT['authors of #REF', '#2']"", ""PROJECT['editors of #REF', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_6965,What are the titles and authors or editors that correspond to books made after 1989?,"return books ;return #1 made after 1989 ;return titles that  correspond to #2 ;return authors that  correspond to #2 ;return editors that  correspond to #2 ;return #3 ,  #4 or  #5","[""SELECT['books']"", ""FILTER['#1', 'made after 1989']"", ""PROJECT['titles that correspond to #REF', '#2']"", ""PROJECT['authors that correspond to #REF', '#2']"", ""PROJECT['editors that correspond to #REF', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_6966,Show all distinct publishers for books.,return books ;return publishers for #1 ;return distinct #2,"[""SELECT['books']"", ""PROJECT['publishers for #REF', '#1']"", ""PROJECT['distinct #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_6967,What are all the different book publishers?,return book publishers ;return different #1,"[""SELECT['book publishers']"", ""PROJECT['different #REF', '#1']""]","['select', 'project']",train
SPIDER_train_6968,"Show the years, book titles, and publishers for all books, in descending order by year.","return books ;return years of  #1 ;return book titles of  #1 ;return publishers of  #1 ;return #2 ,  #3 ,   #4 ;return #5 sorted by #2 in descending order","[""SELECT['books']"", ""PROJECT['years of #REF', '#1']"", ""PROJECT['book titles of #REF', '#1']"", ""PROJECT['publishers of #REF', '#1']"", ""UNION['#2', '#3', '#4']"", ""SORT['#5', '#2', 'in descending order']""]","['select', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_6969,"What are the years, titles, and publishers for all books, ordered by year descending?","return books ;return years of #1 ;return titles of #1 ;return publishers of #1 ;return #2 ,  #3 ,   #4 ;return #5 sorted by #2 descending","[""SELECT['books']"", ""PROJECT['years of #REF', '#1']"", ""PROJECT['titles of #REF', '#1']"", ""PROJECT['publishers of #REF', '#1']"", ""UNION['#2', '#3', '#4']"", ""SORT['#5', '#2', 'descending']""]","['select', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_697,Show the number of customer cards.,return customer cards ;return number of #1,"[""SELECT['customer cards']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_6970,Show all publishers and the number of books for each publisher.,return publishers ;return books of #1 ;return number of  #2 for each #1,"[""SELECT['publishers']"", ""PROJECT['books of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_6971,How many books are there for each publisher?,return publishers ;return books of  #1 ;return number of  #2 for each  #1,"[""SELECT['publishers']"", ""PROJECT['books of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_6972,What is the publisher with most number of books?,return publishers ;return books of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest,"[""SELECT['publishers']"", ""PROJECT['books of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_6973,Return the publisher that has published the most books.,return publishers ;return books of #1 ;return number of #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['publishers']"", ""PROJECT['books of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_6974,Show all book categories and the number of books in each category.,return books ;return categories of #1 ;return number of  #1 for each #2,"[""SELECT['books']"", ""PROJECT['categories of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""UNION['#2', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_6975,How many books fall into each category?,return categories ;return books in #1 ;return number of #2 for each #1,"[""SELECT['categories']"", ""PROJECT['books in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_6976,List categories that have at least two books after year 1989.,return books ;return #1 after year 1989 ;return categories of #2 ;return number of  #2 for each #3 ;return #3 where #4 is  at least two,"[""SELECT['books']"", ""FILTER['#1', 'after year 1989']"", ""PROJECT['categories of #REF', '#2']"", ""GROUP['count', '#2', '#3']"", ""COMPARATIVE['#3', '#4', 'is at least two']""]","['select', 'filter', 'project', 'group', 'comparative']",train
SPIDER_train_6977,What categories have two or more corresponding books that were made after 1989?,return categories ;return books of  #1 ;return #2 made after 1989 ;return number of  #3 for each  #1 ;return #1 where #4 is  at least two,"[""SELECT['categories']"", ""PROJECT['books of #REF', '#1']"", ""FILTER['#2', 'made after 1989']"", ""GROUP['count', '#3', '#1']"", ""COMPARATIVE['#1', '#4', 'is at least two']""]","['select', 'project', 'filter', 'group', 'comparative']",train
SPIDER_train_6978,Show publishers with a book published in 1989 and a book in 1990.,return publishers ;return #1 with a book published in 1989 ;return #1 with a book published in 1990 ;return #1 in both #2 and #3,"[""SELECT['publishers']"", ""FILTER['#1', 'with a book published in 1989']"", ""FILTER['#1', 'with a book published in 1990']"", ""INTERSECTION['#1', '#2', '#3']""]","['select', 'filter', 'filter', 'intersection']",train
SPIDER_train_6979,What are the publishers who have published a book in both 1989 and 1990?,return publishers ;return #1 who  have  published a book ;return #2 in 1989 ;return #2 in 1990 ;return #1 in both #3 and  #4,"[""SELECT['publishers']"", ""FILTER['#1', 'who have published a book']"", ""FILTER['#2', 'in 1989']"", ""FILTER['#2', 'in 1990']"", ""INTERSECTION['#1', '#3', '#4']""]","['select', 'filter', 'filter', 'filter', 'intersection']",train
SPIDER_train_698,How many customer cards are there?,return customer cards ;return number of #1,"[""SELECT['customer cards']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_6980,Show all publishers which do not have a book in 1989.,return publishers ;return books of #1 ;return #1 where #2 is  not in 1989,"[""SELECT['publishers']"", ""PROJECT['books of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not in 1989']""]","['select', 'project', 'comparative']",train
SPIDER_train_6981,Which publishers did not publish a book in 1989?,return publishers ;return #1 that did publish a book in  1989 ;return #1 besides  #2,"[""SELECT['publishers']"", ""FILTER['#1', 'that did publish a book in 1989']"", ""DISCARD['#1', '#2']""]","['select', 'filter', 'discard']",train
SPIDER_train_6982,"Show all movie titles, years, and directors, ordered by budget.","return movies ;return titles of #1 ;return years of #1 ;return directors of #1 ;return budgets of #1 ;return #2 ,  #3 ,   #4 ;return #6 sorted by #5","[""SELECT['movies']"", ""PROJECT['titles of #REF', '#1']"", ""PROJECT['years of #REF', '#1']"", ""PROJECT['directors of #REF', '#1']"", ""PROJECT['budgets of #REF', '#1']"", ""UNION['#2', '#3', '#4']"", ""SORT['#6', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_6983,"What are the titles, years, and directors of all movies, ordered by budget in millions?","return movies ;return titles of #1 ;return years of #1 ;return directors of #1 ;return budgets of #1 ;return #2 ,  #3 ,   #4 ;return #6 sorted by #5 in  millions","[""SELECT['movies']"", ""PROJECT['titles of #REF', '#1']"", ""PROJECT['years of #REF', '#1']"", ""PROJECT['directors of #REF', '#1']"", ""PROJECT['budgets of #REF', '#1']"", ""UNION['#2', '#3', '#4']"", ""SORT['#6', '#5', 'in millions']""]","['select', 'project', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_6984,How many movie directors are there?,return movie directors ;return number of  #1,"[""SELECT['movie directors']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_6985,Count the number of different directors.,return directors ;return different #1 ;return Count of  #2,"[""SELECT['directors']"", ""PROJECT['different #REF', '#1']"", ""PROJECT['Count of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_6986,What is the title and director for the movie with highest worldwide gross in the year 2000 or before?,"return movies ;return worldwide gross of #1 ;return #2 in the   year 2000 or  before ;return #1 where #3 is  the   highest ;return the   title of #4 ;return the   director of #4 ;return #5 ,  #6","[""SELECT['movies']"", ""PROJECT['worldwide gross of #REF', '#1']"", ""FILTER['#2', 'in the year 2000 or before']"", ""COMPARATIVE['#1', '#3', 'is the highest']"", ""PROJECT['the title of #REF', '#4']"", ""PROJECT['the director of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'filter', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_6987,Return the title and director of the movie released in the year 2000 or earlier that had the highest worldwide gross.,"return movies ;return years released of  #1 ;return #1 where #2 is  2000 or  earlier ;return worldwide gross of  #1 ;return #1 where #4 is  highest ;return #3 or  #5 ;return title of  #6 ;return director of  #6 ;return #7 ,  #8","[""SELECT['movies']"", ""PROJECT['years released of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 2000 or earlier']"", ""PROJECT['worldwide gross of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#4']"", ""UNION['#3', '#5']"", ""PROJECT['title of #REF', '#6']"", ""PROJECT['director of #REF', '#6']"", ""UNION['#7', '#8']""]","['select', 'project', 'comparative', 'project', 'superlative', 'union', 'project', 'project', 'union']",train
SPIDER_train_6988,Show all director names who have a movie in both year 1999 and 2000.,return directors ;return movies of #1 ;return years of #2 ;return #2 where #3 is  1999 ;return #2 where #3 is  2000 ;return the  number of  #4 for each #1 ;return the  number of  #5 for each #1 ;return #1 where #6 is  at least one ;return #1 where #7 is  at least one ;return #1 in both #8 and #9 ;return the  names of #10,"[""SELECT['directors']"", ""PROJECT['movies of #REF', '#1']"", ""PROJECT['years of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is 1999']"", ""COMPARATIVE['#2', '#3', 'is 2000']"", ""GROUP['count', '#4', '#1']"", ""GROUP['count', '#5', '#1']"", ""COMPARATIVE['#1', '#6', 'is at least one']"", ""COMPARATIVE['#1', '#7', 'is at least one']"", ""INTERSECTION['#1', '#8', '#9']"", ""PROJECT['the names of #REF', '#10']""]","['select', 'project', 'project', 'comparative', 'comparative', 'group', 'group', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_6989,Which directors had a movie both in the year 1999 and 2000?,return directors ;return movies of #1 ;return #2 in 1999 ;return #2 in 2000 ;return #1 of both #3 and #4,"[""SELECT['directors']"", ""PROJECT['movies of #REF', '#1']"", ""FILTER['#2', 'in 1999']"", ""FILTER['#2', 'in 2000']"", ""INTERSECTION['#1', '#3', '#4']""]","['select', 'project', 'filter', 'filter', 'intersection']",train
SPIDER_train_699,"Show ids, customer ids, card type codes, card numbers for all cards.","return cards ;return ids of  #1 ;return customers with #1 ;return ids of  #3 ;return card  type codes of  #1 ;return card  numbers of  #1 ;return #2 ,  #4 ,   #5 , #6","[""SELECT['cards']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['customers with #REF', '#1']"", ""PROJECT['ids of #REF', '#3']"", ""PROJECT['card type codes of #REF', '#1']"", ""PROJECT['card numbers of #REF', '#1']"", ""UNION['#2', '#4', '#5', '#6']""]","['select', 'project', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_6990,Show all director names who have a movie in the year 1999 or 2000.,return directors ;return movies of  #1 ;return years of  #2 ;return #1 where #3 is  1999 ;return #1 where #3 is  2000 ;return #4 or  #5 ;return names of  #6,"[""SELECT['directors']"", ""PROJECT['movies of #REF', '#1']"", ""PROJECT['years of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is 1999']"", ""COMPARATIVE['#1', '#3', 'is 2000']"", ""UNION['#4', '#5']"", ""PROJECT['names of #REF', '#6']""]","['select', 'project', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_6991,Which directors had a movie in either 1999 or 2000?,return directors ;return movies of #1 ;return #2 in  1999 ;return #2 in  2000 ;return #1 of #3 or  #4,"[""SELECT['directors']"", ""PROJECT['movies of #REF', '#1']"", ""FILTER['#2', 'in 1999']"", ""FILTER['#2', 'in 2000']"", ""FILTER['#1', 'of #3 or #4']""]","['select', 'project', 'filter', 'filter', 'filter']",train
SPIDER_train_6992,"What is the average, maximum, and minimum budget for all movies before 2000.","return movies ;return #1 before 2000 ;return budgets of #2 ;return average of #3 ;return maximum of #3 ;return minimum of #3 ;return #4 , #5 ,  #6","[""SELECT['movies']"", ""FILTER['#1', 'before 2000']"", ""PROJECT['budgets of #REF', '#2']"", ""AGGREGATE['avg', '#3']"", ""AGGREGATE['max', '#3']"", ""AGGREGATE['min', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'filter', 'project', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_6993,"Return the average, maximum, and minimum budgets in millions for movies made before the year 2000.","return movies ;return years made of  #1 ;return #1 where #2 is  before 2000 ;return budgets in millions of  #3 ;return average of  #4 ;return maximum of  #4 ;return minimum of  #4 ;return #5 ,  #6 ,   #7","[""SELECT['movies']"", ""PROJECT['years made of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is before 2000']"", ""PROJECT['budgets in millions of #REF', '#3']"", ""AGGREGATE['avg', '#4']"", ""AGGREGATE['max', '#4']"", ""AGGREGATE['min', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'comparative', 'project', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_6994,List all company names with a book published by Alyson.,return Alyson ;return books published by #1 ;return companies of #2 ;return names of #3,"[""SELECT['Alyson']"", ""PROJECT['books published by #REF', '#1']"", ""PROJECT['companies of #REF', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'project', 'project']",train
SPIDER_train_6995,What are all the company names that have a book published by Alyson?,return Alyson ;return books published by #1 ;return company names that have #2,"[""SELECT['Alyson']"", ""PROJECT['books published by #REF', '#1']"", ""PROJECT['company names that have #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_6996,Show the movie titles and book titles for all companies in China.,"return companies ;return #1 in China ;return movies of  #2 ;return titles of  #3 ;return books of  #2 ;return titles of  #5 ;return #4 ,  #6","[""SELECT['companies']"", ""FILTER['#1', 'in China']"", ""PROJECT['movies of #REF', '#2']"", ""PROJECT['titles of #REF', '#3']"", ""PROJECT['books of #REF', '#2']"", ""PROJECT['titles of #REF', '#5']"", ""UNION['#4', '#6']""]","['select', 'filter', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_6997,What are the titles of movies and books corresponding to companies incorporated in China?,"return companies ;return #1 incorporated in China ;return movies of  #2 ;return titles of  #3 ;return books of  #2 ;return titles of  #5 ;return #4 ,  #6","[""SELECT['companies']"", ""FILTER['#1', 'incorporated in China']"", ""PROJECT['movies of #REF', '#2']"", ""PROJECT['titles of #REF', '#3']"", ""PROJECT['books of #REF', '#2']"", ""PROJECT['titles of #REF', '#5']"", ""UNION['#4', '#6']""]","['select', 'filter', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_6998,Show all company names with a movie directed in year 1999.,return movies ;return #1 in 1999 ;return companies that  directed #2 ;return names of #3,"[""SELECT['movies']"", ""FILTER['#1', 'in 1999']"", ""PROJECT['companies that directed #REF', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_6999,What are all company names that have a corresponding movie directed in the year 1999?,return companies ;return movies of  #1 ;return years directed of  #2 ;return #1 where #3 is  1999 ;return names of  #4,"[""SELECT['companies']"", ""PROJECT['movies of #REF', '#1']"", ""PROJECT['years directed of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is 1999']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_7,What are the names of the states where at least 3 heads were born?,return states ;return heads born in #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least 3 ;return names of  #4,"[""SELECT['states']"", ""PROJECT['heads born in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_70,How many students are attending English courses?,return students ;return courses of  #1 ;return #1 where  #2 are  English ;return number of  #3,"[""SELECT['students']"", ""PROJECT['courses of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'are English']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_700,"What are card ids, customer ids, card types, and card numbers for each customer card?","return customer cards ;return card   ids of  #1 ;return customer ids of  #1 ;return card   types of  #1 ;return card   numbers of  #1 ;return #2 ,  #3 ,   #4 , #5","[""SELECT['customer cards']"", ""PROJECT['card ids of #REF', '#1']"", ""PROJECT['customer ids of #REF', '#1']"", ""PROJECT['card types of #REF', '#1']"", ""PROJECT['card numbers of #REF', '#1']"", ""UNION['#2', '#3', '#4', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_701,Show the date valid from and the date valid to for the card with card number '4560596484842'.,return card numbers ;return #1 that  are  '4560596484842 ;return date  valid to  of  #2 ;return date  valid from of  #2 ;return #3 or #4,"[""SELECT['card numbers']"", ""FILTER['#1', 'that are 4560596484842']"", ""PROJECT['date valid to of #REF', '#2']"", ""PROJECT['date valid from of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_702,What are the valid from and valid to dates for the card with the number 4560596484842?,"return cards ;return numbers of  #1 ;return #1 where #2 is  4560596484842 ;return valid from  date of  #3 ;return valid to date of  #3 ;return #4 ,  #5","[""SELECT['cards']"", ""PROJECT['numbers of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 4560596484842']"", ""PROJECT['valid from date of #REF', '#3']"", ""PROJECT['valid to date of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_703,"What is the first name, last name, and phone of the customer with card 4560596484842.","return customers ;return cards of  #1 ;return #1 where #2 is  4560596484842 ;return first name  of  #3 ;return last name  of  #3 ;return phone of  #3 ;return #4 ,  #5 ,   #6","[""SELECT['customers']"", ""PROJECT['cards of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 4560596484842']"", ""PROJECT['first name of #REF', '#3']"", ""PROJECT['last name of #REF', '#3']"", ""PROJECT['phone of #REF', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_704,Return the full name and phone of the customer who has card number 4560596484842.,"return customers ;return card numbers of  #1 ;return #1 where  #2 is 4560596484842 ;return full name of  #3 ;return phone of  #3 ;return #4 ,  #5","[""SELECT['customers']"", ""PROJECT['card numbers of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 4560596484842']"", ""PROJECT['full name of #REF', '#3']"", ""PROJECT['phone of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_705,How many cards does customer Art Turcotte have?,return customers ;return cards of  #1 ;return #2 where  #1 is  Art Turcotte ;return number of #3,"[""SELECT['customers']"", ""PROJECT['cards of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Art Turcotte']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_706,Count the number of cards the customer with the first name Art and last name Turcotte has.,return customers ;return first names of  #1 ;return #1 where #2 is  Art ;return last names of  #1 ;return #1 where #4 is  Turcotte ;return #1 of  both #3 and  #5 ;return cards of  #6 ;return number of  #7,"[""SELECT['customers']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Art']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is Turcotte']"", ""INTERSECTION['#1', '#3', '#5']"", ""PROJECT['cards of #REF', '#6']"", ""AGGREGATE['count', '#7']""]","['select', 'project', 'comparative', 'project', 'comparative', 'intersection', 'project', 'aggregate']",train
SPIDER_train_707,How many debit cards do we have?,return debit cards ;return number of #1,"[""SELECT['debit cards']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_708,Count the number of customer cards of the type Debit.,return customers ;return cards of  #1 ;return types of  #2 ;return #2 where #3 is  Debit ;return number of  #4,"[""SELECT['customers']"", ""PROJECT['cards of #REF', '#1']"", ""PROJECT['types of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is Debit']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'project', 'comparative', 'aggregate']",train
SPIDER_train_709,How many credit cards does customer Blanche Huels have?,return customers ;return credit cards of  #1 ;return #2 where  #1 is  Blanche Huels ;return number of #3,"[""SELECT['customers']"", ""PROJECT['credit cards of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Blanche Huels']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_71,How many courses do the student whose id is 171 attend?,return students ;return ids of  #1 ;return #1 where  #2 is 171 ;return courses of  #3 ;return number of  #4,"[""SELECT['students']"", ""PROJECT['ids of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 171']"", ""PROJECT['courses of #REF', '#3']"", ""AGGREGATE['count', '#4']""]","['select', 'project', 'comparative', 'project', 'aggregate']",train
SPIDER_train_710,Count the number of credit cards that the customer with first name Blanche and last name Huels has.,return customers ;return #1 with  first name  Blanche and last name Huels ;return credit cards of  #2 ;return number of #3,"[""SELECT['customers']"", ""FILTER['#1', 'with first name Blanche and last name Huels']"", ""PROJECT['credit cards of #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_711,Show all customer ids and the number of cards owned by each customer.,return customers ;return number of  cards owned by each #1 ;return ids of  #1 ;return #2 or #3,"[""SELECT['customers']"", ""PROJECT['cards owned by each #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['ids of #REF', '#1']"", ""UNION['#3', '#4']""]","['select', 'project', 'group', 'project', 'union']",train
SPIDER_train_712,"What are the different customer ids, and how many cards does each one hold?","return customers ;return cards of #1 ;return number of  #2 for each  #1 ;return ids of #1 ;return #4 ,  #3","[""SELECT['customers']"", ""PROJECT['cards of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['ids of #REF', '#1']"", ""UNION['#4', '#3']""]","['select', 'project', 'group', 'project', 'union']",train
SPIDER_train_713,"What is the customer id with most number of cards, and how many does he have?","return customers ;return cards of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return customer id of  #4 ;return cards of  #4 ;return number of  #6 ;return #5 ,  #7","[""SELECT['customers']"", ""PROJECT['cards of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['customer id of #REF', '#4']"", ""PROJECT['cards of #REF', '#4']"", ""AGGREGATE['count', '#6']"", ""UNION['#5', '#7']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'aggregate', 'union']",train
SPIDER_train_714,"Return the id of the customer who has the most cards, as well as the number of cards.","return customers ;return cards  of  #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is highest ;return id of  #4 ;return number of  cards  of  #4 ;return #5 ,  #6","[""SELECT['customers']"", ""PROJECT['cards of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['id of #REF', '#4']"", ""PROJECT['cards of #REF', '#4']"", ""GROUP['count', '#6', '#4']"", ""UNION['#5', '#7']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'group', 'union']",train
SPIDER_train_715,"Show id, first and last names for all customers with at least two cards.","return customers ;return cards of #1 ;return number of #2 for each #1 ;return #1 where #3 is  at least two ;return ids of #4 ;return first names of #4 ;return last names of #4 ;return #5 , #6 ,  #7","[""SELECT['customers']"", ""PROJECT['cards of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""PROJECT['ids of #REF', '#4']"", ""PROJECT['first names of #REF', '#4']"", ""PROJECT['last names of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_716,What are the ids and full names of customers who hold two or more cards?,"return customers ;return cards #1 hold ;return number of  #2 for each  #1 ;return #1 where #3 is  two or  more ;return ids of  #4 ;return full names of  #4 ;return #5 ,  #6","[""SELECT['customers']"", ""PROJECT['cards #REF hold', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is two or more']"", ""PROJECT['ids of #REF', '#4']"", ""PROJECT['full names of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_717,"What is the customer id, first and last name with least number of accounts.","return customers ;return accounts of #1 ;return number of #2 for each #1 ;return #1 where #3 is  lowest ;return customer id of #4 ;return first name of #4 ;return last name of #4 ;return #5 , #6 ,  #7","[""SELECT['customers']"", ""PROJECT['accounts of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['customer id of #REF', '#4']"", ""PROJECT['first name of #REF', '#4']"", ""PROJECT['last name of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'project', 'union']",train
SPIDER_train_718,Return the id and full name of the customer who has the fewest accounts.,"return customers ;return accounts of  #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is lowest ;return id of  #4 ;return full name of  #4 ;return #5 ,  #6","[""SELECT['customers']"", ""PROJECT['accounts of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['min', '#1', '#3']"", ""PROJECT['id of #REF', '#4']"", ""PROJECT['full name of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_719,Show all card type codes and the number of cards in each type.,"return card type  ;return number of  cards for each  #1 ;return codes of #1 ;return #3, #2","[""SELECT['card type']"", ""PROJECT['cards', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['codes of #REF', '#1']"", ""UNION['#4', '#3']""]","['select', 'project', 'group', 'project', 'union']",train
SPIDER_train_72,How many courses does the student with id 171 actually attend?,return students ;return courses of  #1 ;return #2 where  id is  171 ;return number of #3,"[""SELECT['students']"", ""PROJECT['courses of #REF', '#1']"", ""FILTER['#2', 'where id is 171']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'filter', 'aggregate']",train
SPIDER_train_720,"What are the different card types, and how many cards are there of each?","return cards ;return types of  #1 ;return different #2 ;return number of  #1 for each  #2 ;return #3 ,  #4","[""SELECT['cards']"", ""PROJECT['types of #REF', '#1']"", ""PROJECT['different #REF', '#2']"", ""GROUP['count', '#1', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_721,What is the card type code with most number of cards?,return card type codes ;return #1 with most number of  cards,"[""SELECT['card type codes']"", ""FILTER['#1', 'with most number of cards']""]","['select', 'filter']",train
SPIDER_train_722,Return the code of the card type that is most common.,return codes ;return card types of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest,"[""SELECT['codes']"", ""PROJECT['card types of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_723,Show card type codes with at least 5 cards.,return card types ;return cards with  #1 ;return number of #2 for each #1 ;return #1 where #3 is  at least 5 ;return codes of #4,"[""SELECT['card types']"", ""PROJECT['cards with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 5']"", ""PROJECT['codes of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_724,What are the codes of card types that have 5 or more cards?,return card types ;return cards of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least 5 ;return codes of  #4,"[""SELECT['card types']"", ""PROJECT['cards of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 5']"", ""PROJECT['codes of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_725,Show all card type codes and the number of customers holding cards in each type.,"return card type  codes ;return cards of #1 ;return customers with  #2 ;return number of  #3 for each #1 ;return #1 ,  #4","[""SELECT['card type codes']"", ""PROJECT['cards of #REF', '#1']"", ""PROJECT['customers with #REF', '#2']"", ""GROUP['count', '#3', '#1']"", ""UNION['#1', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_726,"What are the different card type codes, and how many different customers hold each type?","return card type  codes ;return customers ;return number of  #2 for each  #1 ;return #1 ,  #3","[""SELECT['card type codes']"", ""SELECT['customers']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'select', 'group', 'union']",train
SPIDER_train_727,Show the customer ids and firstname without a credit card.,"return customers ;return #1 without a credit card ;return customer ids of  #2 ;return firstnames of  #2 ;return #3 ,  #4","[""SELECT['customers']"", ""FILTER['#1', 'without a credit card']"", ""PROJECT['customer ids of #REF', '#2']"", ""PROJECT['firstnames of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_728,What are the ids and first names of customers who do not hold a credit card?,"return customers ;return #1 who  do not  hold a credit card ;return ids of  #2 ;return first names of  #2 ;return #3 ,  #4","[""SELECT['customers']"", ""FILTER['#1', 'who do not hold a credit card']"", ""PROJECT['ids of #REF', '#2']"", ""PROJECT['first names of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_729,Show all card type codes.,return cards ;return types of  #1 ;return codes of  #2,"[""SELECT['cards']"", ""PROJECT['types of #REF', '#1']"", ""PROJECT['codes of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_73,Find id of the candidate whose email is stanley.monahan@example.org?,return candidates ;return emails of  #1 ;return #1 where  #2 is  equal to  stanley.monahan @ example.org ;return id of  #3,"[""SELECT['candidates']"", ""PROJECT['emails of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is equal to stanley.monahan @ example.org']"", ""PROJECT['id of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_730,What are the different card type codes?,return cards ;return types of  #1 ;return codes of  #2 ;return different #3,"[""SELECT['cards']"", ""PROJECT['types of #REF', '#1']"", ""PROJECT['codes of #REF', '#2']"", ""PROJECT['different #REF', '#3']""]","['select', 'project', 'project', 'project']",train
SPIDER_train_731,Show the number of card types.,return card types ;return number of  #1,"[""SELECT['card types']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_732,How many different card types are there?,return card types ;return different #1 ;return number of #2,"[""SELECT['card types']"", ""PROJECT['different #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_733,Show all transaction types.,return transaction types,"[""SELECT['transaction types']""]",['select'],train
SPIDER_train_734,What are the different types of transactions?,return transactions ;return different types of  #1,"[""SELECT['transactions']"", ""PROJECT['different types of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_735,Show the number of transaction types.,return transaction types ;return number of  #1,"[""SELECT['transaction types']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_736,How many different types of transactions are there?,return transactions ;return types of  #1 ;return different #2 ;return number of #3,"[""SELECT['transactions']"", ""PROJECT['types of #REF', '#1']"", ""PROJECT['different #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_737,What is the average and total transaction amount?,"return transactions ;return the  amounts of  #1 ;return the  average of  #2 ;return the  sum of  #2 ;return #3 ,  #4","[""SELECT['transactions']"", ""PROJECT['the amounts of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""AGGREGATE['sum', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_738,"Return the average transaction amount, as well as the total amount of all transactions.","return transactions ;return amounts of  #1 ;return average of  #2 ;return sum of  #2 ;return #3 ,  #4","[""SELECT['transactions']"", ""PROJECT['amounts of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""AGGREGATE['sum', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_739,Show the card type codes and the number of transactions.,"return card type codes ;return number of  transactions for each #1 ;return #1 , #2","[""SELECT['card type codes']"", ""PROJECT['transactions', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_74,What is the id of the candidate whose email is stanley.monahan@example.org?,return candidates ;return emails of  #1 ;return #1 where #2 is  stanley.monahan @ example.org ;return id of  #3,"[""SELECT['candidates']"", ""PROJECT['emails of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is stanley.monahan @ example.org']"", ""PROJECT['id of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_740,"What are the different card types, and how many transactions have been made with each?","return cards ;return different types of  #1 ;return transactions made with #2 ;return number of  #3 for each  #2 ;return #2 ,  #4","[""SELECT['cards']"", ""PROJECT['different types of #REF', '#1']"", ""PROJECT['transactions made with #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_741,Show the transaction type and the number of transactions.,"return transaction types ;return transactions of #1 ;return number of  #2 for each #1 ;return #1 ,  #3","[""SELECT['transaction types']"", ""PROJECT['transactions of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_742,"What are the different transaction types, and how many transactions of each have taken place?","return transactions ;return different types of  #1 ;return transactions of  #2 ;return number of  #3 for each  #2 ;return #2 ,  #4","[""SELECT['transactions']"", ""PROJECT['different types of #REF', '#1']"", ""PROJECT['transactions of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_743,What is the transaction type that has processed the greatest total amount in transactions?,return transaction types ;return transactions #1 have  processed ;return amounts of  #2 ;return sum of  #3 for each  #1 ;return #1 where #4 is  highest,"[""SELECT['transaction types']"", ""PROJECT['transactions #REF have processed', '#1']"", ""PROJECT['amounts of #REF', '#2']"", ""GROUP['sum', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']""]","['select', 'project', 'project', 'group', 'superlative']",train
SPIDER_train_744,Return the type of transaction with the highest total amount.,return transactions ;return amounts of  #1 ;return sum of #2 for each #1 ;return #1 where #3 is highest ;return type of  #4,"[""SELECT['transactions']"", ""PROJECT['amounts of #REF', '#1']"", ""GROUP['sum', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['type of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_745,Show the account id and the number of transactions for each account,"return accounts ;return id of #1 ;return transactions of #1 ;return #2 ,  #3","[""SELECT['accounts']"", ""PROJECT['id of #REF', '#1']"", ""PROJECT['transactions of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_746,"What are the different account ids that have made financial transactions, as well as how many transactions correspond to each?","return account ids ;return #1 that  have made financial transactions ;return different #2 ;return transactions of #3 ;return number of  #4 for each #3 ;return #4 ,  #5","[""SELECT['account ids']"", ""FILTER['#1', 'that have made financial transactions']"", ""PROJECT['different #REF', '#2']"", ""PROJECT['transactions of #REF', '#3']"", ""GROUP['count', '#4', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'project', 'group', 'union']",train
SPIDER_train_747,How many tracks do we have?,return tracks ;return number of #1,"[""SELECT['tracks']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_748,Count the number of tracks.,return tracks ;return Count the number of  #1,"[""SELECT['tracks']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_749,Show the name and location for all tracks.,"return tracks ;return names of  #1 ;return locations of  #1 ;return #2 ,  #3","[""SELECT['tracks']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['locations of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_75,Find id of the candidate who most recently accessed the course?,return candidates ;return when  #1 accessed the course ;return #1 where #2 is  the most recently ;return id of #3,"[""SELECT['candidates']"", ""PROJECT['when #REF accessed the course', '#1']"", ""COMPARATIVE['#1', '#2', 'is the most recently']"", ""PROJECT['id of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_750,What are the names and locations of all tracks?,"return tracks ;return names of #1 ;return locations of #1 ;return #2 ,  #3","[""SELECT['tracks']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['locations of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_751,"Show names and seatings, ordered by seating for all tracks opened after 2000.","return tracks ;return #1 opened after 2000 ;return names of  #2 ;return seatings of  #2 ;return #3 , #4 ;return #5 ordered by #4","[""SELECT['tracks']"", ""FILTER['#1', 'opened after 2000']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['seatings of #REF', '#2']"", ""UNION['#3', '#4']"", ""SORT['#5', '#4']""]","['select', 'filter', 'project', 'project', 'union', 'sort']",train
SPIDER_train_752,"What are the names and seatings for all tracks opened after 2000, ordered by seating?","return tracks ;return #1 opened after 2000 ;return names of #2 ;return seating of #2 ;return #3 ,  #4 ;return #5 sorted by #4","[""SELECT['tracks']"", ""FILTER['#1', 'opened after 2000']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['seating of #REF', '#2']"", ""UNION['#3', '#4']"", ""SORT['#5', '#4']""]","['select', 'filter', 'project', 'project', 'union', 'sort']",train
SPIDER_train_753,"What is the name, location and seating for the most recently opened track?","return track ;return the  most recently opened #1 ;return the  name of #2 ;return the  location of #2 ;return the  seating of #2 ;return #3 ,  #4 ,   #5","[""SELECT['track']"", ""PROJECT['the most recently opened #REF', '#1']"", ""PROJECT['the name of #REF', '#2']"", ""PROJECT['the location of #REF', '#2']"", ""PROJECT['the seating of #REF', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_754,"Return the name, location, and seating of the track that was opened in the most recent year.","return tracks ;return years opened of #1 ;return #1 where #2 is  the   most recent ;return name of #3 ;return location of #3 ;return seating of #3 ;return #4 ,  #5 ,   #6","[""SELECT['tracks']"", ""PROJECT['years opened of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is the most recent']"", ""PROJECT['name of #REF', '#3']"", ""PROJECT['location of #REF', '#3']"", ""PROJECT['seating of #REF', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_755,"What is the minimum, maximum, and average seating for all tracks.","return tracks ;return seating of  #1 ;return minimum of  #2 ;return maximum of  #2 ;return average of  #2 ;return #3 ,  #4 ,   #5","[""SELECT['tracks']"", ""PROJECT['seating of #REF', '#1']"", ""AGGREGATE['min', '#2']"", ""AGGREGATE['max', '#2']"", ""AGGREGATE['avg', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'project', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_756,"Return the minimum, maximum, and average seating across all tracks.","return tracks ;return seating of  #1 ;return minimum of  #2 ;return maximum of  #2 ;return average of  #2 ;return #3 ,   #4 , #5","[""SELECT['tracks']"", ""PROJECT['seating of #REF', '#1']"", ""AGGREGATE['min', '#2']"", ""AGGREGATE['max', '#2']"", ""AGGREGATE['avg', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'project', 'aggregate', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_757,"Show the name, location, open year for all tracks with a seating higher than the average.","return tracks ;return seating of #1 ;return average of #2 ;return #1 where #2 is higher than #3 ;return name of #4 ;return location of #4 ;return open year of #4 ;return #5 ,  #6 ,   #7","[""SELECT['tracks']"", ""PROJECT['seating of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['name of #REF', '#4']"", ""PROJECT['location of #REF', '#4']"", ""PROJECT['open year of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_758,"What are the names, locations, and years of opening for tracks with seating higher than average?","return tracks ;return seating of  #1 ;return average of  #2 ;return #1 where #2 is  higher than #3 ;return names of  #4 ;return locations of  #4 ;return years of  opening of #4 ;return #5 ,  #6 ,   #7","[""SELECT['tracks']"", ""PROJECT['seating of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is higher than #3']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['locations of #REF', '#4']"", ""PROJECT['years of opening of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_759,What are distinct locations where tracks are located?,return tracks ;return locations of  #1 ;return distinct #2,"[""SELECT['tracks']"", ""PROJECT['locations of #REF', '#1']"", ""PROJECT['distinct #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_76,What is the id of the candidate who most recently accessed the course?,return candidates ;return when  was  #1 accessed the  course ;return #1 where #2 is highest ;return id of #3,"[""SELECT['candidates']"", ""PROJECT['when was #REF accessed the course', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['id of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_760,Give the different locations of tracks.,return tracks ;return locations of  #1 ;return different #2,"[""SELECT['tracks']"", ""PROJECT['locations of #REF', '#1']"", ""PROJECT['different #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_761,How many races are there?,return races ;return number of #1,"[""SELECT['races']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_762,Count the number of races.,return races ;return number of #1,"[""SELECT['races']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_763,What are the distinct classes that races can have?,return races ;return distinct classes #1 can have,"[""SELECT['races']"", ""PROJECT['distinct classes #REF can have', '#1']""]","['select', 'project']",train
SPIDER_train_764,Return the different classes of races.,return races ;return classes of  #1 ;return different #2,"[""SELECT['races']"", ""PROJECT['classes of #REF', '#1']"", ""PROJECT['different #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_765,"Show name, class, and date for all races.","return races ;return name of #1 ;return class of #1 ;return date of #1 ;return #2 ,  #3 ,   #4","[""SELECT['races']"", ""PROJECT['name of #REF', '#1']"", ""PROJECT['class of #REF', '#1']"", ""PROJECT['date of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_766,"What are the names, classes, and dates for all races?","return races ;return names of  #1 ;return classes of  #1 ;return dates of  #1 ;return #2 ,  #3 ,   #4","[""SELECT['races']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['classes of #REF', '#1']"", ""PROJECT['dates of #REF', '#1']"", ""UNION['#2', '#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_767,Show the race class and number of races in each class.,"return race classes ;return races in #1 ;return number of  #2 for each  #1 ;return #1 ,  #3","[""SELECT['race classes']"", ""PROJECT['races in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_768,"What are the different classes of races, and how many races correspond to each?","return races  ;return different classes of  #1 ;return number of  #1 for each  #2 ;return #2 ,  #3","[""SELECT['races']"", ""PROJECT['different classes of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""UNION['#2', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_769,What is the race class with most number of races.,return races ;return classes of #1 ;return number of  #1 for each #2 ;return #2 where #3 is  the  highest,"[""SELECT['races']"", ""PROJECT['classes of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""COMPARATIVE['#2', '#3', 'is the highest']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_77,What is detail of the student who registered the most number of courses?,return students ;return courses that  #1 registered ;return the  number of  #2 for each #1 ;return #1 where #3 is  the  highest ;return the  details of #4,"[""SELECT['students']"", ""PROJECT['courses that #REF registered', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']"", ""PROJECT['the details of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_770,Give the class of races that is most common.,return classes ;return races of  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  highest,"[""SELECT['classes']"", ""PROJECT['races of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_771,List the race class with at least two races.,return race classes ;return races of  #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is at least two,"[""SELECT['race classes']"", ""PROJECT['races of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_772,What are the classes of races that have two or more corresponding races?,return races  ;return classes of  #1 ;return number of  #1 for each  #2 ;return #2 where #3 is  at least two,"[""SELECT['races']"", ""PROJECT['classes of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""COMPARATIVE['#2', '#3', 'is at least two']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_773,What are the names for tracks without a race in class 'GT'.,return tracks ;return races of  #1 ;return classes of  #2 ;return #1 where #3 is  not  'GT ;return names of  #4,"[""SELECT['tracks']"", ""PROJECT['races of #REF', '#1']"", ""PROJECT['classes of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is not GT']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_774,Give the names of tracks that do not have a race in the class 'GT'.,return tracks ;return races of  #1 ;return classes of  #2 ;return #1 where  #3 is  not  'GT ;return names of  #4,"[""SELECT['tracks']"", ""PROJECT['races of #REF', '#1']"", ""PROJECT['classes of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is not GT']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_775,Show all track names that have had no races.,return track ;return races ;return number of  #2 for each  #1 ;return #1 where #3 is zero ;return name of #4,"[""SELECT['track']"", ""SELECT['races']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is zero']"", ""PROJECT['name of #REF', '#4']""]","['select', 'select', 'group', 'comparative', 'project']",train
SPIDER_train_776,Return the names of tracks that have no had any races.,return tracks ;return #1 that  had races ;return  #1 besides #2 ;return names of #3,"[""SELECT['tracks']"", ""FILTER['#1', 'that had races']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_777,Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened.,"return tracks ;return seating of #1 ;return #1 where #2 is  at least 5000 ;return #1 where #2 is  at most 4000 ;return #3 ,  #4 ;return year opened of #5","[""SELECT['tracks']"", ""PROJECT['seating of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least 5000']"", ""COMPARATIVE['#1', '#2', 'is at most 4000']"", ""UNION['#3', '#4']"", ""PROJECT['year opened of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_778,What are the years of opening for tracks with seating between 4000 and 5000?,return tracks ;return seating of #1 ;return #1 where #2 is  at least 4000 ;return #3 where #2 is  at most 5000 ;return years of opening of  #4,"[""SELECT['tracks']"", ""PROJECT['seating of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is at least 4000']"", ""COMPARATIVE['#3', '#2', 'is at most 5000']"", ""PROJECT['years of opening of #REF', '#4']""]","['select', 'project', 'comparative', 'comparative', 'project']",train
SPIDER_train_779,Show the name of track and the number of races in each track.,"return tracks ;return races in #1 ;return the  number of  #2 for each #1 ;return the  names of #1 ;return #4 ,  #3","[""SELECT['tracks']"", ""PROJECT['races in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['the names of #REF', '#1']"", ""UNION['#4', '#3']""]","['select', 'project', 'group', 'project', 'union']",train
SPIDER_train_78,What are the details of the student who registered for the most number of courses?,return students ;return courses #1 registered for ;return number of  #2 for each #1 ;return #1 where #3 is  highest ;return details of #4,"[""SELECT['students']"", ""PROJECT['courses #REF registered for', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['details of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_780,"What are the names of different tracks, and how many races has each had?","return different tracks ;return names of  #1 ;return races #1 have  had ;return number of  #3 for each  #1 ;return #2 ,  #4","[""SELECT['different tracks']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['races #REF have had', '#1']"", ""GROUP['count', '#3', '#1']"", ""UNION['#2', '#4']""]","['select', 'project', 'project', 'group', 'union']",train
SPIDER_train_781,Show the name of track with most number of races.,return tracks ;return races of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest ;return name of #4,"[""SELECT['tracks']"", ""PROJECT['races of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_782,What is the name of the track that has had the greatest number of races?,return tracks ;return races ;return the  number of  #2 for each  #1 ;return #1 where #3 is  the  greatest ;return the  name of  #4,"[""SELECT['tracks']"", ""SELECT['races']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the greatest']"", ""PROJECT['the name of #REF', '#4']""]","['select', 'select', 'group', 'comparative', 'project']",train
SPIDER_train_783,Show the name and date for each race and its track name.,"return races ;return names of  #1 ;return dates of  #1 ;return tracks of  #1 ;return names of  #4 ;return #2 ,  #3 ,   #5","[""SELECT['races']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['dates of #REF', '#1']"", ""PROJECT['tracks of #REF', '#1']"", ""PROJECT['names of #REF', '#4']"", ""UNION['#2', '#3', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_784,"What are the names and dates of races, and the names of the tracks where they are held?","return races ;return names of  #1 ;return dates of  #1 ;return tracks of  #1 ;return names of  #4 ;return #2 ,  #3 ,   #5","[""SELECT['races']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['dates of #REF', '#1']"", ""PROJECT['tracks of #REF', '#1']"", ""PROJECT['names of #REF', '#4']"", ""UNION['#2', '#3', '#5']""]","['select', 'project', 'project', 'project', 'project', 'union']",train
SPIDER_train_785,Show the name and location of track with 1 race.,"return tracks ;return #1 with  1 race ;return name of  #2 ;return location of  #2 ;return #3 , #4","[""SELECT['tracks']"", ""FILTER['#1', 'with 1 race']"", ""PROJECT['name of #REF', '#2']"", ""PROJECT['location of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_786,What are the names and locations of tracks that have had exactly 1 race?,"return tracks ;return races of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  1 ;return names of  #4 ;return locations of  #4 ;return #5 ,  #6","[""SELECT['tracks']"", ""PROJECT['races of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is 1']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['locations of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_787,Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats.,return locations ;return tracks of  #1 ;return seats  of  #2 ;return #1 where  #3 is  more than  90000 ;return #1 where  #3 is  less than  70000 ;return #1 of  both #4 and #5,"[""SELECT['locations']"", ""PROJECT['tracks of #REF', '#1']"", ""PROJECT['seats of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is more than 90000']"", ""COMPARATIVE['#1', '#3', 'is less than 70000']"", ""INTERSECTION['#1', '#4', '#5']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection']",train
SPIDER_train_788,"What are the locations that have both tracks with more than 90000 seats, and tracks with fewer than 70000 seats?",return tracks  ;return seats of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than 90000 ;return #1 where #3 is  lower than 70000 ;return locations of #1 ;return #6 of both #4 and  #5,"[""SELECT['tracks']"", ""PROJECT['seats of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 90000']"", ""COMPARATIVE['#1', '#3', 'is lower than 70000']"", ""PROJECT['locations of #REF', '#1']"", ""INTERSECTION['#6', '#4', '#5']""]","['select', 'project', 'group', 'comparative', 'comparative', 'project', 'intersection']",train
SPIDER_train_789,How many members have the black membership card?,return members ;return membership cards of  #1 ;return #1 where  #2 is black ;return number of  #3,"[""SELECT['members']"", ""PROJECT['membership cards of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is black']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_79,List the id of students who registered some courses and the number of their registered courses?,"return students ;return courses  that  #1 registered  ;return number of  #2 for each #1 ;return #1 where #3 is  at least one ;return courses  that  #4 registered  ;return number of  #5 for each #4 ;return ids of #4 ;return #7 ,  #6","[""SELECT['students']"", ""PROJECT['courses that #REF registered', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least one']"", ""PROJECT['courses that #REF registered', '#4']"", ""GROUP['count', '#5', '#4']"", ""PROJECT['ids of #REF', '#4']"", ""UNION['#7', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'group', 'project', 'union']",train
SPIDER_train_790,Find the number of members living in each address.,return addresses ;return members living in #1 ;return number of  #2 for each #1,"[""SELECT['addresses']"", ""PROJECT['members living in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_791,Give me the names of members whose address is in Harford or Waterbury.,return members ;return addresses of  #1 ;return #1 where  #2 is  Harford ;return #1 where  #2 is  Waterbury ;return #3 or  #4 ;return names of  #5,"[""SELECT['members']"", ""PROJECT['addresses of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Harford']"", ""COMPARATIVE['#1', '#2', 'is Waterbury']"", ""UNION['#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_792,Find the ids and names of members who are under age 30 or with black membership card.,"return members ;return ages of  #1 ;return #1 where  #2 is  under 30 ;return membership cards of  #1 ;return #1 where  #4 is  black ;return #3 or  #5 ;return ids of  #6 ;return names of  #6 ;return #7 ,   #8","[""SELECT['members']"", ""PROJECT['ages of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is under 30']"", ""PROJECT['membership cards of #REF', '#1']"", ""COMPARATIVE['#1', '#4', 'is black']"", ""UNION['#3', '#5']"", ""PROJECT['ids of #REF', '#6']"", ""PROJECT['names of #REF', '#6']"", ""UNION['#7', '#8']""]","['select', 'project', 'comparative', 'project', 'comparative', 'union', 'project', 'project', 'union']",train
SPIDER_train_793,"Find the purchase time, age and address of each member, and show the results in the order of purchase time.","return members ;return purchase time of  #1 ;return ages of  #1 ;return addresses of  #1 ;return #2 ,   #3 , #4 ;return #5 sorted by #2","[""SELECT['members']"", ""PROJECT['purchase time of #REF', '#1']"", ""PROJECT['ages of #REF', '#1']"", ""PROJECT['addresses of #REF', '#1']"", ""UNION['#2', '#3', '#4']"", ""SORT['#5', '#2']""]","['select', 'project', 'project', 'project', 'union', 'sort']",train
SPIDER_train_794,Which membership card has more than 5 members?,return membership cards ;return members with #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than 5,"[""SELECT['membership cards']"", ""PROJECT['members with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 5']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_795,Which address has both members younger than 30 and members older than 40?,return addresses ;return members of  #1 ;return #1 where #2 are  younger than 30 ;return #1 where #2 are  older than 40 ;return #1 of  both #3 and  #4,"[""SELECT['addresses']"", ""PROJECT['members of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'are younger than 30']"", ""COMPARATIVE['#1', '#2', 'are older than 40']"", ""INTERSECTION['#1', '#3', '#4']""]","['select', 'project', 'comparative', 'comparative', 'intersection']",train
SPIDER_train_796,What is the membership card held by both members living in Hartford and ones living in Waterbury address?,return members ;return addresses of  #1 ;return #1 where #2 is  in Hartford ;return #1 where #2 is  in Waterbury ;return #1 of  both #3 and  #4 ;return membership card held by #5,"[""SELECT['members']"", ""PROJECT['addresses of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is in Hartford']"", ""COMPARATIVE['#1', '#2', 'is in Waterbury']"", ""INTERSECTION['#1', '#3', '#4']"", ""PROJECT['membership card held by #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_797,How many members are not living in Hartford?,return members ;return #1 living in Hartford ;return #1 besides #2 ;return number of #3,"[""SELECT['members']"", ""FILTER['#1', 'living in Hartford']"", ""DISCARD['#1', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'discard', 'aggregate']",train
SPIDER_train_798,Which address do not have any member with the black membership card?,return members ;return #1 with  the  black membership card ;return the  addresses of #2 ;return addresses besides #3,"[""SELECT['members']"", ""FILTER['#1', 'with the black membership card']"", ""PROJECT['the addresses of #REF', '#2']"", ""SELECT['addresses']"", ""DISCARD['#4', '#3']""]","['select', 'filter', 'project', 'select', 'discard']",train
SPIDER_train_799,Show the shop addresses ordered by their opening year.,return shops ;return addresses of  #1 ;return opening years of  #1 ;return #2 sorted by #3,"[""SELECT['shops']"", ""PROJECT['addresses of #REF', '#1']"", ""PROJECT['opening years of #REF', '#1']"", ""SORT['#2', '#3']""]","['select', 'project', 'project', 'sort']",train
SPIDER_train_8,In which year were most departments established?,return years ;return departments established in #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is highest,"[""SELECT['years']"", ""PROJECT['departments established in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_80,"For every student who is registered for some course, how many courses are they registered for?",return students ;return #1 who are registered  for some courses ;return courses of #2 ;return number of  #3 for each #2,"[""SELECT['students']"", ""FILTER['#1', 'who are registered for some courses']"", ""PROJECT['courses of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""UNION['#2', '#4']""]","['select', 'filter', 'project', 'group', 'union']",train
SPIDER_train_800,What are the average score and average staff number of all shops?,"return shops ;return the  staff number of  all #1 ;return the  score of  all #1 ;return the  average  of  #2 ;return the  average  of  #3 ;return #4 ,  #5","[""SELECT['shops']"", ""PROJECT['the staff number of all #REF', '#1']"", ""PROJECT['the score of all #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""AGGREGATE['avg', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_801,Find the id and address of the shops whose score is below the average score.,"return shops ;return scores of  #1 ;return average of  #2 ;return #1 where  #2 is  below #3 ;return ids of  #4 ;return addresses of  #4 ;return #5 ,   #6","[""SELECT['shops']"", ""PROJECT['scores of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""COMPARATIVE['#1', '#2', 'is below #3']"", ""PROJECT['ids of #REF', '#4']"", ""PROJECT['addresses of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'aggregate', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_802,Find the address and staff number of the shops that do not have any happy hour.,"return shops ;return #1 that  do not  have  any happy hour ;return address of  #2 ;return staff number of  #2 ;return #3 ,   #4","[""SELECT['shops']"", ""FILTER['#1', 'that do not have any happy hour']"", ""PROJECT['address of #REF', '#2']"", ""AGGREGATE['count', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'aggregate', 'union']",train
SPIDER_train_803,What are the id and address of the shops which have a happy hour in May?,"return shops ;return #1 which have  a happy hour in May ;return id of  #2 ;return address of  #2 ;return #3 ,  #4","[""SELECT['shops']"", ""FILTER['#1', 'which have a happy hour in May']"", ""PROJECT['id of #REF', '#2']"", ""PROJECT['address of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_804,which shop has happy hour most frequently? List its id and number of happy hours.,"return shops ;return happy hours of #1 ;return number of  #2 for each #1 ;return the  highest of #3 ;return #1 where #3 is equal to #4 ;return id of #5 ;return #6 ,  #4","[""SELECT['shops']"", ""PROJECT['happy hours of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""AGGREGATE['max', '#3']"", ""COMPARATIVE['#1', '#3', 'is equal to #4']"", ""PROJECT['id of #REF', '#5']"", ""UNION['#6', '#4']""]","['select', 'project', 'group', 'aggregate', 'comparative', 'project', 'union']",train
SPIDER_train_805,Which month has the most happy hours?,return months ;return number of  happy hours for each  #1 ;return #1 where #2 is  highest,"[""SELECT['months']"", ""PROJECT['hours', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']""]","['select', 'project', 'group', 'superlative']",train
SPIDER_train_806,Which months have more than 2 happy hours?,return months ;return happy hours of #1 ;return the  number of  #2 for each #1 ;return #1 where #3 is  more than  2,"[""SELECT['months']"", ""PROJECT['happy hours of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is more than 2']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_807,How many albums are there?,return albums ;return number of #1,"[""SELECT['albums']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_808,Find the number of albums.,return albums ;return number of #1,"[""SELECT['albums']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_809,List the names of all music genres.,return music genres ;return names of  #1,"[""SELECT['music genres']"", ""PROJECT['names of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_81,How many registed students do each course have? List course name and the number of their registered students?,"return courses ;return registered students in #1 ;return number of #2 for each #1 ;return course name of  #1 ;return #4 ,   #3","[""SELECT['courses']"", ""PROJECT['registered students in #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['course name of #REF', '#1']"", ""UNION['#4', '#3']""]","['select', 'project', 'group', 'project', 'union']",train
SPIDER_train_810,What are the names of different music genres?,return music genres ;return the  names of  #1,"[""SELECT['music genres']"", ""PROJECT['the names of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_811,Find all the customer information in state NY.,return customers ;return #1 in NY state ;return information of  #2,"[""SELECT['customers']"", ""FILTER['#1', 'in NY state']"", ""PROJECT['information of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_812,What is all the customer information for customers in NY state?,return customers ;return state of #1 ;return #1 where #2 is NY ;return all customer information of #3,"[""SELECT['customers']"", ""PROJECT['state of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is NY']"", ""PROJECT['all customer information of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_813,What are the first names and last names of the employees who live in Calgary city.,"return employees ;return the  #1 who  live in Calgary city ;return the  first names of  #2 ;return the  last names of  #2 ;return #3,  #4","[""SELECT['employees']"", ""PROJECT['the #REF who live in Calgary city', '#1']"", ""PROJECT['the first names of #REF', '#2']"", ""PROJECT['the last names of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_814,Find the full names of employees living in the city of Calgary.,return employees ;return #1 living in Calgary ;return full names of  #2,"[""SELECT['employees']"", ""FILTER['#1', 'living in Calgary']"", ""PROJECT['full names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_815,What are the distinct billing countries of the invoices?,return invoices ;return distinct billing countries of  #1,"[""SELECT['invoices']"", ""PROJECT['distinct billing countries of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_816,Find the different billing countries for all invoices.,return invoices ;return different billing countries for #1,"[""SELECT['invoices']"", ""PROJECT['different billing countries for #REF', '#1']""]","['select', 'project']",train
SPIDER_train_817,"Find the names of all artists that have ""a"" in their names.",return artists ;return names  of  #1 ;return #1 where  #2 have  a ;return names  of  #3,"[""SELECT['artists']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'have a']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_818,What are the names of artist who have the letter 'a' in their names?,return artists ;return names of  #1 ;return #1 where #2 has  the  letter 'a ;return names of  #3,"[""SELECT['artists']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'has the letter a']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_819,"Find the title of all the albums of the artist ""AC/DC"".",return artists ;return #1 that  are  AC/DC ;return albums of  #2 ;return titles of #3,"[""SELECT['artists']"", ""FILTER['#1', 'that are AC/DC']"", ""PROJECT['albums of #REF', '#2']"", ""PROJECT['titles of #REF', '#3']""]","['select', 'filter', 'project', 'project']",train
SPIDER_train_82,"For each course id, how many students are registered and what are the course names?","return course  ids ;return students registered of #1 ;return number of  #2 for each #1 ;return course  names of #1 ;return #3 ,  #4","[""SELECT['course ids']"", ""PROJECT['students registered of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""PROJECT['course names of #REF', '#1']"", ""UNION['#3', '#4']""]","['select', 'project', 'group', 'project', 'union']",train
SPIDER_train_820,"What are the titles of albums by the artist ""AC/DC""?",return albums ;return #1 by AC/DC ;return titles of  #2,"[""SELECT['albums']"", ""FILTER['#1', 'by AC/DC']"", ""PROJECT['titles of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_821,"Hom many albums does the artist ""Metallica"" have?",return artists ;return albums of  #1 ;return #2 where  #1 is  Metallica ;return number of #3,"[""SELECT['artists']"", ""PROJECT['albums of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Metallica']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_822,"Find the number of albums by the artist ""Metallica"".",return Metallica ;return albums by #1 ;return number of  #2,"[""SELECT['Metallica']"", ""PROJECT['albums by #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_823,"Which artist does the album ""Balls to the Wall"" belong to?",return artists ;return albums that belong to #1 ;return #1 where  #2 is Balls to the Wall,"[""SELECT['artists']"", ""PROJECT['albums that belong to #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Balls to the Wall']""]","['select', 'project', 'comparative']",train
SPIDER_train_824,"Find the name of the artist who made the album ""Balls to the Wall"".",return artists ;return albums of  #1 ;return #1 where  #2 is  Balls to  the    Wall ;return name of  #3,"[""SELECT['artists']"", ""PROJECT['albums of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Balls to the Wall']"", ""PROJECT['name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_825,Which artist has the most albums?,return artists ;return albums of #1 ;return the  number of  #2 for each #1 ;return #1 where #3 is  the  highest,"[""SELECT['artists']"", ""PROJECT['albums of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the highest']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_826,What is the name of the artist with the greatest number of albums?,return artists ;return albums of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  the   greatest ;return the   name of #4,"[""SELECT['artists']"", ""PROJECT['albums of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is the greatest']"", ""PROJECT['the name of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_827,"Find the names of all the tracks that contain the word ""you"".",return tracks ;return #1 that  contain the word you ;return names of  #2,"[""SELECT['tracks']"", ""FILTER['#1', 'that contain the word you']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_828,What are the names of tracks that contain the the word you in them?,return tracks ;return names of  #1 ;return #1 where #2 contain the  word you,"[""SELECT['tracks']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'contain the word you']""]","['select', 'project', 'comparative']",train
SPIDER_train_829,What is the average unit price of all the tracks?,return tracks ;return unit prices of  #1 ;return average of  #2,"[""SELECT['tracks']"", ""PROJECT['unit prices of #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_83,"Find id of candidates whose assessment code is ""Pass""?",return candidates ;return #1 whose assessment code is  Pass ;return id of  #2,"[""SELECT['candidates']"", ""FILTER['#1', 'whose assessment code is Pass']"", ""PROJECT['id of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_830,Find the average unit price for a track.,return tracks ;return unit prices of  #1 ;return average of  #2,"[""SELECT['tracks']"", ""PROJECT['unit prices of #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_831,What are the durations of the longest and the shortest tracks in milliseconds?,"return tracks ;return durations of  #1 in milliseconds ;return #1 where #2 is  longest ;return duration of  #3 ;return #1 where #2 is  shortest ;return duration of  #5 ;return #4 ,  #6","[""SELECT['tracks']"", ""PROJECT['durations of #REF in milliseconds', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['duration of #REF', '#3']"", ""SUPERLATIVE['min', '#1', '#2']"", ""PROJECT['duration of #REF', '#5']"", ""UNION['#4', '#6']""]","['select', 'project', 'superlative', 'project', 'superlative', 'project', 'union']",train
SPIDER_train_832,Find the maximum and minimum durations of tracks in milliseconds.,"return tracks ;return duration of  #1 in milliseconds ;return maximum of  #2 ;return minimum of  #2 ;return #3 ,   #4","[""SELECT['tracks']"", ""PROJECT['duration of #REF in milliseconds', '#1']"", ""AGGREGATE['max', '#2']"", ""AGGREGATE['min', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_833,"Show the album names, ids and the number of tracks for each album.","return albums ;return album names of  #1 ;return ids of  #1 ;return tracks of  #1 ;return number of  #4 for each  #1 ;return #2 ,  #3 ,   #5","[""SELECT['albums']"", ""PROJECT['album names of #REF', '#1']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['tracks of #REF', '#1']"", ""GROUP['count', '#4', '#1']"", ""UNION['#2', '#3', '#5']""]","['select', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_834,"What are the names and ids of the different albums, and how many tracks are on each?","return albums ;return names of #1 ;return ids of #1 ;return tracks on #1 ;return number of  #4 for each #1 ;return #2 ,  #3 ,   #5","[""SELECT['albums']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['tracks on #REF', '#1']"", ""GROUP['count', '#4', '#1']"", ""UNION['#2', '#3', '#5']""]","['select', 'project', 'project', 'project', 'group', 'union']",train
SPIDER_train_835,What is the name of the most common genre in all tracks?,return genres ;return tracks of #1 ;return number of #2 for each #1 ;return #1 where #3 is  highest ;return name of #4,"[""SELECT['genres']"", ""PROJECT['tracks of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_836,Find the name of the genre that is most frequent across all tracks.,return genres ;return tracks with  #1 ;return number of #2 for each #1 ;return #1 where  #3 is  highest ;return name of  #4,"[""SELECT['genres']"", ""PROJECT['tracks with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_837,What is the least common media type in all tracks?,return tracks ;return media types of #1 ;return the least common #2,"[""SELECT['tracks']"", ""PROJECT['media types of #REF', '#1']"", ""PROJECT['the least common #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_838,What is the name of the media type that is least common across all tracks?,return tracks ;return media types of #1 ;return number of  #1 for each #2 ;return #2 where #3 is  the  lowest ;return the  name of #4,"[""SELECT['tracks']"", ""PROJECT['media types of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""COMPARATIVE['#2', '#3', 'is the lowest']"", ""PROJECT['the name of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_839,Show the album names and ids for albums that contain tracks with unit price bigger than 1.,"return albums ;return tracks of  #1 ;return unit prices of  #2 ;return #1 where #3 is  higher than 1 ;return album names of  #4 ;return ids of  #4 ;return #5 ,  #6","[""SELECT['albums']"", ""PROJECT['tracks of #REF', '#1']"", ""PROJECT['unit prices of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is higher than 1']"", ""PROJECT['album names of #REF', '#4']"", ""PROJECT['ids of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_84,What are the ids of the candidates that have an outcome code of Pass?,return candidates ;return outcomes of  #1 ;return codes of  #2 ;return #1 where #3 is  Pass ;return ids of  #4,"[""SELECT['candidates']"", ""PROJECT['outcomes of #REF', '#1']"", ""PROJECT['codes of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Pass']"", ""PROJECT['ids of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_840,What are the titles and ids for albums containing tracks with unit price greater than 1?,"return albums ;return tracks of  #1 ;return unit prices of  #2 ;return #1 where #3 is  higher than 1 ;return titles of  #1 ;return ids of  #1 ;return #5 ,  #6","[""SELECT['albums']"", ""PROJECT['tracks of #REF', '#1']"", ""PROJECT['unit prices of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is higher than 1']"", ""PROJECT['titles of #REF', '#1']"", ""PROJECT['ids of #REF', '#1']"", ""UNION['#5', '#6']""]","['select', 'project', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_841,How many tracks belong to rock genre?,return rock genre ;return tracks of #1 ;return number of  #2,"[""SELECT['rock genre']"", ""PROJECT['tracks of #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_842,Count the number of tracks that are part of the rock genre.,return tracks ;return genres of  #1 ;return #1 where #2 is  rock ;return number of  #3,"[""SELECT['tracks']"", ""PROJECT['genres of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is rock']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_843,What is the average unit price of tracks that belong to Jazz genre?,return tracks ;return #1 that  belong to Jazz genre ;return unit price of  #2 ;return average of  #3,"[""SELECT['tracks']"", ""FILTER['#1', 'that belong to Jazz genre']"", ""PROJECT['unit price of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_844,Find the average unit price of jazz tracks.,return jazz tracks ;return prices of #1 ;return average of  #2,"[""SELECT['jazz tracks']"", ""PROJECT['prices of #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_845,"What is the first name and last name of the customer that has email ""luisg@embraer.com.br""?","return customers ;return #1 that  has  email luisg @ embraer.com.br ;return first name  of  #2 ;return last name  of  #2 ;return #3 ,  #4","[""SELECT['customers']"", ""FILTER['#1', 'that has email luisg @ embraer.com.br']"", ""PROJECT['first name of #REF', '#2']"", ""PROJECT['last name of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_846,"Find the full name of the customer with the email ""luisg@embraer.com.br"".",return customers ;return emails of  #1 ;return #1 where  #2 is  luisg @ embraer.com.br ;return full name of  #3,"[""SELECT['customers']"", ""PROJECT['emails of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is luisg @ embraer.com.br']"", ""PROJECT['full name of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_847,"How many customers have email that contains ""gmail.com""?",return customers ;return email of  #1 ;return #1 where  #2 contains gmail.com ;return number of #3,"[""SELECT['customers']"", ""PROJECT['email of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'contains gmail.com']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_848,"Count the number of customers that have an email containing ""gmail.com"".",return customers ;return #1 that  have  an email ;return #2 containing gmail.com ;return number of #3,"[""SELECT['customers']"", ""FILTER['#1', 'that have an email']"", ""FILTER['#2', 'containing gmail.com']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'filter', 'aggregate']",train
SPIDER_train_849,What is the first name and last name employee helps the customer with first name Leonie?,"return employees ;return customers #1 helps ;return first  names of #2 ;return #1 where #3 is  Leonie ;return first  name of #4 ;return last name of #4 ;return #5 ,  #6","[""SELECT['employees']"", ""PROJECT['customers #REF helps', '#1']"", ""PROJECT['first names of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Leonie']"", ""PROJECT['first name of #REF', '#4']"", ""PROJECT['last name of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_85,"Find the cell mobile number of the candidates whose assessment code is ""Fail""?",return candidates ;return #1 whose assessment code is  Fail ;return cell mobile number of  #2,"[""SELECT['candidates']"", ""FILTER['#1', 'whose assessment code is Fail']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_850,Find the full names of employees who help customers with the first name Leonie.,return employees ;return customers #1 help ;return first names of  #2 ;return #1 where  #3 is  Leonie ;return full names of  #4,"[""SELECT['employees']"", ""PROJECT['customers #REF help', '#1']"", ""PROJECT['first names of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Leonie']"", ""PROJECT['full names of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_852,Find the cities corresponding to employees who help customers with the postal code 70174.,return customers ;return postal codes of #1 ;return #1 where #2 is 70174 ;return employees of #3 ;return cities of #4,"[""SELECT['customers']"", ""PROJECT['postal codes of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is 70174']"", ""PROJECT['employees of #REF', '#3']"", ""PROJECT['cities of #REF', '#4']""]","['select', 'project', 'comparative', 'project', 'project']",train
SPIDER_train_853,How many distinct cities does the employees live in?,return employees ;return cities #1 live in ;return distinct #2 ;return number of #3,"[""SELECT['employees']"", ""PROJECT['cities #REF live in', '#1']"", ""PROJECT['distinct #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_854,Find the number of different cities that employees live in.,return cities ;return #1 where  employees live ;return number of #2,"[""SELECT['cities']"", ""FILTER['#1', 'where employees live']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_855,Find all invoice dates corresponding to customers with first name Astrid and last name Gruber.,return customers ;return first names of  #1 ;return #1 where #2 is  Astrid ;return last names of  #1 ;return #1 where #2 is  Gruber ;return #1 of  both #3 and  #5 ;return invoice dates corresponding to #6,"[""SELECT['customers']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Astrid']"", ""PROJECT['last names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Gruber']"", ""INTERSECTION['#1', '#3', '#5']"", ""PROJECT['invoice dates corresponding to #REF', '#6']""]","['select', 'project', 'comparative', 'project', 'comparative', 'intersection', 'project']",train
SPIDER_train_856,What are the invoice dates for customers with the first name Astrid and the last name Gruber?,return customers ;return first names of  #1 ;return #1 where #2 is  Astrid ;return last names of  customers ;return #1 where #4 is  Gruber ;return #1 of  both #3 and  #5 ;return invoices of  #6 ;return dates of  #7,"[""SELECT['customers']"", ""PROJECT['first names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Astrid']"", ""SELECT['last names of customers']"", ""COMPARATIVE['#1', '#4', 'is Gruber']"", ""INTERSECTION['#1', '#3', '#5']"", ""PROJECT['invoices of #REF', '#6']"", ""PROJECT['dates of #REF', '#7']""]","['select', 'project', 'comparative', 'select', 'comparative', 'intersection', 'project', 'project']",train
SPIDER_train_857,Find all the customer last names that do not have invoice totals larger than 20.,return invoices ;return totals of  #1 ;return #2 less than  20 ;return customers of  #3 ;return last names of  #4,"[""SELECT['invoices']"", ""PROJECT['totals of #REF', '#1']"", ""FILTER['#2', 'less than 20']"", ""PROJECT['customers of #REF', '#3']"", ""PROJECT['last names of #REF', '#4']""]","['select', 'project', 'filter', 'project', 'project']",train
SPIDER_train_858,What are the last names of customers without invoice totals exceeding 20?,return customers ;return invoices of  #1 ;return totals of  #2 ;return #1 where #3 is  at most 20 ;return last names of  #4,"[""SELECT['customers']"", ""PROJECT['invoices of #REF', '#1']"", ""PROJECT['totals of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is at most 20']"", ""PROJECT['last names of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_859,Find the first names of all customers that live in Brazil and have an invoice.,return customers ;return #1 that  live in Brazil ;return #2 that  have  an invoice ;return first names of  #3,"[""SELECT['customers']"", ""FILTER['#1', 'that live in Brazil']"", ""FILTER['#2', 'that have an invoice']"", ""PROJECT['first names of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_86,"What are the cell phone numbers of the candidates that received an assessment code of ""Fail""?",return candidates ;return #1 that  received an assessment code of  Fail ;return cell phone number of  #2,"[""SELECT['candidates']"", ""FILTER['#1', 'that received an assessment code of Fail']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_860,What are the different first names for customers from Brazil who have also had an invoice?,return customers ;return #1 from  Brazil ;return #2 who  had an invoice ;return different first names of  #3,"[""SELECT['customers']"", ""FILTER['#1', 'from Brazil']"", ""FILTER['#2', 'who had an invoice']"", ""PROJECT['different first names of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_861,Find the address of all customers that live in Germany and have invoice.,return customers ;return #1 that  live in Germany ;return #1 that  have  invoices ;return #1 of  both #2 and  #3 ;return addresses of  #4,"[""SELECT['customers']"", ""FILTER['#1', 'that live in Germany']"", ""FILTER['#1', 'that have invoices']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['addresses of #REF', '#4']""]","['select', 'filter', 'filter', 'intersection', 'project']",train
SPIDER_train_862,What are the addresses of customers living in Germany who have had an invoice?,return customers ;return #1 that  are  living in Germany ;return #1 who  have  had an invoice ;return #1 of  both #2 and  #3 ;return addresses of  #4,"[""SELECT['customers']"", ""FILTER['#1', 'that are living in Germany']"", ""FILTER['#1', 'who have had an invoice']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['addresses of #REF', '#4']""]","['select', 'filter', 'filter', 'intersection', 'project']",train
SPIDER_train_863,List the phone numbers of all employees.,return employees ;return phone numbers of  #1,"[""SELECT['employees']"", ""PROJECT['phone numbers of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_864,What are the phone numbers for each employee?,return employees ;return phone numbers of  #1,"[""SELECT['employees']"", ""PROJECT['phone numbers of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_865,How many tracks are in the AAC audio file media type?,return tracks ;return audio file media types of  #1 ;return #1 where  #2 is AAC ;return number of  #3,"[""SELECT['tracks']"", ""PROJECT['audio file media types of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is AAC']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_866,"Count the number of tracks that are of the media type ""AAC audio file"".",return tracks ;return media types of  #1 ;return #1 where #2 is  AAC audio files ;return number of  #3,"[""SELECT['tracks']"", ""PROJECT['media types of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is AAC audio files']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_867,What is the average duration in milliseconds of tracks that belong to Latin or Pop genre?,"return tracks ;return genre of #1 ;return #1 where #2 is Latin ;return #1 where #2 is Pop ;return #3 ,  #4 ;return duration of #5 in  milliseconds ;return average of #6","[""SELECT['tracks']"", ""PROJECT['genre of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Latin']"", ""COMPARATIVE['#1', '#2', 'is Pop']"", ""UNION['#3', '#4']"", ""PROJECT['duration of #REF in milliseconds', '#5']"", ""AGGREGATE['avg', '#6']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project', 'aggregate']",train
SPIDER_train_868,Find the average millisecond length of Latin and Pop tracks.,return Latin tracks ;return #1 and Pop tracks ;return millisecond length of  #2 ;return average of  #3,"[""SELECT['Latin tracks']"", ""FILTER['#1', 'and Pop tracks']"", ""PROJECT['millisecond length of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_869,Please show the employee first names and ids of employees who serve at least 10 customers.,"return employees ;return customers #1 serve ;return number of  #2 for each  #1 ;return #1 where #3 is  at least 10 ;return first names of  #4 ;return ids of  #4 ;return #5 ,  #6","[""SELECT['employees']"", ""PROJECT['customers #REF serve', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 10']"", ""PROJECT['first names of #REF', '#4']"", ""PROJECT['ids of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_87,What are the id of students who registered course 301?,return students ;return courses #1 registered ;return #1 where #2 is  301 ;return ids of  #3,"[""SELECT['students']"", ""PROJECT['courses #REF registered', '#1']"", ""COMPARATIVE['#1', '#2', 'is 301']"", ""PROJECT['ids of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_870,What are the first names and support rep ids for employees serving 10 or more customers?,"return employees ;return customers #1 are  serving ;return number of  #2 for each  #1 ;return #1 where #3 is  at least 10 ;return first names of  #4 ;return support rep ids of  #4 ;return #5 ,  #6","[""SELECT['employees']"", ""PROJECT['customers #REF are serving', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 10']"", ""PROJECT['first names of #REF', '#4']"", ""PROJECT['support rep ids of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_871,Please show the employee last names that serves no more than 20 customers.,return employees ;return customers #1 serve ;return number of  #2 for each #1 ;return #1 where #3 is  at most 20 ;return last names of #4,"[""SELECT['employees']"", ""PROJECT['customers #REF serve', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at most 20']"", ""PROJECT['last names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_872,What are the last names of employees who serve at most 20 customers?,return employees ;return customers that  #1 serve ;return the  number of  #2 for each #1 ;return #1 where #3 is  at most 20 ;return the  last names of #4,"[""SELECT['employees']"", ""PROJECT['customers that #REF serve', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at most 20']"", ""PROJECT['the last names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_873,Please list all album titles in alphabetical order.,return album titles ;return #1 sorted by alphabetical order,"[""SELECT['album titles']"", ""SORT['#1', '#1', 'alphabetical order']""]","['select', 'sort']",train
SPIDER_train_874,"What are all the album titles, in alphabetical order?",return albums ;return titles of  #1 ;return #2 sorted by alphabetical order,"[""SELECT['albums']"", ""PROJECT['titles of #REF', '#1']"", ""SORT['#2', '#2', 'alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_875,Please list the name and id of all artists that have at least 3 albums in alphabetical order.,"return artists ;return albums of  #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is at least 3 ;return names of  #4 ;return ids of  #4 ;return #5 ,  #6 ;return #7 sorted by alphabetical order","[""SELECT['artists']"", ""PROJECT['albums of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 3']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['ids of #REF', '#4']"", ""UNION['#5', '#6']"", ""SORT['#7', '#7', 'alphabetical order']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union', 'sort']",train
SPIDER_train_876,"What are the names and ids of artists with 3 or more albums, listed in alphabetical order?","return artists ;return albums of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  at least 3 ;return names of  #4 ;return ids of  #4 ;return #5 ,  #6 ;return #7 sorted by alphabetical order","[""SELECT['artists']"", ""PROJECT['albums of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 3']"", ""PROJECT['names of #REF', '#4']"", ""PROJECT['ids of #REF', '#4']"", ""UNION['#5', '#6']"", ""SORT['#7', '#7', 'alphabetical order']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union', 'sort']",train
SPIDER_train_877,Find the names of artists that do not have any albums.,return artists ;return #1 that  have  albums ;return #1 besides #2 ;return names of  #3,"[""SELECT['artists']"", ""FILTER['#1', 'that have albums']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_878,What are the names of artists who have not released any albums?,return artists ;return #1 who  have  not  released albums ;return names of  #2,"[""SELECT['artists']"", ""FILTER['#1', 'who have not released albums']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_879,What is the average unit price of rock tracks?,return rock tracks ;return unit prices of  #1 ;return average of  #2,"[""SELECT['rock tracks']"", ""PROJECT['unit prices of #REF', '#1']"", ""AGGREGATE['avg', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_88,What are the ids of the students who registered for course 301?,return students ;return courses #1 are  registered for ;return #1 where #2 is  301 ;return ids of  #3,"[""SELECT['students']"", ""PROJECT['courses #REF are registered for', '#1']"", ""COMPARATIVE['#1', '#2', 'is 301']"", ""PROJECT['ids of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_880,Find the average unit price of tracks from the Rock genre.,return tracks ;return #1 from  the Rock genre ;return unit prices of  #2 ;return the average of  #3,"[""SELECT['tracks']"", ""FILTER['#1', 'from the Rock genre']"", ""PROJECT['unit prices of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_881,What are the duration of the longest and shortest pop tracks in milliseconds?,"return pop tracks ;return durations of #1 ;return milliseconds of #2 ;return longest of #3 ;return shortest of #3 ;return #4 ,  #5","[""SELECT['pop tracks']"", ""PROJECT['durations of #REF', '#1']"", ""PROJECT['milliseconds of #REF', '#2']"", ""AGGREGATE['max', '#3']"", ""AGGREGATE['min', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_882,Find the maximum and minimum millisecond lengths of pop tracks.,return pop tracks ;return millisecond lengths of  #1 ;return maximum #2 ;return minimum #2 ;return #3 and #4,"[""SELECT['pop tracks']"", ""PROJECT['millisecond lengths of #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""AGGREGATE['min', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_883,What are the birth dates of employees living in Edmonton?,return employees ;return #1 living in Edmonton ;return birth dates of  #2,"[""SELECT['employees']"", ""FILTER['#1', 'living in Edmonton']"", ""PROJECT['birth dates of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_884,Find the birth dates corresponding to employees who live in the city of Edmonton.,return employees ;return #1 who  live in  the  city of Edmonton ;return birth dates of #2,"[""SELECT['employees']"", ""FILTER['#1', 'who live in the city of Edmonton']"", ""PROJECT['birth dates of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_885,What are the distinct unit prices of all tracks?,return tracks ;return distinct unit prices of  #1,"[""SELECT['tracks']"", ""PROJECT['distinct unit prices of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_886,Find the distinct unit prices for tracks.,return tracks ;return distinct unit prices of  #1,"[""SELECT['tracks']"", ""PROJECT['distinct unit prices of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_887,How many artists do not have any album?,return artists ;return #1 who  have  albums ;return #1 besides #2 ;return number of #3,"[""SELECT['artists']"", ""FILTER['#1', 'who have albums']"", ""DISCARD['#1', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'discard', 'aggregate']",train
SPIDER_train_888,Cound the number of artists who have not released an album.,return artists ;return #1 that  have  not  released an album ;return number of #2,"[""SELECT['artists']"", ""FILTER['#1', 'that have not released an album']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_889,What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?,return albums ;return tracks of #1 ;return genres of #2 ;return #1 where #3 is 'Rock ;return #1 where #3 is 'Reggae ;return #1 in  both #4 and  #5 ;return album titles of #6,"[""SELECT['albums']"", ""PROJECT['tracks of #REF', '#1']"", ""PROJECT['genres of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Rock']"", ""COMPARATIVE['#1', '#3', 'is Reggae']"", ""INTERSECTION['#1', '#4', '#5']"", ""PROJECT['album titles of #REF', '#6']""]","['select', 'project', 'project', 'comparative', 'comparative', 'intersection', 'project']",train
SPIDER_train_89,What is the id of the student who most recently registered course 301?,return students ;return how recently #1 registered course 301 ;return #1 where #2 is  the  most recently ;return the  id of #3,"[""SELECT['students']"", ""PROJECT['how recently #REF registered course 301', '#1']"", ""COMPARATIVE['#1', '#2', 'is the most recently']"", ""PROJECT['the id of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_890,Find the titles of albums that contain tracks of both the Reggae and Rock genres.,return tracks ;return #1 with  genre Reggae ;return #1 with  genre Rock ;return #1 in both #2 and #3 ;return albums of #4 ;return titles of  #5,"[""SELECT['tracks']"", ""FILTER['#1', 'with genre Reggae']"", ""FILTER['#1', 'with genre Rock']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['albums of #REF', '#4']"", ""PROJECT['titles of #REF', '#5']""]","['select', 'filter', 'filter', 'intersection', 'project', 'project']",train
SPIDER_train_891,Find all the phone numbers.,return phone numbers,"[""SELECT['phone numbers']""]",['select'],train
SPIDER_train_892,What are all the phone numbers?,return phone numbers,"[""SELECT['phone numbers']""]",['select'],train
SPIDER_train_893,"What are the customer phone numbers under the policy ""Life Insurance""?",return customers ;return #1 under the  policy Life Insurance ;return the  phone numbers of #2,"[""SELECT['customers']"", ""FILTER['#1', 'under the policy Life Insurance']"", ""PROJECT['the phone numbers of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_894,"What are the phone numbers of customers using the policy with the code ""Life Insurance""?",return customers ;return policies of  #1 ;return codes of  #2 ;return #1 where #3 is  Life Insurance ;return phone numbers of  #4,"[""SELECT['customers']"", ""PROJECT['policies of #REF', '#1']"", ""PROJECT['codes of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Life Insurance']"", ""PROJECT['phone numbers of #REF', '#4']""]","['select', 'project', 'project', 'comparative', 'project']",train
SPIDER_train_895,Which policy type has the most records in the database?,return policies ;return types of  #1 ;return records of  #2 ;return number of  #3 for each  #2 ;return #2 where #4 is  highest,"[""SELECT['policies']"", ""PROJECT['types of #REF', '#1']"", ""PROJECT['records of #REF', '#2']"", ""GROUP['count', '#3', '#2']"", ""SUPERLATIVE['max', '#2', '#4']""]","['select', 'project', 'project', 'group', 'superlative']",train
SPIDER_train_896,Which policy type appears most frequently in the available policies?,return the  policies ;return #1 that  are available ;return types of #2 ;return number of  #2 for each #3 ;return #3 where #4 is  the  highest,"[""SELECT['the policies']"", ""FILTER['#1', 'that are available']"", ""PROJECT['types of #REF', '#2']"", ""GROUP['count', '#2', '#3']"", ""COMPARATIVE['#3', '#4', 'is the highest']""]","['select', 'filter', 'project', 'group', 'comparative']",train
SPIDER_train_897,What are all the customer phone numbers under the most popular policy type?,return policy types ;return customers of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest ;return customers of #4 ;return phone numbers of #5,"[""SELECT['policy types']"", ""PROJECT['customers of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['customers of #REF', '#4']"", ""PROJECT['phone numbers of #REF', '#5']""]","['select', 'project', 'group', 'superlative', 'project', 'project']",train
SPIDER_train_898,Find the phone numbers of customers using the most common policy type among the available policies.,return customers ;return policy types of #1 ;return number of  #1 for each #2 ;return #2 where #3 is  the   highest ;return #1 where #2 is  #4 ;return phone numbers of #5,"[""SELECT['customers']"", ""PROJECT['policy types of #REF', '#1']"", ""GROUP['count', '#1', '#2']"", ""COMPARATIVE['#2', '#3', 'is the highest']"", ""COMPARATIVE['#1', '#2', 'is #4']"", ""PROJECT['phone numbers of #REF', '#5']""]","['select', 'project', 'group', 'comparative', 'comparative', 'project']",train
SPIDER_train_899,Find the policy type used by more than 4 customers.,return policy types ;return customers with #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  higher than 4,"[""SELECT['policy types']"", ""PROJECT['customers with #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 4']""]","['select', 'project', 'group', 'comparative']",train
SPIDER_train_9,Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?,"return departments ;return heads of #1 ;return temporary acting value of #2 ;return #1 where #3 is 'Yes ;return employees of #4 ;return names of #4 ;return number of  #5 for each  #4 ;return #6 ,  #7","[""SELECT['departments']"", ""PROJECT['heads of #REF', '#1']"", ""PROJECT['temporary acting value of #REF', '#2']"", ""COMPARATIVE['#1', '#3', 'is Yes']"", ""PROJECT['employees of #REF', '#4']"", ""PROJECT['names of #REF', '#4']"", ""GROUP['count', '#5', '#4']"", ""UNION['#6', '#7']""]","['select', 'project', 'project', 'comparative', 'project', 'project', 'group', 'union']",train
SPIDER_train_90,What are the ids of the students who registered for course 301 most recently?,return students ;return #1 who  registered for course 301 ;return #2 most recently ;return ids of  #3,"[""SELECT['students']"", ""FILTER['#1', 'who registered for course 301']"", ""FILTER['#2', 'most recently']"", ""PROJECT['ids of #REF', '#3']""]","['select', 'filter', 'filter', 'project']",train
SPIDER_train_900,Find the policy types more than 4 customers use. Show their type code.,return policy types ;return customers that  use #1 ;return number of  #2 for each #1 ;return #1 where #3 is  higher than 4 ;return type codes of #4,"[""SELECT['policy types']"", ""PROJECT['customers that use #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than 4']"", ""PROJECT['type codes of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_901,Find the total and average amount of settlements.,"return settlements ;return amounts of  #1 ;return sum of  #2 ;return average of  #2 ;return #3 ,   #4","[""SELECT['settlements']"", ""PROJECT['amounts of #REF', '#1']"", ""AGGREGATE['sum', '#2']"", ""AGGREGATE['avg', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_902,Return the sum and average of all settlement amounts.,"return settlements ;return amounts of #1 ;return the  average of #2 ;return the  sum of #2 ;return #4 ,  #3","[""SELECT['settlements']"", ""PROJECT['amounts of #REF', '#1']"", ""AGGREGATE['avg', '#2']"", ""AGGREGATE['sum', '#2']"", ""UNION['#4', '#3']""]","['select', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_903,Find the name of services that have been used for more than 2 times in first notification of loss.,return first notification of loss ;return number of  #1 for each service ;return services ;return #3 where #2 higher than 2,"[""SELECT['first notification of loss']"", ""PROJECT['service', '#1']"", ""GROUP['count', '#1', '#2']"", ""SELECT['services']"", ""COMPARATIVE['#4', '#3', 'higher than 2']""]","['select', 'project', 'group', 'select', 'comparative']",train
SPIDER_train_904,Which services have been used more than twice in first notification of loss? Return the service name.,return services ;return first notification of  loss of #1 ;return number of  #2 for each  #1 ;return #1 where #2 larger than twice ;return names of  #4,"[""SELECT['services']"", ""PROJECT['first notification of loss of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#2', 'larger than twice']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'group', 'comparative', 'project']",train
SPIDER_train_905,What is the effective date of the claim that has the largest amount of total settlement?,return claims ;return total settlements of  #1 ;return amounts of  #2 ;return #1 where #3 is  highest ;return effective dates of  #4,"[""SELECT['claims']"", ""PROJECT['settlements of #REF', '#1']"", ""GROUP['sum', '#2', '#1']"", ""PROJECT['amounts of #REF', '#3']"", ""SUPERLATIVE['max', '#1', '#4']"", ""PROJECT['effective dates of #REF', '#5']""]","['select', 'project', 'group', 'project', 'superlative', 'project']",train
SPIDER_train_906,Find the claim that has the largest total settlement amount. Return the effective date of the claim.,return claims ;return total settlement amount for each #1 ;return #1 where  #2 is  largest ;return effective date of  #3,"[""SELECT['claims']"", ""PROJECT['amount', '#1']"", ""GROUP['sum', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['effective date of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_907,"How many policies are listed for the customer named ""Dayana Robel""?",return customers ;return policies of  #1 ;return #2 where  #1 is  Dayana Robel ;return number of #3,"[""SELECT['customers']"", ""PROJECT['policies of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Dayana Robel']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_908,"Count the total number of policies used by the customer named ""Dayana Robel"".",return customer ;return #1 that is named Dayana Robel ;return policies of #2 ;return number of  #3,"[""SELECT['customer']"", ""FILTER['#1', 'that is named Dayana Robel']"", ""PROJECT['policies of #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_909,What is the name of the customer who has the most policies listed?,return customers ;return policies listed of #1 ;return number of  #2 for each #1 ;return #1 where #3 is  highest ;return name of #4,"[""SELECT['customers']"", ""PROJECT['policies listed of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_91,Find distinct cities of addresses of people?,return people ;return addresses of  #1 ;return cities of  #2 ;return #3 that  are  distinct,"[""SELECT['people']"", ""PROJECT['addresses of #REF', '#1']"", ""PROJECT['cities of #REF', '#2']"", ""FILTER['#3', 'that are distinct']""]","['select', 'project', 'project', 'filter']",train
SPIDER_train_910,Which customer uses the most policies? Give me the customer name.,return customers ;return policies #1 uses ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return customer name of  #4,"[""SELECT['customers']"", ""PROJECT['policies #REF uses', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['customer name of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_911,"What are all the policy types of the customer named ""Dayana Robel""?",return customers ;return policy types of  #1 ;return #2 where #1 is  named Dayana Robel,"[""SELECT['customers']"", ""PROJECT['policy types of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is named Dayana Robel']""]","['select', 'project', 'comparative']",train
SPIDER_train_912,"Tell me the types of the policy used by the customer named ""Dayana Robel"".",return customers ;return policies of  #1 ;return #2 where #1 is  Dayana Robel ;return types of  #3,"[""SELECT['customers']"", ""PROJECT['policies of #REF', '#1']"", ""COMPARATIVE['#2', '#1', 'is Dayana Robel']"", ""PROJECT['types of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_913,What are all the policy types of the customer that has the most policies listed?,return customers ;return policies listed of  #1 ;return number of  #2 for each  #1 ;return #1 where #3 is  highest ;return policy types of  #4,"[""SELECT['customers']"", ""PROJECT['policies listed of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['policy types of #REF', '#4']""]","['select', 'project', 'group', 'superlative', 'project']",train
SPIDER_train_914,List all the policy types used by the customer enrolled in the most policies.,return customers ;return policies of  #1 ;return number of  #2 for each  #1 ;return #1 where  #3 is highest ;return policies of  #4 ;return policy types of  #5,"[""SELECT['customers']"", ""PROJECT['policies of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""SUPERLATIVE['max', '#1', '#3']"", ""PROJECT['policies of #REF', '#4']"", ""PROJECT['policy types of #REF', '#5']""]","['select', 'project', 'group', 'superlative', 'project', 'project']",train
SPIDER_train_915,List all the services in the alphabetical order.,return services ;return #1 sorted by alphabetical order,"[""SELECT['services']"", ""SORT['#1', '#1', 'alphabetical order']""]","['select', 'sort']",train
SPIDER_train_916,Give me a list of all the service names sorted alphabetically.,return service ;return names of  #1 ;return #2 sorted alphabetically,"[""SELECT['service']"", ""PROJECT['names of #REF', '#1']"", ""FILTER['#2', 'sorted alphabetically']""]","['select', 'project', 'filter']",train
SPIDER_train_917,How many services are there?,return services ;return number of  #1,"[""SELECT['services']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_918,Count the total number of available services.,return services ;return #1 which  are  available ;return the number of #2,"[""SELECT['services']"", ""FILTER['#1', 'which are available']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_919,Find the names of users who do not have a first notification of loss record.,return users ;return records of  #1 ;return #1 where  #2 is  first notification of  loss ;return #1 besides #3 ;return names of  #4,"[""SELECT['users']"", ""PROJECT['records of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is first notification of loss']"", ""DISCARD['#1', '#3']"", ""PROJECT['names of #REF', '#4']""]","['select', 'project', 'comparative', 'discard', 'project']",train
SPIDER_train_92,What are the different cities where people live?,return cities ;return #1 where people live ;return different #2,"[""SELECT['cities']"", ""FILTER['#1', 'where people live']"", ""PROJECT['different #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_920,Which customers do not have a first notification of loss record? Give me the customer names.,return customers ;return #1 that have a first notification of loss record ;return #1 besides  #2 ;return names of #3,"[""SELECT['customers']"", ""FILTER['#1', 'that have a first notification of loss record']"", ""DISCARD['#1', '#2']"", ""PROJECT['names of #REF', '#3']""]","['select', 'filter', 'discard', 'project']",train
SPIDER_train_921,"Find the names of customers who have used either the service ""Close a policy"" or the service ""Upgrade a policy"".",return customers ;return services used of  #1 ;return #1 where  #2 is  Close a policy  ;return #1 where  #2 is  Upgrade a policy  ;return #3 or  #4 ;return names of  #5,"[""SELECT['customers']"", ""PROJECT['services used of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Close a policy']"", ""COMPARATIVE['#1', '#2', 'is Upgrade a policy']"", ""UNION['#3', '#4']"", ""PROJECT['names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_922,"Which customers have used the service named ""Close a policy"" or ""Upgrade a policy""? Give me the customer names.",return customers ;return services #1 used ;return #1 where #2 is  Close a  policy ;return #1 where #2 is  Upgrade a  policy ;return #3 or  #4 ;return customer names of  #5,"[""SELECT['customers']"", ""PROJECT['services #REF used', '#1']"", ""COMPARATIVE['#1', '#2', 'is Close a policy']"", ""COMPARATIVE['#1', '#2', 'is Upgrade a policy']"", ""UNION['#3', '#4']"", ""PROJECT['customer names of #REF', '#5']""]","['select', 'project', 'comparative', 'comparative', 'union', 'project']",train
SPIDER_train_923,"Find the names of customers who have used both the service ""Close a policy"" and the service ""New policy application"".",return customers ;return #1 who  have  used the service Close a policy  ;return #1 who  have  used the service New policy  application ;return names of #1 ;return #4 of both #2 and #3,"[""SELECT['customers']"", ""FILTER['#1', 'who have used the service Close a policy']"", ""FILTER['#1', 'who have used the service New policy application']"", ""PROJECT['names of #REF', '#1']"", ""INTERSECTION['#4', '#2', '#3']""]","['select', 'filter', 'filter', 'project', 'intersection']",train
SPIDER_train_924,"Which customers have used both the service named ""Close a policy"" and the service named ""Upgrade a policy""? Give me the customer names.",return services ;return #1 that are named  Close a policy ;return #1 that are named  Upgrade a policy ;return customers of #1; return #4 of both #2 and  #3 ;return names of #4,"[""SELECT['services']"", ""FILTER['#1', 'that are named Close a policy']"", ""FILTER['#1', 'that are named Upgrade a policy']"", ""PROJECT['customers of #REF', '#1']"", ""INTERSECTION['#4', '#2', '#3']"", ""PROJECT['names of #REF', '#5']""]","['select', 'filter', 'filter', 'project', 'intersection', 'project']",train
SPIDER_train_925,"Find the IDs of customers whose name contains ""Diana"".",return customers ;return name of  #1 ;return #1 where  #2 contains Diana ;return IDs of  #3,"[""SELECT['customers']"", ""PROJECT['name of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'contains Diana']"", ""PROJECT['IDs of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_926,"What are the IDs of customers who have ""Diana"" in part of their names?",return customers ;return #1 who  have  Diana in part of  their names ;return the  IDs of  #2,"[""SELECT['customers']"", ""FILTER['#1', 'who have Diana in part of their names']"", ""PROJECT['the IDs of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_927,What are the maximum and minimum settlement amount on record?,"return settlements ;return amounts of #1 ;return maximum of #2 ;return minimum of #2 ;return #3 ,  #4","[""SELECT['settlements']"", ""PROJECT['amounts of #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""AGGREGATE['min', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_928,Find the maximum and minimum settlement amount.,"return settlements ;return amount of  #1 ;return maximum of  #2 ;return minimum of  #2 ;return #3 ,   #4","[""SELECT['settlements']"", ""PROJECT['amount of #REF', '#1']"", ""AGGREGATE['max', '#2']"", ""AGGREGATE['min', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'aggregate', 'aggregate', 'union']",train
SPIDER_train_929,List all the customers in increasing order of IDs.,return customers ;return IDs of  #1 ;return #1 sorted by increasing order of  #2,"[""SELECT['customers']"", ""PROJECT['IDs of #REF', '#1']"", ""SORT['#1', '#2', 'increasing order of']""]","['select', 'project', 'sort']",train
SPIDER_train_93,Find distinct cities of address of students?,return students ;return addresses of  #1 ;return distinct cities of  #2,"[""SELECT['students']"", ""PROJECT['addresses of #REF', '#1']"", ""PROJECT['distinct cities of #REF', '#2']""]","['select', 'project', 'project']",train
SPIDER_train_930,What is the ordered list of customer ids?,return customers ;return ids of #1,"[""SELECT['customers']"", ""PROJECT['ids of #REF', '#1']""]","['select', 'project']",train
SPIDER_train_931,"Retrieve the open and close dates of all the policies associated with the customer whose name contains ""Diana""","return customers ;return names of  #1 ;return #1 where  #2 contains Diana ;return policies of  #3 ;return open dates of  #4 ;return close dates of  #4 ;return #5 ,  #6","[""SELECT['customers']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'contains Diana']"", ""PROJECT['policies of #REF', '#3']"", ""PROJECT['open dates of #REF', '#4']"", ""PROJECT['close dates of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_932,"What are the open and close dates of all the policies used by the customer who have ""Diana"" in part of their names?","return customers ;return names of  #1 ;return #1 where #2 has  Diana ;return policies used by #3 ;return open dates of  #4 ;return close dates of  #4 ;return #5 ,  #6","[""SELECT['customers']"", ""PROJECT['names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'has Diana']"", ""PROJECT['policies used by #REF', '#3']"", ""PROJECT['open dates of #REF', '#4']"", ""PROJECT['close dates of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_933,How many kinds of enzymes are there?,return enzymes ;return kinds of  #1 ;return number of  #2,"[""SELECT['enzymes']"", ""PROJECT['kinds of #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_934,What is the total count of enzymes?,return enzymes ;return number of  #1,"[""SELECT['enzymes']"", ""AGGREGATE['count', '#1']""]","['select', 'aggregate']",train
SPIDER_train_935,List the name of enzymes in descending lexicographical order.,return enzymes ;return names of  #1 ;return #2 sorted by descending lexicographical order,"[""SELECT['enzymes']"", ""PROJECT['names of #REF', '#1']"", ""SORT['#2', '#2', 'descending lexicographical order']""]","['select', 'project', 'sort']",train
SPIDER_train_936,What are the names of enzymes in descending order?,return enzymes ;return names of  #1 ;return #2 sorted by descending order,"[""SELECT['enzymes']"", ""PROJECT['names of #REF', '#1']"", ""SORT['#2', '#2', 'descending order']""]","['select', 'project', 'sort']",train
SPIDER_train_937,List the names and the locations that the enzymes can make an effect.,"return enzymes ;return names of  #1 ;return locations #1 can make an effect ;return #2 ,  #3","[""SELECT['enzymes']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['locations #REF can make an effect', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_938,What are the names and locations of all enzymes listed?,"return enzymes ;return names of  #1 ;return locations of  #1 ;return #2 ,  #3","[""SELECT['enzymes']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['locations of #REF', '#1']"", ""UNION['#2', '#3']""]","['select', 'project', 'project', 'union']",train
SPIDER_train_939,What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?,return the  enzymes ;return the  Online Mendelian Inheritance in Man ( OMIM ) values of #1 ;return the  maximum of #2,"[""SELECT['the enzymes']"", ""PROJECT['the Online Mendelian Inheritance in Man ( OMIM ) values of #REF', '#1']"", ""AGGREGATE['max', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_94,What are the different cities where students live?,return students ;return different cities where #1 live,"[""SELECT['students']"", ""PROJECT['different cities where #REF live', '#1']""]","['select', 'project']",train
SPIDER_train_940,What is the maximum OMIM value in the database?,return OMIM ;return values of #1 ;return maximum of #2,"[""SELECT['OMIM']"", ""PROJECT['values of #REF', '#1']"", ""AGGREGATE['max', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_941,"What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?","return enzymes ;return locations #1 take effect at ;return #1 where #2 is  'Cytosol ;return products of  #3 ;return chromosomes of  #3 ;return porphyrias of  #3 ;return #4 ,  #5 ,   #6","[""SELECT['enzymes']"", ""PROJECT['locations #REF take effect at', '#1']"", ""COMPARATIVE['#1', '#2', 'is Cytosol']"", ""PROJECT['products of #REF', '#3']"", ""PROJECT['chromosomes of #REF', '#3']"", ""PROJECT['porphyrias of #REF', '#3']"", ""UNION['#4', '#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_942,"What is the product, chromosome, and porphyria of the enzymes located at 'Cytosol'?","return enzymes ;return #1 located at 'Cytosol ;return products of  #2 ;return chromosomes of  #2 ;return porphyrias of  #2 ;return #3 ,  #4 ,   #5","[""SELECT['enzymes']"", ""FILTER['#1', 'located at Cytosol']"", ""PROJECT['products of #REF', '#2']"", ""PROJECT['chromosomes of #REF', '#2']"", ""PROJECT['porphyrias of #REF', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_943,What are the names of enzymes who does not produce 'Heme'?,return enzymes ;return #1 that  do not produce 'Heme ;return names of #2,"[""SELECT['enzymes']"", ""FILTER['#1', 'that do not produce Heme']"", ""PROJECT['names of #REF', '#2']""]","['select', 'filter', 'project']",train
SPIDER_train_944,What are the names of enzymes whose product is not 'Heme'?,return enzymes ;return products of  #1 ;return #1 where #2 is  not  'Heme ;return names of  #3,"[""SELECT['enzymes']"", ""PROJECT['products of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is not Heme']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'comparative', 'project']",train
SPIDER_train_945,What are the names and trade names of the medicines which has 'Yes' value in the FDA record?,"return medicines ;return values of  #1 in FDA record ;return #1 where #2 is  'Yes ;return names of  #3 ;return trade names of  #3 ;return #4 ,  #5","[""SELECT['medicines']"", ""PROJECT['values of #REF in FDA record', '#1']"", ""COMPARATIVE['#1', '#2', 'is Yes']"", ""PROJECT['names of #REF', '#3']"", ""PROJECT['trade names of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_946,What are the names and trade names of the medcines that are FDA approved?,"return medcines ;return #1 that  are  FDA approved ;return names of  #2 ;return trade names of  #2 ;return #3 ,  #4","[""SELECT['medcines']"", ""FILTER['#1', 'that are FDA approved']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['trade names of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_947,What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?,return the  medicine named 'Amisulpride '  ;return the  enzymes in #1 ;return #2 that  can serve as an 'inhibitor '  ;return the  names of #3,"[""SELECT['the medicine named Amisulpride ']"", ""PROJECT['the enzymes in #REF', '#1']"", ""FILTER['#2', 'that can serve as an inhibitor ']"", ""PROJECT['the names of #REF', '#3']""]","['select', 'project', 'filter', 'project']",train
SPIDER_train_948,What are the names of the enzymes used in the medicine  Amisulpride that acts as inhibitors?,return medicine Amisulpride ;return enzymes in #1 ;return #2 that  act as inhibitors ;return names of  #3,"[""SELECT['medicine Amisulpride']"", ""PROJECT['enzymes in #REF', '#1']"", ""FILTER['#2', 'that act as inhibitors']"", ""PROJECT['names of #REF', '#3']""]","['select', 'project', 'filter', 'project']",train
SPIDER_train_949,What are the ids and names of the medicine that can interact with two or more enzymes?,"return medicines ;return enzymes #1 can interact with ;return number of  #2 for each  #1 ;return #1 where #3 is  at least two ;return ids of  #4 ;return names of  #4 ;return #5 ,  #6","[""SELECT['medicines']"", ""PROJECT['enzymes #REF can interact with', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least two']"", ""PROJECT['ids of #REF', '#4']"", ""PROJECT['names of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_95,List the names of courses in alphabetical order?,return courses ;return #1 sorted by alphabetical order,"[""SELECT['courses']"", ""SORT['#1', '#1', 'alphabetical order']""]","['select', 'sort']",train
SPIDER_train_950,"For every medicine id, what are the names of the medicines that can interact with more than one enzyme?",return medicine ids ;return enzymes #1 can interact with  ;return number of #2 for each #1 ;return #1 where  #3 is  higher than one ;return medicine of  #4 ;return name of  #5,"[""SELECT['medicine ids']"", ""PROJECT['enzymes #REF can interact with', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than one']"", ""PROJECT['medicine of #REF', '#4']"", ""PROJECT['name of #REF', '#5']""]","['select', 'project', 'group', 'comparative', 'project', 'project']",train
SPIDER_train_951,"What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with.","return medicines ;return ids of  #1 ;return names of  #1 ;return FDA approval statuses of  #1 ;return enzymes #1 can interact with ;return number of  #5 for each  #1 ;return #2 ,  #3 ,   #4 ;return #7 sorted by #6 in descending order","[""SELECT['medicines']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['FDA approval statuses of #REF', '#1']"", ""PROJECT['enzymes #REF can interact with', '#1']"", ""GROUP['count', '#5', '#1']"", ""UNION['#2', '#3', '#4']"", ""SORT['#7', '#6', 'in descending order']""]","['select', 'project', 'project', 'project', 'project', 'group', 'union', 'sort']",train
SPIDER_train_952,"What are the ids, names, and FDA approval status for medicines ordered by descending number of possible enzyme interactions?","return medicines ;return ids of  #1 ;return names of  #1 ;return FDA approval statuses of  #1 ;return possible enzyme interactions of  #1 ;return number of  #5 for each  #1 ;return #2 ,  #3 ,   #4 ;return #7 sorted by #6 descending","[""SELECT['medicines']"", ""PROJECT['ids of #REF', '#1']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['FDA approval statuses of #REF', '#1']"", ""PROJECT['possible enzyme interactions of #REF', '#1']"", ""GROUP['count', '#5', '#1']"", ""UNION['#2', '#3', '#4']"", ""SORT['#7', '#6', 'descending']""]","['select', 'project', 'project', 'project', 'project', 'group', 'union', 'sort']",train
SPIDER_train_953,What is the id and name of the enzyme with most number of medicines that can interact as 'activator'?,"return enzymes ;return #1 with medicines that  can interact as 'activator ;return #1 where #2 is  highest ;return id of  #3 ;return name of  #3 ;return #4 ,  #5","[""SELECT['enzymes']"", ""FILTER['#1', 'with medicines that can interact as activator']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['id of #REF', '#3']"", ""PROJECT['name of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_954,What is the id and name of the enzyme that can interact with the most medicines as an activator?,"return enzymes ;return medicines #1 can interact with  ;return #2 as an activator ;return number of  #3 for each #1 ;return #1 where #4 is  highest ;return id of #5 ;return name of #5 ;return #6 ,  #7","[""SELECT['enzymes']"", ""PROJECT['medicines #REF can interact with', '#1']"", ""FILTER['#2', 'as an activator']"", ""GROUP['count', '#3', '#1']"", ""SUPERLATIVE['max', '#1', '#4']"", ""PROJECT['id of #REF', '#5']"", ""PROJECT['name of #REF', '#5']"", ""UNION['#6', '#7']""]","['select', 'project', 'filter', 'group', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_955,What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?,return enzymes ;return #1 named  'ALA synthase ;return medicines ;return #3 named  'Aripiprazole ;return interaction type ;return #5 of both #2 and #4,"[""SELECT['enzymes']"", ""FILTER['#1', 'named ALA synthase']"", ""SELECT['medicines']"", ""FILTER['#3', 'named Aripiprazole']"", ""SELECT['interaction type']"", ""INTERSECTION['#5', '#2', '#4']""]","['select', 'filter', 'select', 'filter', 'select', 'intersection']",train
SPIDER_train_956,What is the type of interaction for the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?,return medicines ;return #1 that are named  'Aripiprazole ;return types of interactions of  #2 ;return enzyme of #3 ;return #3 where #4 is 'ALA synthase,"[""SELECT['medicines']"", ""FILTER['#1', 'that are named Aripiprazole']"", ""PROJECT['types of interactions of #REF', '#2']"", ""PROJECT['enzyme of #REF', '#3']"", ""COMPARATIVE['#3', '#4', 'is ALA synthase']""]","['select', 'filter', 'project', 'project', 'comparative']",train
SPIDER_train_957,What is the most common interaction type between enzymes and medicine? And how many are there?,"return interactions ;return #1 between enzymes and medicines ;return types of #2 ;return number of  #2 for each #3 ;return #3 where #4 is  the  highest ;return number of  #3 ;return #5 ,  #6","[""SELECT['interactions']"", ""FILTER['#1', 'betweenleftside enzymes']"", ""FILTER['#2', 'betweenrightside medicines']"", ""PROJECT['types of #REF', '#3']"", ""GROUP['count', '#3', '#4']"", ""COMPARATIVE['#4', '#5', 'is the highest']"", ""AGGREGATE['count', '#4']"", ""UNION['#6', '#7']""]","['select', 'filter', 'filter', 'project', 'group', 'comparative', 'aggregate', 'union']",train
SPIDER_train_958,"What are the most common types of interactions between enzymes and medicine, and how many types are there?","return interactions ;return #1 between enzymes and  medicine ;return types of #2 ;return number of #3 ;return the most common #3 ;return #5 , #4","[""SELECT['interactions']"", ""FILTER['#1', 'betweenleftside enzymes']"", ""FILTER['#2', 'betweenrightside medicine']"", ""PROJECT['types of #REF', '#3']"", ""AGGREGATE['count', '#4']"", ""PROJECT['the most common #REF', '#4']"", ""UNION['#6', '#5']""]","['select', 'filter', 'filter', 'project', 'aggregate', 'project', 'union']",train
SPIDER_train_959,How many medicines have the FDA approval status 'No' ?,return medicines ;return FDA approval statuses of  #1 ;return #1 where  #2 is  'No ;return number of #3,"[""SELECT['medicines']"", ""PROJECT['FDA approval statuses of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is No']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'comparative', 'aggregate']",train
SPIDER_train_96,What are the names of the courses in alphabetical order?,return courses ;return names of  #1 ;return #2 sorted by alphabetical order,"[""SELECT['courses']"", ""PROJECT['names of #REF', '#1']"", ""SORT['#2', '#2', 'alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_960,How many medicines were not approved by the FDA?,return medicines ;return #1 that  were not  approved by the  FDA ;return number of  #2,"[""SELECT['medicines']"", ""FILTER['#1', 'that were not approved by the FDA']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_961,How many enzymes do not have any interactions?,return enzymes ;return #1 that  have  interactions ;return #1 besides #2 ;return number of #3,"[""SELECT['enzymes']"", ""FILTER['#1', 'that have interactions']"", ""DISCARD['#1', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'filter', 'discard', 'aggregate']",train
SPIDER_train_962,What is the count of enzymes without any interactions?,return enzymes ;return #1 without interactions ;return number of  #2,"[""SELECT['enzymes']"", ""FILTER['#1', 'without interactions']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_963,What is the id and trade name of the medicines can interact with at least 3 enzymes?,"return medicines ;return enzymes #1 can interact with ;return number of  #2 for each  #1 ;return #1 where #3 is  at least 3 ;return id of  #4 ;return trade name of  #4 ;return #5 ,  #6","[""SELECT['medicines']"", ""PROJECT['enzymes #REF can interact with', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 3']"", ""PROJECT['id of #REF', '#4']"", ""PROJECT['trade name of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_964,What are the ids and trade names of the medicine that can interact with at least 3 enzymes?,"return medicines ;return enzymes #1 can interact with ;return number of  #2 for each  #1 ;return #1 where #3 is  at least 3 ;return ids of  #4 ;return trade names of  #4 ;return #5 ,  #6","[""SELECT['medicines']"", ""PROJECT['enzymes #REF can interact with', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least 3']"", ""PROJECT['ids of #REF', '#4']"", ""PROJECT['trade names of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_965,"What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?","return enzymes ;return 'inhibitor interactions of #1 ;return the  number of  #2 for each #1 ;return #1 where #3 is  at least one ;return the  distinct names of #4 ;return the  distinct locations of #4 ;return the  distinct products of #4 ;return #5 ,  #6 ,   #7","[""SELECT['enzymes']"", ""PROJECT['inhibitor interactions of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is at least one']"", ""PROJECT['the distinct names of #REF', '#4']"", ""PROJECT['the distinct locations of #REF', '#4']"", ""PROJECT['the distinct products of #REF', '#4']"", ""UNION['#5', '#6', '#7']""]","['select', 'project', 'group', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_966,"What are the different names, locations, and products of the enzymes that are capable inhibitor interactions?","return enzymes ;return #1 that  are  capable of  inhibitor interactions ;return names of  #2 ;return locations of  #2 ;return products of  #2 ;return #3 ,  #4 ,   #5","[""SELECT['enzymes']"", ""FILTER['#1', 'that are capable of inhibitor interactions']"", ""PROJECT['names of #REF', '#2']"", ""PROJECT['locations of #REF', '#2']"", ""PROJECT['products of #REF', '#2']"", ""UNION['#3', '#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_967,List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes.,"return medicines ;return #1 that can interact with enzymes as a 'inhibitor ;return #1 that can interact with enzymes as a 'activitor ;return #1 in  both #2 and  #3 ;return medicine names of #4 ;return trade names of #4 ;return #5 ,  #6","[""SELECT['medicines']"", ""FILTER['#1', 'that can interact with enzymes as a inhibitor']"", ""FILTER['#1', 'that can interact with enzymes as a activitor']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['medicine names of #REF', '#4']"", ""PROJECT['trade names of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'filter', 'filter', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_968,What are the medicine and trade names that can interact as an inhibitor and activitor with enzymes?,"return medicines ;return #1 that  can interact as an inhibitor with  enzymes ;return #1 that  can interact as an activitor with  enzymes ;return #1 in both #2 and #3 ;return the  medicine names of #4 ;return the  trades names of #4 ;return #5 ,  #6","[""SELECT['medicines']"", ""FILTER['#1', 'that can interact as an inhibitor with enzymes']"", ""FILTER['#1', 'that can interact as an activitor with enzymes']"", ""INTERSECTION['#1', '#2', '#3']"", ""PROJECT['the medicine names of #REF', '#4']"", ""PROJECT['the trades names of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'filter', 'filter', 'intersection', 'project', 'project', 'union']",train
SPIDER_train_969,Show the medicine names and trade names that cannot interact with the enzyme with product 'Heme'.,"return medicines ;return enzymes interact with of #1 ;return products of #2 ;return #2 where #3 is 'Heme ;return number of  #4 for each #1 ;return #1 where #5 is zero ;return medicine names of #6 ;return trade names of #6 ;return #7 ,  #8","[""SELECT['medicines']"", ""PROJECT['enzymes interact with of #REF', '#1']"", ""PROJECT['products of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is Heme']"", ""GROUP['count', '#4', '#1']"", ""COMPARATIVE['#1', '#5', 'is zero']"", ""PROJECT['medicine names of #REF', '#6']"", ""PROJECT['trade names of #REF', '#6']"", ""UNION['#7', '#8']""]","['select', 'project', 'project', 'comparative', 'group', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_97,List the first names of people in alphabetical order?,return people ;return first names of  #1 ;return #2 sorted by alphabetical order,"[""SELECT['people']"", ""PROJECT['first names of #REF', '#1']"", ""SORT['#2', '#2', 'alphabetical order']""]","['select', 'project', 'sort']",train
SPIDER_train_970,What are the medicine and trade names that cannot interact with the enzyme with the product 'Heme'?,"return enzymes ;return products that  #1 can not interact with  ;return #1 where #2 is  'Heme ;return medicine name of #3 ;return trade name of #3 ;return #4 , #5","[""SELECT['enzymes']"", ""PROJECT['products that #REF can not interact with', '#1']"", ""COMPARATIVE['#1', '#2', 'is Heme']"", ""PROJECT['medicine name of #REF', '#3']"", ""PROJECT['trade name of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'comparative', 'project', 'project', 'union']",train
SPIDER_train_971,How many distinct FDA approval statuses are there for the medicines?,return medicines ;return FDA approval statuses of  #1 ;return distinct #2 ;return number of  #3,"[""SELECT['medicines']"", ""PROJECT['FDA approval statuses of #REF', '#1']"", ""PROJECT['distinct #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_972,How many different FDA approval statuses exist for medicines?,return medicines ;return FDA approval statuses of  #1 ;return different #2 ;return number of #3,"[""SELECT['medicines']"", ""PROJECT['FDA approval statuses of #REF', '#1']"", ""PROJECT['different #REF', '#2']"", ""AGGREGATE['count', '#3']""]","['select', 'project', 'project', 'aggregate']",train
SPIDER_train_973,"Which enzyme names have the substring ""ALA""?",return enzyme ;return names of #1 ;return substring of #2 ;return #2 where #3 is  ALA,"[""SELECT['enzyme']"", ""PROJECT['names of #REF', '#1']"", ""PROJECT['substring of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is ALA']""]","['select', 'project', 'project', 'comparative']",train
SPIDER_train_974,What are the names of enzymes that include the string 'ALA'?,return enzymes ;return names of  #1 ;return #2 that  include the  string 'ALA,"[""SELECT['enzymes']"", ""PROJECT['names of #REF', '#1']"", ""FILTER['#2', 'that include the string ALA']""]","['select', 'project', 'filter']",train
SPIDER_train_975,find the number of medicines offered by each trade.,return trades ;return medicines offered by #1 ;return number of  #2 for each  #1,"[""SELECT['trades']"", ""PROJECT['medicines offered by #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_976,How many medicines are offered by each trade name?,return trade names ;return medicines offered by #1 ;return number of  #2 for each  #1,"[""SELECT['trade names']"", ""PROJECT['medicines offered by #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""UNION['#1', '#3']""]","['select', 'project', 'group', 'union']",train
SPIDER_train_977,List all schools and their nicknames in the order of founded year.,"return schools ;return nicknames of #1 ;return founded years of #1 ;return #1 ,  #2 ;return #4 sorted by #3","[""SELECT['schools']"", ""PROJECT['nicknames of #REF', '#1']"", ""PROJECT['founded years of #REF', '#1']"", ""UNION['#1', '#2']"", ""SORT['#4', '#3']""]","['select', 'project', 'project', 'union', 'sort']",train
SPIDER_train_978,"What are the different schools and their nicknames, ordered by their founding years?","return different schools ;return nicknames of  #1 ;return founding years of  #1 ;return #2 ,  #3 ;return #4 sorted by #3","[""SELECT['different schools']"", ""PROJECT['nicknames of #REF', '#1']"", ""PROJECT['founding years of #REF', '#1']"", ""UNION['#2', '#3']"", ""SORT['#4', '#3']""]","['select', 'project', 'project', 'union', 'sort']",train
SPIDER_train_979,List all public schools and their locations.,"return public schools ;return locations of  #1 ;return #1 ,  #2","[""SELECT['public schools']"", ""PROJECT['locations of #REF', '#1']"", ""UNION['#1', '#2']""]","['select', 'project', 'union']",train
SPIDER_train_98,What are the first names of the people in alphabetical order?,return people ;return the  first names of #1 ;return #2 in alphabetical order,"[""SELECT['people']"", ""PROJECT['the first names of #REF', '#1']"", ""FILTER['#2', 'in alphabetical order']""]","['select', 'project', 'filter']",train
SPIDER_train_980,What are the public schools and what are their locations?,"return schools ;return #1 that  are  public ;return locations of  #2 ;return #2 ,  #3","[""SELECT['schools']"", ""FILTER['#1', 'that are public']"", ""PROJECT['locations of #REF', '#2']"", ""UNION['#2', '#3']""]","['select', 'filter', 'project', 'union']",train
SPIDER_train_981,When was the school with the largest enrollment founded?,return schools ;return enrollments of #1 ;return #1 where #2 is  largest ;return when  was #3 founded,"[""SELECT['schools']"", ""PROJECT['enrollments of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['when was #REF founded', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_982,Return the founded year for the school with the largest enrollment.,return schools ;return enrollments of  #1 ;return #1 where  #2 is highest ;return founded year of  #3,"[""SELECT['schools']"", ""PROJECT['enrollments of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['founded year of #REF', '#3']""]","['select', 'project', 'superlative', 'project']",train
SPIDER_train_983,Find the founded year of the newest non public school.,return non public schools ;return founded years of  #1 ;return #2 where  founded year is  newest,"[""SELECT['non public schools']"", ""PROJECT['founded years of #REF', '#1']"", ""FILTER['#2', 'where founded year is newest']""]","['select', 'project', 'filter']",train
SPIDER_train_984,What is the founded year of the non public school that was founded most recently?,return schools ;return #1 that  are non public ;return founded years of #2 ;return #2 where #3 is  highest,"[""SELECT['schools']"", ""FILTER['#1', 'that are non public']"", ""PROJECT['founded years of #REF', '#2']"", ""SUPERLATIVE['max', '#2', '#3']""]","['select', 'filter', 'project', 'superlative']",train
SPIDER_train_985,How many schools are in the basketball match?,return the  basketball match ;return the  schools in #1 ;return the  number of  #2,"[""SELECT['the basketball match']"", ""PROJECT['the schools in #REF', '#1']"", ""AGGREGATE['count', '#2']""]","['select', 'project', 'aggregate']",train
SPIDER_train_986,Count the number of schools that have had basketball matches.,return schools ;return #1 that  have  had basketball matches ;return number of  #2,"[""SELECT['schools']"", ""FILTER['#1', 'that have had basketball matches']"", ""AGGREGATE['count', '#2']""]","['select', 'filter', 'aggregate']",train
SPIDER_train_987,What is the highest acc percent score in the competition?,return competition ;return acc percent scores in #1 ;return #1 where #2 is  highest,"[""SELECT['competition']"", ""PROJECT['acc percent scores in #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']""]","['select', 'project', 'superlative']",train
SPIDER_train_988,Return the highest acc percent across all basketball matches.,return basketball matches ;return acc percent of #1 ;return #2 that  is  highest,"[""SELECT['basketball matches']"", ""PROJECT['acc percent of #REF', '#1']"", ""FILTER['#2', 'that is highest']""]","['select', 'project', 'filter']",train
SPIDER_train_989,What is the primary conference of the school that has the lowest acc percent score in the competition?,return schools ;return #1 in the   competition ;return the   acc percent scores of #2 ;return #2 where #3 is  the   lowest ;return the   primary conference of #4,"[""SELECT['schools']"", ""FILTER['#1', 'in the competition']"", ""PROJECT['the acc percent scores of #REF', '#2']"", ""COMPARATIVE['#2', '#3', 'is the lowest']"", ""PROJECT['the primary conference of #REF', '#4']""]","['select', 'filter', 'project', 'comparative', 'project']",train
SPIDER_train_99,What are the id of students who registered courses or attended courses?,return students ;return registered courses of #1 ;return number of  #2 for each #1 ;return #1 where #3 is higher than zero ;return attended courses of #1 ;return number of  #5 for each #1 ;return #1 where #6 is higher than zero ;return #4 or  #7 ;return ids of #8,"[""SELECT['students']"", ""PROJECT['registered courses of #REF', '#1']"", ""GROUP['count', '#2', '#1']"", ""COMPARATIVE['#1', '#3', 'is higher than zero']"", ""PROJECT['attended courses of #REF', '#1']"", ""GROUP['count', '#5', '#1']"", ""COMPARATIVE['#1', '#6', 'is higher than zero']"", ""UNION['#4', '#7']"", ""PROJECT['ids of #REF', '#8']""]","['select', 'project', 'group', 'comparative', 'project', 'group', 'comparative', 'union', 'project']",train
SPIDER_train_990,Return the primary conference of the school with the lowest acc percentage score.,return acc percentage score ;return lowest #1 ;return school that  has #2 ;return primary conference of  #3,"[""SELECT['acc percentage score']"", ""AGGREGATE['min', '#1']"", ""PROJECT['school that has #REF', '#2']"", ""PROJECT['primary conference of #REF', '#3']""]","['select', 'aggregate', 'project', 'project']",train
SPIDER_train_991,What is the team name and acc regular season score of the school that was founded for the longest time?,"return schools ;return time founded of #1 ;return #1 where #2 is highest ;return team name of #3 ;return acc regular season score of #3 ;return #4 ,  #5","[""SELECT['schools']"", ""PROJECT['time founded of #REF', '#1']"", ""SUPERLATIVE['max', '#1', '#2']"", ""PROJECT['team name of #REF', '#3']"", ""PROJECT['acc regular season score of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'project', 'superlative', 'project', 'project', 'union']",train
SPIDER_train_992,Return the name of the team and the acc during the regular season for the school that was founded the earliest.,"return schools ;return #1 that  was founded earliest ;return team of  #2 ;return name of  #3 ;return acc of  #3 ;return #5 during the  regular season ;return #4 ,  #6","[""SELECT['schools']"", ""FILTER['#1', 'that was founded earliest']"", ""PROJECT['team of #REF', '#2']"", ""PROJECT['name of #REF', '#3']"", ""PROJECT['acc of #REF', '#3']"", ""FILTER['#5', 'during the regular season']"", ""UNION['#4', '#6']""]","['select', 'filter', 'project', 'project', 'project', 'filter', 'union']",train
SPIDER_train_993,Find the location and all games score of the school that has Clemson as its team name.,"return schools ;return team names of  #1 ;return #1 where  #2 is  Clemson ;return games of  #3 ;return locations of  #4 ;return scores of  #4 ;return #5 ,   #6","[""SELECT['schools']"", ""PROJECT['team names of #REF', '#1']"", ""COMPARATIVE['#1', '#2', 'is Clemson']"", ""PROJECT['games of #REF', '#3']"", ""PROJECT['locations of #REF', '#4']"", ""PROJECT['scores of #REF', '#4']"", ""UNION['#5', '#6']""]","['select', 'project', 'comparative', 'project', 'project', 'project', 'union']",train
SPIDER_train_994,What are the all games score and location of the school called Clemson?,"return schools ;return #1 called Clemson ;return games of  #2 ;return score of  #3 ;return locations of  #3 ;return #4 ,  #5","[""SELECT['schools']"", ""FILTER['#1', 'called Clemson']"", ""PROJECT['games of #REF', '#2']"", ""PROJECT['score of #REF', '#3']"", ""PROJECT['locations of #REF', '#3']"", ""UNION['#4', '#5']""]","['select', 'filter', 'project', 'project', 'project', 'union']",train
SPIDER_train_995,What are the average enrollment size of the universities that are founded before 1850?,return universities ;return #1 founded before 1850 ;return enrollment size of  #2 ;return average of  #3,"[""SELECT['universities']"", ""FILTER['#1', 'founded before 1850']"", ""PROJECT['enrollment size of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_996,Return the average enrollment of universities founded before 1850.,return universities ;return #1 founded before 1850 ;return enrollments of  #2 ;return average of  #3,"[""SELECT['universities']"", ""FILTER['#1', 'founded before 1850']"", ""PROJECT['enrollments of #REF', '#2']"", ""AGGREGATE['avg', '#3']""]","['select', 'filter', 'project', 'aggregate']",train
SPIDER_train_997,Show the enrollment and primary_conference of the oldest college.,"return colleges ;return the  oldest #1 ;return enrollment of #2 ;return primary_conference of #2 ;return #3 ,  #4","[""SELECT['colleges']"", ""PROJECT['the oldest #REF', '#1']"", ""PROJECT['enrollment of #REF', '#2']"", ""PROJECT['primary_conference of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'project', 'project', 'union']",train
SPIDER_train_998,What are the enrollment and primary conference for the university which was founded the earliest?,"return universities ;return #1 founded earliest ;return enrollment of  #2 ;return primary conference of  #2 ;return #3 ,  #4","[""SELECT['universities']"", ""FILTER['#1', 'founded earliest']"", ""PROJECT['enrollment of #REF', '#2']"", ""PROJECT['primary conference of #REF', '#2']"", ""UNION['#3', '#4']""]","['select', 'filter', 'project', 'project', 'union']",train
SPIDER_train_999,What is the total and minimum enrollment of all schools?,"return schools ;return enrollments of #1 ;return sum of #2 ;return minimum of #2 ;return #3 ,  #4","[""SELECT['schools']"", ""PROJECT['enrollments of #REF', '#1']"", ""AGGREGATE['sum', '#2']"", ""AGGREGATE['min', '#2']"", ""UNION['#3', '#4']""]","['select', 'project', 'aggregate', 'aggregate', 'union']",train
